// This file was generated on Sun Sep 11, 2022 22:24 (UTC+01) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: ExistParser.ebnf -backtrack -ll 3 -javascript -tree -a xqlint

                                                            // line 2 "ExistParser.ebnf"
                                                            var ExistParser = exports.ExistParser = function ExistParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "ExistParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? ExistParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = ExistParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [ExistParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(26);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  this.parse_TransformWithExpr = function()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_UnaryExpr();
    lookahead1W(74);                // END | S^WS | '(:' | 'transform'
    if (l1 == 205)                  // 'transform'
    {
      consume(205);                 // 'transform'
      lookahead1W(71);              // S^WS | '(:' | 'with'
      consume(222);                 // 'with'
      lookahead1W(72);              // S^WS | '(:' | '{'
      consume(225);                 // '{'
      lookahead1W(223);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 229)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(229);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  };

  this.parse_MapExpr = function()
  {
    eventHandler.startNonterminal("MapExpr", e0);
    lookahead1W(53);                // S^WS | '(:' | 'map'
    consume(154);                   // 'map'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_ExprSingle();
      lookahead1W(28);              // S^WS | '(:' | ':'
      consume(49);                  // ':'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
        lookahead1W(28);            // S^WS | '(:' | ':'
        consume(49);                // ':'
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("MapExpr", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 223:                       // 'xquery'
      lookahead2W(164);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 30431                 // 'xquery' 'encoding'
     || lk == 56031)                // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 158:                       // 'module'
      lookahead2W(163);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 40862:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(223);                   // 'xquery'
    lookahead1W(104);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 118:                       // 'encoding'
      consume(118);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(5);                   // StringLiteral
      break;
    default:
      consume(218);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(5);                   // StringLiteral
      lookahead1W(95);              // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 118)                // 'encoding'
      {
        consume(118);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(5);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(122);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(158);                   // 'module'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(159);                   // 'namespace'
    lookahead1W(166);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(174);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'context' | 'copy-namespaces' | 'decimal-format' | 'default' | 'div' | 'eq' |
                                    // 'except' | 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                    // 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' |
                                    // 'revalidation' | 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 136:                     // 'import'
        lookahead2W(165);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' | 'schema' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 22120               // 'declare' 'base-uri'
       && lk != 22632               // 'declare' 'boundary-space'
       && lk != 24936               // 'declare' 'construction'
       && lk != 25704               // 'declare' 'copy-namespaces'
       && lk != 26216               // 'declare' 'decimal-format'
       && lk != 26984               // 'declare' 'default'
       && lk != 40584               // 'import' 'module'
       && lk != 40808               // 'declare' 'namespace'
       && lk != 44648               // 'declare' 'ordering'
       && lk != 47976               // 'declare' 'revalidation'
       && lk != 48520)              // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(154);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering' |
                                    // 'revalidation'
        switch (lk)
        {
        case 26984:                 // 'declare' 'default'
          lookahead3W(144);         // S^WS | '(:' | 'collation' | 'decimal-format' | 'element' | 'function' | 'order'
          break;
        }
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 7498088:                 // 'declare' 'default' 'element'
      case 8415592:                 // 'declare' 'default' 'function'
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 40808:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 136:                     // 'import'
        whitespace();
        parse_Import();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(167);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'context' | 'div' | 'eq' | 'except' | 'function' | 'ge' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' |
                                    // 'option' | 'or' | 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 8552                // 'declare' '%'
       && lk != 25192               // 'declare' 'context'
       && lk != 32872               // 'declare' 'function'
       && lk != 43624               // 'declare' 'option'
       && lk != 54888               // 'declare' 'updating'
       && lk != 55656)              // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(149);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 25192:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 43624:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 104:                       // 'declare'
      lookahead2W(150);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      switch (lk)
      {
      case 26984:                   // 'declare' 'default'
        lookahead3W(131);           // S^WS | '(:' | 'collation' | 'decimal-format' | 'order'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 22632:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case 6252904:                   // 'declare' 'default' 'collation'
      parse_DefaultCollationDecl();
      break;
    case 22120:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 24936:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 44648:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case 11299176:                  // 'declare' 'default' 'order'
      parse_EmptyOrderDecl();
      break;
    case 47976:                     // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 25704:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'boundary-space'
    consume(88);                    // 'boundary-space'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 181:                       // 'preserve'
      consume(181);                 // 'preserve'
      break;
    default:
      consume(199);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(105);                   // 'default'
    lookahead1W(39);                // S^WS | '(:' | 'collation'
    consume(95);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(34);                // S^WS | '(:' | 'base-uri'
    consume(86);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(40);                // S^WS | '(:' | 'construction'
    consume(97);                    // 'construction'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 199:                       // 'strip'
      consume(199);                 // 'strip'
      break;
    default:
      consume(181);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(59);                // S^WS | '(:' | 'ordering'
    consume(174);                   // 'ordering'
    lookahead1W(115);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 173:                       // 'ordered'
      consume(173);                 // 'ordered'
      break;
    default:
      consume(212);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(105);                   // 'default'
    lookahead1W(58);                // S^WS | '(:' | 'order'
    consume(172);                   // 'order'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    consume(116);                   // 'empty'
    lookahead1W(108);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 130:                       // 'greatest'
      consume(130);                 // 'greatest'
      break;
    default:
      consume(151);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(42);                // S^WS | '(:' | 'copy-namespaces'
    consume(100);                   // 'copy-namespaces'
    lookahead1W(112);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(109);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 181:                       // 'preserve'
      consume(181);                 // 'preserve'
      break;
    default:
      consume(164);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 139:                       // 'inherit'
      consume(139);                 // 'inherit'
      break;
    default:
      consume(163);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(102);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 102:                       // 'decimal-format'
      consume(102);                 // 'decimal-format'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(105);                 // 'default'
      lookahead1W(43);              // S^WS | '(:' | 'decimal-format'
      consume(102);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(158);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(61);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(5);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 103:                       // 'decimal-separator'
      consume(103);                 // 'decimal-separator'
      break;
    case 132:                       // 'grouping-separator'
      consume(132);                 // 'grouping-separator'
      break;
    case 138:                       // 'infinity'
      consume(138);                 // 'infinity'
      break;
    case 155:                       // 'minus-sign'
      consume(155);                 // 'minus-sign'
      break;
    case 69:                        // 'NaN'
      consume(69);                  // 'NaN'
      break;
    case 178:                       // 'percent'
      consume(178);                 // 'percent'
      break;
    case 177:                       // 'per-mille'
      consume(177);                 // 'per-mille'
      break;
    case 224:                       // 'zero-digit'
      consume(224);                 // 'zero-digit'
      break;
    case 110:                       // 'digit'
      consume(110);                 // 'digit'
      break;
    default:
      consume(176);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 136:                       // 'import'
      lookahead2W(110);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 48520:                     // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(136);                   // 'import'
    lookahead1W(64);                // S^WS | '(:' | 'schema'
    consume(189);                   // 'schema'
    lookahead1W(121);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 5)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consume(84);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(86);            // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 159:                       // 'namespace'
      consume(159);                 // 'namespace'
      lookahead1W(166);             // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(61);                  // '='
      break;
    default:
      consume(105);                 // 'default'
      lookahead1W(46);              // S^WS | '(:' | 'element'
      consume(114);                 // 'element'
      lookahead1W(55);              // S^WS | '(:' | 'namespace'
      consume(159);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(136);                   // 'import'
    lookahead1W(54);                // S^WS | '(:' | 'module'
    consume(158);                   // 'module'
    lookahead1W(75);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 159)                  // 'namespace'
    {
      consume(159);                 // 'namespace'
      lookahead1W(166);             // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(61);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consume(84);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(86);            // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(159);                   // 'namespace'
    lookahead1W(166);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(105);                   // 'default'
    lookahead1W(103);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 114:                       // 'element'
      consume(114);                 // 'element'
      break;
    default:
      consume(128);                 // 'function'
    }
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(159);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(104);                   // 'declare'
    for (;;)
    {
      lookahead1W(138);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 214)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 214:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 217:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(214);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(33);                    // '%'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consume(35);                  // '('
      lookahead1W(136);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(136);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(38);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(33);                   // '%'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consumeT(35);                 // '('
      lookahead1W(136);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(136);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(38);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(217);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(128);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(123);                 // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'context'
    consume(98);                    // 'context'
    lookahead1W(52);                // S^WS | '(:' | 'item'
    consume(146);                   // 'item'
    lookahead1W(128);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(123);                 // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(128);                   // 'function'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(79);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(130);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(107);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(123);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    consume(82);                    // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(126);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(126);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'option'
    consume(170);                   // 'option'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(5);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(147);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(147);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 144:                       // 'invoke'
      lookahead2W(189);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where' | 'with' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 207:                       // 'try'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 213:                       // 'update'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'delete' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'rename' |
                                    // 'replace' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 135:                       // 'if'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(184);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 99:                        // 'copy'
    case 121:                       // 'every'
    case 152:                       // 'let'
    case 195:                       // 'some'
      lookahead2W(188);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
    case 8344:                      // 'let' '$'
    case 49791:                     // 'for' 'sliding'
    case 53375:                     // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 8313:                      // 'every' '$'
    case 8387:                      // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 9161:                      // 'switch' '('
      parse_SwitchExpr();
      break;
    case 9170:                      // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case 9095:                      // 'if' '('
      parse_IfExpr();
      break;
    case 57807:                     // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 36053:                     // 'update' 'insert'
      parse_InsertExpr();
      break;
    case 27349:                     // 'update' 'delete'
      parse_DeleteExpr();
      break;
    case 47317:                     // 'update' 'rename'
      parse_RenameExpr();
      break;
    case 47573:                     // 'update' 'replace'
      parse_ReplaceExpr();
      break;
    case 55509:                     // 'update' 'value'
      parse_UpdateValueExpr();
      break;
    case 54928:                     // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 8291:                      // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 144:                       // 'invoke'
      lookahead2W(189);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'updating' | 'where' | 'with' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 207:                       // 'try'
      lookahead2W(190);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 213:                       // 'update'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'delete' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'rename' |
                                    // 'replace' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'value' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 135:                       // 'if'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(184);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 99:                        // 'copy'
    case 121:                       // 'every'
    case 152:                       // 'let'
    case 195:                       // 'some'
      lookahead2W(188);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
    case 8344:                      // 'let' '$'
    case 49791:                     // 'for' 'sliding'
    case 53375:                     // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 8313:                      // 'every' '$'
    case 8387:                      // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 9161:                      // 'switch' '('
      try_SwitchExpr();
      break;
    case 9170:                      // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case 9095:                      // 'if' '('
      try_IfExpr();
      break;
    case 57807:                     // 'try' '{'
      try_TryCatchExpr();
      break;
    case 36053:                     // 'update' 'insert'
      try_InsertExpr();
      break;
    case 27349:                     // 'update' 'delete'
      try_DeleteExpr();
      break;
    case 47317:                     // 'update' 'rename'
      try_RenameExpr();
      break;
    case 47573:                     // 'update' 'replace'
      try_ReplaceExpr();
      break;
    case 55509:                     // 'update' 'value'
      try_UpdateValueExpr();
      break;
    case 54928:                     // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 8291:                      // 'copy' '$'
      try_CopyModifyExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(151);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 186)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(151);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 186)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(125);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
      parse_ForClause();
      break;
    case 152:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 127:                       // 'for'
      lookahead2W(125);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8319:                      // 'for' '$'
      try_ForClause();
      break;
    case 152:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 127:                       // 'for'
    case 152:                       // 'let'
      parse_InitialClause();
      break;
    case 220:                       // 'where'
      parse_WhereClause();
      break;
    case 131:                       // 'group'
      parse_GroupByClause();
      break;
    case 101:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 127:                       // 'for'
    case 152:                       // 'let'
      try_InitialClause();
      break;
    case 220:                       // 'where'
      try_WhereClause();
      break;
    case 131:                       // 'group'
      try_GroupByClause();
      break;
    case 101:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(127);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(127);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(139);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(129);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(98);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 84)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(139);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(129);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(98);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 84)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    consume(116);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    consumeT(116);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(84);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(84);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(152);                   // 'let'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(152);                  // 'let'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(92);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(92);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(127);                   // 'for'
    lookahead1W(118);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 208:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(127);                  // 'for'
    lookahead1W(118);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 208:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(208);                   // 'tumbling'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consume(221);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(156);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 119                   // 'end'
     || l1 == 169)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(208);                  // 'tumbling'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consumeT(221);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(156);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 119                   // 'end'
     || l1 == 169)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(194);                   // 'sliding'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consume(221);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(105);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(194);                  // 'sliding'
    lookahead1W(70);                // S^WS | '(:' | 'window'
    consumeT(221);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(65);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(105);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(197);                   // 'start'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consume(219);                   // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(197);                  // 'start'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consumeT(219);                  // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 169)                  // 'only'
    {
      consume(169);                 // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    consume(119);                   // 'end'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consume(219);                   // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 169)                  // 'only'
    {
      consumeT(169);                // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    consumeT(119);                  // 'end'
    lookahead1W(142);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(69);                // S^WS | '(:' | 'when'
    consumeT(219);                  // 'when'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 84)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(135);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 182)                  // 'previous'
    {
      consume(182);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(111);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 162)                  // 'next'
    {
      consume(162);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 84)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(135);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 182)                  // 'previous'
    {
      consumeT(182);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(111);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 162)                  // 'next'
    {
      consumeT(162);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(101);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(101);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(220);                   // 'where'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(220);                  // 'where'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(131);                   // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consume(89);                    // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(131);                  // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consumeT(89);                   // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 82)                   // 'as'
    {
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consume(95);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 82)                   // 'as'
    {
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(52);                 // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consumeT(95);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 172:                       // 'order'
      consume(172);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(89);                  // 'by'
      break;
    default:
      consume(196);                 // 'stable'
      lookahead1W(58);              // S^WS | '(:' | 'order'
      consume(172);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(89);                  // 'by'
    }
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 172:                       // 'order'
      consumeT(172);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(89);                 // 'by'
      break;
    default:
      consumeT(196);                // 'stable'
      lookahead1W(58);              // S^WS | '(:' | 'order'
      consumeT(172);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(89);                 // 'by'
    }
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(153);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(161);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(161);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 83                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 83:                      // 'ascending'
        consume(83);                // 'ascending'
        break;
      default:
        consume(109);               // 'descending'
      }
    }
    lookahead1W(157);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 116)                  // 'empty'
    {
      consume(116);                 // 'empty'
      lookahead1W(108);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 130:                     // 'greatest'
        consume(130);               // 'greatest'
        break;
      default:
        consume(151);               // 'least'
      }
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consume(95);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 83                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 83:                      // 'ascending'
        consumeT(83);               // 'ascending'
        break;
      default:
        consumeT(109);              // 'descending'
      }
    }
    lookahead1W(157);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 116)                  // 'empty'
    {
      consumeT(116);                // 'empty'
      lookahead1W(108);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 130:                     // 'greatest'
        consumeT(130);              // 'greatest'
        break;
      default:
        consumeT(151);              // 'least'
      }
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consumeT(95);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 195:                       // 'some'
      consume(195);                 // 'some'
      break;
    default:
      consume(121);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consume(137);                   // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(96);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(50);              // S^WS | '(:' | 'in'
      consume(137);                 // 'in'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(188);                   // 'satisfies'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 195:                       // 'some'
      consumeT(195);                // 'some'
      break;
    default:
      consumeT(121);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(50);                // S^WS | '(:' | 'in'
    consumeT(137);                  // 'in'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(96);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(50);              // S^WS | '(:' | 'in'
      consumeT(137);                // 'in'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(188);                  // 'satisfies'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(201);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consume(105);                   // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(201);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consumeT(105);                  // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(90);                  // 'case'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(101);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(90);                 // 'case'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(101);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(210);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consume(105);                   // 'default'
    lookahead1W(80);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(210);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 90)                 // 'case'
      {
        break;
      }
    }
    consumeT(105);                  // 'default'
    lookahead1W(80);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(90);                    // 'case'
    lookahead1W(212);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
    }
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(90);                   // 'case'
    lookahead1W(212);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
    }
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceTypeUnion();
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(117);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consume(227);                 // '|'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(117);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consumeT(227);                // '|'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(135);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(66);                // S^WS | '(:' | 'then'
    consume(203);                   // 'then'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    consume(115);                   // 'else'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(135);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(66);                // S^WS | '(:' | 'then'
    consumeT(203);                  // 'then'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    consumeT(115);                  // 'else'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(162);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'as' | 'ascending' | 'case' |
                                    // 'catch' | 'collation' | 'count' | 'default' | 'descending' | 'else' | 'empty' |
                                    // 'end' | 'following' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' |
                                    // 'with' | '}' | '}`'
      if (l1 != 93)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(162);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'as' | 'ascending' | 'case' |
                                    // 'catch' | 'collation' | 'count' | 'default' | 'descending' | 'else' | 'empty' |
                                    // 'end' | 'following' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' |
                                    // 'with' | '}' | '}`'
      if (l1 != 93)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(207);                   // 'try'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TryTargetExpr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(207);                  // 'try'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TryTargetExpr();
    consumeT(229);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(93);                    // 'catch'
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(93);                   // 'catch'
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_CatchErrorList();
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(120);             // S^WS | '(:' | '{' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consume(227);                 // '|'
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(120);             // S^WS | '(:' | '{' | '|'
      if (l1 != 227)                // '|'
      {
        break;
      }
      consumeT(227);                // '|'
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 171)                // 'or'
      {
        break;
      }
      consume(171);                 // 'or'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 171)                // 'or'
      {
        break;
      }
      consumeT(171);                // 'or'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 28                    // '!='
     || l1 == 54                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 120                   // 'eq'
     || l1 == 129                   // 'ge'
     || l1 == 133                   // 'gt'
     || l1 == 145                   // 'is'
     || l1 == 150                   // 'le'
     || l1 == 153                   // 'lt'
     || l1 == 161)                  // 'ne'
    {
      switch (l1)
      {
      case 120:                     // 'eq'
      case 129:                     // 'ge'
      case 133:                     // 'gt'
      case 150:                     // 'le'
      case 153:                     // 'lt'
      case 161:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 145:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StringConcatExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_StringConcatExpr();
    if (l1 == 28                    // '!='
     || l1 == 54                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 120                   // 'eq'
     || l1 == 129                   // 'ge'
     || l1 == 133                   // 'gt'
     || l1 == 145                   // 'is'
     || l1 == 150                   // 'le'
     || l1 == 153                   // 'lt'
     || l1 == 161)                  // 'ne'
    {
      switch (l1)
      {
      case 120:                     // 'eq'
      case 129:                     // 'ge'
      case 133:                     // 'gt'
      case 150:                     // 'le'
      case 153:                     // 'lt'
      case 161:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 145:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StringConcatExpr();
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 228)                // '||'
      {
        break;
      }
      consume(228);                 // '||'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 228)                // '||'
      {
        break;
      }
      consumeT(228);                // '||'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 204)                  // 'to'
    {
      consume(204);                 // 'to'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 204)                  // 'to'
    {
      consumeT(204);                // 'to'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 111                 // 'div'
       && l1 != 134                 // 'idiv'
       && l1 != 156)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consume(39);                // '*'
        break;
      case 111:                     // 'div'
        consume(111);               // 'div'
        break;
      case 134:                     // 'idiv'
        consume(134);               // 'idiv'
        break;
      default:
        consume(156);               // 'mod'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 111                 // 'div'
       && l1 != 134                 // 'idiv'
       && l1 != 156)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consumeT(39);               // '*'
        break;
      case 111:                     // 'div'
        consumeT(111);              // 'div'
        break;
      case 134:                     // 'idiv'
        consumeT(134);              // 'idiv'
        break;
      default:
        consumeT(156);              // 'mod'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 211                 // 'union'
       && l1 != 227)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 211:                     // 'union'
        consume(211);               // 'union'
        break;
      default:
        consume(227);               // '|'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 211                 // 'union'
       && l1 != 227)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 211:                     // 'union'
        consumeT(211);              // 'union'
        break;
      default:
        consumeT(227);              // '|'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(175);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 122                 // 'except'
       && l1 != 142)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 142:                     // 'intersect'
        consume(142);               // 'intersect'
        break;
      default:
        consume(122);               // 'except'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(175);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 122                 // 'except'
       && l1 != 142)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 142:                     // 'intersect'
        consumeT(142);              // 'intersect'
        break;
      default:
        consumeT(122);              // 'except'
      }
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(176);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 141)                  // 'instance'
    {
      consume(141);                 // 'instance'
      lookahead1W(56);              // S^WS | '(:' | 'of'
      consume(168);                 // 'of'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(176);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    if (l1 == 141)                  // 'instance'
    {
      consumeT(141);                // 'instance'
      lookahead1W(56);              // S^WS | '(:' | 'of'
      consumeT(168);                // 'of'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(177);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 206)                  // 'treat'
    {
      consume(206);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(177);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 206)                  // 'treat'
    {
      consumeT(206);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(178);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 92)                   // 'castable'
    {
      consume(92);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(178);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '}' | '}`'
    if (l1 == 92)                   // 'castable'
    {
      consumeT(92);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_ArrowExpr();
    if (l1 == 91)                   // 'cast'
    {
      consume(91);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_ArrowExpr();
    if (l1 == 91)                   // 'cast'
    {
      consumeT(91);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(180);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consume(62);                  // '=>'
      lookahead1W(209);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(180);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consumeT(62);                 // '=>'
      lookahead1W(209);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 215:                       // 'validate'
      lookahead2W(198);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'strict' | 'to' | 'transform' | 'treat' |
                                    // 'type' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 38359:                     // 'validate' 'lax'
    case 50903:                     // 'validate' 'strict'
    case 53719:                     // 'validate' 'type'
    case 57815:                     // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 215:                       // 'validate'
      lookahead2W(198);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'strict' | 'to' | 'transform' | 'treat' |
                                    // 'type' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 38359:                     // 'validate' 'lax'
    case 50903:                     // 'validate' 'strict'
    case 53719:                     // 'validate' 'type'
    case 57815:                     // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      consume(61);                  // '='
      break;
    case 28:                        // '!='
      consume(28);                  // '!='
      break;
    case 54:                        // '<'
      consume(54);                  // '<'
      break;
    case 59:                        // '<='
      consume(59);                  // '<='
      break;
    case 63:                        // '>'
      consume(63);                  // '>'
      break;
    default:
      consume(64);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      consumeT(61);                 // '='
      break;
    case 28:                        // '!='
      consumeT(28);                 // '!='
      break;
    case 54:                        // '<'
      consumeT(54);                 // '<'
      break;
    case 59:                        // '<='
      consumeT(59);                 // '<='
      break;
    case 63:                        // '>'
      consumeT(63);                 // '>'
      break;
    default:
      consumeT(64);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 120:                       // 'eq'
      consume(120);                 // 'eq'
      break;
    case 161:                       // 'ne'
      consume(161);                 // 'ne'
      break;
    case 153:                       // 'lt'
      consume(153);                 // 'lt'
      break;
    case 150:                       // 'le'
      consume(150);                 // 'le'
      break;
    case 133:                       // 'gt'
      consume(133);                 // 'gt'
      break;
    default:
      consume(129);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 120:                       // 'eq'
      consumeT(120);                // 'eq'
      break;
    case 161:                       // 'ne'
      consumeT(161);                // 'ne'
      break;
    case 153:                       // 'lt'
      consumeT(153);                // 'lt'
      break;
    case 150:                       // 'le'
      consumeT(150);                // 'le'
      break;
    case 133:                       // 'gt'
      consumeT(133);                // 'gt'
      break;
    default:
      consumeT(129);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 145:                       // 'is'
      consume(145);                 // 'is'
      break;
    case 58:                        // '<<'
      consume(58);                  // '<<'
      break;
    default:
      consume(65);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 145:                       // 'is'
      consumeT(145);                // 'is'
      break;
    case 58:                        // '<<'
      consumeT(58);                 // '<<'
      break;
    default:
      consumeT(65);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(215);                   // 'validate'
    lookahead1W(141);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 225)                  // '{'
    {
      switch (l1)
      {
      case 209:                     // 'type'
        consume(209);               // 'type'
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(215);                  // 'validate'
    lookahead1W(141);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 225)                  // '{'
    {
      switch (l1)
      {
      case 209:                     // 'type'
        consumeT(209);              // 'type'
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 149:                       // 'lax'
      consume(149);                 // 'lax'
      break;
    default:
      consume(198);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 149:                       // 'lax'
      consumeT(149);                // 'lax'
      break;
    default:
      consumeT(198);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(83);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(83);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_Expr();
    }
    consumeT(229);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(36);                    // '(#'
    lookahead1(202);                // URIQualifiedName | QName^Token | S | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 18)                   // S
    {
      consume(18);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 18)                   // S
    {
      consume(18);                  // S
      lookahead1(2);                // PragmaContents
      consume(21);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(31);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(36);                   // '(#'
    lookahead1(202);                // URIQualifiedName | QName^Token | S | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 18)                   // S
    {
      consumeT(18);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 18)                   // S
    {
      consumeT(18);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(21);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(31);                   // '#)'
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consume(27);                  // '!'
      lookahead1W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consumeT(27);                 // '!'
      lookahead1W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PathExpr();
    }
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(228);             // END | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 1:                       // END
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 227:                     // '|'
      case 228:                     // '||'
      case 229:                     // '}'
      case 230:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(228);             // END | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 1:                       // END
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 227:                     // '|'
      case 228:                     // '||'
      case 229:                     // '}'
      case 230:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      if (l1 != 46                  // '/'
       && l1 != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      default:
        consume(47);                // '//'
      }
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      if (l1 != 46                  // '/'
       && l1 != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      default:
        consumeT(47);               // '//'
      }
      lookahead1W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(227);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23125:                   // 'attribute' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24405:                   // 'attribute' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26965:                   // 'attribute' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29781:                   // 'attribute' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32597:                   // 'attribute' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36181:                   // 'attribute' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43349:                   // 'attribute' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50261:                   // 'attribute' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52565:                   // 'attribute' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21333:                   // 'attribute' 'ascending'
      case 27989:                   // 'attribute' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25941:                   // 'attribute' 'count'
      case 38997:                   // 'attribute' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30549:                   // 'attribute' 'end'
      case 50517:                   // 'attribute' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33621:                   // 'attribute' 'group'
      case 44117:                   // 'attribute' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23381:                   // 'attribute' 'cast'
      case 23637:                   // 'attribute' 'castable'
      case 52821:                   // 'attribute' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20565:                   // 'attribute' 'and'
      case 21077:                   // 'attribute' 'as'
      case 28501:                   // 'attribute' 'div'
      case 29525:                   // 'attribute' 'else'
      case 30805:                   // 'attribute' 'eq'
      case 31317:                   // 'attribute' 'except'
      case 32085:                   // 'attribute' 'following'
      case 33109:                   // 'attribute' 'ge'
      case 34133:                   // 'attribute' 'gt'
      case 34389:                   // 'attribute' 'idiv'
      case 36437:                   // 'attribute' 'intersect'
      case 36693:                   // 'attribute' 'into'
      case 37205:                   // 'attribute' 'is'
      case 38485:                   // 'attribute' 'le'
      case 39253:                   // 'attribute' 'lt'
      case 40021:                   // 'attribute' 'mod'
      case 40277:                   // 'attribute' 'modify'
      case 41301:                   // 'attribute' 'ne'
      case 43861:                   // 'attribute' 'or'
      case 45909:                   // 'attribute' 'preceding'
      case 47701:                   // 'attribute' 'return'
      case 48213:                   // 'attribute' 'satisfies'
      case 52309:                   // 'attribute' 'to'
      case 54101:                   // 'attribute' 'union'
      case 56405:                   // 'attribute' 'where'
      case 56917:                   // 'attribute' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 114:                       // 'element'
      lookahead2W(226);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23154:                   // 'element' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24434:                   // 'element' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26994:                   // 'element' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29810:                   // 'element' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32626:                   // 'element' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36210:                   // 'element' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43378:                   // 'element' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50290:                   // 'element' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52594:                   // 'element' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21362:                   // 'element' 'ascending'
      case 28018:                   // 'element' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25970:                   // 'element' 'count'
      case 39026:                   // 'element' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30578:                   // 'element' 'end'
      case 50546:                   // 'element' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33650:                   // 'element' 'group'
      case 44146:                   // 'element' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23410:                   // 'element' 'cast'
      case 23666:                   // 'element' 'castable'
      case 52850:                   // 'element' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20594:                   // 'element' 'and'
      case 21106:                   // 'element' 'as'
      case 28530:                   // 'element' 'div'
      case 29554:                   // 'element' 'else'
      case 30834:                   // 'element' 'eq'
      case 31346:                   // 'element' 'except'
      case 32114:                   // 'element' 'following'
      case 33138:                   // 'element' 'ge'
      case 34162:                   // 'element' 'gt'
      case 34418:                   // 'element' 'idiv'
      case 36466:                   // 'element' 'intersect'
      case 36722:                   // 'element' 'into'
      case 37234:                   // 'element' 'is'
      case 38514:                   // 'element' 'le'
      case 39282:                   // 'element' 'lt'
      case 40050:                   // 'element' 'mod'
      case 40306:                   // 'element' 'modify'
      case 41330:                   // 'element' 'ne'
      case 43890:                   // 'element' 'or'
      case 45938:                   // 'element' 'preceding'
      case 47730:                   // 'element' 'return'
      case 48242:                   // 'element' 'satisfies'
      case 52338:                   // 'element' 'to'
      case 54130:                   // 'element' 'union'
      case 56434:                   // 'element' 'where'
      case 56946:                   // 'element' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 154:                       // 'map'
      lookahead2W(192);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 159:                       // 'namespace'
    case 183:                       // 'processing-instruction'
      lookahead2W(199);             // END | NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23199:                   // 'namespace' 'case'
      case 23223:                   // 'processing-instruction' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24479:                   // 'namespace' 'collation'
      case 24503:                   // 'processing-instruction' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 27039:                   // 'namespace' 'default'
      case 27063:                   // 'processing-instruction' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29855:                   // 'namespace' 'empty'
      case 29879:                   // 'processing-instruction' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32671:                   // 'namespace' 'for'
      case 32695:                   // 'processing-instruction' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36255:                   // 'namespace' 'instance'
      case 36279:                   // 'processing-instruction' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43423:                   // 'namespace' 'only'
      case 43447:                   // 'processing-instruction' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50335:                   // 'namespace' 'stable'
      case 50359:                   // 'processing-instruction' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52639:                   // 'namespace' 'transform'
      case 52663:                   // 'processing-instruction' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21407:                   // 'namespace' 'ascending'
      case 28063:                   // 'namespace' 'descending'
      case 21431:                   // 'processing-instruction' 'ascending'
      case 28087:                   // 'processing-instruction' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 26015:                   // 'namespace' 'count'
      case 39071:                   // 'namespace' 'let'
      case 26039:                   // 'processing-instruction' 'count'
      case 39095:                   // 'processing-instruction' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30623:                   // 'namespace' 'end'
      case 50591:                   // 'namespace' 'start'
      case 30647:                   // 'processing-instruction' 'end'
      case 50615:                   // 'processing-instruction' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33695:                   // 'namespace' 'group'
      case 44191:                   // 'namespace' 'order'
      case 33719:                   // 'processing-instruction' 'group'
      case 44215:                   // 'processing-instruction' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23455:                   // 'namespace' 'cast'
      case 23711:                   // 'namespace' 'castable'
      case 52895:                   // 'namespace' 'treat'
      case 23479:                   // 'processing-instruction' 'cast'
      case 23735:                   // 'processing-instruction' 'castable'
      case 52919:                   // 'processing-instruction' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20639:                   // 'namespace' 'and'
      case 21151:                   // 'namespace' 'as'
      case 28575:                   // 'namespace' 'div'
      case 29599:                   // 'namespace' 'else'
      case 30879:                   // 'namespace' 'eq'
      case 31391:                   // 'namespace' 'except'
      case 33183:                   // 'namespace' 'ge'
      case 34207:                   // 'namespace' 'gt'
      case 34463:                   // 'namespace' 'idiv'
      case 36511:                   // 'namespace' 'intersect'
      case 36767:                   // 'namespace' 'into'
      case 37279:                   // 'namespace' 'is'
      case 38559:                   // 'namespace' 'le'
      case 39327:                   // 'namespace' 'lt'
      case 40095:                   // 'namespace' 'mod'
      case 40351:                   // 'namespace' 'modify'
      case 41375:                   // 'namespace' 'ne'
      case 43935:                   // 'namespace' 'or'
      case 47775:                   // 'namespace' 'return'
      case 48287:                   // 'namespace' 'satisfies'
      case 52383:                   // 'namespace' 'to'
      case 54175:                   // 'namespace' 'union'
      case 56479:                   // 'namespace' 'where'
      case 56991:                   // 'namespace' 'with'
      case 20663:                   // 'processing-instruction' 'and'
      case 21175:                   // 'processing-instruction' 'as'
      case 28599:                   // 'processing-instruction' 'div'
      case 29623:                   // 'processing-instruction' 'else'
      case 30903:                   // 'processing-instruction' 'eq'
      case 31415:                   // 'processing-instruction' 'except'
      case 33207:                   // 'processing-instruction' 'ge'
      case 34231:                   // 'processing-instruction' 'gt'
      case 34487:                   // 'processing-instruction' 'idiv'
      case 36535:                   // 'processing-instruction' 'intersect'
      case 36791:                   // 'processing-instruction' 'into'
      case 37303:                   // 'processing-instruction' 'is'
      case 38583:                   // 'processing-instruction' 'le'
      case 39351:                   // 'processing-instruction' 'lt'
      case 40119:                   // 'processing-instruction' 'mod'
      case 40375:                   // 'processing-instruction' 'modify'
      case 41399:                   // 'processing-instruction' 'ne'
      case 43959:                   // 'processing-instruction' 'or'
      case 47799:                   // 'processing-instruction' 'return'
      case 48311:                   // 'processing-instruction' 'satisfies'
      case 52407:                   // 'processing-instruction' 'to'
      case 54199:                   // 'processing-instruction' 'union'
      case 56503:                   // 'processing-instruction' 'where'
      case 57015:                   // 'processing-instruction' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 96:                        // 'comment'
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 202:                       // 'text'
    case 212:                       // 'unordered'
      lookahead2W(195);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 117:                       // 'empty-sequence'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(185);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 192:                       // 'self'
      lookahead2W(194);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 113:                       // 'document-node'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 127:                       // 'for'
    case 128:                       // 'function'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 160:                       // 'namespace-node'
    case 161:                       // 'ne'
    case 165:                       // 'node'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(191);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 74:                        // '``['
    case 81:                        // 'array'
    case 1621:                      // 'attribute' URIQualifiedName
    case 1650:                      // 'element' URIQualifiedName
    case 3925:                      // 'attribute' QName^Token
    case 3954:                      // 'element' QName^Token
    case 4511:                      // 'namespace' NCName^Token
    case 4535:                      // 'processing-instruction' NCName^Token
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7793:                      // 'document-node' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7797:                      // 'empty-sequence' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7808:                      // 'function' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7815:                      // 'if' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7826:                      // 'item' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7840:                      // 'namespace-node' '#'
    case 7841:                      // 'ne' '#'
    case 7845:                      // 'node' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7870:                      // 'schema-attribute' '#'
    case 7871:                      // 'schema-element' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7881:                      // 'switch' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7890:                      // 'typeswitch' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9088:                      // 'function' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
    case 19541:                     // 'attribute' 'after'
    case 19570:                     // 'element' 'after'
    case 19615:                     // 'namespace' 'after'
    case 19639:                     // 'processing-instruction' 'after'
    case 20053:                     // 'attribute' 'ancestor'
    case 20082:                     // 'element' 'ancestor'
    case 20309:                     // 'attribute' 'ancestor-or-self'
    case 20338:                     // 'element' 'ancestor-or-self'
    case 21845:                     // 'attribute' 'attribute'
    case 21874:                     // 'element' 'attribute'
    case 22357:                     // 'attribute' 'before'
    case 22386:                     // 'element' 'before'
    case 22431:                     // 'namespace' 'before'
    case 22455:                     // 'processing-instruction' 'before'
    case 24149:                     // 'attribute' 'child'
    case 24178:                     // 'element' 'child'
    case 24661:                     // 'attribute' 'comment'
    case 24690:                     // 'element' 'comment'
    case 25429:                     // 'attribute' 'copy'
    case 25458:                     // 'element' 'copy'
    case 26709:                     // 'attribute' 'declare'
    case 26738:                     // 'element' 'declare'
    case 27221:                     // 'attribute' 'delete'
    case 27250:                     // 'element' 'delete'
    case 27477:                     // 'attribute' 'descendant'
    case 27506:                     // 'element' 'descendant'
    case 27733:                     // 'attribute' 'descendant-or-self'
    case 27762:                     // 'element' 'descendant-or-self'
    case 28757:                     // 'attribute' 'document'
    case 28786:                     // 'element' 'document'
    case 29013:                     // 'attribute' 'document-node'
    case 29042:                     // 'element' 'document-node'
    case 29269:                     // 'attribute' 'element'
    case 29298:                     // 'element' 'element'
    case 30037:                     // 'attribute' 'empty-sequence'
    case 30066:                     // 'element' 'empty-sequence'
    case 31061:                     // 'attribute' 'every'
    case 31090:                     // 'element' 'every'
    case 31829:                     // 'attribute' 'first'
    case 31858:                     // 'element' 'first'
    case 32341:                     // 'attribute' 'following-sibling'
    case 32370:                     // 'element' 'following-sibling'
    case 32853:                     // 'attribute' 'function'
    case 32882:                     // 'element' 'function'
    case 34645:                     // 'attribute' 'if'
    case 34674:                     // 'element' 'if'
    case 34901:                     // 'attribute' 'import'
    case 34930:                     // 'element' 'import'
    case 35925:                     // 'attribute' 'insert'
    case 35954:                     // 'element' 'insert'
    case 36949:                     // 'attribute' 'invoke'
    case 36978:                     // 'element' 'invoke'
    case 37461:                     // 'attribute' 'item'
    case 37490:                     // 'element' 'item'
    case 37973:                     // 'attribute' 'last'
    case 38002:                     // 'element' 'last'
    case 39509:                     // 'attribute' 'map'
    case 39538:                     // 'element' 'map'
    case 39583:                     // 'namespace' 'map'
    case 39607:                     // 'processing-instruction' 'map'
    case 40533:                     // 'attribute' 'module'
    case 40562:                     // 'element' 'module'
    case 40789:                     // 'attribute' 'namespace'
    case 40818:                     // 'element' 'namespace'
    case 41045:                     // 'attribute' 'namespace-node'
    case 41074:                     // 'element' 'namespace-node'
    case 42325:                     // 'attribute' 'node'
    case 42354:                     // 'element' 'node'
    case 44373:                     // 'attribute' 'ordered'
    case 44402:                     // 'element' 'ordered'
    case 44885:                     // 'attribute' 'parent'
    case 44914:                     // 'element' 'parent'
    case 46165:                     // 'attribute' 'preceding-sibling'
    case 46194:                     // 'element' 'preceding-sibling'
    case 46933:                     // 'attribute' 'processing-instruction'
    case 46962:                     // 'element' 'processing-instruction'
    case 47189:                     // 'attribute' 'rename'
    case 47218:                     // 'element' 'rename'
    case 47445:                     // 'attribute' 'replace'
    case 47474:                     // 'element' 'replace'
    case 48725:                     // 'attribute' 'schema-attribute'
    case 48754:                     // 'element' 'schema-attribute'
    case 48981:                     // 'attribute' 'schema-element'
    case 49010:                     // 'element' 'schema-element'
    case 49237:                     // 'attribute' 'self'
    case 49266:                     // 'element' 'self'
    case 50005:                     // 'attribute' 'some'
    case 50034:                     // 'element' 'some'
    case 51541:                     // 'attribute' 'switch'
    case 51570:                     // 'element' 'switch'
    case 51797:                     // 'attribute' 'text'
    case 51826:                     // 'element' 'text'
    case 53077:                     // 'attribute' 'try'
    case 53106:                     // 'element' 'try'
    case 53845:                     // 'attribute' 'typeswitch'
    case 53874:                     // 'element' 'typeswitch'
    case 54357:                     // 'attribute' 'unordered'
    case 54386:                     // 'element' 'unordered'
    case 54613:                     // 'attribute' 'update'
    case 54642:                     // 'element' 'update'
    case 55125:                     // 'attribute' 'validate'
    case 55154:                     // 'element' 'validate'
    case 57173:                     // 'attribute' 'xquery'
    case 57202:                     // 'element' 'xquery'
    case 57685:                     // 'attribute' '{'
    case 57696:                     // 'comment' '{'
    case 57712:                     // 'document' '{'
    case 57714:                     // 'element' '{'
    case 57754:                     // 'map' '{'
    case 57759:                     // 'namespace' '{'
    case 57773:                     // 'ordered' '{'
    case 57783:                     // 'processing-instruction' '{'
    case 57802:                     // 'text' '{'
    case 57812:                     // 'unordered' '{'
    case 14766165:                  // 'attribute' 'and' '{'
    case 14766194:                  // 'element' 'and' '{'
    case 14766239:                  // 'namespace' 'and' '{'
    case 14766263:                  // 'processing-instruction' 'and' '{'
    case 14766677:                  // 'attribute' 'as' '{'
    case 14766706:                  // 'element' 'as' '{'
    case 14766751:                  // 'namespace' 'as' '{'
    case 14766775:                  // 'processing-instruction' 'as' '{'
    case 14766933:                  // 'attribute' 'ascending' '{'
    case 14766962:                  // 'element' 'ascending' '{'
    case 14767007:                  // 'namespace' 'ascending' '{'
    case 14767031:                  // 'processing-instruction' 'ascending' '{'
    case 14768725:                  // 'attribute' 'case' '{'
    case 14768754:                  // 'element' 'case' '{'
    case 14768799:                  // 'namespace' 'case' '{'
    case 14768823:                  // 'processing-instruction' 'case' '{'
    case 14768981:                  // 'attribute' 'cast' '{'
    case 14769010:                  // 'element' 'cast' '{'
    case 14769055:                  // 'namespace' 'cast' '{'
    case 14769079:                  // 'processing-instruction' 'cast' '{'
    case 14769237:                  // 'attribute' 'castable' '{'
    case 14769266:                  // 'element' 'castable' '{'
    case 14769311:                  // 'namespace' 'castable' '{'
    case 14769335:                  // 'processing-instruction' 'castable' '{'
    case 14770005:                  // 'attribute' 'collation' '{'
    case 14770034:                  // 'element' 'collation' '{'
    case 14770079:                  // 'namespace' 'collation' '{'
    case 14770103:                  // 'processing-instruction' 'collation' '{'
    case 14771541:                  // 'attribute' 'count' '{'
    case 14771570:                  // 'element' 'count' '{'
    case 14771615:                  // 'namespace' 'count' '{'
    case 14771639:                  // 'processing-instruction' 'count' '{'
    case 14772565:                  // 'attribute' 'default' '{'
    case 14772594:                  // 'element' 'default' '{'
    case 14772639:                  // 'namespace' 'default' '{'
    case 14772663:                  // 'processing-instruction' 'default' '{'
    case 14773589:                  // 'attribute' 'descending' '{'
    case 14773618:                  // 'element' 'descending' '{'
    case 14773663:                  // 'namespace' 'descending' '{'
    case 14773687:                  // 'processing-instruction' 'descending' '{'
    case 14774101:                  // 'attribute' 'div' '{'
    case 14774130:                  // 'element' 'div' '{'
    case 14774175:                  // 'namespace' 'div' '{'
    case 14774199:                  // 'processing-instruction' 'div' '{'
    case 14775125:                  // 'attribute' 'else' '{'
    case 14775154:                  // 'element' 'else' '{'
    case 14775199:                  // 'namespace' 'else' '{'
    case 14775223:                  // 'processing-instruction' 'else' '{'
    case 14775381:                  // 'attribute' 'empty' '{'
    case 14775410:                  // 'element' 'empty' '{'
    case 14775455:                  // 'namespace' 'empty' '{'
    case 14775479:                  // 'processing-instruction' 'empty' '{'
    case 14776149:                  // 'attribute' 'end' '{'
    case 14776178:                  // 'element' 'end' '{'
    case 14776223:                  // 'namespace' 'end' '{'
    case 14776247:                  // 'processing-instruction' 'end' '{'
    case 14776405:                  // 'attribute' 'eq' '{'
    case 14776434:                  // 'element' 'eq' '{'
    case 14776479:                  // 'namespace' 'eq' '{'
    case 14776503:                  // 'processing-instruction' 'eq' '{'
    case 14776917:                  // 'attribute' 'except' '{'
    case 14776946:                  // 'element' 'except' '{'
    case 14776991:                  // 'namespace' 'except' '{'
    case 14777015:                  // 'processing-instruction' 'except' '{'
    case 14777685:                  // 'attribute' 'following' '{'
    case 14777714:                  // 'element' 'following' '{'
    case 14778197:                  // 'attribute' 'for' '{'
    case 14778226:                  // 'element' 'for' '{'
    case 14778271:                  // 'namespace' 'for' '{'
    case 14778295:                  // 'processing-instruction' 'for' '{'
    case 14778709:                  // 'attribute' 'ge' '{'
    case 14778738:                  // 'element' 'ge' '{'
    case 14778783:                  // 'namespace' 'ge' '{'
    case 14778807:                  // 'processing-instruction' 'ge' '{'
    case 14779221:                  // 'attribute' 'group' '{'
    case 14779250:                  // 'element' 'group' '{'
    case 14779295:                  // 'namespace' 'group' '{'
    case 14779319:                  // 'processing-instruction' 'group' '{'
    case 14779733:                  // 'attribute' 'gt' '{'
    case 14779762:                  // 'element' 'gt' '{'
    case 14779807:                  // 'namespace' 'gt' '{'
    case 14779831:                  // 'processing-instruction' 'gt' '{'
    case 14779989:                  // 'attribute' 'idiv' '{'
    case 14780018:                  // 'element' 'idiv' '{'
    case 14780063:                  // 'namespace' 'idiv' '{'
    case 14780087:                  // 'processing-instruction' 'idiv' '{'
    case 14781781:                  // 'attribute' 'instance' '{'
    case 14781810:                  // 'element' 'instance' '{'
    case 14781855:                  // 'namespace' 'instance' '{'
    case 14781879:                  // 'processing-instruction' 'instance' '{'
    case 14782037:                  // 'attribute' 'intersect' '{'
    case 14782066:                  // 'element' 'intersect' '{'
    case 14782111:                  // 'namespace' 'intersect' '{'
    case 14782135:                  // 'processing-instruction' 'intersect' '{'
    case 14782293:                  // 'attribute' 'into' '{'
    case 14782322:                  // 'element' 'into' '{'
    case 14782367:                  // 'namespace' 'into' '{'
    case 14782391:                  // 'processing-instruction' 'into' '{'
    case 14782805:                  // 'attribute' 'is' '{'
    case 14782834:                  // 'element' 'is' '{'
    case 14782879:                  // 'namespace' 'is' '{'
    case 14782903:                  // 'processing-instruction' 'is' '{'
    case 14784085:                  // 'attribute' 'le' '{'
    case 14784114:                  // 'element' 'le' '{'
    case 14784159:                  // 'namespace' 'le' '{'
    case 14784183:                  // 'processing-instruction' 'le' '{'
    case 14784597:                  // 'attribute' 'let' '{'
    case 14784626:                  // 'element' 'let' '{'
    case 14784671:                  // 'namespace' 'let' '{'
    case 14784695:                  // 'processing-instruction' 'let' '{'
    case 14784853:                  // 'attribute' 'lt' '{'
    case 14784882:                  // 'element' 'lt' '{'
    case 14784927:                  // 'namespace' 'lt' '{'
    case 14784951:                  // 'processing-instruction' 'lt' '{'
    case 14785621:                  // 'attribute' 'mod' '{'
    case 14785650:                  // 'element' 'mod' '{'
    case 14785695:                  // 'namespace' 'mod' '{'
    case 14785719:                  // 'processing-instruction' 'mod' '{'
    case 14785877:                  // 'attribute' 'modify' '{'
    case 14785906:                  // 'element' 'modify' '{'
    case 14785951:                  // 'namespace' 'modify' '{'
    case 14785975:                  // 'processing-instruction' 'modify' '{'
    case 14786901:                  // 'attribute' 'ne' '{'
    case 14786930:                  // 'element' 'ne' '{'
    case 14786975:                  // 'namespace' 'ne' '{'
    case 14786999:                  // 'processing-instruction' 'ne' '{'
    case 14788949:                  // 'attribute' 'only' '{'
    case 14788978:                  // 'element' 'only' '{'
    case 14789023:                  // 'namespace' 'only' '{'
    case 14789047:                  // 'processing-instruction' 'only' '{'
    case 14789461:                  // 'attribute' 'or' '{'
    case 14789490:                  // 'element' 'or' '{'
    case 14789535:                  // 'namespace' 'or' '{'
    case 14789559:                  // 'processing-instruction' 'or' '{'
    case 14789717:                  // 'attribute' 'order' '{'
    case 14789746:                  // 'element' 'order' '{'
    case 14789791:                  // 'namespace' 'order' '{'
    case 14789815:                  // 'processing-instruction' 'order' '{'
    case 14791509:                  // 'attribute' 'preceding' '{'
    case 14791538:                  // 'element' 'preceding' '{'
    case 14793301:                  // 'attribute' 'return' '{'
    case 14793330:                  // 'element' 'return' '{'
    case 14793375:                  // 'namespace' 'return' '{'
    case 14793399:                  // 'processing-instruction' 'return' '{'
    case 14793813:                  // 'attribute' 'satisfies' '{'
    case 14793842:                  // 'element' 'satisfies' '{'
    case 14793887:                  // 'namespace' 'satisfies' '{'
    case 14793911:                  // 'processing-instruction' 'satisfies' '{'
    case 14795861:                  // 'attribute' 'stable' '{'
    case 14795890:                  // 'element' 'stable' '{'
    case 14795935:                  // 'namespace' 'stable' '{'
    case 14795959:                  // 'processing-instruction' 'stable' '{'
    case 14796117:                  // 'attribute' 'start' '{'
    case 14796146:                  // 'element' 'start' '{'
    case 14796191:                  // 'namespace' 'start' '{'
    case 14796215:                  // 'processing-instruction' 'start' '{'
    case 14797909:                  // 'attribute' 'to' '{'
    case 14797938:                  // 'element' 'to' '{'
    case 14797983:                  // 'namespace' 'to' '{'
    case 14798007:                  // 'processing-instruction' 'to' '{'
    case 14798165:                  // 'attribute' 'transform' '{'
    case 14798194:                  // 'element' 'transform' '{'
    case 14798239:                  // 'namespace' 'transform' '{'
    case 14798263:                  // 'processing-instruction' 'transform' '{'
    case 14798421:                  // 'attribute' 'treat' '{'
    case 14798450:                  // 'element' 'treat' '{'
    case 14798495:                  // 'namespace' 'treat' '{'
    case 14798519:                  // 'processing-instruction' 'treat' '{'
    case 14799701:                  // 'attribute' 'union' '{'
    case 14799730:                  // 'element' 'union' '{'
    case 14799775:                  // 'namespace' 'union' '{'
    case 14799799:                  // 'processing-instruction' 'union' '{'
    case 14802005:                  // 'attribute' 'where' '{'
    case 14802034:                  // 'element' 'where' '{'
    case 14802079:                  // 'namespace' 'where' '{'
    case 14802103:                  // 'processing-instruction' 'where' '{'
    case 14802517:                  // 'attribute' 'with' '{'
    case 14802546:                  // 'element' 'with' '{'
    case 14802591:                  // 'namespace' 'with' '{'
    case 14802615:                  // 'processing-instruction' 'with' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(227);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23125:                   // 'attribute' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24405:                   // 'attribute' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26965:                   // 'attribute' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29781:                   // 'attribute' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32597:                   // 'attribute' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36181:                   // 'attribute' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43349:                   // 'attribute' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50261:                   // 'attribute' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52565:                   // 'attribute' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21333:                   // 'attribute' 'ascending'
      case 27989:                   // 'attribute' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25941:                   // 'attribute' 'count'
      case 38997:                   // 'attribute' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30549:                   // 'attribute' 'end'
      case 50517:                   // 'attribute' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33621:                   // 'attribute' 'group'
      case 44117:                   // 'attribute' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23381:                   // 'attribute' 'cast'
      case 23637:                   // 'attribute' 'castable'
      case 52821:                   // 'attribute' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20565:                   // 'attribute' 'and'
      case 21077:                   // 'attribute' 'as'
      case 28501:                   // 'attribute' 'div'
      case 29525:                   // 'attribute' 'else'
      case 30805:                   // 'attribute' 'eq'
      case 31317:                   // 'attribute' 'except'
      case 32085:                   // 'attribute' 'following'
      case 33109:                   // 'attribute' 'ge'
      case 34133:                   // 'attribute' 'gt'
      case 34389:                   // 'attribute' 'idiv'
      case 36437:                   // 'attribute' 'intersect'
      case 36693:                   // 'attribute' 'into'
      case 37205:                   // 'attribute' 'is'
      case 38485:                   // 'attribute' 'le'
      case 39253:                   // 'attribute' 'lt'
      case 40021:                   // 'attribute' 'mod'
      case 40277:                   // 'attribute' 'modify'
      case 41301:                   // 'attribute' 'ne'
      case 43861:                   // 'attribute' 'or'
      case 45909:                   // 'attribute' 'preceding'
      case 47701:                   // 'attribute' 'return'
      case 48213:                   // 'attribute' 'satisfies'
      case 52309:                   // 'attribute' 'to'
      case 54101:                   // 'attribute' 'union'
      case 56405:                   // 'attribute' 'where'
      case 56917:                   // 'attribute' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 114:                       // 'element'
      lookahead2W(226);             // END | URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                    // '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23154:                   // 'element' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24434:                   // 'element' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 26994:                   // 'element' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29810:                   // 'element' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32626:                   // 'element' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36210:                   // 'element' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43378:                   // 'element' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50290:                   // 'element' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52594:                   // 'element' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21362:                   // 'element' 'ascending'
      case 28018:                   // 'element' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 25970:                   // 'element' 'count'
      case 39026:                   // 'element' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30578:                   // 'element' 'end'
      case 50546:                   // 'element' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33650:                   // 'element' 'group'
      case 44146:                   // 'element' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23410:                   // 'element' 'cast'
      case 23666:                   // 'element' 'castable'
      case 52850:                   // 'element' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20594:                   // 'element' 'and'
      case 21106:                   // 'element' 'as'
      case 28530:                   // 'element' 'div'
      case 29554:                   // 'element' 'else'
      case 30834:                   // 'element' 'eq'
      case 31346:                   // 'element' 'except'
      case 32114:                   // 'element' 'following'
      case 33138:                   // 'element' 'ge'
      case 34162:                   // 'element' 'gt'
      case 34418:                   // 'element' 'idiv'
      case 36466:                   // 'element' 'intersect'
      case 36722:                   // 'element' 'into'
      case 37234:                   // 'element' 'is'
      case 38514:                   // 'element' 'le'
      case 39282:                   // 'element' 'lt'
      case 40050:                   // 'element' 'mod'
      case 40306:                   // 'element' 'modify'
      case 41330:                   // 'element' 'ne'
      case 43890:                   // 'element' 'or'
      case 45938:                   // 'element' 'preceding'
      case 47730:                   // 'element' 'return'
      case 48242:                   // 'element' 'satisfies'
      case 52338:                   // 'element' 'to'
      case 54130:                   // 'element' 'union'
      case 56434:                   // 'element' 'where'
      case 56946:                   // 'element' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 154:                       // 'map'
      lookahead2W(192);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 159:                       // 'namespace'
    case 183:                       // 'processing-instruction'
      lookahead2W(199);             // END | NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (lk)
      {
      case 23199:                   // 'namespace' 'case'
      case 23223:                   // 'processing-instruction' 'case'
        lookahead3W(225);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'json-item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'object' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 24479:                   // 'namespace' 'collation'
      case 24503:                   // 'processing-instruction' 'collation'
        lookahead3W(76);            // StringLiteral | S^WS | '(:' | '{'
        break;
      case 27039:                   // 'namespace' 'default'
      case 27063:                   // 'processing-instruction' 'default'
        lookahead3W(124);           // S^WS | '$' | '(:' | 'return' | '{'
        break;
      case 29855:                   // 'namespace' 'empty'
      case 29879:                   // 'processing-instruction' 'empty'
        lookahead3W(133);           // S^WS | '(:' | 'greatest' | 'least' | '{'
        break;
      case 32671:                   // 'namespace' 'for'
      case 32695:                   // 'processing-instruction' 'for'
        lookahead3W(137);           // S^WS | '$' | '(:' | 'sliding' | 'tumbling' | '{'
        break;
      case 36255:                   // 'namespace' 'instance'
      case 36279:                   // 'processing-instruction' 'instance'
        lookahead3W(113);           // S^WS | '(:' | 'of' | '{'
        break;
      case 43423:                   // 'namespace' 'only'
      case 43447:                   // 'processing-instruction' 'only'
        lookahead3W(106);           // S^WS | '(:' | 'end' | '{'
        break;
      case 50335:                   // 'namespace' 'stable'
      case 50359:                   // 'processing-instruction' 'stable'
        lookahead3W(114);           // S^WS | '(:' | 'order' | '{'
        break;
      case 52639:                   // 'namespace' 'transform'
      case 52663:                   // 'processing-instruction' 'transform'
        lookahead3W(119);           // S^WS | '(:' | 'with' | '{'
        break;
      case 21407:                   // 'namespace' 'ascending'
      case 28063:                   // 'namespace' 'descending'
      case 21431:                   // 'processing-instruction' 'ascending'
      case 28087:                   // 'processing-instruction' 'descending'
        lookahead3W(160);           // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where' | '{'
        break;
      case 26015:                   // 'namespace' 'count'
      case 39071:                   // 'namespace' 'let'
      case 26039:                   // 'processing-instruction' 'count'
      case 39095:                   // 'processing-instruction' 'let'
        lookahead3W(81);            // S^WS | '$' | '(:' | '{'
        break;
      case 30623:                   // 'namespace' 'end'
      case 50591:                   // 'namespace' 'start'
      case 30647:                   // 'processing-instruction' 'end'
      case 50615:                   // 'processing-instruction' 'start'
        lookahead3W(148);           // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when' | '{'
        break;
      case 33695:                   // 'namespace' 'group'
      case 44191:                   // 'namespace' 'order'
      case 33719:                   // 'processing-instruction' 'group'
      case 44215:                   // 'processing-instruction' 'order'
        lookahead3W(99);            // S^WS | '(:' | 'by' | '{'
        break;
      case 23455:                   // 'namespace' 'cast'
      case 23711:                   // 'namespace' 'castable'
      case 52895:                   // 'namespace' 'treat'
      case 23479:                   // 'processing-instruction' 'cast'
      case 23735:                   // 'processing-instruction' 'castable'
      case 52919:                   // 'processing-instruction' 'treat'
        lookahead3W(97);            // S^WS | '(:' | 'as' | '{'
        break;
      case 20639:                   // 'namespace' 'and'
      case 21151:                   // 'namespace' 'as'
      case 28575:                   // 'namespace' 'div'
      case 29599:                   // 'namespace' 'else'
      case 30879:                   // 'namespace' 'eq'
      case 31391:                   // 'namespace' 'except'
      case 33183:                   // 'namespace' 'ge'
      case 34207:                   // 'namespace' 'gt'
      case 34463:                   // 'namespace' 'idiv'
      case 36511:                   // 'namespace' 'intersect'
      case 36767:                   // 'namespace' 'into'
      case 37279:                   // 'namespace' 'is'
      case 38559:                   // 'namespace' 'le'
      case 39327:                   // 'namespace' 'lt'
      case 40095:                   // 'namespace' 'mod'
      case 40351:                   // 'namespace' 'modify'
      case 41375:                   // 'namespace' 'ne'
      case 43935:                   // 'namespace' 'or'
      case 47775:                   // 'namespace' 'return'
      case 48287:                   // 'namespace' 'satisfies'
      case 52383:                   // 'namespace' 'to'
      case 54175:                   // 'namespace' 'union'
      case 56479:                   // 'namespace' 'where'
      case 56991:                   // 'namespace' 'with'
      case 20663:                   // 'processing-instruction' 'and'
      case 21175:                   // 'processing-instruction' 'as'
      case 28599:                   // 'processing-instruction' 'div'
      case 29623:                   // 'processing-instruction' 'else'
      case 30903:                   // 'processing-instruction' 'eq'
      case 31415:                   // 'processing-instruction' 'except'
      case 33207:                   // 'processing-instruction' 'ge'
      case 34231:                   // 'processing-instruction' 'gt'
      case 34487:                   // 'processing-instruction' 'idiv'
      case 36535:                   // 'processing-instruction' 'intersect'
      case 36791:                   // 'processing-instruction' 'into'
      case 37303:                   // 'processing-instruction' 'is'
      case 38583:                   // 'processing-instruction' 'le'
      case 39351:                   // 'processing-instruction' 'lt'
      case 40119:                   // 'processing-instruction' 'mod'
      case 40375:                   // 'processing-instruction' 'modify'
      case 41399:                   // 'processing-instruction' 'ne'
      case 43959:                   // 'processing-instruction' 'or'
      case 47799:                   // 'processing-instruction' 'return'
      case 48311:                   // 'processing-instruction' 'satisfies'
      case 52407:                   // 'processing-instruction' 'to'
      case 54199:                   // 'processing-instruction' 'union'
      case 56503:                   // 'processing-instruction' 'where'
      case 57015:                   // 'processing-instruction' 'with'
        lookahead3W(222);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      }
      break;
    case 96:                        // 'comment'
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 202:                       // 'text'
    case 212:                       // 'unordered'
      lookahead2W(195);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 117:                       // 'empty-sequence'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
      lookahead2W(185);             // END | S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 192:                       // 'self'
      lookahead2W(194);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 113:                       // 'document-node'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 127:                       // 'for'
    case 128:                       // 'function'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 160:                       // 'namespace-node'
    case 161:                       // 'ne'
    case 165:                       // 'node'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(191);             // END | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 74:                        // '``['
    case 81:                        // 'array'
    case 1621:                      // 'attribute' URIQualifiedName
    case 1650:                      // 'element' URIQualifiedName
    case 3925:                      // 'attribute' QName^Token
    case 3954:                      // 'element' QName^Token
    case 4511:                      // 'namespace' NCName^Token
    case 4535:                      // 'processing-instruction' NCName^Token
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7793:                      // 'document-node' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7797:                      // 'empty-sequence' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7808:                      // 'function' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7815:                      // 'if' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7826:                      // 'item' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7840:                      // 'namespace-node' '#'
    case 7841:                      // 'ne' '#'
    case 7845:                      // 'node' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7870:                      // 'schema-attribute' '#'
    case 7871:                      // 'schema-element' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7881:                      // 'switch' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7890:                      // 'typeswitch' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9088:                      // 'function' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
    case 19541:                     // 'attribute' 'after'
    case 19570:                     // 'element' 'after'
    case 19615:                     // 'namespace' 'after'
    case 19639:                     // 'processing-instruction' 'after'
    case 20053:                     // 'attribute' 'ancestor'
    case 20082:                     // 'element' 'ancestor'
    case 20309:                     // 'attribute' 'ancestor-or-self'
    case 20338:                     // 'element' 'ancestor-or-self'
    case 21845:                     // 'attribute' 'attribute'
    case 21874:                     // 'element' 'attribute'
    case 22357:                     // 'attribute' 'before'
    case 22386:                     // 'element' 'before'
    case 22431:                     // 'namespace' 'before'
    case 22455:                     // 'processing-instruction' 'before'
    case 24149:                     // 'attribute' 'child'
    case 24178:                     // 'element' 'child'
    case 24661:                     // 'attribute' 'comment'
    case 24690:                     // 'element' 'comment'
    case 25429:                     // 'attribute' 'copy'
    case 25458:                     // 'element' 'copy'
    case 26709:                     // 'attribute' 'declare'
    case 26738:                     // 'element' 'declare'
    case 27221:                     // 'attribute' 'delete'
    case 27250:                     // 'element' 'delete'
    case 27477:                     // 'attribute' 'descendant'
    case 27506:                     // 'element' 'descendant'
    case 27733:                     // 'attribute' 'descendant-or-self'
    case 27762:                     // 'element' 'descendant-or-self'
    case 28757:                     // 'attribute' 'document'
    case 28786:                     // 'element' 'document'
    case 29013:                     // 'attribute' 'document-node'
    case 29042:                     // 'element' 'document-node'
    case 29269:                     // 'attribute' 'element'
    case 29298:                     // 'element' 'element'
    case 30037:                     // 'attribute' 'empty-sequence'
    case 30066:                     // 'element' 'empty-sequence'
    case 31061:                     // 'attribute' 'every'
    case 31090:                     // 'element' 'every'
    case 31829:                     // 'attribute' 'first'
    case 31858:                     // 'element' 'first'
    case 32341:                     // 'attribute' 'following-sibling'
    case 32370:                     // 'element' 'following-sibling'
    case 32853:                     // 'attribute' 'function'
    case 32882:                     // 'element' 'function'
    case 34645:                     // 'attribute' 'if'
    case 34674:                     // 'element' 'if'
    case 34901:                     // 'attribute' 'import'
    case 34930:                     // 'element' 'import'
    case 35925:                     // 'attribute' 'insert'
    case 35954:                     // 'element' 'insert'
    case 36949:                     // 'attribute' 'invoke'
    case 36978:                     // 'element' 'invoke'
    case 37461:                     // 'attribute' 'item'
    case 37490:                     // 'element' 'item'
    case 37973:                     // 'attribute' 'last'
    case 38002:                     // 'element' 'last'
    case 39509:                     // 'attribute' 'map'
    case 39538:                     // 'element' 'map'
    case 39583:                     // 'namespace' 'map'
    case 39607:                     // 'processing-instruction' 'map'
    case 40533:                     // 'attribute' 'module'
    case 40562:                     // 'element' 'module'
    case 40789:                     // 'attribute' 'namespace'
    case 40818:                     // 'element' 'namespace'
    case 41045:                     // 'attribute' 'namespace-node'
    case 41074:                     // 'element' 'namespace-node'
    case 42325:                     // 'attribute' 'node'
    case 42354:                     // 'element' 'node'
    case 44373:                     // 'attribute' 'ordered'
    case 44402:                     // 'element' 'ordered'
    case 44885:                     // 'attribute' 'parent'
    case 44914:                     // 'element' 'parent'
    case 46165:                     // 'attribute' 'preceding-sibling'
    case 46194:                     // 'element' 'preceding-sibling'
    case 46933:                     // 'attribute' 'processing-instruction'
    case 46962:                     // 'element' 'processing-instruction'
    case 47189:                     // 'attribute' 'rename'
    case 47218:                     // 'element' 'rename'
    case 47445:                     // 'attribute' 'replace'
    case 47474:                     // 'element' 'replace'
    case 48725:                     // 'attribute' 'schema-attribute'
    case 48754:                     // 'element' 'schema-attribute'
    case 48981:                     // 'attribute' 'schema-element'
    case 49010:                     // 'element' 'schema-element'
    case 49237:                     // 'attribute' 'self'
    case 49266:                     // 'element' 'self'
    case 50005:                     // 'attribute' 'some'
    case 50034:                     // 'element' 'some'
    case 51541:                     // 'attribute' 'switch'
    case 51570:                     // 'element' 'switch'
    case 51797:                     // 'attribute' 'text'
    case 51826:                     // 'element' 'text'
    case 53077:                     // 'attribute' 'try'
    case 53106:                     // 'element' 'try'
    case 53845:                     // 'attribute' 'typeswitch'
    case 53874:                     // 'element' 'typeswitch'
    case 54357:                     // 'attribute' 'unordered'
    case 54386:                     // 'element' 'unordered'
    case 54613:                     // 'attribute' 'update'
    case 54642:                     // 'element' 'update'
    case 55125:                     // 'attribute' 'validate'
    case 55154:                     // 'element' 'validate'
    case 57173:                     // 'attribute' 'xquery'
    case 57202:                     // 'element' 'xquery'
    case 57685:                     // 'attribute' '{'
    case 57696:                     // 'comment' '{'
    case 57712:                     // 'document' '{'
    case 57714:                     // 'element' '{'
    case 57754:                     // 'map' '{'
    case 57759:                     // 'namespace' '{'
    case 57773:                     // 'ordered' '{'
    case 57783:                     // 'processing-instruction' '{'
    case 57802:                     // 'text' '{'
    case 57812:                     // 'unordered' '{'
    case 14766165:                  // 'attribute' 'and' '{'
    case 14766194:                  // 'element' 'and' '{'
    case 14766239:                  // 'namespace' 'and' '{'
    case 14766263:                  // 'processing-instruction' 'and' '{'
    case 14766677:                  // 'attribute' 'as' '{'
    case 14766706:                  // 'element' 'as' '{'
    case 14766751:                  // 'namespace' 'as' '{'
    case 14766775:                  // 'processing-instruction' 'as' '{'
    case 14766933:                  // 'attribute' 'ascending' '{'
    case 14766962:                  // 'element' 'ascending' '{'
    case 14767007:                  // 'namespace' 'ascending' '{'
    case 14767031:                  // 'processing-instruction' 'ascending' '{'
    case 14768725:                  // 'attribute' 'case' '{'
    case 14768754:                  // 'element' 'case' '{'
    case 14768799:                  // 'namespace' 'case' '{'
    case 14768823:                  // 'processing-instruction' 'case' '{'
    case 14768981:                  // 'attribute' 'cast' '{'
    case 14769010:                  // 'element' 'cast' '{'
    case 14769055:                  // 'namespace' 'cast' '{'
    case 14769079:                  // 'processing-instruction' 'cast' '{'
    case 14769237:                  // 'attribute' 'castable' '{'
    case 14769266:                  // 'element' 'castable' '{'
    case 14769311:                  // 'namespace' 'castable' '{'
    case 14769335:                  // 'processing-instruction' 'castable' '{'
    case 14770005:                  // 'attribute' 'collation' '{'
    case 14770034:                  // 'element' 'collation' '{'
    case 14770079:                  // 'namespace' 'collation' '{'
    case 14770103:                  // 'processing-instruction' 'collation' '{'
    case 14771541:                  // 'attribute' 'count' '{'
    case 14771570:                  // 'element' 'count' '{'
    case 14771615:                  // 'namespace' 'count' '{'
    case 14771639:                  // 'processing-instruction' 'count' '{'
    case 14772565:                  // 'attribute' 'default' '{'
    case 14772594:                  // 'element' 'default' '{'
    case 14772639:                  // 'namespace' 'default' '{'
    case 14772663:                  // 'processing-instruction' 'default' '{'
    case 14773589:                  // 'attribute' 'descending' '{'
    case 14773618:                  // 'element' 'descending' '{'
    case 14773663:                  // 'namespace' 'descending' '{'
    case 14773687:                  // 'processing-instruction' 'descending' '{'
    case 14774101:                  // 'attribute' 'div' '{'
    case 14774130:                  // 'element' 'div' '{'
    case 14774175:                  // 'namespace' 'div' '{'
    case 14774199:                  // 'processing-instruction' 'div' '{'
    case 14775125:                  // 'attribute' 'else' '{'
    case 14775154:                  // 'element' 'else' '{'
    case 14775199:                  // 'namespace' 'else' '{'
    case 14775223:                  // 'processing-instruction' 'else' '{'
    case 14775381:                  // 'attribute' 'empty' '{'
    case 14775410:                  // 'element' 'empty' '{'
    case 14775455:                  // 'namespace' 'empty' '{'
    case 14775479:                  // 'processing-instruction' 'empty' '{'
    case 14776149:                  // 'attribute' 'end' '{'
    case 14776178:                  // 'element' 'end' '{'
    case 14776223:                  // 'namespace' 'end' '{'
    case 14776247:                  // 'processing-instruction' 'end' '{'
    case 14776405:                  // 'attribute' 'eq' '{'
    case 14776434:                  // 'element' 'eq' '{'
    case 14776479:                  // 'namespace' 'eq' '{'
    case 14776503:                  // 'processing-instruction' 'eq' '{'
    case 14776917:                  // 'attribute' 'except' '{'
    case 14776946:                  // 'element' 'except' '{'
    case 14776991:                  // 'namespace' 'except' '{'
    case 14777015:                  // 'processing-instruction' 'except' '{'
    case 14777685:                  // 'attribute' 'following' '{'
    case 14777714:                  // 'element' 'following' '{'
    case 14778197:                  // 'attribute' 'for' '{'
    case 14778226:                  // 'element' 'for' '{'
    case 14778271:                  // 'namespace' 'for' '{'
    case 14778295:                  // 'processing-instruction' 'for' '{'
    case 14778709:                  // 'attribute' 'ge' '{'
    case 14778738:                  // 'element' 'ge' '{'
    case 14778783:                  // 'namespace' 'ge' '{'
    case 14778807:                  // 'processing-instruction' 'ge' '{'
    case 14779221:                  // 'attribute' 'group' '{'
    case 14779250:                  // 'element' 'group' '{'
    case 14779295:                  // 'namespace' 'group' '{'
    case 14779319:                  // 'processing-instruction' 'group' '{'
    case 14779733:                  // 'attribute' 'gt' '{'
    case 14779762:                  // 'element' 'gt' '{'
    case 14779807:                  // 'namespace' 'gt' '{'
    case 14779831:                  // 'processing-instruction' 'gt' '{'
    case 14779989:                  // 'attribute' 'idiv' '{'
    case 14780018:                  // 'element' 'idiv' '{'
    case 14780063:                  // 'namespace' 'idiv' '{'
    case 14780087:                  // 'processing-instruction' 'idiv' '{'
    case 14781781:                  // 'attribute' 'instance' '{'
    case 14781810:                  // 'element' 'instance' '{'
    case 14781855:                  // 'namespace' 'instance' '{'
    case 14781879:                  // 'processing-instruction' 'instance' '{'
    case 14782037:                  // 'attribute' 'intersect' '{'
    case 14782066:                  // 'element' 'intersect' '{'
    case 14782111:                  // 'namespace' 'intersect' '{'
    case 14782135:                  // 'processing-instruction' 'intersect' '{'
    case 14782293:                  // 'attribute' 'into' '{'
    case 14782322:                  // 'element' 'into' '{'
    case 14782367:                  // 'namespace' 'into' '{'
    case 14782391:                  // 'processing-instruction' 'into' '{'
    case 14782805:                  // 'attribute' 'is' '{'
    case 14782834:                  // 'element' 'is' '{'
    case 14782879:                  // 'namespace' 'is' '{'
    case 14782903:                  // 'processing-instruction' 'is' '{'
    case 14784085:                  // 'attribute' 'le' '{'
    case 14784114:                  // 'element' 'le' '{'
    case 14784159:                  // 'namespace' 'le' '{'
    case 14784183:                  // 'processing-instruction' 'le' '{'
    case 14784597:                  // 'attribute' 'let' '{'
    case 14784626:                  // 'element' 'let' '{'
    case 14784671:                  // 'namespace' 'let' '{'
    case 14784695:                  // 'processing-instruction' 'let' '{'
    case 14784853:                  // 'attribute' 'lt' '{'
    case 14784882:                  // 'element' 'lt' '{'
    case 14784927:                  // 'namespace' 'lt' '{'
    case 14784951:                  // 'processing-instruction' 'lt' '{'
    case 14785621:                  // 'attribute' 'mod' '{'
    case 14785650:                  // 'element' 'mod' '{'
    case 14785695:                  // 'namespace' 'mod' '{'
    case 14785719:                  // 'processing-instruction' 'mod' '{'
    case 14785877:                  // 'attribute' 'modify' '{'
    case 14785906:                  // 'element' 'modify' '{'
    case 14785951:                  // 'namespace' 'modify' '{'
    case 14785975:                  // 'processing-instruction' 'modify' '{'
    case 14786901:                  // 'attribute' 'ne' '{'
    case 14786930:                  // 'element' 'ne' '{'
    case 14786975:                  // 'namespace' 'ne' '{'
    case 14786999:                  // 'processing-instruction' 'ne' '{'
    case 14788949:                  // 'attribute' 'only' '{'
    case 14788978:                  // 'element' 'only' '{'
    case 14789023:                  // 'namespace' 'only' '{'
    case 14789047:                  // 'processing-instruction' 'only' '{'
    case 14789461:                  // 'attribute' 'or' '{'
    case 14789490:                  // 'element' 'or' '{'
    case 14789535:                  // 'namespace' 'or' '{'
    case 14789559:                  // 'processing-instruction' 'or' '{'
    case 14789717:                  // 'attribute' 'order' '{'
    case 14789746:                  // 'element' 'order' '{'
    case 14789791:                  // 'namespace' 'order' '{'
    case 14789815:                  // 'processing-instruction' 'order' '{'
    case 14791509:                  // 'attribute' 'preceding' '{'
    case 14791538:                  // 'element' 'preceding' '{'
    case 14793301:                  // 'attribute' 'return' '{'
    case 14793330:                  // 'element' 'return' '{'
    case 14793375:                  // 'namespace' 'return' '{'
    case 14793399:                  // 'processing-instruction' 'return' '{'
    case 14793813:                  // 'attribute' 'satisfies' '{'
    case 14793842:                  // 'element' 'satisfies' '{'
    case 14793887:                  // 'namespace' 'satisfies' '{'
    case 14793911:                  // 'processing-instruction' 'satisfies' '{'
    case 14795861:                  // 'attribute' 'stable' '{'
    case 14795890:                  // 'element' 'stable' '{'
    case 14795935:                  // 'namespace' 'stable' '{'
    case 14795959:                  // 'processing-instruction' 'stable' '{'
    case 14796117:                  // 'attribute' 'start' '{'
    case 14796146:                  // 'element' 'start' '{'
    case 14796191:                  // 'namespace' 'start' '{'
    case 14796215:                  // 'processing-instruction' 'start' '{'
    case 14797909:                  // 'attribute' 'to' '{'
    case 14797938:                  // 'element' 'to' '{'
    case 14797983:                  // 'namespace' 'to' '{'
    case 14798007:                  // 'processing-instruction' 'to' '{'
    case 14798165:                  // 'attribute' 'transform' '{'
    case 14798194:                  // 'element' 'transform' '{'
    case 14798239:                  // 'namespace' 'transform' '{'
    case 14798263:                  // 'processing-instruction' 'transform' '{'
    case 14798421:                  // 'attribute' 'treat' '{'
    case 14798450:                  // 'element' 'treat' '{'
    case 14798495:                  // 'namespace' 'treat' '{'
    case 14798519:                  // 'processing-instruction' 'treat' '{'
    case 14799701:                  // 'attribute' 'union' '{'
    case 14799730:                  // 'element' 'union' '{'
    case 14799775:                  // 'namespace' 'union' '{'
    case 14799799:                  // 'processing-instruction' 'union' '{'
    case 14802005:                  // 'attribute' 'where' '{'
    case 14802034:                  // 'element' 'where' '{'
    case 14802079:                  // 'namespace' 'where' '{'
    case 14802103:                  // 'processing-instruction' 'where' '{'
    case 14802517:                  // 'attribute' 'with' '{'
    case 14802546:                  // 'element' 'with' '{'
    case 14802591:                  // 'namespace' 'with' '{'
    case 14802615:                  // 'processing-instruction' 'with' '{'
      try_PostfixExpr();
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 13134:                     // 'ancestor' '::'
    case 13135:                     // 'ancestor-or-self' '::'
    case 13231:                     // 'parent' '::'
    case 13235:                     // 'preceding' '::'
    case 13236:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(183);               // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 13134:                     // 'ancestor' '::'
    case 13135:                     // 'ancestor-or-self' '::'
    case 13231:                     // 'parent' '::'
    case 13235:                     // 'preceding' '::'
    case 13236:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(183);               // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(193);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 192:                       // 'self'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 13141:                     // 'attribute' '::'
    case 13150:                     // 'child' '::'
    case 13163:                     // 'descendant' '::'
    case 13164:                     // 'descendant-or-self' '::'
    case 13181:                     // 'following' '::'
    case 13182:                     // 'following-sibling' '::'
    case 13248:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
      lookahead2W(193);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
      break;
    case 94:                        // 'child'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 192:                       // 'self'
      lookahead2W(187);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 13141:                     // 'attribute' '::'
    case 13150:                     // 'child' '::'
    case 13163:                     // 'descendant' '::'
    case 13164:                     // 'descendant-or-self' '::'
    case 13181:                     // 'following' '::'
    case 13182:                     // 'following-sibling' '::'
    case 13248:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 94:                        // 'child'
      consume(94);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 107:                       // 'descendant'
      consume(107);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 85:                        // 'attribute'
      consume(85);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 192:                       // 'self'
      consume(192);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 108:                       // 'descendant-or-self'
      consume(108);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 126:                       // 'following-sibling'
      consume(126);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(125);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 107:                       // 'descendant'
      consumeT(107);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 85:                        // 'attribute'
      consumeT(85);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 192:                       // 'self'
      consumeT(192);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 108:                       // 'descendant-or-self'
      consumeT(108);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 126:                       // 'following-sibling'
      consumeT(126);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(125);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 68)                   // '@'
    {
      consume(68);                  // '@'
    }
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 68)                   // '@'
    {
      consumeT(68);                 // '@'
    }
    lookahead1W(205);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(205);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 175:                       // 'parent'
      consume(175);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 180:                       // 'preceding-sibling'
      consume(180);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 179:                       // 'preceding'
      consume(179);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 175:                       // 'parent'
      consumeT(175);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 180:                       // 'preceding-sibling'
      consumeT(180);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 179:                       // 'preceding'
      consumeT(179);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 25:                        // Wildcard
      consume(25);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 25:                        // Wildcard
      consumeT(25);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(186);             // END | S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(35);                    // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(35);                   // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(38);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(183);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(183);             // END | S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | '|' |
                                    // '||' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(70);                    // '['
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(71);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(70);                   // '['
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(71);                   // ']'
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 154:                       // 'map'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      switch (lk)
      {
      case 57754:                   // 'map' '{'
        lookahead3W(223);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
        break;
      }
      break;
    case 159:                       // 'namespace'
      lookahead2W(172);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 183:                       // 'processing-instruction'
      lookahead2W(170);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 85:                        // 'attribute'
    case 114:                       // 'element'
      lookahead2W(208);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 202:                       // 'text'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      break;
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 212:                       // 'unordered'
      lookahead2W(123);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 127:                       // 'for'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 161:                       // 'ne'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 192:                       // 'self'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 188826                // 'map' '{' IntegerLiteral
     || lk == 254362                // 'map' '{' DecimalLiteral
     || lk == 319898                // 'map' '{' DoubleLiteral
     || lk == 385434                // 'map' '{' StringLiteral
     || lk == 450970                // 'map' '{' URIQualifiedName
     || lk == 1040794               // 'map' '{' QName^Token
     || lk == 1696154               // 'map' '{' Wildcard
     || lk == 2154906               // 'map' '{' '$'
     || lk == 2220442               // 'map' '{' '%'
     || lk == 2351514               // 'map' '{' '('
     || lk == 2417050               // 'map' '{' '(#'
     || lk == 2679194               // 'map' '{' '+'
     || lk == 2810266               // 'map' '{' '-'
     || lk == 2941338               // 'map' '{' '.'
     || lk == 3006874               // 'map' '{' '..'
     || lk == 3072410               // 'map' '{' '/'
     || lk == 3137946               // 'map' '{' '//'
     || lk == 3596698               // 'map' '{' '<'
     || lk == 3662234               // 'map' '{' '<!--'
     || lk == 3989914               // 'map' '{' '<?'
     || lk == 4383130               // 'map' '{' '?'
     || lk == 4514202               // 'map' '{' '@'
     || lk == 4645274               // 'map' '{' '['
     || lk == 4907418               // 'map' '{' '``['
     || lk == 5038490               // 'map' '{' 'after'
     || lk == 5169562               // 'map' '{' 'ancestor'
     || lk == 5235098               // 'map' '{' 'ancestor-or-self'
     || lk == 5300634               // 'map' '{' 'and'
     || lk == 5366170               // 'map' '{' 'array'
     || lk == 5431706               // 'map' '{' 'as'
     || lk == 5497242               // 'map' '{' 'ascending'
     || lk == 5628314               // 'map' '{' 'attribute'
     || lk == 5759386               // 'map' '{' 'before'
     || lk == 5955994               // 'map' '{' 'case'
     || lk == 6021530               // 'map' '{' 'cast'
     || lk == 6087066               // 'map' '{' 'castable'
     || lk == 6218138               // 'map' '{' 'child'
     || lk == 6283674               // 'map' '{' 'collation'
     || lk == 6349210               // 'map' '{' 'comment'
     || lk == 6545818               // 'map' '{' 'copy'
     || lk == 6676890               // 'map' '{' 'count'
     || lk == 6873498               // 'map' '{' 'declare'
     || lk == 6939034               // 'map' '{' 'default'
     || lk == 7004570               // 'map' '{' 'delete'
     || lk == 7070106               // 'map' '{' 'descendant'
     || lk == 7135642               // 'map' '{' 'descendant-or-self'
     || lk == 7201178               // 'map' '{' 'descending'
     || lk == 7332250               // 'map' '{' 'div'
     || lk == 7397786               // 'map' '{' 'document'
     || lk == 7463322               // 'map' '{' 'document-node'
     || lk == 7528858               // 'map' '{' 'element'
     || lk == 7594394               // 'map' '{' 'else'
     || lk == 7659930               // 'map' '{' 'empty'
     || lk == 7725466               // 'map' '{' 'empty-sequence'
     || lk == 7856538               // 'map' '{' 'end'
     || lk == 7922074               // 'map' '{' 'eq'
     || lk == 7987610               // 'map' '{' 'every'
     || lk == 8053146               // 'map' '{' 'except'
     || lk == 8184218               // 'map' '{' 'first'
     || lk == 8249754               // 'map' '{' 'following'
     || lk == 8315290               // 'map' '{' 'following-sibling'
     || lk == 8380826               // 'map' '{' 'for'
     || lk == 8446362               // 'map' '{' 'function'
     || lk == 8511898               // 'map' '{' 'ge'
     || lk == 8642970               // 'map' '{' 'group'
     || lk == 8774042               // 'map' '{' 'gt'
     || lk == 8839578               // 'map' '{' 'idiv'
     || lk == 8905114               // 'map' '{' 'if'
     || lk == 8970650               // 'map' '{' 'import'
     || lk == 9232794               // 'map' '{' 'insert'
     || lk == 9298330               // 'map' '{' 'instance'
     || lk == 9363866               // 'map' '{' 'intersect'
     || lk == 9429402               // 'map' '{' 'into'
     || lk == 9494938               // 'map' '{' 'invoke'
     || lk == 9560474               // 'map' '{' 'is'
     || lk == 9626010               // 'map' '{' 'item'
     || lk == 9757082               // 'map' '{' 'last'
     || lk == 9888154               // 'map' '{' 'le'
     || lk == 10019226              // 'map' '{' 'let'
     || lk == 10084762              // 'map' '{' 'lt'
     || lk == 10150298              // 'map' '{' 'map'
     || lk == 10281370              // 'map' '{' 'mod'
     || lk == 10346906              // 'map' '{' 'modify'
     || lk == 10412442              // 'map' '{' 'module'
     || lk == 10477978              // 'map' '{' 'namespace'
     || lk == 10543514              // 'map' '{' 'namespace-node'
     || lk == 10609050              // 'map' '{' 'ne'
     || lk == 10871194              // 'map' '{' 'node'
     || lk == 11133338              // 'map' '{' 'only'
     || lk == 11264410              // 'map' '{' 'or'
     || lk == 11329946              // 'map' '{' 'order'
     || lk == 11395482              // 'map' '{' 'ordered'
     || lk == 11526554              // 'map' '{' 'parent'
     || lk == 11788698              // 'map' '{' 'preceding'
     || lk == 11854234              // 'map' '{' 'preceding-sibling'
     || lk == 12050842              // 'map' '{' 'processing-instruction'
     || lk == 12116378              // 'map' '{' 'rename'
     || lk == 12181914              // 'map' '{' 'replace'
     || lk == 12247450              // 'map' '{' 'return'
     || lk == 12378522              // 'map' '{' 'satisfies'
     || lk == 12509594              // 'map' '{' 'schema-attribute'
     || lk == 12575130              // 'map' '{' 'schema-element'
     || lk == 12640666              // 'map' '{' 'self'
     || lk == 12837274              // 'map' '{' 'some'
     || lk == 12902810              // 'map' '{' 'stable'
     || lk == 12968346              // 'map' '{' 'start'
     || lk == 13230490              // 'map' '{' 'switch'
     || lk == 13296026              // 'map' '{' 'text'
     || lk == 13427098              // 'map' '{' 'to'
     || lk == 13492634              // 'map' '{' 'transform'
     || lk == 13558170              // 'map' '{' 'treat'
     || lk == 13623706              // 'map' '{' 'try'
     || lk == 13820314              // 'map' '{' 'typeswitch'
     || lk == 13885850              // 'map' '{' 'union'
     || lk == 13951386              // 'map' '{' 'unordered'
     || lk == 14016922              // 'map' '{' 'update'
     || lk == 14147994              // 'map' '{' 'validate'
     || lk == 14475674              // 'map' '{' 'where'
     || lk == 14606746              // 'map' '{' 'with'
     || lk == 14672282              // 'map' '{' 'xquery'
     || lk == 15065498)             // 'map' '{' '}'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Constructor();
          lk = -8;
        }
        catch (p8A)
        {
          lk = -10;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(0, e0, lk);
      }
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
      parse_Literal();
      break;
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
      parse_FunctionCall();
      break;
    case 57773:                     // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 57812:                     // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 113:                       // 'document-node'
    case 117:                       // 'empty-sequence'
    case 128:                       // 'function'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7841:                      // 'ne' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_MapConstructor();
      break;
    case 70:                        // '['
    case 81:                        // 'array'
      parse_ArrayConstructor();
      break;
    case 74:                        // '``['
      parse_StringConstructor();
      break;
    case 66:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 154:                       // 'map'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      switch (lk)
      {
      case 57754:                   // 'map' '{'
        lookahead3W(223);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
        break;
      }
      break;
    case 159:                       // 'namespace'
      lookahead2W(172);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 183:                       // 'processing-instruction'
      lookahead2W(170);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'where' | 'with' | '{'
      break;
    case 85:                        // 'attribute'
    case 114:                       // 'element'
      lookahead2W(208);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 202:                       // 'text'
      lookahead2W(78);              // S^WS | '#' | '(:' | '{'
      break;
    case 112:                       // 'document'
    case 173:                       // 'ordered'
    case 212:                       // 'unordered'
      lookahead2W(123);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 76:                        // 'after'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 82:                        // 'as'
    case 83:                        // 'ascending'
    case 87:                        // 'before'
    case 90:                        // 'case'
    case 91:                        // 'cast'
    case 92:                        // 'castable'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 99:                        // 'copy'
    case 101:                       // 'count'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 111:                       // 'div'
    case 115:                       // 'else'
    case 116:                       // 'empty'
    case 119:                       // 'end'
    case 120:                       // 'eq'
    case 121:                       // 'every'
    case 122:                       // 'except'
    case 124:                       // 'first'
    case 125:                       // 'following'
    case 126:                       // 'following-sibling'
    case 127:                       // 'for'
    case 129:                       // 'ge'
    case 131:                       // 'group'
    case 133:                       // 'gt'
    case 134:                       // 'idiv'
    case 136:                       // 'import'
    case 140:                       // 'insert'
    case 141:                       // 'instance'
    case 142:                       // 'intersect'
    case 143:                       // 'into'
    case 144:                       // 'invoke'
    case 145:                       // 'is'
    case 148:                       // 'last'
    case 150:                       // 'le'
    case 152:                       // 'let'
    case 153:                       // 'lt'
    case 156:                       // 'mod'
    case 157:                       // 'modify'
    case 158:                       // 'module'
    case 161:                       // 'ne'
    case 169:                       // 'only'
    case 171:                       // 'or'
    case 172:                       // 'order'
    case 175:                       // 'parent'
    case 179:                       // 'preceding'
    case 180:                       // 'preceding-sibling'
    case 184:                       // 'rename'
    case 185:                       // 'replace'
    case 186:                       // 'return'
    case 188:                       // 'satisfies'
    case 192:                       // 'self'
    case 195:                       // 'some'
    case 196:                       // 'stable'
    case 197:                       // 'start'
    case 204:                       // 'to'
    case 205:                       // 'transform'
    case 206:                       // 'treat'
    case 207:                       // 'try'
    case 211:                       // 'union'
    case 213:                       // 'update'
    case 215:                       // 'validate'
    case 220:                       // 'where'
    case 222:                       // 'with'
    case 223:                       // 'xquery'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 188826                // 'map' '{' IntegerLiteral
     || lk == 254362                // 'map' '{' DecimalLiteral
     || lk == 319898                // 'map' '{' DoubleLiteral
     || lk == 385434                // 'map' '{' StringLiteral
     || lk == 450970                // 'map' '{' URIQualifiedName
     || lk == 1040794               // 'map' '{' QName^Token
     || lk == 1696154               // 'map' '{' Wildcard
     || lk == 2154906               // 'map' '{' '$'
     || lk == 2220442               // 'map' '{' '%'
     || lk == 2351514               // 'map' '{' '('
     || lk == 2417050               // 'map' '{' '(#'
     || lk == 2679194               // 'map' '{' '+'
     || lk == 2810266               // 'map' '{' '-'
     || lk == 2941338               // 'map' '{' '.'
     || lk == 3006874               // 'map' '{' '..'
     || lk == 3072410               // 'map' '{' '/'
     || lk == 3137946               // 'map' '{' '//'
     || lk == 3596698               // 'map' '{' '<'
     || lk == 3662234               // 'map' '{' '<!--'
     || lk == 3989914               // 'map' '{' '<?'
     || lk == 4383130               // 'map' '{' '?'
     || lk == 4514202               // 'map' '{' '@'
     || lk == 4645274               // 'map' '{' '['
     || lk == 4907418               // 'map' '{' '``['
     || lk == 5038490               // 'map' '{' 'after'
     || lk == 5169562               // 'map' '{' 'ancestor'
     || lk == 5235098               // 'map' '{' 'ancestor-or-self'
     || lk == 5300634               // 'map' '{' 'and'
     || lk == 5366170               // 'map' '{' 'array'
     || lk == 5431706               // 'map' '{' 'as'
     || lk == 5497242               // 'map' '{' 'ascending'
     || lk == 5628314               // 'map' '{' 'attribute'
     || lk == 5759386               // 'map' '{' 'before'
     || lk == 5955994               // 'map' '{' 'case'
     || lk == 6021530               // 'map' '{' 'cast'
     || lk == 6087066               // 'map' '{' 'castable'
     || lk == 6218138               // 'map' '{' 'child'
     || lk == 6283674               // 'map' '{' 'collation'
     || lk == 6349210               // 'map' '{' 'comment'
     || lk == 6545818               // 'map' '{' 'copy'
     || lk == 6676890               // 'map' '{' 'count'
     || lk == 6873498               // 'map' '{' 'declare'
     || lk == 6939034               // 'map' '{' 'default'
     || lk == 7004570               // 'map' '{' 'delete'
     || lk == 7070106               // 'map' '{' 'descendant'
     || lk == 7135642               // 'map' '{' 'descendant-or-self'
     || lk == 7201178               // 'map' '{' 'descending'
     || lk == 7332250               // 'map' '{' 'div'
     || lk == 7397786               // 'map' '{' 'document'
     || lk == 7463322               // 'map' '{' 'document-node'
     || lk == 7528858               // 'map' '{' 'element'
     || lk == 7594394               // 'map' '{' 'else'
     || lk == 7659930               // 'map' '{' 'empty'
     || lk == 7725466               // 'map' '{' 'empty-sequence'
     || lk == 7856538               // 'map' '{' 'end'
     || lk == 7922074               // 'map' '{' 'eq'
     || lk == 7987610               // 'map' '{' 'every'
     || lk == 8053146               // 'map' '{' 'except'
     || lk == 8184218               // 'map' '{' 'first'
     || lk == 8249754               // 'map' '{' 'following'
     || lk == 8315290               // 'map' '{' 'following-sibling'
     || lk == 8380826               // 'map' '{' 'for'
     || lk == 8446362               // 'map' '{' 'function'
     || lk == 8511898               // 'map' '{' 'ge'
     || lk == 8642970               // 'map' '{' 'group'
     || lk == 8774042               // 'map' '{' 'gt'
     || lk == 8839578               // 'map' '{' 'idiv'
     || lk == 8905114               // 'map' '{' 'if'
     || lk == 8970650               // 'map' '{' 'import'
     || lk == 9232794               // 'map' '{' 'insert'
     || lk == 9298330               // 'map' '{' 'instance'
     || lk == 9363866               // 'map' '{' 'intersect'
     || lk == 9429402               // 'map' '{' 'into'
     || lk == 9494938               // 'map' '{' 'invoke'
     || lk == 9560474               // 'map' '{' 'is'
     || lk == 9626010               // 'map' '{' 'item'
     || lk == 9757082               // 'map' '{' 'last'
     || lk == 9888154               // 'map' '{' 'le'
     || lk == 10019226              // 'map' '{' 'let'
     || lk == 10084762              // 'map' '{' 'lt'
     || lk == 10150298              // 'map' '{' 'map'
     || lk == 10281370              // 'map' '{' 'mod'
     || lk == 10346906              // 'map' '{' 'modify'
     || lk == 10412442              // 'map' '{' 'module'
     || lk == 10477978              // 'map' '{' 'namespace'
     || lk == 10543514              // 'map' '{' 'namespace-node'
     || lk == 10609050              // 'map' '{' 'ne'
     || lk == 10871194              // 'map' '{' 'node'
     || lk == 11133338              // 'map' '{' 'only'
     || lk == 11264410              // 'map' '{' 'or'
     || lk == 11329946              // 'map' '{' 'order'
     || lk == 11395482              // 'map' '{' 'ordered'
     || lk == 11526554              // 'map' '{' 'parent'
     || lk == 11788698              // 'map' '{' 'preceding'
     || lk == 11854234              // 'map' '{' 'preceding-sibling'
     || lk == 12050842              // 'map' '{' 'processing-instruction'
     || lk == 12116378              // 'map' '{' 'rename'
     || lk == 12181914              // 'map' '{' 'replace'
     || lk == 12247450              // 'map' '{' 'return'
     || lk == 12378522              // 'map' '{' 'satisfies'
     || lk == 12509594              // 'map' '{' 'schema-attribute'
     || lk == 12575130              // 'map' '{' 'schema-element'
     || lk == 12640666              // 'map' '{' 'self'
     || lk == 12837274              // 'map' '{' 'some'
     || lk == 12902810              // 'map' '{' 'stable'
     || lk == 12968346              // 'map' '{' 'start'
     || lk == 13230490              // 'map' '{' 'switch'
     || lk == 13296026              // 'map' '{' 'text'
     || lk == 13427098              // 'map' '{' 'to'
     || lk == 13492634              // 'map' '{' 'transform'
     || lk == 13558170              // 'map' '{' 'treat'
     || lk == 13623706              // 'map' '{' 'try'
     || lk == 13820314              // 'map' '{' 'typeswitch'
     || lk == 13885850              // 'map' '{' 'union'
     || lk == 13951386              // 'map' '{' 'unordered'
     || lk == 14016922              // 'map' '{' 'update'
     || lk == 14147994              // 'map' '{' 'validate'
     || lk == 14475674              // 'map' '{' 'where'
     || lk == 14606746              // 'map' '{' 'with'
     || lk == 14672282              // 'map' '{' 'xquery'
     || lk == 15065498)             // 'map' '{' '}'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Constructor();
          memoize(0, e0A, -8);
          lk = -14;
        }
        catch (p8A)
        {
          lk = -10;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(0, e0A, -10);
        }
      }
    }
    switch (lk)
    {
    case 2:                         // IntegerLiteral
    case 3:                         // DecimalLiteral
    case 4:                         // DoubleLiteral
    case 5:                         // StringLiteral
      try_Literal();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 8966:                      // URIQualifiedName '('
    case 8975:                      // QName^Token '('
    case 9036:                      // 'after' '('
    case 9038:                      // 'ancestor' '('
    case 9039:                      // 'ancestor-or-self' '('
    case 9040:                      // 'and' '('
    case 9042:                      // 'as' '('
    case 9043:                      // 'ascending' '('
    case 9047:                      // 'before' '('
    case 9050:                      // 'case' '('
    case 9051:                      // 'cast' '('
    case 9052:                      // 'castable' '('
    case 9054:                      // 'child' '('
    case 9055:                      // 'collation' '('
    case 9059:                      // 'copy' '('
    case 9061:                      // 'count' '('
    case 9064:                      // 'declare' '('
    case 9065:                      // 'default' '('
    case 9066:                      // 'delete' '('
    case 9067:                      // 'descendant' '('
    case 9068:                      // 'descendant-or-self' '('
    case 9069:                      // 'descending' '('
    case 9071:                      // 'div' '('
    case 9072:                      // 'document' '('
    case 9075:                      // 'else' '('
    case 9076:                      // 'empty' '('
    case 9079:                      // 'end' '('
    case 9080:                      // 'eq' '('
    case 9081:                      // 'every' '('
    case 9082:                      // 'except' '('
    case 9084:                      // 'first' '('
    case 9085:                      // 'following' '('
    case 9086:                      // 'following-sibling' '('
    case 9087:                      // 'for' '('
    case 9089:                      // 'ge' '('
    case 9091:                      // 'group' '('
    case 9093:                      // 'gt' '('
    case 9094:                      // 'idiv' '('
    case 9096:                      // 'import' '('
    case 9100:                      // 'insert' '('
    case 9101:                      // 'instance' '('
    case 9102:                      // 'intersect' '('
    case 9103:                      // 'into' '('
    case 9104:                      // 'invoke' '('
    case 9105:                      // 'is' '('
    case 9108:                      // 'last' '('
    case 9110:                      // 'le' '('
    case 9112:                      // 'let' '('
    case 9113:                      // 'lt' '('
    case 9116:                      // 'mod' '('
    case 9117:                      // 'modify' '('
    case 9118:                      // 'module' '('
    case 9119:                      // 'namespace' '('
    case 9121:                      // 'ne' '('
    case 9129:                      // 'only' '('
    case 9131:                      // 'or' '('
    case 9132:                      // 'order' '('
    case 9133:                      // 'ordered' '('
    case 9135:                      // 'parent' '('
    case 9139:                      // 'preceding' '('
    case 9140:                      // 'preceding-sibling' '('
    case 9144:                      // 'rename' '('
    case 9145:                      // 'replace' '('
    case 9146:                      // 'return' '('
    case 9148:                      // 'satisfies' '('
    case 9152:                      // 'self' '('
    case 9155:                      // 'some' '('
    case 9156:                      // 'stable' '('
    case 9157:                      // 'start' '('
    case 9164:                      // 'to' '('
    case 9165:                      // 'transform' '('
    case 9166:                      // 'treat' '('
    case 9167:                      // 'try' '('
    case 9171:                      // 'union' '('
    case 9172:                      // 'unordered' '('
    case 9173:                      // 'update' '('
    case 9175:                      // 'validate' '('
    case 9180:                      // 'where' '('
    case 9182:                      // 'with' '('
    case 9183:                      // 'xquery' '('
      try_FunctionCall();
      break;
    case 57773:                     // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 57812:                     // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 113:                       // 'document-node'
    case 117:                       // 'empty-sequence'
    case 128:                       // 'function'
    case 135:                       // 'if'
    case 146:                       // 'item'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 201:                       // 'switch'
    case 210:                       // 'typeswitch'
    case 7686:                      // URIQualifiedName '#'
    case 7695:                      // QName^Token '#'
    case 7756:                      // 'after' '#'
    case 7758:                      // 'ancestor' '#'
    case 7759:                      // 'ancestor-or-self' '#'
    case 7760:                      // 'and' '#'
    case 7762:                      // 'as' '#'
    case 7763:                      // 'ascending' '#'
    case 7765:                      // 'attribute' '#'
    case 7767:                      // 'before' '#'
    case 7770:                      // 'case' '#'
    case 7771:                      // 'cast' '#'
    case 7772:                      // 'castable' '#'
    case 7774:                      // 'child' '#'
    case 7775:                      // 'collation' '#'
    case 7776:                      // 'comment' '#'
    case 7779:                      // 'copy' '#'
    case 7781:                      // 'count' '#'
    case 7784:                      // 'declare' '#'
    case 7785:                      // 'default' '#'
    case 7786:                      // 'delete' '#'
    case 7787:                      // 'descendant' '#'
    case 7788:                      // 'descendant-or-self' '#'
    case 7789:                      // 'descending' '#'
    case 7791:                      // 'div' '#'
    case 7792:                      // 'document' '#'
    case 7794:                      // 'element' '#'
    case 7795:                      // 'else' '#'
    case 7796:                      // 'empty' '#'
    case 7799:                      // 'end' '#'
    case 7800:                      // 'eq' '#'
    case 7801:                      // 'every' '#'
    case 7802:                      // 'except' '#'
    case 7804:                      // 'first' '#'
    case 7805:                      // 'following' '#'
    case 7806:                      // 'following-sibling' '#'
    case 7807:                      // 'for' '#'
    case 7809:                      // 'ge' '#'
    case 7811:                      // 'group' '#'
    case 7813:                      // 'gt' '#'
    case 7814:                      // 'idiv' '#'
    case 7816:                      // 'import' '#'
    case 7820:                      // 'insert' '#'
    case 7821:                      // 'instance' '#'
    case 7822:                      // 'intersect' '#'
    case 7823:                      // 'into' '#'
    case 7824:                      // 'invoke' '#'
    case 7825:                      // 'is' '#'
    case 7828:                      // 'last' '#'
    case 7830:                      // 'le' '#'
    case 7832:                      // 'let' '#'
    case 7833:                      // 'lt' '#'
    case 7834:                      // 'map' '#'
    case 7836:                      // 'mod' '#'
    case 7837:                      // 'modify' '#'
    case 7838:                      // 'module' '#'
    case 7839:                      // 'namespace' '#'
    case 7841:                      // 'ne' '#'
    case 7849:                      // 'only' '#'
    case 7851:                      // 'or' '#'
    case 7852:                      // 'order' '#'
    case 7853:                      // 'ordered' '#'
    case 7855:                      // 'parent' '#'
    case 7859:                      // 'preceding' '#'
    case 7860:                      // 'preceding-sibling' '#'
    case 7863:                      // 'processing-instruction' '#'
    case 7864:                      // 'rename' '#'
    case 7865:                      // 'replace' '#'
    case 7866:                      // 'return' '#'
    case 7868:                      // 'satisfies' '#'
    case 7872:                      // 'self' '#'
    case 7875:                      // 'some' '#'
    case 7876:                      // 'stable' '#'
    case 7877:                      // 'start' '#'
    case 7882:                      // 'text' '#'
    case 7884:                      // 'to' '#'
    case 7885:                      // 'transform' '#'
    case 7886:                      // 'treat' '#'
    case 7887:                      // 'try' '#'
    case 7891:                      // 'union' '#'
    case 7892:                      // 'unordered' '#'
    case 7893:                      // 'update' '#'
    case 7895:                      // 'validate' '#'
    case 7900:                      // 'where' '#'
    case 7902:                      // 'with' '#'
    case 7903:                      // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
      try_MapConstructor();
      break;
    case 70:                        // '['
    case 81:                        // 'array'
      try_ArrayConstructor();
      break;
    case 74:                        // '``['
      try_StringConstructor();
      break;
    case 66:                        // '?'
      try_UnaryLookup();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 5:                         // StringLiteral
      consume(5);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 5:                         // StringLiteral
      consumeT(5);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consume(2);                   // IntegerLiteral
      break;
    case 3:                         // DecimalLiteral
      consume(3);                   // DecimalLiteral
      break;
    default:
      consume(4);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consumeT(2);                  // IntegerLiteral
      break;
    case 3:                         // DecimalLiteral
      consumeT(3);                  // DecimalLiteral
      break;
    default:
      consumeT(4);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(35);                    // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(35);                   // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    consumeT(38);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(173);                   // 'ordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(173);                  // 'ordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(212);                   // 'unordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(212);                  // 'unordered'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(173);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9794:                      // '?' ')'
    case 10562:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(173);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9794:                      // '?' ')'
    case 10562:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(66);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(66);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(54);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(63);                  // '>'
      for (;;)
      {
        lookahead1(152);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(57);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 18)                 // S
      {
        consume(18);                // S
      }
      lookahead1(9);                // '>'
      consume(63);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(54);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(63);                 // '>'
      for (;;)
      {
        lookahead1(152);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(57);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 18)                 // S
      {
        consumeT(18);               // S
      }
      lookahead1(9);                // '>'
      consumeT(63);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 18)                 // S
      {
        break;
      }
      consume(18);                  // S
      lookahead1(204);              // QName^Token | S | '/>' | '>' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 18                  // S
       && l1 != 48                  // '/>'
       && l1 != 63)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 18)               // S
        {
          consume(18);              // S
        }
        lookahead1(8);              // '='
        consume(61);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 18)               // S
        {
          consume(18);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 18)                 // S
      {
        break;
      }
      consumeT(18);                 // S
      lookahead1(204);              // QName^Token | S | '/>' | '>' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 18                  // S
       && l1 != 48                  // '/>'
       && l1 != 63)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 18)               // S
        {
          consumeT(18);             // S
        }
        lookahead1(8);              // '='
        consumeT(61);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 18)               // S
        {
          consumeT(18);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consume(29);                  // '"'
      for (;;)
      {
        lookahead1(145);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeQuot
          consume(8);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(29);                  // '"'
      break;
    default:
      consume(34);                  // "'"
      for (;;)
      {
        lookahead1(146);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 9:                     // EscapeApos
          consume(9);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(34);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consumeT(29);                 // '"'
      for (;;)
      {
        lookahead1(145);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeQuot
          consumeT(8);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(29);                 // '"'
      break;
    default:
      consumeT(34);                 // "'"
      for (;;)
      {
        lookahead1(146);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 9:                     // EscapeApos
          consumeT(9);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(34);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // QuotAttrContentChar
      consume(11);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // QuotAttrContentChar
      consumeT(11);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 12:                        // AposAttrContentChar
      consume(12);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 12:                        // AposAttrContentChar
      consumeT(12);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 56:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 10:                        // ElementContentChar
      consume(10);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 56:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 10:                        // ElementContentChar
      consumeT(10);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 7:                         // PredefinedEntityRef
      consume(7);                   // PredefinedEntityRef
      break;
    case 14:                        // CharRef
      consume(14);                  // CharRef
      break;
    case 226:                       // '{{'
      consume(226);                 // '{{'
      break;
    case 231:                       // '}}'
      consume(231);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 7:                         // PredefinedEntityRef
      consumeT(7);                  // PredefinedEntityRef
      break;
    case 14:                        // CharRef
      consumeT(14);                 // CharRef
      break;
    case 226:                       // '{{'
      consumeT(226);                // '{{'
      break;
    case 231:                       // '}}'
      consumeT(231);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(55);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(55);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(43);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(60);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(13);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 18)                   // S
    {
      consume(18);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(67);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(60);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(13);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 18)                   // S
    {
      consumeT(18);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(67);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(56);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(72);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(56);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(72);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 112:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 114:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 85:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 159:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 202:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    case 183:                       // 'processing-instruction'
      parse_CompPIConstructor();
      break;
    default:
      parse_MapConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 112:                       // 'document'
      try_CompDocConstructor();
      break;
    case 114:                       // 'element'
      try_CompElemConstructor();
      break;
    case 85:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 159:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 202:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    case 183:                       // 'processing-instruction'
      try_CompPIConstructor();
      break;
    default:
      try_MapConstructor();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(112);                   // 'document'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(112);                  // 'document'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(154);                   // 'map'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(154);                  // 'map'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(229);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(49);                    // ':'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(49);                   // ':'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 70:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 70:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(70);                    // '['
    lookahead1W(221);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 71)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(87);            // S^WS | '(:' | ',' | ']'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(71);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(70);                   // '['
    lookahead1W(221);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 71)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(87);            // S^WS | '(:' | ',' | ']'
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(71);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(81);                    // 'array'
    lookahead1W(72);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(81);                   // 'array'
    lookahead1W(72);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(74);                    // '``['
    parse_StringConstructorContent();
    consume(73);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(74);                   // '``['
    try_StringConstructorContent();
    consumeT(73);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 75)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 75)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(75);                    // '`{'
    lookahead1W(224);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '}`'
    if (l1 != 230)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(230);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(75);                   // '`{'
    lookahead1W(224);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' |
                                    // '}`'
    if (l1 != 230)                  // '}`'
    {
      try_Expr();
    }
    consumeT(230);                  // '}`'
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(66);                    // '?'
    lookahead1W(171);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(66);                   // '?'
    lookahead1W(171);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consume(2);                   // IntegerLiteral
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 2:                         // IntegerLiteral
      consumeT(2);                  // IntegerLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(114);                   // 'element'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(114);                  // 'element'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(229);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(229);                  // '}'
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_Expr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(85);                    // 'attribute'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(85);                   // 'attribute'
    lookahead1W(207);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(229);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_Expr();
    }
    consumeT(229);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(159);                   // 'namespace'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(159);                  // 'namespace'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(229);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_URIExpr();
    consumeT(229);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(202);                   // 'text'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(202);                  // 'text'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(96);                    // 'comment'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(229);                  // '}'
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(183);                   // 'processing-instruction'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consume(225);                 // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(229);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consume(225);                   // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(229);                   // '}'
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(183);                  // 'processing-instruction'
    lookahead1W(168);               // NCName^Token | S^WS | '(:' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'where' | 'with' | '{'
    switch (l1)
    {
    case 225:                       // '{'
      consumeT(225);                // '{'
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(229);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    consumeT(225);                  // '{'
    lookahead1W(223);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 229)                  // '}'
    {
      try_Expr();
    }
    consumeT(229);                  // '}'
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(77);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(30);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(2);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(30);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(2);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(128);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(79);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(97);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(128);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(79);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      try_ParamList();
    }
    consumeT(38);                   // ')'
    lookahead1W(97);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 82)                   // 'as'
    {
      consumeT(82);                 // 'as'
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(72);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(179);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consume(66);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(179);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'following' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'preceding' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consumeT(66);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(82);                    // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(82);                   // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 117:                       // 'empty-sequence'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9077:                      // 'empty-sequence' '('
      consume(117);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(181);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'following' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 66:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 117:                       // 'empty-sequence'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9077:                      // 'empty-sequence' '('
      consumeT(117);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(181);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'following' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 66:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 66:                        // '?'
      consume(66);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 66:                        // '?'
      consumeT(66);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 128:                       // 'function'
    case 146:                       // 'item'
    case 154:                       // 'map'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      parse_KindTest();
      break;
    case 9106:                      // 'item' '('
      consume(146);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 9114:                      // 'map' '('
      parse_MapType();
      break;
    case 81:                        // 'array'
    case 147:                       // 'json-item'
    case 167:                       // 'object'
      parse_JSONTest();
      break;
    case 200:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 96:                        // 'comment'
    case 113:                       // 'document-node'
    case 114:                       // 'element'
    case 128:                       // 'function'
    case 146:                       // 'item'
    case 154:                       // 'map'
    case 160:                       // 'namespace-node'
    case 165:                       // 'node'
    case 183:                       // 'processing-instruction'
    case 190:                       // 'schema-attribute'
    case 191:                       // 'schema-element'
    case 202:                       // 'text'
      lookahead2W(182);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' |
                                    // 'following' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'preceding' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'to' | 'union' | 'where' | 'with' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9045:                      // 'attribute' '('
    case 9056:                      // 'comment' '('
    case 9073:                      // 'document-node' '('
    case 9074:                      // 'element' '('
    case 9120:                      // 'namespace-node' '('
    case 9125:                      // 'node' '('
    case 9143:                      // 'processing-instruction' '('
    case 9150:                      // 'schema-attribute' '('
    case 9151:                      // 'schema-element' '('
    case 9162:                      // 'text' '('
      try_KindTest();
      break;
    case 9106:                      // 'item' '('
      consumeT(146);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    case 33:                        // '%'
    case 9088:                      // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case 9114:                      // 'map' '('
      try_MapType();
      break;
    case 81:                        // 'array'
    case 147:                       // 'json-item'
    case 167:                       // 'object'
      try_JSONTest();
      break;
    case 200:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 147:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 167:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 147:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 167:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(154);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(206);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consume(41);                  // ','
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(154);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(206);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consumeT(41);                 // ','
      lookahead1W(211);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
      try_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(200);                   // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(200);                  // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(147);                   // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(147);                  // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(167);                   // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(167);                  // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(81);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(81);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 113:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 114:                       // 'element'
      parse_ElementTest();
      break;
    case 85:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 191:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 190:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 183:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 202:                       // 'text'
      parse_TextTest();
      break;
    case 160:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 113:                       // 'document-node'
      try_DocumentTest();
      break;
    case 114:                       // 'element'
      try_ElementTest();
      break;
    case 85:                        // 'attribute'
      try_AttributeTest();
      break;
    case 191:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 190:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 183:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 202:                       // 'text'
      try_TextTest();
      break;
    case 160:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(165);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(165);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(113);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(127);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 114:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(113);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(127);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 114:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(202);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(202);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(96);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(160);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(160);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(183);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(169);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 5:                       // StringLiteral
        consume(5);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(183);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(169);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'where' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 5:                       // StringLiteral
        consumeT(5);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(85);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(85);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(190);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(190);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(114);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(85);            // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consume(66);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(114);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(210);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(84);              // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(203);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        lookahead1W(85);            // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consumeT(66);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(191);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(191);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      switch (lk)
      {
      case 9088:                    // 'function' '('
        lookahead3W(214);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | '*' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2564992:                   // 'function' '(' '*'
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(82);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 128:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      switch (lk)
      {
      case 9088:                    // 'function' '('
        lookahead3W(214);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | '*' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        break;
      }
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 2564992:                   // 'function' '(' '*'
      try_AnyFunctionTest();
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(128);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(39);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(128);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(39);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(128);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(213);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(211);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(38);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(82);                    // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(128);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(213);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' |
                                    // 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(211);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
        try_SequenceType();
      }
    }
    consumeT(38);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(82);                   // 'as'
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(35);                    // '('
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(35);                   // '('
    lookahead1W(211);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'json-item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'object' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                    // 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(5);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(5);                    // StringLiteral
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(104);                   // 'declare'
    lookahead1W(63);                // S^WS | '(:' | 'revalidation'
    consume(187);                   // 'revalidation'
    lookahead1W(134);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 198:                       // 'strict'
      consume(198);                 // 'strict'
      break;
    case 149:                       // 'lax'
      consume(149);                 // 'lax'
      break;
    default:
      consume(193);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 143:                       // 'into'
      consume(143);                 // 'into'
      break;
    case 125:                       // 'following'
      consume(125);                 // 'following'
      break;
    default:
      consume(179);                 // 'preceding'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 143:                       // 'into'
      consumeT(143);                // 'into'
      break;
    case 125:                       // 'following'
      consumeT(125);                // 'following'
      break;
    default:
      consumeT(179);                // 'preceding'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(51);                // S^WS | '(:' | 'insert'
    consume(140);                   // 'insert'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(132);               // S^WS | '(:' | 'following' | 'into' | 'preceding'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(51);                // S^WS | '(:' | 'insert'
    consumeT(140);                  // 'insert'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(132);               // S^WS | '(:' | 'following' | 'into' | 'preceding'
    try_InsertExprTargetChoice();
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(45);                // S^WS | '(:' | 'delete'
    consume(106);                   // 'delete'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(45);                // S^WS | '(:' | 'delete'
    consumeT(106);                  // 'delete'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(61);                // S^WS | '(:' | 'replace'
    consume(185);                   // 'replace'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consume(222);                   // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(61);                // S^WS | '(:' | 'replace'
    consumeT(185);                  // 'replace'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consumeT(222);                  // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_UpdateValueExpr()
  {
    eventHandler.startNonterminal("UpdateValueExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(68);                // S^WS | '(:' | 'value'
    consume(216);                   // 'value'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consume(222);                   // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("UpdateValueExpr", e0);
  }

  function try_UpdateValueExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(68);                // S^WS | '(:' | 'value'
    consumeT(216);                  // 'value'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(71);                // S^WS | '(:' | 'with'
    consumeT(222);                  // 'with'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(213);                   // 'update'
    lookahead1W(60);                // S^WS | '(:' | 'rename'
    consume(184);                   // 'rename'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(82);                    // 'as'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(213);                  // 'update'
    lookahead1W(60);                // S^WS | '(:' | 'rename'
    consumeT(184);                  // 'rename'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(82);                   // 'as'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(144);                   // 'invoke'
    lookahead1W(67);                // S^WS | '(:' | 'updating'
    consume(214);                   // 'updating'
    lookahead1W(215);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    consumeT(144);                  // 'invoke'
    lookahead1W(67);                // S^WS | '(:' | 'updating'
    consumeT(214);                  // 'updating'
    lookahead1W(215);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(220);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(84);            // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(218);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(38);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(99);                    // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(88);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(52);                  // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(157);                   // 'modify'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(186);                   // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(99);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(203);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(88);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(203);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'first' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(52);                 // ':='
      lookahead1W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(157);                  // 'modify'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(186);                  // 'return'
    lookahead1W(218);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' |
                                    // 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(201);                // URIQualifiedName | QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consume(6);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(201);                // URIQualifiedName | QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'last' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consumeT(6);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 19:                        // S^WS
      consumeT(19);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function try_Comment()
  {
    consumeT(37);                   // '(:'
    for (;;)
    {
      lookahead1(73);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 20:                      // CommentContents
        consumeT(20);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(50);                   // ':)'
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consume(6);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 6:                         // URIQualifiedName
      consumeT(6);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(200);                // QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 85:                        // 'attribute'
      consume(85);                  // 'attribute'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 113:                       // 'document-node'
      consume(113);                 // 'document-node'
      break;
    case 114:                       // 'element'
      consume(114);                 // 'element'
      break;
    case 117:                       // 'empty-sequence'
      consume(117);                 // 'empty-sequence'
      break;
    case 128:                       // 'function'
      consume(128);                 // 'function'
      break;
    case 135:                       // 'if'
      consume(135);                 // 'if'
      break;
    case 146:                       // 'item'
      consume(146);                 // 'item'
      break;
    case 154:                       // 'map'
      consume(154);                 // 'map'
      break;
    case 160:                       // 'namespace-node'
      consume(160);                 // 'namespace-node'
      break;
    case 165:                       // 'node'
      consume(165);                 // 'node'
      break;
    case 183:                       // 'processing-instruction'
      consume(183);                 // 'processing-instruction'
      break;
    case 190:                       // 'schema-attribute'
      consume(190);                 // 'schema-attribute'
      break;
    case 191:                       // 'schema-element'
      consume(191);                 // 'schema-element'
      break;
    case 201:                       // 'switch'
      consume(201);                 // 'switch'
      break;
    case 202:                       // 'text'
      consume(202);                 // 'text'
      break;
    case 210:                       // 'typeswitch'
      consume(210);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(200);                // QName^Token | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'attribute' | 'before' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'last' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 85:                        // 'attribute'
      consumeT(85);                 // 'attribute'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 113:                       // 'document-node'
      consumeT(113);                // 'document-node'
      break;
    case 114:                       // 'element'
      consumeT(114);                // 'element'
      break;
    case 117:                       // 'empty-sequence'
      consumeT(117);                // 'empty-sequence'
      break;
    case 128:                       // 'function'
      consumeT(128);                // 'function'
      break;
    case 135:                       // 'if'
      consumeT(135);                // 'if'
      break;
    case 146:                       // 'item'
      consumeT(146);                // 'item'
      break;
    case 154:                       // 'map'
      consumeT(154);                // 'map'
      break;
    case 160:                       // 'namespace-node'
      consumeT(160);                // 'namespace-node'
      break;
    case 165:                       // 'node'
      consumeT(165);                // 'node'
      break;
    case 183:                       // 'processing-instruction'
      consumeT(183);                // 'processing-instruction'
      break;
    case 190:                       // 'schema-attribute'
      consumeT(190);                // 'schema-attribute'
      break;
    case 191:                       // 'schema-element'
      consumeT(191);                // 'schema-element'
      break;
    case 201:                       // 'switch'
      consumeT(201);                // 'switch'
      break;
    case 202:                       // 'text'
      consumeT(202);                // 'text'
      break;
    case 210:                       // 'typeswitch'
      consumeT(210);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 76:                        // 'after'
      consume(76);                  // 'after'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 82:                        // 'as'
      consume(82);                  // 'as'
      break;
    case 83:                        // 'ascending'
      consume(83);                  // 'ascending'
      break;
    case 87:                        // 'before'
      consume(87);                  // 'before'
      break;
    case 90:                        // 'case'
      consume(90);                  // 'case'
      break;
    case 91:                        // 'cast'
      consume(91);                  // 'cast'
      break;
    case 92:                        // 'castable'
      consume(92);                  // 'castable'
      break;
    case 94:                        // 'child'
      consume(94);                  // 'child'
      break;
    case 95:                        // 'collation'
      consume(95);                  // 'collation'
      break;
    case 99:                        // 'copy'
      consume(99);                  // 'copy'
      break;
    case 101:                       // 'count'
      consume(101);                 // 'count'
      break;
    case 104:                       // 'declare'
      consume(104);                 // 'declare'
      break;
    case 105:                       // 'default'
      consume(105);                 // 'default'
      break;
    case 106:                       // 'delete'
      consume(106);                 // 'delete'
      break;
    case 107:                       // 'descendant'
      consume(107);                 // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      consume(108);                 // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      consume(109);                 // 'descending'
      break;
    case 111:                       // 'div'
      consume(111);                 // 'div'
      break;
    case 112:                       // 'document'
      consume(112);                 // 'document'
      break;
    case 115:                       // 'else'
      consume(115);                 // 'else'
      break;
    case 116:                       // 'empty'
      consume(116);                 // 'empty'
      break;
    case 119:                       // 'end'
      consume(119);                 // 'end'
      break;
    case 120:                       // 'eq'
      consume(120);                 // 'eq'
      break;
    case 121:                       // 'every'
      consume(121);                 // 'every'
      break;
    case 122:                       // 'except'
      consume(122);                 // 'except'
      break;
    case 124:                       // 'first'
      consume(124);                 // 'first'
      break;
    case 125:                       // 'following'
      consume(125);                 // 'following'
      break;
    case 126:                       // 'following-sibling'
      consume(126);                 // 'following-sibling'
      break;
    case 127:                       // 'for'
      consume(127);                 // 'for'
      break;
    case 129:                       // 'ge'
      consume(129);                 // 'ge'
      break;
    case 131:                       // 'group'
      consume(131);                 // 'group'
      break;
    case 133:                       // 'gt'
      consume(133);                 // 'gt'
      break;
    case 134:                       // 'idiv'
      consume(134);                 // 'idiv'
      break;
    case 136:                       // 'import'
      consume(136);                 // 'import'
      break;
    case 140:                       // 'insert'
      consume(140);                 // 'insert'
      break;
    case 213:                       // 'update'
      consume(213);                 // 'update'
      break;
    case 141:                       // 'instance'
      consume(141);                 // 'instance'
      break;
    case 142:                       // 'intersect'
      consume(142);                 // 'intersect'
      break;
    case 143:                       // 'into'
      consume(143);                 // 'into'
      break;
    case 144:                       // 'invoke'
      consume(144);                 // 'invoke'
      break;
    case 145:                       // 'is'
      consume(145);                 // 'is'
      break;
    case 148:                       // 'last'
      consume(148);                 // 'last'
      break;
    case 150:                       // 'le'
      consume(150);                 // 'le'
      break;
    case 152:                       // 'let'
      consume(152);                 // 'let'
      break;
    case 153:                       // 'lt'
      consume(153);                 // 'lt'
      break;
    case 156:                       // 'mod'
      consume(156);                 // 'mod'
      break;
    case 157:                       // 'modify'
      consume(157);                 // 'modify'
      break;
    case 158:                       // 'module'
      consume(158);                 // 'module'
      break;
    case 159:                       // 'namespace'
      consume(159);                 // 'namespace'
      break;
    case 161:                       // 'ne'
      consume(161);                 // 'ne'
      break;
    case 169:                       // 'only'
      consume(169);                 // 'only'
      break;
    case 171:                       // 'or'
      consume(171);                 // 'or'
      break;
    case 172:                       // 'order'
      consume(172);                 // 'order'
      break;
    case 173:                       // 'ordered'
      consume(173);                 // 'ordered'
      break;
    case 175:                       // 'parent'
      consume(175);                 // 'parent'
      break;
    case 179:                       // 'preceding'
      consume(179);                 // 'preceding'
      break;
    case 180:                       // 'preceding-sibling'
      consume(180);                 // 'preceding-sibling'
      break;
    case 184:                       // 'rename'
      consume(184);                 // 'rename'
      break;
    case 185:                       // 'replace'
      consume(185);                 // 'replace'
      break;
    case 186:                       // 'return'
      consume(186);                 // 'return'
      break;
    case 188:                       // 'satisfies'
      consume(188);                 // 'satisfies'
      break;
    case 192:                       // 'self'
      consume(192);                 // 'self'
      break;
    case 195:                       // 'some'
      consume(195);                 // 'some'
      break;
    case 196:                       // 'stable'
      consume(196);                 // 'stable'
      break;
    case 197:                       // 'start'
      consume(197);                 // 'start'
      break;
    case 204:                       // 'to'
      consume(204);                 // 'to'
      break;
    case 205:                       // 'transform'
      consume(205);                 // 'transform'
      break;
    case 206:                       // 'treat'
      consume(206);                 // 'treat'
      break;
    case 207:                       // 'try'
      consume(207);                 // 'try'
      break;
    case 211:                       // 'union'
      consume(211);                 // 'union'
      break;
    case 212:                       // 'unordered'
      consume(212);                 // 'unordered'
      break;
    case 215:                       // 'validate'
      consume(215);                 // 'validate'
      break;
    case 220:                       // 'where'
      consume(220);                 // 'where'
      break;
    case 222:                       // 'with'
      consume(222);                 // 'with'
      break;
    default:
      consume(223);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 76:                        // 'after'
      consumeT(76);                 // 'after'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 82:                        // 'as'
      consumeT(82);                 // 'as'
      break;
    case 83:                        // 'ascending'
      consumeT(83);                 // 'ascending'
      break;
    case 87:                        // 'before'
      consumeT(87);                 // 'before'
      break;
    case 90:                        // 'case'
      consumeT(90);                 // 'case'
      break;
    case 91:                        // 'cast'
      consumeT(91);                 // 'cast'
      break;
    case 92:                        // 'castable'
      consumeT(92);                 // 'castable'
      break;
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      break;
    case 95:                        // 'collation'
      consumeT(95);                 // 'collation'
      break;
    case 99:                        // 'copy'
      consumeT(99);                 // 'copy'
      break;
    case 101:                       // 'count'
      consumeT(101);                // 'count'
      break;
    case 104:                       // 'declare'
      consumeT(104);                // 'declare'
      break;
    case 105:                       // 'default'
      consumeT(105);                // 'default'
      break;
    case 106:                       // 'delete'
      consumeT(106);                // 'delete'
      break;
    case 107:                       // 'descendant'
      consumeT(107);                // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      consumeT(108);                // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      consumeT(109);                // 'descending'
      break;
    case 111:                       // 'div'
      consumeT(111);                // 'div'
      break;
    case 112:                       // 'document'
      consumeT(112);                // 'document'
      break;
    case 115:                       // 'else'
      consumeT(115);                // 'else'
      break;
    case 116:                       // 'empty'
      consumeT(116);                // 'empty'
      break;
    case 119:                       // 'end'
      consumeT(119);                // 'end'
      break;
    case 120:                       // 'eq'
      consumeT(120);                // 'eq'
      break;
    case 121:                       // 'every'
      consumeT(121);                // 'every'
      break;
    case 122:                       // 'except'
      consumeT(122);                // 'except'
      break;
    case 124:                       // 'first'
      consumeT(124);                // 'first'
      break;
    case 125:                       // 'following'
      consumeT(125);                // 'following'
      break;
    case 126:                       // 'following-sibling'
      consumeT(126);                // 'following-sibling'
      break;
    case 127:                       // 'for'
      consumeT(127);                // 'for'
      break;
    case 129:                       // 'ge'
      consumeT(129);                // 'ge'
      break;
    case 131:                       // 'group'
      consumeT(131);                // 'group'
      break;
    case 133:                       // 'gt'
      consumeT(133);                // 'gt'
      break;
    case 134:                       // 'idiv'
      consumeT(134);                // 'idiv'
      break;
    case 136:                       // 'import'
      consumeT(136);                // 'import'
      break;
    case 140:                       // 'insert'
      consumeT(140);                // 'insert'
      break;
    case 213:                       // 'update'
      consumeT(213);                // 'update'
      break;
    case 141:                       // 'instance'
      consumeT(141);                // 'instance'
      break;
    case 142:                       // 'intersect'
      consumeT(142);                // 'intersect'
      break;
    case 143:                       // 'into'
      consumeT(143);                // 'into'
      break;
    case 144:                       // 'invoke'
      consumeT(144);                // 'invoke'
      break;
    case 145:                       // 'is'
      consumeT(145);                // 'is'
      break;
    case 148:                       // 'last'
      consumeT(148);                // 'last'
      break;
    case 150:                       // 'le'
      consumeT(150);                // 'le'
      break;
    case 152:                       // 'let'
      consumeT(152);                // 'let'
      break;
    case 153:                       // 'lt'
      consumeT(153);                // 'lt'
      break;
    case 156:                       // 'mod'
      consumeT(156);                // 'mod'
      break;
    case 157:                       // 'modify'
      consumeT(157);                // 'modify'
      break;
    case 158:                       // 'module'
      consumeT(158);                // 'module'
      break;
    case 159:                       // 'namespace'
      consumeT(159);                // 'namespace'
      break;
    case 161:                       // 'ne'
      consumeT(161);                // 'ne'
      break;
    case 169:                       // 'only'
      consumeT(169);                // 'only'
      break;
    case 171:                       // 'or'
      consumeT(171);                // 'or'
      break;
    case 172:                       // 'order'
      consumeT(172);                // 'order'
      break;
    case 173:                       // 'ordered'
      consumeT(173);                // 'ordered'
      break;
    case 175:                       // 'parent'
      consumeT(175);                // 'parent'
      break;
    case 179:                       // 'preceding'
      consumeT(179);                // 'preceding'
      break;
    case 180:                       // 'preceding-sibling'
      consumeT(180);                // 'preceding-sibling'
      break;
    case 184:                       // 'rename'
      consumeT(184);                // 'rename'
      break;
    case 185:                       // 'replace'
      consumeT(185);                // 'replace'
      break;
    case 186:                       // 'return'
      consumeT(186);                // 'return'
      break;
    case 188:                       // 'satisfies'
      consumeT(188);                // 'satisfies'
      break;
    case 192:                       // 'self'
      consumeT(192);                // 'self'
      break;
    case 195:                       // 'some'
      consumeT(195);                // 'some'
      break;
    case 196:                       // 'stable'
      consumeT(196);                // 'stable'
      break;
    case 197:                       // 'start'
      consumeT(197);                // 'start'
      break;
    case 204:                       // 'to'
      consumeT(204);                // 'to'
      break;
    case 205:                       // 'transform'
      consumeT(205);                // 'transform'
      break;
    case 206:                       // 'treat'
      consumeT(206);                // 'treat'
      break;
    case 207:                       // 'try'
      consumeT(207);                // 'try'
      break;
    case 211:                       // 'union'
      consumeT(211);                // 'union'
      break;
    case 212:                       // 'unordered'
      consumeT(212);                // 'unordered'
      break;
    case 215:                       // 'validate'
      consumeT(215);                // 'validate'
      break;
    case 220:                       // 'where'
      consumeT(220);                // 'where'
      break;
    case 222:                       // 'with'
      consumeT(222);                // 'with'
      break;
    default:
      consumeT(223);                // 'xquery'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 17:                        // NCName^Token
      consume(17);                  // NCName^Token
      break;
    case 76:                        // 'after'
      consume(76);                  // 'after'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 82:                        // 'as'
      consume(82);                  // 'as'
      break;
    case 83:                        // 'ascending'
      consume(83);                  // 'ascending'
      break;
    case 87:                        // 'before'
      consume(87);                  // 'before'
      break;
    case 90:                        // 'case'
      consume(90);                  // 'case'
      break;
    case 91:                        // 'cast'
      consume(91);                  // 'cast'
      break;
    case 92:                        // 'castable'
      consume(92);                  // 'castable'
      break;
    case 95:                        // 'collation'
      consume(95);                  // 'collation'
      break;
    case 101:                       // 'count'
      consume(101);                 // 'count'
      break;
    case 105:                       // 'default'
      consume(105);                 // 'default'
      break;
    case 109:                       // 'descending'
      consume(109);                 // 'descending'
      break;
    case 111:                       // 'div'
      consume(111);                 // 'div'
      break;
    case 115:                       // 'else'
      consume(115);                 // 'else'
      break;
    case 116:                       // 'empty'
      consume(116);                 // 'empty'
      break;
    case 119:                       // 'end'
      consume(119);                 // 'end'
      break;
    case 120:                       // 'eq'
      consume(120);                 // 'eq'
      break;
    case 122:                       // 'except'
      consume(122);                 // 'except'
      break;
    case 127:                       // 'for'
      consume(127);                 // 'for'
      break;
    case 129:                       // 'ge'
      consume(129);                 // 'ge'
      break;
    case 131:                       // 'group'
      consume(131);                 // 'group'
      break;
    case 133:                       // 'gt'
      consume(133);                 // 'gt'
      break;
    case 134:                       // 'idiv'
      consume(134);                 // 'idiv'
      break;
    case 141:                       // 'instance'
      consume(141);                 // 'instance'
      break;
    case 142:                       // 'intersect'
      consume(142);                 // 'intersect'
      break;
    case 143:                       // 'into'
      consume(143);                 // 'into'
      break;
    case 145:                       // 'is'
      consume(145);                 // 'is'
      break;
    case 150:                       // 'le'
      consume(150);                 // 'le'
      break;
    case 152:                       // 'let'
      consume(152);                 // 'let'
      break;
    case 153:                       // 'lt'
      consume(153);                 // 'lt'
      break;
    case 154:                       // 'map'
      consume(154);                 // 'map'
      break;
    case 156:                       // 'mod'
      consume(156);                 // 'mod'
      break;
    case 157:                       // 'modify'
      consume(157);                 // 'modify'
      break;
    case 161:                       // 'ne'
      consume(161);                 // 'ne'
      break;
    case 169:                       // 'only'
      consume(169);                 // 'only'
      break;
    case 171:                       // 'or'
      consume(171);                 // 'or'
      break;
    case 172:                       // 'order'
      consume(172);                 // 'order'
      break;
    case 186:                       // 'return'
      consume(186);                 // 'return'
      break;
    case 188:                       // 'satisfies'
      consume(188);                 // 'satisfies'
      break;
    case 196:                       // 'stable'
      consume(196);                 // 'stable'
      break;
    case 197:                       // 'start'
      consume(197);                 // 'start'
      break;
    case 204:                       // 'to'
      consume(204);                 // 'to'
      break;
    case 205:                       // 'transform'
      consume(205);                 // 'transform'
      break;
    case 206:                       // 'treat'
      consume(206);                 // 'treat'
      break;
    case 211:                       // 'union'
      consume(211);                 // 'union'
      break;
    case 220:                       // 'where'
      consume(220);                 // 'where'
      break;
    default:
      consume(222);                 // 'with'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 17:                        // NCName^Token
      consumeT(17);                 // NCName^Token
      break;
    case 76:                        // 'after'
      consumeT(76);                 // 'after'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 82:                        // 'as'
      consumeT(82);                 // 'as'
      break;
    case 83:                        // 'ascending'
      consumeT(83);                 // 'ascending'
      break;
    case 87:                        // 'before'
      consumeT(87);                 // 'before'
      break;
    case 90:                        // 'case'
      consumeT(90);                 // 'case'
      break;
    case 91:                        // 'cast'
      consumeT(91);                 // 'cast'
      break;
    case 92:                        // 'castable'
      consumeT(92);                 // 'castable'
      break;
    case 95:                        // 'collation'
      consumeT(95);                 // 'collation'
      break;
    case 101:                       // 'count'
      consumeT(101);                // 'count'
      break;
    case 105:                       // 'default'
      consumeT(105);                // 'default'
      break;
    case 109:                       // 'descending'
      consumeT(109);                // 'descending'
      break;
    case 111:                       // 'div'
      consumeT(111);                // 'div'
      break;
    case 115:                       // 'else'
      consumeT(115);                // 'else'
      break;
    case 116:                       // 'empty'
      consumeT(116);                // 'empty'
      break;
    case 119:                       // 'end'
      consumeT(119);                // 'end'
      break;
    case 120:                       // 'eq'
      consumeT(120);                // 'eq'
      break;
    case 122:                       // 'except'
      consumeT(122);                // 'except'
      break;
    case 127:                       // 'for'
      consumeT(127);                // 'for'
      break;
    case 129:                       // 'ge'
      consumeT(129);                // 'ge'
      break;
    case 131:                       // 'group'
      consumeT(131);                // 'group'
      break;
    case 133:                       // 'gt'
      consumeT(133);                // 'gt'
      break;
    case 134:                       // 'idiv'
      consumeT(134);                // 'idiv'
      break;
    case 141:                       // 'instance'
      consumeT(141);                // 'instance'
      break;
    case 142:                       // 'intersect'
      consumeT(142);                // 'intersect'
      break;
    case 143:                       // 'into'
      consumeT(143);                // 'into'
      break;
    case 145:                       // 'is'
      consumeT(145);                // 'is'
      break;
    case 150:                       // 'le'
      consumeT(150);                // 'le'
      break;
    case 152:                       // 'let'
      consumeT(152);                // 'let'
      break;
    case 153:                       // 'lt'
      consumeT(153);                // 'lt'
      break;
    case 154:                       // 'map'
      consumeT(154);                // 'map'
      break;
    case 156:                       // 'mod'
      consumeT(156);                // 'mod'
      break;
    case 157:                       // 'modify'
      consumeT(157);                // 'modify'
      break;
    case 161:                       // 'ne'
      consumeT(161);                // 'ne'
      break;
    case 169:                       // 'only'
      consumeT(169);                // 'only'
      break;
    case 171:                       // 'or'
      consumeT(171);                // 'or'
      break;
    case 172:                       // 'order'
      consumeT(172);                // 'order'
      break;
    case 186:                       // 'return'
      consumeT(186);                // 'return'
      break;
    case 188:                       // 'satisfies'
      consumeT(188);                // 'satisfies'
      break;
    case 196:                       // 'stable'
      consumeT(196);                // 'stable'
      break;
    case 197:                       // 'start'
      consumeT(197);                // 'start'
      break;
    case 204:                       // 'to'
      consumeT(204);                // 'to'
      break;
    case 205:                       // 'transform'
      consumeT(205);                // 'transform'
      break;
    case 206:                       // 'treat'
      consumeT(206);                // 'treat'
      break;
    case 211:                       // 'union'
      consumeT(211);                // 'union'
      break;
    case 220:                       // 'where'
      consumeT(220);                // 'where'
      break;
    default:
      consumeT(222);                // 'with'
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(ExistParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1; var l2W = l2;
    var b2W = b2; var e2W = e2;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;
    l3 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; l2 = l2W; if (l2 != 0) {
    b2 = b2W; e2 = e2W; }}
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 19)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 8) | l1;
  }

  function lookahead3W(tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = matchW(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 16;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var l3, b3, e3;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 0) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 0) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = ExistParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = ExistParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = ExistParser.MAP1[(c0 & 15) + ExistParser.MAP1[(c1 & 31) + ExistParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (ExistParser.MAP2[m] > c0) hi = m - 1;
          else if (ExistParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = ExistParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = ExistParser.TRANSITION[(i0 & 15) + ExistParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 8; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 8;
    }

    if (end > size) end = size;
    return (result & 255) - 1;
  }

}

ExistParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

ExistParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : ExistParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 232; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2300 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = ExistParser.EXPECTED[(i0 & 3) + ExistParser.EXPECTED[(i1 & 3) + ExistParser.EXPECTED[(i2 & 7) + ExistParser.EXPECTED[i2 >> 3]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(ExistParser.TOKEN[j]);
      }
    }
  }
  return set;
};

ExistParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new ExistParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new ExistParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

ExistParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

ExistParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

ExistParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 38, 38
];

ExistParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 70, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

ExistParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

ExistParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8267, 76, 77, 78, 79, 80, 81,
  /*  81 */ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
  /* 106 */ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  /* 127 */ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
  /* 148 */ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
  /* 169 */ 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 8376, 185, 8378, 8379, 8380, 189, 190,
  /* 190 */ 191, 8384, 8385, 8386, 8387, 8388, 197, 198, 8391, 8392, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
  /* 210 */ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 8419, 8420, 8421
];

ExistParser.TRANSITION =
[
  /*     0 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    15 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    30 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    45 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    60 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    75 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*    90 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   150 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   165 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   180 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   195 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   210 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   225 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   240 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   255 */ 18609, 18432, 18448, 18454, 18454, 18470, 18454, 18454, 18454, 18454, 18497, 18454, 18454, 18506, 18454,
  /*   270 */ 18481, 18522, 18609, 18609, 24964, 18609, 41334, 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783,
  /*   285 */ 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743,
  /*   300 */ 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797,
  /*   315 */ 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712,
  /*   330 */ 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098,
  /*   345 */ 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325,
  /*   360 */ 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931,
  /*   375 */ 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853,
  /*   390 */ 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609,
  /*   405 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   420 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   435 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   450 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   465 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   480 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   495 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   510 */ 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 20072, 20087, 20095,
  /*   525 */ 18609, 20119, 24331, 18609, 18609, 24964, 18609, 41334, 21633, 18609, 18609, 18547, 18558, 18609, 37684,
  /*   540 */ 19783, 18869, 19220, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275,
  /*   555 */ 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640,
  /*   570 */ 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124,
  /*   585 */ 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072,
  /*   600 */ 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605,
  /*   615 */ 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550,
  /*   630 */ 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837,
  /*   645 */ 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609,
  /*   660 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   675 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   690 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   705 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   720 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   735 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   750 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   765 */ 18609, 18609, 18609, 20016, 20155, 18609, 18609, 38314, 18609, 18609, 20625, 20626, 20176, 20625, 18609,
  /*   780 */ 18609, 19149, 20201, 27467, 18609, 18609, 24964, 18609, 41013, 18609, 18609, 18609, 18547, 18558, 18609,
  /*   795 */ 37684, 19783, 18869, 19309, 20243, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711, 18727,
  /*   810 */ 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592,
  /*   825 */ 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435,
  /*   840 */ 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967,
  /*   855 */ 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303,
  /*   870 */ 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926,
  /*   885 */ 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833,
  /*   900 */ 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609,
  /*   915 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   930 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   945 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   960 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   975 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*   990 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1005 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1020 */ 18609, 18609, 18609, 18609, 20272, 35538, 18609, 18609, 19590, 18609, 18609, 35533, 18609, 20038, 20311,
  /*  1035 */ 20955, 20325, 20332, 20349, 24331, 18609, 18609, 28589, 18609, 20659, 18609, 18609, 18609, 18547, 18558,
  /*  1050 */ 18609, 37684, 19783, 18869, 19309, 20384, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711,
  /*  1065 */ 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723,
  /*  1080 */ 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 20413, 19754, 19770, 18869, 18868, 19258,
  /*  1095 */ 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989,
  /*  1110 */ 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236,
  /*  1125 */ 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521,
  /*  1140 */ 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817,
  /*  1155 */ 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609,
  /*  1170 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1185 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1200 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1215 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1230 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1245 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1260 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1275 */ 18609, 18609, 18609, 18609, 18609, 20016, 29868, 18609, 18609, 26981, 20477, 18609, 34044, 33072, 20438,
  /*  1290 */ 18609, 33069, 29871, 20463, 20497, 24331, 18609, 18609, 24964, 18609, 41334, 18609, 18609, 18609, 18547,
  /*  1305 */ 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671,
  /*  1320 */ 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609,
  /*  1335 */ 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868,
  /*  1350 */ 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056,
  /*  1365 */ 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210,
  /*  1380 */ 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501,
  /*  1395 */ 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799,
  /*  1410 */ 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609,
  /*  1425 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1440 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1455 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1470 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1485 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1500 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1515 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1530 */ 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 20526, 18609, 18609, 21258,
  /*  1545 */ 20545, 30362, 18609, 18609, 20570, 20584, 24331, 18609, 18609, 24964, 18609, 41334, 18609, 18609, 18609,
  /*  1560 */ 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089,
  /*  1575 */ 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609,
  /*  1590 */ 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869,
  /*  1605 */ 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040,
  /*  1620 */ 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274,
  /*  1635 */ 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485,
  /*  1650 */ 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801,
  /*  1665 */ 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981,
  /*  1680 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1695 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1710 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1725 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1740 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1755 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1770 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609, 18609, 18609,
  /*  1800 */ 18609, 20642, 18609, 18609, 18609, 18609, 18531, 39616, 18609, 18609, 24964, 18609, 41334, 18609, 18609,
  /*  1815 */ 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 41064,
  /*  1830 */ 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19287, 18745, 18763, 18781, 37690, 18609, 38280,
  /*  1845 */ 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770,
  /*  1860 */ 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005,
  /*  1875 */ 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252,
  /*  1890 */ 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430,
  /*  1905 */ 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723,
  /*  1920 */ 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965,
  /*  1935 */ 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1950 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1965 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1980 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  1995 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2010 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2025 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 20675, 18609, 18609, 39816, 18609, 18609,
  /*  2055 */ 22542, 22543, 20696, 22542, 18609, 18609, 28598, 20721, 39528, 18609, 18609, 24964, 18609, 41334, 20757,
  /*  2070 */ 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 20775, 39269, 18608, 18627, 18609, 18651,
  /*  2085 */ 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609,
  /*  2100 */ 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754,
  /*  2115 */ 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961,
  /*  2130 */ 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236,
  /*  2145 */ 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385,
  /*  2160 */ 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679,
  /*  2175 */ 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695,
  /*  2190 */ 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2205 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2220 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2235 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2250 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2265 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2280 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2295 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 20810, 20879, 20879, 20844, 20875,
  /*  2310 */ 20879, 20819, 20880, 20835, 20860, 20909, 20896, 20918, 20934, 24331, 18609, 18609, 20971, 18609, 41334,
  /*  2325 */ 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 20993, 18609,
  /*  2340 */ 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690,
  /*  2355 */ 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738,
  /*  2370 */ 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983,
  /*  2385 */ 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210,
  /*  2400 */ 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366,
  /*  2415 */ 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645,
  /*  2430 */ 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940,
  /*  2445 */ 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2460 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2475 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2490 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2505 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2520 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2535 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2550 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 40518, 18609, 18609, 31960,
  /*  2565 */ 34237, 18609, 36121, 18609, 21017, 40525, 21042, 21050, 21074, 21109, 24331, 18609, 18609, 29538, 18609,
  /*  2580 */ 41334, 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 37477,
  /*  2595 */ 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781,
  /*  2610 */ 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860,
  /*  2625 */ 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050,
  /*  2640 */ 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181,
  /*  2655 */ 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401,
  /*  2670 */ 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622,
  /*  2685 */ 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900,
  /*  2700 */ 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2715 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2730 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2745 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2760 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2775 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2790 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2805 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 21782, 18609, 18609,
  /*  2820 */ 24748, 18609, 18609, 18609, 18609, 20038, 21139, 21152, 21160, 21176, 21190, 24331, 18609, 18609, 24964,
  /*  2835 */ 18609, 41334, 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608,
  /*  2850 */ 18627, 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19194, 18745, 18763,
  /*  2865 */ 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778,
  /*  2880 */ 18860, 19915, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947,
  /*  2895 */ 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165,
  /*  2910 */ 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382,
  /*  2925 */ 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629,
  /*  2940 */ 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663,
  /*  2955 */ 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2970 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  2985 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3000 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3015 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3030 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3045 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3060 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609,
  /*  3075 */ 18609, 24748, 18609, 18609, 18609, 18609, 20038, 21225, 21274, 21282, 38082, 21239, 24331, 18609, 18609,
  /*  3090 */ 24964, 18609, 41334, 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269,
  /*  3105 */ 18608, 18627, 18609, 21307, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745,
  /*  3120 */ 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762,
  /*  3135 */ 19778, 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913,
  /*  3150 */ 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204,
  /*  3165 */ 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363,
  /*  3180 */ 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606,
  /*  3195 */ 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657,
  /*  3210 */ 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3225 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3240 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3255 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3270 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3285 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3300 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3315 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 35724,
  /*  3330 */ 18609, 18609, 24748, 35201, 18609, 37896, 18609, 21330, 21345, 21372, 21380, 18609, 21356, 24331, 18609,
  /*  3345 */ 18609, 24964, 18609, 41334, 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579,
  /*  3360 */ 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861,
  /*  3375 */ 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746,
  /*  3390 */ 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885,
  /*  3405 */ 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113,
  /*  3420 */ 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347,
  /*  3435 */ 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571,
  /*  3450 */ 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658,
  /*  3465 */ 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3480 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3495 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3510 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3525 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3540 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3555 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3570 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 21404,
  /*  3585 */ 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 21428, 21458, 21466, 38923, 21442, 24331,
  /*  3600 */ 18609, 18609, 24964, 18609, 41334, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643,
  /*  3615 */ 21490, 18609, 18609, 31194, 21508, 21307, 21526, 18609, 25994, 33048, 36017, 34243, 32738, 32738, 32738,
  /*  3630 */ 39142, 28541, 28541, 28541, 40479, 18609, 18609, 18609, 18609, 34899, 35840, 41042, 26603, 33048, 26139,
  /*  3645 */ 32738, 32738, 32738, 32738, 27210, 28541, 28541, 28541, 32874, 31333, 21628, 18609, 18609, 18609, 30713,
  /*  3660 */ 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 29213, 18609, 18609, 18609,
  /*  3675 */ 33010, 25991, 33048, 27325, 21545, 32738, 20618, 28538, 21565, 28541, 26945, 18609, 18609, 24806, 25989,
  /*  3690 */ 39744, 32738, 27751, 28532, 28541, 37122, 26683, 18609, 24672, 25993, 27325, 36218, 28541, 38735, 18609,
  /*  3705 */ 30407, 30970, 38138, 36906, 27813, 33206, 34453, 28521, 32325, 33202, 21585, 21614, 36359, 21649, 21291,
  /*  3720 */ 27373, 28290, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3735 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3750 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3765 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3780 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3795 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3810 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3825 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3840 */ 20016, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 21001, 20038, 18609, 18609, 18609, 40395, 21674,
  /*  3855 */ 24331, 18609, 18609, 24964, 18609, 34662, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541,
  /*  3870 */ 29183, 21490, 18609, 18609, 24968, 18609, 18651, 18609, 18609, 25994, 33048, 36017, 34243, 32738, 32738,
  /*  3885 */ 32738, 39142, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 34899, 18609, 18609, 26603, 33048,
  /*  3900 */ 26139, 32738, 32738, 32738, 32738, 27210, 28541, 28541, 28541, 32874, 33206, 18609, 18609, 18609, 18609,
  /*  3915 */ 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881, 18609, 18609,
  /*  3930 */ 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609, 18609, 18609,
  /*  3945 */ 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007,
  /*  3960 */ 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372,
  /*  3975 */ 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  3990 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4005 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4020 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4035 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4050 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4065 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4080 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4095 */ 18609, 20016, 19018, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 21703, 40550, 21763, 40548,
  /*  4110 */ 21798, 24331, 18609, 18609, 24964, 18609, 41334, 37000, 37213, 18609, 18547, 18558, 18609, 37684, 19783,
  /*  4125 */ 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743,
  /*  4140 */ 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797,
  /*  4155 */ 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712,
  /*  4170 */ 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098,
  /*  4185 */ 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325,
  /*  4200 */ 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931,
  /*  4215 */ 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853,
  /*  4230 */ 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609,
  /*  4245 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4260 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4275 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4290 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4305 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4320 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4335 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4350 */ 18609, 18609, 20016, 21827, 18609, 18609, 24748, 18609, 18609, 18609, 21058, 20038, 18563, 18609, 18609,
  /*  4365 */ 39537, 21846, 35212, 18609, 18609, 24964, 18609, 36562, 18609, 18609, 18609, 26604, 36022, 18609, 30505,
  /*  4380 */ 21549, 28541, 29091, 21490, 18609, 18609, 24968, 18609, 21875, 18609, 18609, 25994, 33048, 36017, 34243,
  /*  4395 */ 32738, 32738, 32738, 39142, 28541, 28541, 28541, 32776, 21899, 18609, 18609, 18609, 40980, 26344, 18609,
  /*  4410 */ 26603, 33048, 26139, 32738, 32738, 32738, 32738, 27210, 28541, 28541, 28541, 32874, 21921, 18609, 18609,
  /*  4425 */ 18609, 28802, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 34698, 28540, 28541, 28541, 28541, 36979,
  /*  4440 */ 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 29805, 28538, 28541, 28541, 26945, 18609,
  /*  4455 */ 18609, 18609, 25989, 39744, 32738, 32738, 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218,
  /*  4470 */ 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569,
  /*  4485 */ 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609,
  /*  4500 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4515 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4530 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4545 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4560 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4575 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4590 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4605 */ 18609, 18609, 18609, 20016, 21981, 18609, 18609, 31444, 20160, 18609, 18609, 21961, 21946, 21978, 21997,
  /*  4620 */ 22012, 18609, 22045, 25201, 18609, 18609, 22081, 18609, 41334, 18609, 18609, 18609, 18547, 18558, 18609,
  /*  4635 */ 38175, 22916, 22449, 22256, 18579, 39269, 18608, 22106, 18609, 18651, 41064, 27089, 18671, 18711, 18727,
  /*  4650 */ 19694, 22130, 22313, 22170, 38183, 22455, 22186, 22947, 22227, 18609, 38280, 18609, 18609, 25723, 18592,
  /*  4665 */ 40640, 18797, 18832, 18844, 22202, 22509, 22911, 23076, 22217, 22425, 22243, 22449, 22272, 22480, 33435,
  /*  4680 */ 41124, 25712, 20295, 18609, 18885, 18913, 22299, 22870, 22355, 23052, 22519, 22386, 22572, 22415, 22441,
  /*  4695 */ 22471, 19098, 25752, 19140, 19113, 41204, 19165, 22496, 22143, 22370, 22535, 22559, 22585, 23142, 22612,
  /*  4710 */ 25605, 19325, 19445, 41264, 22647, 22881, 22663, 22678, 22961, 22707, 22723, 19485, 19501, 19521, 19534,
  /*  4725 */ 22339, 22399, 22754, 22738, 19571, 22789, 22327, 22154, 22805, 22820, 22855, 22897, 22932, 22977, 22993,
  /*  4740 */ 23009, 23044, 22283, 23068, 37043, 37030, 23092, 19707, 23127, 22596, 22691, 23158, 18609, 18609, 18609,
  /*  4755 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4770 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4800 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4815 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4830 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4845 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  4860 */ 18609, 18609, 18609, 18609, 20016, 39877, 18609, 18609, 24748, 23214, 18609, 18609, 18609, 23193, 23205,
  /*  4875 */ 23230, 23238, 18609, 23262, 24331, 18609, 18609, 24964, 18609, 41334, 18609, 18609, 18609, 18547, 18558,
  /*  4890 */ 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671, 18711,
  /*  4905 */ 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609, 19124,
  /*  4920 */ 23297, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868, 23338,
  /*  4935 */ 33435, 41124, 25712, 40727, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056, 18989,
  /*  4950 */ 18967, 23354, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 23389, 23438, 19210, 19236,
  /*  4965 */ 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 23467, 19366, 19385, 19430, 19485, 19501, 19521,
  /*  4980 */ 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799, 19817,
  /*  4995 */ 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609, 18609,
  /*  5010 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5025 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5055 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5070 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5085 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5100 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5115 */ 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 38777,
  /*  5130 */ 23496, 23510, 23518, 33817, 23542, 24331, 18609, 18609, 24964, 18609, 41334, 18609, 18609, 23578, 18547,
  /*  5145 */ 18558, 18609, 37684, 19783, 18869, 19949, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089, 18671,
  /*  5160 */ 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609, 18609,
  /*  5175 */ 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869, 18868,
  /*  5190 */ 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040, 19056,
  /*  5205 */ 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274, 19210,
  /*  5220 */ 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485, 19501,
  /*  5235 */ 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801, 19799,
  /*  5250 */ 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981, 18609,
  /*  5265 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5280 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5295 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5310 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5325 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5340 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5355 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5370 */ 18609, 18609, 18609, 18609, 18609, 18609, 23595, 18609, 23608, 18609, 24748, 18609, 18609, 18609, 18609,
  /*  5385 */ 20038, 23625, 23640, 23648, 18609, 23672, 38230, 18609, 18609, 24964, 18609, 41334, 18609, 35490, 23721,
  /*  5400 */ 18547, 18558, 18609, 37684, 19783, 18869, 20422, 18579, 39269, 18608, 18627, 18609, 18651, 41064, 27089,
  /*  5415 */ 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280, 18609,
  /*  5430 */ 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770, 18869,
  /*  5445 */ 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005, 19040,
  /*  5460 */ 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252, 19274,
  /*  5475 */ 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430, 19485,
  /*  5490 */ 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723, 19801,
  /*  5505 */ 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965, 19981,
  /*  5520 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5535 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5550 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5565 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5580 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5595 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5610 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5625 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 23740, 25266, 18609, 18609, 24748, 18609, 18609, 18609,
  /*  5640 */ 18609, 20038, 23775, 23803, 23811, 18609, 23787, 26514, 18609, 18609, 24964, 18609, 41334, 18609, 18609,
  /*  5655 */ 23827, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 23847, 39269, 18608, 18627, 18609, 18651, 41064,
  /*  5670 */ 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609, 38280,
  /*  5685 */ 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770,
  /*  5700 */ 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005,
  /*  5715 */ 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252,
  /*  5730 */ 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430,
  /*  5745 */ 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723,
  /*  5760 */ 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965,
  /*  5775 */ 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5790 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5805 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5820 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5835 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5850 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5865 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  5880 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 23876, 18609, 18609, 18609, 24748, 25341, 18609,
  /*  5895 */ 18609, 18609, 20038, 18609, 23892, 18609, 34417, 23915, 24331, 18609, 18609, 24964, 18609, 41334, 37083,
  /*  5910 */ 18609, 18609, 18547, 18558, 18609, 38496, 24520, 24218, 24697, 18579, 39269, 18608, 18627, 18609, 18651,
  /*  5925 */ 41064, 27089, 18671, 18711, 18727, 21718, 23950, 23968, 23986, 24598, 23952, 23970, 23988, 38502, 18609,
  /*  5940 */ 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18897, 24483, 24499, 24515, 24209, 24475, 24491,
  /*  5955 */ 24507, 24218, 24217, 24180, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 24004, 21741, 24041, 24110,
  /*  5970 */ 24306, 21731, 21747, 24047, 24116, 24063, 19098, 25752, 19140, 19113, 41204, 19165, 24097, 24132, 24158,
  /*  5985 */ 24174, 24196, 24132, 24158, 24234, 25605, 19325, 19445, 41264, 24258, 24441, 24274, 24293, 24444, 24277,
  /*  6000 */ 24356, 19485, 19501, 19521, 18811, 24391, 18816, 24396, 22738, 19571, 24412, 24025, 24018, 24428, 24652,
  /*  6015 */ 24460, 24538, 24536, 24554, 24570, 24574, 24590, 24142, 24614, 24621, 37350, 37356, 24637, 24688, 24242,
  /*  6030 */ 24713, 24729, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6045 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6060 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6075 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6090 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609,
  /*  6150 */ 18609, 18609, 18609, 20038, 18609, 18609, 18609, 37945, 24764, 24331, 18609, 18609, 24964, 18609, 41334,
  /*  6165 */ 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609,
  /*  6180 */ 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690,
  /*  6195 */ 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738,
  /*  6210 */ 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983,
  /*  6225 */ 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210,
  /*  6240 */ 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366,
  /*  6255 */ 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645,
  /*  6270 */ 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940,
  /*  6285 */ 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6300 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6315 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6330 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6345 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6360 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6375 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6390 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748,
  /*  6405 */ 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609, 24964, 18609,
  /*  6420 */ 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968,
  /*  6435 */ 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541,
  /*  6450 */ 32776, 18609, 18609, 18609, 18609, 18609, 26344, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738,
  /*  6465 */ 29122, 28541, 28541, 28541, 32874, 28674, 18609, 18609, 18609, 28802, 18609, 25994, 33048, 26374, 32738,
  /*  6480 */ 32738, 32738, 26707, 28540, 28541, 28541, 28541, 36979, 18609, 18609, 18609, 25440, 25991, 33048, 27325,
  /*  6495 */ 32738, 32738, 33791, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 37749,
  /*  6510 */ 28541, 28541, 39014, 18609, 37062, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733,
  /*  6525 */ 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729,
  /*  6540 */ 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6555 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6570 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6585 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6600 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6615 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6630 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6645 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609,
  /*  6660 */ 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609, 24964,
  /*  6675 */ 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609,
  /*  6690 */ 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541,
  /*  6705 */ 28541, 32776, 18609, 18609, 18609, 18609, 18609, 26344, 18609, 26603, 33048, 26139, 32738, 32738, 32738,
  /*  6720 */ 32738, 29122, 28541, 28541, 28541, 32874, 28674, 18609, 18609, 18609, 28802, 18609, 25994, 33048, 26374,
  /*  6735 */ 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 36979, 18609, 18609, 18609, 18609, 25991, 33048,
  /*  6750 */ 27325, 32738, 32738, 33791, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738,
  /*  6765 */ 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738,
  /*  6780 */ 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375,
  /*  6795 */ 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6810 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6825 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6840 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6855 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6870 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6885 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  6900 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609,
  /*  6915 */ 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609,
  /*  6930 */ 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609,
  /*  6945 */ 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541,
  /*  6960 */ 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 24793, 18609, 26603, 33048, 26139, 32738, 32738,
  /*  6975 */ 32738, 32738, 29122, 28541, 28541, 28541, 32874, 28674, 18609, 18609, 18609, 28802, 18609, 25994, 33048,
  /*  6990 */ 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 36979, 18609, 18609, 18609, 18609, 25991,
  /*  7005 */ 33048, 27325, 32738, 32738, 33791, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738,
  /*  7020 */ 32738, 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163,
  /*  7035 */ 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636,
  /*  7050 */ 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7065 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7080 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7095 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7110 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7125 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7140 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7155 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609,
  /*  7170 */ 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609,
  /*  7185 */ 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490,
  /*  7200 */ 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833,
  /*  7215 */ 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 26344, 18609, 26603, 33048, 26139, 32738,
  /*  7230 */ 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 28674, 18609, 18609, 18609, 28802, 23106, 25994,
  /*  7245 */ 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 36979, 18609, 18609, 18609, 18609,
  /*  7260 */ 25991, 33048, 27325, 32738, 32738, 33791, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744,
  /*  7275 */ 32738, 32738, 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609,
  /*  7290 */ 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373,
  /*  7305 */ 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7320 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7335 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7350 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7365 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7380 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7395 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7410 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870,
  /*  7425 */ 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327, 20047,
  /*  7440 */ 18609, 18609, 24964, 18609, 22020, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643,
  /*  7455 */ 21490, 18609, 18609, 24968, 18609, 22025, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738,
  /*  7470 */ 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 26344, 18609, 26603, 33048, 26139,
  /*  7485 */ 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 28674, 18609, 18609, 18609, 28802, 18609,
  /*  7500 */ 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 36979, 18609, 18609, 18609,
  /*  7515 */ 18609, 25991, 33048, 27325, 32738, 32738, 33791, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989,
  /*  7530 */ 39744, 32738, 32738, 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609,
  /*  7545 */ 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291,
  /*  7560 */ 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7575 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7590 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7605 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7620 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7635 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7650 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7665 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7680 */ 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327,
  /*  7695 */ 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541,
  /*  7710 */ 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738,
  /*  7725 */ 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 26603, 33048,
  /*  7740 */ 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206, 18609, 18609, 18609, 18609,
  /*  7755 */ 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881, 18609, 18609,
  /*  7770 */ 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609, 18609, 18609,
  /*  7785 */ 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007,
  /*  7800 */ 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372,
  /*  7815 */ 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7830 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7845 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7860 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7875 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7890 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7905 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7920 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  7935 */ 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731,
  /*  7950 */ 39327, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549,
  /*  7965 */ 28541, 27244, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738,
  /*  7980 */ 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 26603,
  /*  7995 */ 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206, 18609, 18609, 18609,
  /*  8010 */ 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881, 18609,
  /*  8025 */ 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609, 18609,
  /*  8040 */ 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541,
  /*  8055 */ 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290,
  /*  8070 */ 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609,
  /*  8085 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8100 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8115 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8130 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8145 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8160 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8175 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8190 */ 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127,
  /*  8205 */ 26731, 26263, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505,
  /*  8220 */ 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544,
  /*  8235 */ 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8250 */ 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206, 18609, 18609,
  /*  8265 */ 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881,
  /*  8280 */ 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609,
  /*  8295 */ 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218,
  /*  8310 */ 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569,
  /*  8325 */ 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609,
  /*  8340 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8355 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8370 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8385 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8400 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8415 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8430 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8445 */ 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 24828, 26805, 18609,
  /*  8460 */ 25127, 26731, 39327, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609,
  /*  8475 */ 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 32061, 18609, 25994, 33048, 36017,
  /*  8490 */ 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8505 */ 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206, 18609,
  /*  8520 */ 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541,
  /*  8535 */ 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945,
  /*  8550 */ 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325,
  /*  8565 */ 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647,
  /*  8580 */ 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609,
  /*  8595 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8610 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8625 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8640 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8655 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8670 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8685 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8700 */ 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805,
  /*  8715 */ 18609, 25237, 24878, 24892, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022,
  /*  8730 */ 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048,
  /*  8745 */ 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609,
  /*  8760 */ 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206,
  /*  8775 */ 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541,
  /*  8790 */ 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541,
  /*  8805 */ 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993,
  /*  8820 */ 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202,
  /*  8835 */ 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609,
  /*  8850 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8865 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8880 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8895 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8910 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8925 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8940 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  8955 */ 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038,
  /*  8970 */ 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604,
  /*  8985 */ 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994,
  /*  9000 */ 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609,
  /*  9015 */ 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874,
  /*  9030 */ 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541,
  /*  9045 */ 28541, 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541,
  /*  9060 */ 28541, 26945, 18609, 18609, 33836, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609,
  /*  9075 */ 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188,
  /*  9090 */ 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609,
  /*  9105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9150 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9165 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9180 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9195 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9210 */ 18609, 18609, 18609, 18609, 18609, 18609, 24927, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609,
  /*  9225 */ 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609,
  /*  9240 */ 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609,
  /*  9255 */ 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609,
  /*  9270 */ 18609, 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541,
  /*  9285 */ 32874, 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540,
  /*  9300 */ 28541, 28541, 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538,
  /*  9315 */ 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609,
  /*  9330 */ 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738,
  /*  9345 */ 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390,
  /*  9360 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9375 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9390 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9405 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9420 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9435 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9450 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9465 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609, 18609, 18609,
  /*  9480 */ 18609, 20038, 24949, 27890, 27898, 27890, 24986, 24331, 18609, 18609, 24964, 18609, 41334, 18609, 18609,
  /*  9495 */ 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651, 25015,
  /*  9510 */ 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 19884, 18609, 38280,
  /*  9525 */ 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770,
  /*  9540 */ 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005,
  /*  9555 */ 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252,
  /*  9570 */ 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430,
  /*  9585 */ 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 25037, 19606, 19629, 19622, 19645, 19679, 19723,
  /*  9600 */ 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965,
  /*  9615 */ 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9630 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9645 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9660 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9675 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9690 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9705 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9720 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609, 18609,
  /*  9735 */ 18609, 18609, 20038, 18609, 18609, 18609, 18609, 18531, 24331, 18609, 18609, 24964, 18609, 41334, 18609,
  /*  9750 */ 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651,
  /*  9765 */ 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609,
  /*  9780 */ 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754,
  /*  9795 */ 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961,
  /*  9810 */ 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236,
  /*  9825 */ 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385,
  /*  9840 */ 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679,
  /*  9855 */ 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695,
  /*  9870 */ 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9885 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9900 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9915 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9930 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9945 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9960 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /*  9975 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25065, 25100, 18609, 18609, 24748, 39855,
  /*  9990 */ 18609, 18609, 18609, 25118, 39860, 25143, 25151, 37166, 25175, 25228, 18609, 18609, 24964, 18609, 41334,
  /* 10005 */ 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 25253, 39269, 18608, 18627, 18609,
  /* 10020 */ 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690,
  /* 10035 */ 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738,
  /* 10050 */ 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983,
  /* 10065 */ 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210,
  /* 10080 */ 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366,
  /* 10095 */ 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645,
  /* 10110 */ 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940,
  /* 10125 */ 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10140 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10155 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10170 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10185 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10200 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10215 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10230 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25288, 25310, 18609, 18609, 24748,
  /* 10245 */ 18609, 18609, 18609, 18609, 20038, 18609, 18609, 18609, 31108, 25328, 25363, 18609, 18609, 24964, 18609,
  /* 10260 */ 41334, 25388, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19924, 25410, 39269, 18608, 18627,
  /* 10275 */ 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781,
  /* 10290 */ 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860,
  /* 10305 */ 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050,
  /* 10320 */ 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181,
  /* 10335 */ 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401,
  /* 10350 */ 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622,
  /* 10365 */ 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900,
  /* 10380 */ 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10395 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10410 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10425 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10440 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10455 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10470 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10485 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 25520, 18609,
  /* 10500 */ 24748, 20481, 25456, 20479, 25475, 25506, 25538, 25553, 25562, 25578, 25592, 20185, 25621, 25639, 28884,
  /* 10515 */ 18609, 37719, 25655, 25699, 37925, 35871, 25739, 33863, 25776, 25792, 25825, 25855, 25892, 18609, 29021,
  /* 10530 */ 25916, 18609, 18609, 25968, 25985, 25994, 33048, 26010, 21687, 32738, 32738, 35359, 26045, 28541, 28541,
  /* 10545 */ 29128, 30090, 18609, 26084, 26103, 40975, 18609, 26344, 18609, 26127, 33048, 26155, 28112, 32738, 36257,
  /* 10560 */ 32532, 26191, 26213, 28541, 26233, 26249, 28674, 26292, 26310, 18609, 26330, 18609, 26361, 36011, 26397,
  /* 10575 */ 26413, 26433, 26454, 26707, 28922, 34080, 35412, 28541, 25839, 23928, 23417, 32700, 23562, 25991, 33048,
  /* 10590 */ 27325, 32738, 34327, 26475, 28538, 28541, 28045, 26557, 26585, 24073, 18609, 25989, 39744, 32738, 26620,
  /* 10605 */ 37749, 28541, 26640, 39014, 26657, 18609, 25993, 30134, 36537, 32867, 26676, 18609, 18609, 36163, 32738,
  /* 10620 */ 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 26217, 26699, 27372, 26723, 27373, 26749, 38202,
  /* 10635 */ 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10650 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10665 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10680 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10695 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10710 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10725 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10740 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 26773,
  /* 10755 */ 18609, 24748, 18609, 22835, 18609, 18609, 26794, 19469, 18609, 33715, 26830, 26844, 20047, 18609, 18609,
  /* 10770 */ 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 31014, 21490, 18609,
  /* 10785 */ 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541,
  /* 10800 */ 28541, 28541, 32776, 18609, 18609, 18609, 25969, 18609, 26879, 26880, 26603, 40675, 26139, 32738, 32738,
  /* 10815 */ 32738, 26896, 29122, 28541, 28541, 30638, 32874, 28674, 18609, 18609, 18609, 28802, 18609, 25994, 33048,
  /* 10830 */ 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 36979, 18609, 18609, 18609, 26916, 25930,
  /* 10845 */ 33048, 20609, 32738, 32738, 33791, 26936, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738,
  /* 10860 */ 32738, 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163,
  /* 10875 */ 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 30903, 26961, 33636,
  /* 10890 */ 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10905 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10920 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10935 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10950 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10965 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10980 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 10995 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609,
  /* 11010 */ 19458, 18609, 24748, 18609, 26857, 18609, 23755, 26997, 27012, 27027, 27036, 27052, 27066, 20047, 18609,
  /* 11025 */ 36027, 24964, 26345, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 33377, 29400, 29964, 21490,
  /* 11040 */ 27105, 18609, 27125, 26111, 18609, 21811, 29441, 28683, 27159, 36017, 27179, 27195, 32738, 32738, 34187,
  /* 11055 */ 27231, 28541, 28541, 32776, 27653, 18609, 26660, 18609, 24741, 26344, 41233, 28712, 33048, 27980, 36925,
  /* 11070 */ 30617, 37878, 32738, 29122, 29606, 27260, 27278, 32874, 28674, 18609, 18609, 18609, 23281, 18609, 25994,
  /* 11085 */ 33048, 26374, 32738, 32738, 26438, 26707, 28540, 28541, 28541, 29640, 27781, 18609, 27298, 18609, 18609,
  /* 11100 */ 25991, 33048, 27325, 32738, 34106, 33791, 28538, 28541, 39192, 26945, 18609, 18609, 18609, 35020, 27316,
  /* 11115 */ 36200, 32738, 37749, 39040, 28541, 35394, 18609, 18609, 28453, 27325, 27344, 28132, 39007, 18609, 18609,
  /* 11130 */ 36163, 32738, 27368, 32180, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 33181, 27389, 27416,
  /* 11145 */ 33636, 37375, 26729, 39500, 29249, 31174, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11160 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11175 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11190 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11205 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11220 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11235 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11250 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870,
  /* 11265 */ 18609, 20680, 18609, 24748, 18609, 26974, 23899, 24371, 27440, 27492, 27507, 27518, 27534, 27548, 20047,
  /* 11280 */ 18609, 18609, 24964, 18609, 18609, 18609, 18609, 23526, 34266, 36022, 27577, 30811, 21549, 39000, 28643,
  /* 11295 */ 21490, 20741, 27593, 27628, 27649, 18609, 18609, 40072, 27669, 27694, 27730, 24812, 28023, 33125, 27746,
  /* 11310 */ 27767, 34362, 35743, 27810, 27829, 18609, 18609, 20368, 28228, 18609, 26344, 18609, 26603, 33048, 26139,
  /* 11325 */ 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 28869, 18609, 18609, 27865, 28802, 18609,
  /* 11340 */ 25994, 33048, 28725, 32738, 32738, 32738, 27922, 27840, 28541, 28541, 36864, 36979, 18609, 18609, 18609,
  /* 11355 */ 27951, 27968, 33048, 27996, 32738, 28018, 33791, 28039, 28541, 28061, 26945, 31748, 20227, 18609, 26595,
  /* 11370 */ 28082, 34770, 28107, 37749, 28128, 28148, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609,
  /* 11385 */ 28166, 36163, 32738, 28183, 33031, 33206, 34453, 32738, 28188, 28205, 38647, 21569, 21412, 37403, 29298,
  /* 11400 */ 39492, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11415 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11430 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11445 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11460 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11475 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11490 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11505 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11520 */ 25870, 18609, 18611, 28226, 24748, 20529, 20447, 18610, 28244, 28263, 28306, 28321, 28330, 28346, 28360,
  /* 11535 */ 20047, 33706, 35819, 25490, 28389, 22020, 22114, 28443, 40342, 28469, 28558, 28574, 28614, 28630, 28659,
  /* 11550 */ 34391, 21490, 37842, 25876, 28699, 28741, 28780, 28800, 18609, 40255, 33048, 29686, 21859, 34777, 35256,
  /* 11565 */ 29500, 28818, 36080, 39200, 28854, 28911, 39063, 28938, 40872, 28954, 28999, 26344, 25049, 21123, 29037,
  /* 11580 */ 35885, 29065, 29107, 31258, 29144, 29170, 29199, 29591, 29238, 29273, 28674, 29289, 23373, 30013, 40946,
  /* 11595 */ 29314, 33142, 33048, 29330, 29353, 32738, 29378, 36693, 37757, 29397, 31715, 40657, 36979, 19082, 29416,
  /* 11610 */ 29433, 31953, 39020, 40131, 34585, 29457, 29488, 29523, 29560, 29576, 29628, 29663, 33161, 32645, 29730,
  /* 11625 */ 23028, 29750, 29775, 29795, 37749, 29821, 38728, 39014, 37452, 29858, 24999, 38110, 29887, 29951, 29980,
  /* 11640 */ 30009, 35056, 36163, 30029, 27352, 30065, 30106, 30122, 27328, 28188, 30162, 30200, 30225, 31899, 30250,
  /* 11655 */ 26029, 30297, 32286, 30352, 26729, 30234, 30378, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11670 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11685 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11700 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11715 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11730 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11745 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11760 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11775 */ 18609, 25870, 18609, 18609, 18609, 24748, 39630, 39625, 18609, 27935, 30423, 30438, 30453, 30462, 30478,
  /* 11790 */ 30492, 20047, 18609, 30527, 24964, 18609, 18609, 18609, 18609, 18609, 30547, 36022, 18609, 34842, 38651,
  /* 11805 */ 40103, 30568, 21490, 30589, 18609, 30584, 18609, 18609, 41241, 30592, 22090, 33048, 36017, 40433, 30610,
  /* 11820 */ 32738, 32738, 38833, 30633, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 26344, 18609, 26603,
  /* 11835 */ 33048, 26139, 32738, 32738, 32738, 30654, 29122, 28541, 28541, 35472, 32874, 28674, 18609, 18609, 30672,
  /* 11850 */ 28802, 18609, 25994, 33282, 26374, 32738, 37320, 32738, 26707, 28540, 28541, 30689, 28541, 36979, 18609,
  /* 11865 */ 29842, 18609, 18609, 25991, 26541, 27325, 32738, 30049, 33791, 28538, 28541, 35435, 26945, 18609, 18609,
  /* 11880 */ 18609, 25989, 39744, 32738, 32738, 37749, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541,
  /* 11895 */ 39007, 30710, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290,
  /* 11910 */ 27372, 21291, 27373, 33636, 37375, 26729, 34879, 29249, 39996, 30390, 18609, 18609, 18609, 18609, 18609,
  /* 11925 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11940 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11955 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11970 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 11985 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12000 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12015 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12030 */ 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 19505, 18609, 20362, 30729, 30744, 30759, 30768,
  /* 12045 */ 30784, 30798, 20047, 18609, 18609, 24964, 18609, 24970, 18609, 18609, 18609, 26604, 36022, 18609, 30505,
  /* 12060 */ 21549, 28541, 28643, 30827, 18609, 18609, 24968, 18609, 18609, 19583, 18609, 25994, 33048, 36017, 29544,
  /* 12075 */ 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12090 */ 26603, 33048, 26139, 32738, 32738, 32738, 32738, 30854, 28541, 28541, 28541, 32874, 33206, 18609, 18609,
  /* 12105 */ 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881,
  /* 12120 */ 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609,
  /* 12135 */ 18609, 30876, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 30894, 30919, 30967, 27325, 36218,
  /* 12150 */ 28541, 39007, 18609, 31384, 30986, 31030, 33661, 31088, 33206, 36506, 31124, 35981, 33202, 38647, 21569,
  /* 12165 */ 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 26068, 31152, 30390, 18609, 18609, 18609, 18609,
  /* 12180 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12195 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12210 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12225 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12240 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12255 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12270 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12285 */ 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609,
  /* 12300 */ 25127, 26731, 39327, 20047, 18609, 21830, 31190, 18609, 18609, 25394, 25391, 18609, 26604, 27709, 18609,
  /* 12315 */ 34160, 26381, 31210, 31228, 21490, 18609, 25900, 31652, 24933, 18609, 18609, 18609, 25994, 33048, 36017,
  /* 12330 */ 29544, 32738, 32738, 29507, 38833, 28541, 28541, 31064, 32776, 18609, 18609, 40077, 18609, 18609, 18609,
  /* 12345 */ 18609, 26603, 33048, 31244, 32738, 32738, 32738, 33512, 29122, 28541, 28541, 28541, 38060, 33206, 31292,
  /* 12360 */ 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541,
  /* 12375 */ 32881, 18609, 18609, 31309, 18609, 25991, 33048, 27325, 32738, 29779, 20618, 28538, 28541, 27282, 26945,
  /* 12390 */ 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325,
  /* 12405 */ 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 34062, 28188, 31329, 38647,
  /* 12420 */ 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609,
  /* 12435 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12450 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12465 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12480 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12495 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12510 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12525 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12540 */ 18609, 18609, 18609, 18609, 25870, 18609, 18609, 31349, 24748, 18609, 31370, 20022, 31425, 31460, 31562,
  /* 12555 */ 31578, 31589, 31605, 31619, 20047, 18609, 18609, 31648, 18609, 18609, 21962, 31668, 21087, 33934, 28484,
  /* 12570 */ 25312, 33758, 38145, 31710, 31731, 21490, 18609, 18609, 24968, 38307, 31747, 18609, 26778, 22058, 41157,
  /* 12585 */ 27678, 29544, 38681, 35250, 29381, 31764, 31792, 31811, 28066, 31831, 18609, 31885, 27300, 41289, 39656,
  /* 12600 */ 30594, 31923, 26603, 33942, 37622, 32738, 32738, 36956, 26624, 29122, 28541, 33455, 31861, 32807, 33206,
  /* 12615 */ 18609, 18609, 22768, 31941, 18609, 25994, 33048, 28416, 32738, 32738, 32738, 26707, 25804, 28541, 28541,
  /* 12630 */ 28541, 32881, 29417, 31976, 32082, 27714, 25991, 33048, 27325, 34742, 32738, 20618, 28538, 35642, 28541,
  /* 12645 */ 39247, 18609, 39809, 26020, 26276, 33903, 32113, 32366, 32159, 28838, 32196, 40796, 18609, 34024, 28403,
  /* 12660 */ 36518, 39785, 34355, 32249, 36827, 36611, 36163, 32738, 26733, 27813, 29927, 34453, 32738, 28188, 33202,
  /* 12675 */ 38647, 21569, 21388, 32272, 21291, 27373, 33636, 37375, 32302, 39500, 29249, 31163, 37440, 18609, 18609,
  /* 12690 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12705 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12720 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12735 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12750 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12765 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12780 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12795 */ 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038,
  /* 12810 */ 26805, 18609, 25127, 32318, 32341, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604,
  /* 12825 */ 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994,
  /* 12840 */ 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 39588, 18609, 18609, 18609, 18609,
  /* 12855 */ 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874,
  /* 12870 */ 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541,
  /* 12885 */ 28541, 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541,
  /* 12900 */ 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609,
  /* 12915 */ 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188,
  /* 12930 */ 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609,
  /* 12945 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12960 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12975 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 12990 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13005 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13020 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13035 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13050 */ 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609,
  /* 13065 */ 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609, 24964, 18609, 20788, 18609, 18609, 18609,
  /* 13080 */ 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609,
  /* 13095 */ 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609,
  /* 13110 */ 18609, 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541,
  /* 13125 */ 32874, 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 31268, 32738, 26707, 28540,
  /* 13140 */ 28541, 32401, 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538,
  /* 13155 */ 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609,
  /* 13170 */ 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738,
  /* 13185 */ 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390,
  /* 13200 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13215 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13230 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13245 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13260 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13275 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13290 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13305 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 22029, 18609,
  /* 13320 */ 20397, 32419, 32434, 32449, 32459, 32475, 32489, 20047, 37594, 18609, 24964, 41047, 32548, 18609, 21905,
  /* 13335 */ 18609, 33265, 32721, 21883, 31397, 21549, 32609, 27244, 32629, 21203, 24375, 32661, 32066, 18609, 32641,
  /* 13350 */ 32697, 35221, 33048, 32716, 36797, 30042, 32737, 32755, 38716, 32792, 28541, 32830, 32855, 26087, 18609,
  /* 13365 */ 32897, 18609, 32915, 18609, 18609, 29676, 33048, 29049, 31044, 39134, 40281, 32738, 32936, 32973, 28541,
  /* 13380 */ 32174, 32874, 33206, 39633, 23367, 18609, 32989, 33007, 25994, 38943, 26374, 32738, 34813, 38554, 26707,
  /* 13395 */ 28540, 28541, 32951, 33026, 32881, 31437, 18609, 18609, 18609, 25991, 33047, 28091, 32738, 32738, 20618,
  /* 13410 */ 37235, 28541, 28541, 26945, 33065, 18609, 32920, 33088, 39744, 33124, 32738, 27400, 28541, 28541, 39014,
  /* 13425 */ 27135, 18609, 33141, 27325, 36218, 28541, 39007, 18609, 33158, 36163, 32738, 33177, 38015, 33206, 34453,
  /* 13440 */ 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 36482, 33197, 33223, 39500, 34627, 31163,
  /* 13455 */ 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13470 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13485 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13500 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13515 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13530 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13545 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13560 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 20132, 24748, 25760, 20759,
  /* 13575 */ 18609, 18609, 33250, 33298, 33313, 33322, 33338, 33352, 20047, 21312, 18609, 24964, 21510, 18609, 18609,
  /* 13590 */ 21313, 18609, 33894, 26814, 21314, 31632, 21549, 33393, 28643, 21490, 23579, 18609, 24968, 40938, 24081,
  /* 13605 */ 18609, 18609, 25994, 33048, 36017, 29544, 30945, 32738, 33416, 38833, 33451, 31212, 33400, 32776, 33471,
  /* 13620 */ 40385, 18609, 18609, 18609, 18609, 18609, 26603, 33048, 26139, 38825, 33494, 33511, 32738, 29472, 31072,
  /* 13635 */ 31869, 28541, 32874, 33206, 23275, 33528, 18609, 23023, 23685, 25994, 33048, 26374, 34179, 32738, 33551,
  /* 13650 */ 31907, 28540, 33575, 36237, 33593, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738,
  /* 13665 */ 20618, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541,
  /* 13680 */ 32256, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 30273, 18609, 20510, 32738, 33611, 39437, 33206,
  /* 13695 */ 34453, 32738, 28188, 27424, 40758, 32957, 33632, 27372, 21291, 27373, 33636, 37375, 26729, 33652, 29249,
  /* 13710 */ 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13725 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13740 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13755 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13770 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13800 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13815 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 33679, 40803, 18609,
  /* 13830 */ 21529, 33677, 20705, 33695, 30312, 30327, 30336, 33731, 33745, 20047, 26314, 18609, 25670, 33807, 33833,
  /* 13845 */ 23724, 33852, 33879, 25683, 33919, 33958, 34998, 33974, 33990, 34006, 21490, 34022, 31546, 34040, 18609,
  /* 13860 */ 23111, 38800, 18609, 25994, 33048, 40262, 27906, 32738, 34060, 32585, 38833, 28189, 28541, 35465, 32776,
  /* 13875 */ 26863, 18609, 38242, 18609, 18609, 22625, 18609, 36706, 33049, 26139, 29337, 32738, 32738, 32378, 29122,
  /* 13890 */ 34078, 28541, 33595, 40110, 33206, 18609, 18609, 39724, 18609, 30281, 28966, 33048, 34096, 32738, 32738,
  /* 13905 */ 34130, 34147, 34203, 28541, 29612, 25809, 32881, 23403, 34223, 20000, 18609, 34259, 34282, 39109, 34308,
  /* 13920 */ 23705, 20618, 34343, 34378, 37815, 26945, 31354, 34407, 34433, 34449, 39744, 37783, 32738, 28532, 34469,
  /* 13935 */ 28541, 39014, 24905, 32673, 34492, 34525, 34541, 30860, 34557, 18609, 18609, 34573, 34601, 26757, 34643,
  /* 13950 */ 33206, 34678, 37872, 35163, 33202, 34714, 36055, 34758, 34870, 34793, 34829, 33636, 37375, 26729, 37412,
  /* 13965 */ 34858, 31163, 39797, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13980 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 13995 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14010 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14025 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14055 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14070 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18635, 24748,
  /* 14085 */ 18609, 33478, 34895, 24667, 34915, 34930, 34945, 34954, 34970, 34985, 24340, 35014, 35036, 27880, 37587,
  /* 14100 */ 35054, 35072, 23246, 25347, 35101, 35137, 35187, 35237, 35272, 35301, 35285, 21490, 18609, 18609, 24968,
  /* 14115 */ 38421, 25522, 25432, 18609, 25994, 26534, 36017, 29544, 32738, 35355, 36530, 35375, 28541, 35410, 35428,
  /* 14130 */ 35451, 18609, 18609, 18609, 35488, 35506, 35528, 37056, 35554, 28976, 35578, 35614, 35618, 32738, 26175,
  /* 14145 */ 40773, 28541, 35634, 28541, 35658, 26569, 27952, 29734, 18609, 27605, 18609, 25994, 33048, 25944, 38753,
  /* 14160 */ 32738, 32738, 26707, 28540, 35171, 28541, 28541, 32881, 18609, 30673, 18609, 35681, 25991, 33048, 27325,
  /* 14175 */ 32738, 32738, 29362, 35700, 28541, 28541, 26945, 18609, 35719, 18609, 25989, 35562, 26459, 36844, 32766,
  /* 14190 */ 36382, 39676, 31099, 18609, 18609, 37485, 34690, 36218, 35740, 39007, 18609, 18609, 36163, 32738, 26733,
  /* 14205 */ 27813, 30401, 38035, 32738, 35759, 39845, 35777, 35801, 21474, 29914, 21291, 27373, 33636, 37375, 26729,
  /* 14220 */ 29901, 37991, 31163, 36494, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14235 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14250 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14265 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14280 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14295 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14310 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14325 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609,
  /* 14340 */ 24748, 18609, 18609, 35835, 28373, 35856, 35901, 35916, 35925, 35941, 35955, 20047, 18609, 37284, 24964,
  /* 14355 */ 18609, 18609, 18609, 18609, 18609, 26604, 40422, 18609, 30505, 32233, 28542, 28643, 21490, 38901, 21252,
  /* 14370 */ 24968, 36594, 38892, 18609, 18609, 25994, 35997, 35121, 25159, 33771, 32143, 34734, 36043, 36071, 40600,
  /* 14385 */ 37196, 32776, 36096, 18609, 18609, 30184, 27143, 36119, 18609, 26603, 33048, 26139, 32738, 32738, 32738,
  /* 14400 */ 32738, 29122, 28541, 28541, 28541, 32874, 30263, 18609, 18609, 28167, 18609, 36137, 36161, 36179, 26374,
  /* 14415 */ 37255, 36199, 32738, 31276, 28540, 26057, 28541, 28541, 32881, 30531, 18609, 18609, 18609, 25991, 33048,
  /* 14430 */ 27325, 32738, 36216, 30209, 28538, 28541, 36234, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738,
  /* 14445 */ 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738,
  /* 14460 */ 26733, 27813, 33206, 34453, 32738, 28188, 32210, 36253, 21569, 23697, 27372, 21291, 27373, 33636, 37375,
  /* 14475 */ 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14490 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14505 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14520 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14535 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14550 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14565 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14580 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609,
  /* 14595 */ 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609,
  /* 14610 */ 24964, 18609, 25102, 18609, 18609, 36725, 36273, 36717, 36722, 32354, 28002, 36315, 36335, 36351, 18609,
  /* 14625 */ 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541,
  /* 14640 */ 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738,
  /* 14655 */ 32738, 32738, 36375, 28541, 28541, 28541, 32874, 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048,
  /* 14670 */ 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881, 18609, 18609, 18609, 18609, 25991,
  /* 14685 */ 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738,
  /* 14700 */ 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163,
  /* 14715 */ 33782, 29257, 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636,
  /* 14730 */ 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14745 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14760 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14775 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14790 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14805 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14820 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 14835 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609,
  /* 14850 */ 18609, 18655, 24748, 20226, 20221, 20214, 18609, 36398, 36413, 36428, 36439, 36455, 36469, 20047, 18609,
  /* 14865 */ 20734, 29014, 36553, 36587, 39562, 36610, 27109, 32097, 36627, 36643, 36679, 36741, 38600, 36770, 21490,
  /* 14880 */ 18609, 18609, 36786, 21776, 36813, 23422, 36824, 25994, 33103, 36017, 38466, 32739, 36843, 26169, 38833,
  /* 14895 */ 35703, 28541, 36860, 40701, 18609, 18609, 30838, 28784, 18609, 20794, 30835, 26603, 27163, 36880, 36922,
  /* 14910 */ 34808, 32738, 36941, 34616, 32613, 28541, 30694, 36972, 33206, 28210, 36995, 37016, 37078, 18609, 23311,
  /* 14925 */ 34292, 39773, 32738, 37099, 35592, 29154, 37115, 36319, 34476, 28541, 37138, 37163, 18609, 24319, 32899,
  /* 14940 */ 25991, 33048, 29759, 32738, 32738, 20618, 37182, 28541, 28541, 27849, 18609, 18609, 37212, 25989, 39744,
  /* 14955 */ 32738, 32738, 37229, 28541, 35761, 39014, 28277, 18609, 25993, 37251, 40572, 28541, 37271, 35038, 18609,
  /* 14970 */ 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 35810, 37300, 37336, 21290, 27372, 32224, 37372,
  /* 14985 */ 37391, 37375, 26729, 21658, 37428, 39985, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15000 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15015 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15030 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15045 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15060 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15075 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15090 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 25870,
  /* 15105 */ 18609, 18609, 18609, 37468, 20139, 21492, 27561, 28895, 37501, 37516, 37531, 37543, 37559, 37574, 27476,
  /* 15120 */ 18609, 18609, 24964, 18609, 19024, 18609, 20947, 23656, 37610, 23322, 37638, 35085, 26417, 39430, 37654,
  /* 15135 */ 37670, 39701, 18609, 24968, 18609, 18609, 25623, 37706, 21930, 28983, 36017, 37735, 37773, 33559, 32738,
  /* 15150 */ 38833, 37807, 40469, 28541, 32776, 26294, 18609, 18609, 37831, 18609, 18609, 18609, 26603, 33048, 37858,
  /* 15165 */ 32738, 32125, 32738, 32738, 29122, 33577, 28541, 28541, 32874, 33206, 30878, 31925, 37894, 23609, 25084,
  /* 15180 */ 25994, 33108, 32576, 32738, 38963, 31409, 37912, 37961, 28541, 28830, 37980, 35665, 18609, 18609, 18609,
  /* 15195 */ 18609, 26524, 34502, 27325, 26900, 37314, 20618, 28538, 37964, 38007, 26945, 18609, 22631, 18609, 38031,
  /* 15210 */ 39744, 32385, 34725, 31055, 31843, 38051, 39014, 18609, 36145, 25993, 27325, 36218, 28541, 39007, 40304,
  /* 15225 */ 36299, 20597, 30656, 26733, 40785, 38076, 38098, 32738, 28188, 33202, 38126, 38161, 21290, 27372, 29696,
  /* 15240 */ 38199, 35968, 38218, 38258, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15255 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15270 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15285 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15300 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15315 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15330 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15345 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15360 */ 25870, 18609, 18609, 18609, 38296, 18609, 18609, 25212, 33535, 20038, 31475, 31490, 31505, 31519, 31533,
  /* 15375 */ 20047, 33207, 22839, 26490, 25272, 26502, 27612, 23759, 38338, 32563, 38330, 38346, 38362, 21598, 39941,
  /* 15390 */ 38378, 38394, 18609, 38443, 38459, 25459, 23177, 23934, 38408, 41149, 34509, 38482, 38518, 38570, 32593,
  /* 15405 */ 29705, 31136, 28541, 40157, 35330, 38588, 38616, 23170, 18609, 29935, 18609, 18609, 38632, 29993, 35115,
  /* 15420 */ 38667, 39357, 38702, 38751, 38548, 31001, 26197, 30080, 34207, 32874, 33206, 38769, 24862, 37937, 18609,
  /* 15435 */ 38793, 23860, 36183, 38816, 38849, 32738, 39362, 38865, 27215, 35339, 28541, 35316, 32881, 38881, 18609,
  /* 15450 */ 31313, 38917, 24777, 38939, 28510, 36894, 38959, 20618, 38979, 39929, 39036, 32839, 39056, 22773, 18609,
  /* 15465 */ 39079, 39100, 39125, 32738, 39158, 39174, 28541, 39216, 35512, 18609, 25993, 31694, 39898, 39238, 35387,
  /* 15480 */ 39263, 18609, 31682, 30511, 39291, 39316, 37147, 28498, 39343, 39378, 33202, 38647, 21569, 21290, 27372,
  /* 15495 */ 21291, 33616, 39394, 39300, 39453, 39478, 29249, 31163, 39516, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15510 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15525 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15540 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15555 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15570 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15585 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15600 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15615 */ 18609, 25870, 18609, 18609, 18609, 24843, 18609, 18609, 30177, 19331, 39553, 31991, 32006, 32020, 32034,
  /* 15630 */ 32048, 20047, 18609, 18609, 28756, 23831, 18609, 18609, 18609, 18609, 26604, 36022, 23830, 30932, 21549,
  /* 15645 */ 39578, 28643, 39604, 18609, 18609, 24968, 18609, 25294, 39649, 18609, 36571, 33048, 36017, 29544, 34321,
  /* 15660 */ 32738, 32738, 29714, 39672, 28541, 28541, 39408, 40333, 27633, 39692, 18609, 18609, 41326, 39717, 39740,
  /* 15675 */ 39760, 26139, 33495, 30951, 38533, 32738, 29122, 31852, 39832, 38990, 29647, 39876, 25077, 18609, 18609,
  /* 15690 */ 18609, 18609, 21026, 33048, 26374, 39893, 32738, 32738, 34114, 39914, 28541, 28541, 28541, 32814, 18609,
  /* 15705 */ 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 39957, 18609,
  /* 15720 */ 24911, 25989, 30552, 32738, 32738, 28427, 28541, 28541, 29835, 18609, 18609, 25993, 27325, 36218, 28541,
  /* 15735 */ 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32514, 39462, 33202, 38647, 21569, 21290,
  /* 15750 */ 27372, 21291, 27373, 35150, 38270, 26729, 39500, 33234, 39974, 30390, 18609, 18609, 18609, 18609, 18609,
  /* 15765 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15780 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15795 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15810 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15825 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15840 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15855 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 15870 */ 18609, 18609, 25870, 18609, 18609, 18609, 27079, 18609, 20103, 18609, 20977, 40012, 27794, 18609, 20256,
  /* 15885 */ 40045, 40059, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609, 32502,
  /* 15900 */ 21549, 40093, 28643, 21490, 18609, 40021, 24968, 18609, 18609, 18609, 19993, 39084, 33048, 36017, 29544,
  /* 15915 */ 32134, 37791, 32738, 38833, 39420, 40459, 28541, 32776, 18609, 18609, 18609, 18609, 21093, 18609, 28247,
  /* 15930 */ 26603, 40126, 26139, 32738, 38686, 32738, 32738, 29122, 28541, 40147, 28541, 32874, 33206, 18609, 18609,
  /* 15945 */ 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881,
  /* 15960 */ 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609,
  /* 15975 */ 32991, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218,
  /* 15990 */ 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 29222, 34453, 32738, 28188, 33202, 38647, 21569,
  /* 16005 */ 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609,
  /* 16020 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16035 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16050 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16065 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16080 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16095 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16110 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16125 */ 18609, 18609, 18609, 25870, 18609, 18609, 18609, 20285, 18609, 20333, 20651, 20554, 40173, 40188, 40203,
  /* 16140 */ 40212, 40228, 40242, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609, 26604, 36022, 18609,
  /* 16155 */ 30505, 29078, 31795, 36754, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994, 33048, 36017,
  /* 16170 */ 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16185 */ 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206, 18609,
  /* 16200 */ 18609, 18609, 23555, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540, 28541, 28541, 28541,
  /* 16215 */ 32881, 18609, 32681, 31293, 18609, 25991, 33048, 40278, 34170, 32738, 40297, 28538, 39183, 28541, 40320,
  /* 16230 */ 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993, 27325,
  /* 16245 */ 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202, 38647,
  /* 16260 */ 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609, 18609,
  /* 16275 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16290 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16305 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16320 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16335 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16350 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16365 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16380 */ 18609, 18609, 18609, 18609, 24927, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038, 26805,
  /* 16395 */ 18609, 25372, 40358, 40372, 20047, 18609, 18609, 27455, 18609, 18609, 18609, 18609, 36292, 40411, 36284,
  /* 16410 */ 36103, 33365, 21549, 40449, 28643, 21490, 18609, 18609, 24968, 40495, 41005, 18609, 18609, 25994, 33048,
  /* 16425 */ 36017, 29544, 32738, 32738, 38572, 38833, 28541, 28541, 31815, 32776, 40511, 18609, 18609, 18609, 18609,
  /* 16440 */ 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541, 32874, 33206,
  /* 16455 */ 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 35785, 28540, 28541, 28541,
  /* 16470 */ 28541, 32881, 40541, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538, 28541, 28541,
  /* 16485 */ 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609, 18609, 25993,
  /* 16500 */ 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188, 33202,
  /* 16515 */ 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609, 18609,
  /* 16530 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16545 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16560 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16575 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16590 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16605 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16620 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16635 */ 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609, 20038,
  /* 16650 */ 26805, 18609, 25127, 26731, 39327, 20056, 18609, 18609, 24964, 18609, 26920, 18609, 18609, 18609, 26604,
  /* 16665 */ 36022, 18609, 40566, 30146, 28150, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609, 25994,
  /* 16680 */ 33048, 36017, 29544, 32738, 32738, 32738, 40588, 28541, 28541, 32403, 32776, 18609, 40616, 18609, 40633,
  /* 16695 */ 18609, 18609, 18609, 26603, 22065, 26139, 25952, 32738, 32523, 32738, 29122, 40656, 26641, 28541, 32874,
  /* 16710 */ 33206, 21209, 18609, 18609, 18609, 18609, 25994, 40673, 26374, 35598, 32738, 32738, 26707, 28540, 40691,
  /* 16725 */ 28541, 28541, 40717, 18609, 40877, 18609, 18609, 25991, 33274, 27325, 34131, 32738, 33428, 28538, 27262,
  /* 16740 */ 28541, 31776, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 34654, 18609, 35684,
  /* 16755 */ 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738, 28188,
  /* 16770 */ 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390, 18609,
  /* 16785 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16800 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16815 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16830 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16845 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16860 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16875 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 16890 */ 18609, 18609, 18609, 18609, 18609, 18609, 25870, 18609, 18609, 18609, 24748, 18609, 18609, 18609, 18609,
  /* 16905 */ 40743, 26805, 18609, 25127, 26731, 39327, 20047, 18609, 18609, 24964, 18609, 18609, 18609, 18609, 18609,
  /* 16920 */ 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968, 18609, 18609, 18609, 18609,
  /* 16935 */ 25994, 33048, 36017, 29544, 32738, 32738, 32738, 38833, 28541, 28541, 28541, 32776, 18609, 18609, 18609,
  /* 16950 */ 18609, 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738, 29122, 28541, 28541, 28541,
  /* 16965 */ 32874, 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738, 32738, 32738, 26707, 28540,
  /* 16980 */ 28541, 28541, 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325, 32738, 32738, 20618, 28538,
  /* 16995 */ 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532, 28541, 28541, 39014, 18609,
  /* 17010 */ 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733, 27813, 33206, 34453, 32738,
  /* 17025 */ 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729, 39500, 29249, 31163, 30390,
  /* 17040 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17055 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17070 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17085 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17100 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17115 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17130 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17145 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 28764, 40819, 40838, 40859,
  /* 17160 */ 40893, 40929, 40913, 40843, 40906, 40822, 40962, 40996, 18609, 18609, 24964, 18609, 40029, 18609, 18609,
  /* 17175 */ 18609, 18547, 18558, 18609, 37684, 23480, 18869, 19309, 41029, 39269, 18608, 18627, 18609, 18651, 41064,
  /* 17190 */ 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19663, 18745, 18763, 18781, 37690, 41063, 38280,
  /* 17205 */ 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754, 19770,
  /* 17220 */ 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961, 19005,
  /* 17235 */ 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236, 19252,
  /* 17250 */ 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385, 19430,
  /* 17265 */ 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679, 19723,
  /* 17280 */ 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695, 19965,
  /* 17295 */ 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17310 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17325 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17340 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17355 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17370 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17385 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17400 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 18609, 18609,
  /* 17415 */ 25423, 18609, 20038, 41080, 41108, 41116, 18609, 41092, 24331, 18609, 18609, 24964, 18609, 41334, 18609,
  /* 17430 */ 18609, 39958, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609, 18651,
  /* 17445 */ 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19861, 18745, 18763, 18781, 37690, 18609,
  /* 17460 */ 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738, 19754,
  /* 17475 */ 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983, 18961,
  /* 17490 */ 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210, 19236,
  /* 17505 */ 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366, 19385,
  /* 17520 */ 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645, 19679,
  /* 17535 */ 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940, 18695,
  /* 17550 */ 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17565 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17580 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17595 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17610 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17625 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17640 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17655 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748, 39222,
  /* 17670 */ 18609, 18609, 18609, 41140, 41173, 41188, 41196, 40617, 41220, 24331, 18609, 18609, 24964, 18609, 41334,
  /* 17685 */ 41257, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 18579, 39269, 18608, 18627, 18609,
  /* 17700 */ 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19414, 18745, 18763, 18781, 37690,
  /* 17715 */ 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778, 18860, 19738,
  /* 17730 */ 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947, 19050, 18983,
  /* 17745 */ 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165, 19181, 19210,
  /* 17760 */ 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382, 19401, 19366,
  /* 17775 */ 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629, 19622, 19645,
  /* 17790 */ 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663, 19900, 19940,
  /* 17805 */ 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17820 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17835 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17850 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17865 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17880 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17895 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 17910 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 20016, 18609, 18609, 18609, 24748,
  /* 17925 */ 18609, 18609, 18609, 18609, 20038, 18609, 18609, 18609, 18609, 25188, 20047, 18609, 18609, 24964, 18609,
  /* 17940 */ 18609, 18609, 18609, 18609, 26604, 36022, 18609, 30505, 21549, 28541, 28643, 21490, 18609, 18609, 24968,
  /* 17955 */ 18609, 18609, 18609, 18609, 25994, 33048, 36017, 34243, 32738, 32738, 32738, 39142, 28541, 28541, 28541,
  /* 17970 */ 32776, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 26603, 33048, 26139, 32738, 32738, 32738, 32738,
  /* 17985 */ 27210, 28541, 28541, 28541, 32874, 33206, 18609, 18609, 18609, 18609, 18609, 25994, 33048, 26374, 32738,
  /* 18000 */ 32738, 32738, 26707, 28540, 28541, 28541, 28541, 32881, 18609, 18609, 18609, 18609, 25991, 33048, 27325,
  /* 18015 */ 32738, 32738, 20618, 28538, 28541, 28541, 26945, 18609, 18609, 18609, 25989, 39744, 32738, 32738, 28532,
  /* 18030 */ 28541, 28541, 39014, 18609, 18609, 25993, 27325, 36218, 28541, 39007, 18609, 18609, 36163, 32738, 26733,
  /* 18045 */ 27813, 33206, 34453, 32738, 28188, 33202, 38647, 21569, 21290, 27372, 21291, 27373, 33636, 37375, 26729,
  /* 18060 */ 39500, 29249, 31163, 30390, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18075 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18090 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18105 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18120 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18135 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18150 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18165 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18180 */ 18609, 18609, 18609, 38427, 18609, 41280, 41305, 41352, 41360, 38426, 41317, 41336, 18609, 18609, 18609,
  /* 18195 */ 18609, 41334, 18609, 18609, 18609, 18547, 18558, 18609, 37684, 19783, 18869, 19309, 25021, 39269, 18608,
  /* 18210 */ 24853, 18609, 18651, 41064, 27089, 18671, 18711, 18727, 39275, 18743, 18761, 18779, 19663, 18745, 18763,
  /* 18225 */ 18781, 37690, 18609, 38280, 18609, 18609, 25723, 18592, 40640, 18797, 18832, 18683, 19746, 19762, 19778,
  /* 18240 */ 18860, 19738, 19754, 19770, 18869, 18868, 19258, 33435, 41124, 25712, 20295, 18609, 18885, 18913, 18947,
  /* 18255 */ 19050, 18983, 18961, 19005, 19040, 19056, 18989, 18967, 19072, 19098, 25752, 19140, 19113, 41204, 19165,
  /* 18270 */ 19181, 19210, 19236, 19252, 19274, 19210, 19236, 19303, 25605, 19325, 19445, 41264, 19347, 19363, 19382,
  /* 18285 */ 19401, 19366, 19385, 19430, 19485, 19501, 19521, 18926, 19550, 18931, 19555, 22738, 19571, 19606, 19629,
  /* 18300 */ 19622, 19645, 19679, 19723, 19801, 19799, 19817, 19833, 19837, 19853, 23451, 19877, 19658, 36657, 36663,
  /* 18315 */ 19900, 19940, 18695, 19965, 19981, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18330 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18345 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18360 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18375 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18390 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18405 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609,
  /* 18420 */ 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 18609, 0, 2, 3, 94212, 5, 6,
  /* 18438 */ 0, 0, 0, 0, 0, 0, 78066, 78066, 78066, 78066, 0, 0, 82165, 82165, 78066, 78066, 82165, 82165, 82165,
  /* 18457 */ 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165, 82165,
  /* 18472 */ 82165, 82165, 82165, 82165, 82165, 82165, 82165, 292, 82165, 82165, 82165, 82165, 82165, 82165, 0, 0, 2,
  /* 18489 */ 2, 3, 94212, 5, 6, 0, 0, 0, 82165, 49152, 53248, 82165, 82165, 82165, 82165, 82165, 45056, 82165, 82165,
  /* 18508 */ 82165, 82165, 82165, 82165, 82165, 82165, 0, 0, 78066, 82165, 78066, 82165, 82165, 82165, 0, 78066, 0, 0,
  /* 18526 */ 82165, 0, 1060864, 248, 249, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 1122304,
  /* 18551 */ 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304,
  /* 18562 */ 1122304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 0, 247, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0,
  /* 18591 */ 1417216, 0, 0, 0, 0, 0, 0, 1572864, 0, 1675264, 0, 0, 0, 0, 1335296, 0, 0, 1740800, 0, 0, 0, 0, 0, 0, 0,
  /* 18616 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 292, 292, 0, 0, 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 276, 277,
  /* 18645 */ 278, 279, 0, 0, 0, 0, 0, 0, 0, 1064960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 281, 282, 283, 0,
  /* 18672 */ 1712128, 1753088, 1888256, 0, 0, 0, 1122304, 1122304, 1388544, 1122304, 1122304, 1122304, 1122304,
  /* 18685 */ 1122304, 1122304, 0, 0, 1691648, 0, 0, 0, 1122304, 1122304, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18700 */ 0, 0, 0, 1376256, 1114112, 1114112, 1114112, 1114112, 1830912, 1376256, 1114112, 1122304, 1122304,
  /* 18713 */ 1544192, 1122304, 1122304, 1581056, 1122304, 1597440, 1122304, 1122304, 1646592, 1667072, 1679360,
  /* 18724 */ 1122304, 1122304, 1712128, 1122304, 1753088, 1122304, 1122304, 1122304, 1888256, 1122304, 1122304,
  /* 18735 */ 1122304, 1122304, 0, 1753088, 0, 1667072, 0, 1753088, 1388544, 1114112, 1114112, 1114112, 1114112,
  /* 18748 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1544192, 1114112, 1114112, 1114112,
  /* 18759 */ 1114112, 1114112, 1114112, 1114112, 1581056, 1114112, 1597440, 1114112, 1605632, 1114112, 1114112,
  /* 18770 */ 1646592, 1114112, 1114112, 1667072, 1679360, 1114112, 1114112, 1114112, 1712128, 1114112, 1712128,
  /* 18781 */ 1114112, 1114112, 1753088, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18792 */ 1114112, 1114112, 1888256, 1114112, 1114112, 1691648, 0, 0, 1691648, 1122304, 1380352, 1122304, 1122304,
  /* 18805 */ 1122304, 1122304, 1122304, 1122304, 1122304, 1507328, 1122304, 1122304, 1122304, 1114798, 1114798,
  /* 18816 */ 1114798, 1114798, 1114798, 1446574, 1479342, 1483438, 1114798, 1114798, 1520302, 1114798, 1114798,
  /* 18827 */ 1114798, 1114798, 1114798, 1114798, 1761966, 1540096, 1122304, 1572864, 1122304, 1122304, 1122304,
  /* 18838 */ 1122304, 1675264, 1683456, 1691648, 1122304, 1122304, 1122304, 1122304, 1122304, 1122304, 0, 0, 1691648,
  /* 18851 */ 0, 0, 0, 1122304, 1122304, 1114112, 1114112, 1114797, 1114797, 1114112, 1114112, 1114112, 1114112,
  /* 18864 */ 1114112, 1114112, 1114112, 1114112, 1900544, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18875 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1425408, 0,
  /* 18887 */ 1601536, 0, 0, 0, 0, 1122304, 1122304, 1122304, 1421312, 1425408, 1122304, 1122304, 1122304, 1122304, 0,
  /* 18902 */ 0, 1691648, 0, 0, 0, 1122304, 1122304, 1114798, 1114112, 1114798, 1114798, 1523712, 1122304, 1122304,
  /* 18916 */ 1122304, 1601536, 1122304, 1122304, 1638400, 1122304, 1744896, 1122304, 1122304, 1122304, 1122304,
  /* 18927 */ 1122304, 1122304, 1114112, 1114112, 1114112, 1114112, 1114112, 1445888, 1478656, 1482752, 1114112,
  /* 18938 */ 1114112, 1519616, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1761280, 1122304, 1122304,
  /* 18949 */ 1122304, 1961984, 0, 1122304, 1122304, 1114112, 1114112, 1114112, 1114112, 1114112, 1421312, 1425408,
  /* 18961 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1839104, 1851392, 1114112,
  /* 18972 */ 1114112, 1114112, 1880064, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18983 */ 1114112, 1601536, 1114112, 1114112, 1114112, 1114112, 1638400, 1114112, 1650688, 1658880, 1114112,
  /* 18994 */ 1114112, 1114112, 1728512, 1744896, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19005 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1961984, 1114112, 0, 0, 0, 0, 1077248, 0, 0, 0, 0,
  /* 19022 */ 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19046 */ 1421312, 1425408, 1114112, 1114112, 1114112, 1458176, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19057 */ 1114112, 1114112, 1523712, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1601536,
  /* 19068 */ 1114112, 1114112, 1114112, 1114112, 1961984, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19079 */ 1114112, 1114112, 1114112, 0, 0, 0, 0, 0, 0, 0, 1638, 0, 0, 0, 1641, 0, 0, 0, 0, 1433600, 0, 0, 0, 0, 0,
  /* 19104 */ 0, 0, 0, 1527808, 0, 0, 0, 0, 1757184, 0, 0, 0, 0, 1466368, 1589248, 0, 1953792, 0, 0, 1503232, 0, 0, 0,
  /* 19127 */ 0, 0, 0, 0, 1662976, 0, 0, 0, 0, 1069056, 0, 0, 61440, 0, 1671168, 0, 0, 0, 0, 0, 0, 1867776, 0, 0, 0, 0,
  /* 19153 */ 0, 0, 0, 248, 248, 248, 248, 248, 248, 248, 248, 248, 1122304, 1122304, 1527808, 1122304, 1589248,
  /* 19170 */ 1122304, 1122304, 1122304, 1757184, 1122304, 1122304, 1122304, 1859584, 1122304, 1896448, 1916928,
  /* 19181 */ 1953792, 1122304, 1122304, 1363968, 1114112, 1114112, 1114112, 1114112, 1114112, 1437696, 1114112,
  /* 19192 */ 1114112, 1466368, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 745, 0, 106496,
  /* 19205 */ 748, 1114112, 1114112, 1388544, 1114112, 1114112, 1114112, 1114112, 1527808, 1548288, 1114112, 1560576,
  /* 19217 */ 1114112, 1114112, 1589248, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 811, 0, 0,
  /* 19230 */ 1114112, 1114112, 1114112, 1114112, 811, 0, 1114112, 1114112, 1757184, 1114112, 1114112, 1114112, 1114112,
  /* 19243 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1859584, 1114112, 1114112, 1896448, 1114112, 1916928,
  /* 19254 */ 1114112, 1114112, 1114112, 1953792, 1114112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1421312, 0, 0, 0,
  /* 19277 */ 1363968, 1114112, 1114112, 1114112, 1114112, 1114112, 1437696, 1114112, 1114112, 1466368, 1114112,
  /* 19288 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1042, 0, 0, 1045, 1114112, 1114112,
  /* 19301 */ 1388544, 1114112, 1114112, 1916928, 1114112, 1114112, 1114112, 1953792, 1114112, 1114112, 1114112,
  /* 19312 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 0, 0, 1826816, 0,
  /* 19327 */ 1957888, 0, 0, 1695744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0, 0, 0, 287, 1122304, 1122304, 1552384,
  /* 19350 */ 1122304, 1122304, 1695744, 1814528, 1122304, 1855488, 1122304, 1122304, 1122304, 1114112, 1114112,
  /* 19361 */ 1114112, 1409024, 1114112, 1114112, 1114112, 1114112, 1114112, 1486848, 1114112, 1114112, 1114112,
  /* 19372 */ 1114112, 1552384, 1114112, 1114112, 1609728, 1626112, 1114112, 1114112, 1695744, 1699840, 1114112,
  /* 19383 */ 1695744, 1699840, 1114112, 1114112, 1769472, 1114112, 1114112, 1806336, 1114112, 1814528, 1114112,
  /* 19394 */ 1114112, 1855488, 1875968, 1114112, 1114112, 1114112, 1925120, 1114112, 1114112, 1925120, 1114112,
  /* 19405 */ 1966080, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1409024, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19419 */ 1114112, 1114112, 1114112, 1043, 0, 0, 1046, 1114112, 1114112, 1388544, 1114112, 1114112, 1966080,
  /* 19432 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 0, 1454080, 0, 0, 1482752, 1519616, 0, 0, 0, 0, 1609728, 0,
  /* 19451 */ 0, 0, 0, 1863680, 0, 0, 1855488, 0, 0, 0, 0, 0, 257, 258, 259, 260, 261, 262, 0, 0, 0, 0, 0, 0, 390, 0,
  /* 19477 */ 390, 390, 390, 390, 390, 390, 340, 0, 0, 1810432, 0, 0, 0, 0, 0, 0, 0, 1945600, 0, 1622016, 0, 0, 0,
  /* 19500 */ 1761280, 0, 1847296, 0, 1478656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 1781760, 0, 0, 0, 0,
  /* 19527 */ 0, 0, 1122304, 1122304, 1122304, 1482752, 1122304, 1122304, 1122304, 1122304, 1114797, 1114797, 1114797,
  /* 19540 */ 1114797, 1114797, 1446573, 1479341, 1483437, 1114797, 1114797, 1520301, 1114797, 1114797, 1114112,
  /* 19551 */ 1114112, 1114112, 1114112, 1761280, 1114112, 1114112, 1810432, 1114112, 1114112, 1114112, 1114112,
  /* 19562 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1404928, 0, 0, 0, 1904640, 0, 1368064, 0, 0,
  /* 19577 */ 1798144, 1941504, 0, 0, 0, 1617920, 0, 0, 0, 0, 0, 0, 912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0,
  /* 19603 */ 126976, 126976, 0, 0, 0, 1429504, 1630208, 0, 1122304, 1429504, 1122304, 1122304, 1630208, 1122304,
  /* 19617 */ 1122304, 1122304, 1122304, 1122304, 1372160, 1114112, 1114112, 1114112, 1114112, 1114112, 1933312,
  /* 19628 */ 1372160, 1114112, 1114112, 1429504, 1114112, 1114112, 1114112, 1511424, 1114112, 1114112, 1576960,
  /* 19639 */ 1630208, 1114112, 1114112, 1114112, 1114112, 1114112, 1576960, 1630208, 1114112, 1114112, 1114112,
  /* 19650 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1933312, 1114112, 1114112, 1114112,
  /* 19661 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 0,
  /* 19675 */ 1114112, 1114112, 1388544, 1114112, 1114112, 0, 1441792, 0, 0, 0, 1703936, 0, 1822720, 0, 0, 1921024, 0,
  /* 19692 */ 1564672, 1785856, 0, 0, 0, 0, 1613824, 0, 0, 0, 0, 0, 1122304, 1122304, 0, 0, 1114797, 1114797, 1532589,
  /* 19711 */ 1114797, 1708717, 1114797, 1114797, 1114797, 1835693, 1114859, 1114859, 1532651, 1114859, 1708779,
  /* 19722 */ 1114859, 0, 0, 0, 1777664, 0, 1392640, 0, 1634304, 1392640, 1441792, 1122304, 1634304, 1822720, 1564672,
  /* 19737 */ 1785856, 1114112, 0, 0, 0, 0, 0, 1114112, 1114112, 1380352, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19752 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1507328, 1114112, 1114112,
  /* 19763 */ 1114112, 1114112, 1540096, 1114112, 1114112, 1114112, 1114112, 1572864, 1114112, 1114112, 1114112,
  /* 19774 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1675264, 1683456, 1691648, 1114112, 1114112,
  /* 19785 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 1114112,
  /* 19797 */ 1114112, 1114112, 1921024, 1114112, 1392640, 1400832, 1441792, 1114112, 1114112, 1114112, 1114112,
  /* 19808 */ 1564672, 1634304, 1703936, 1785856, 1114112, 1822720, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19819 */ 1921024, 1114112, 1114112, 0, 0, 0, 0, 0, 1720320, 0, 0, 0, 0, 1687552, 0, 1970176, 1499136, 1499136,
  /* 19837 */ 1114112, 1490944, 1499136, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19848 */ 1912832, 1114112, 1114112, 0, 0, 0, 0, 0, 1724416, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1114112,
  /* 19865 */ 1114112, 1114112, 1114112, 1114112, 745, 0, 0, 748, 1114112, 1114112, 1388544, 1114112, 0, 0, 1818624, 0,
  /* 19881 */ 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0,
  /* 19895 */ 307200, 1114112, 1114112, 1114112, 1114112, 0, 1114112, 1114112, 1531904, 1114112, 1708032, 1114112,
  /* 19907 */ 1114112, 1114112, 1835008, 1114112, 1114112, 1531904, 1114112, 1708032, 1114112, 0, 0, 0, 0, 106496,
  /* 19921 */ 1114112, 1114112, 1380352, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 812, 0,
  /* 19934 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 1114112, 1114112, 1835008, 1114112, 1114112, 1462272, 0, 0, 0,
  /* 19949 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 1114112, 1114112, 1114112,
  /* 19962 */ 1114112, 241664, 0, 1114112, 1114112, 1114112, 1830912, 1474560, 0, 1773568, 1114112, 1568768, 1789952,
  /* 19975 */ 1114112, 1114112, 1568768, 1789952, 1114112, 1593344, 1495040, 1114112, 1495040, 1114112, 1114112,
  /* 19986 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1802240, 1802240, 0, 0, 0, 0, 0, 0, 924, 0, 0, 0, 0, 0, 0, 0,
  /* 20007 */ 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
  /* 20039 */ 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 248, 249, 0, 0, 0, 0, 0, 0, 0, 248, 249, 0, 0, 0,
  /* 20068 */ 0, 0, 0, 509, 0, 0, 0, 115055, 115055, 115055, 0, 115055, 0, 0, 0, 0, 0, 0, 115055, 367, 367, 367, 367,
  /* 20091 */ 367, 367, 367, 115055, 115055, 115055, 115055, 115055, 115055, 115055, 115055, 115055, 0, 0, 0, 0, 0, 0,
  /* 20109 */ 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115055, 115055, 115055, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 20137 */ 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 248, 122880, 0, 0, 0, 0, 0, 0,
  /* 20166 */ 0, 0, 0, 0, 0, 252, 252, 252, 0, 0, 0, 123214, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 248, 249,
  /* 20194 */ 0, 0, 0, 0, 507, 0, 0, 248, 248, 0, 0, 248, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0,
  /* 20225 */ 0, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1824, 2, 6, 0, 0, 0, 248, 0, 0, 0, 1388544, 0, 0,
  /* 20255 */ 1417216, 0, 0, 0, 0, 0, 288, 0, 388, 457, 457, 457, 457, 457, 481, 457, 457, 0, 2, 1138922, 94212, 5, 6,
  /* 20278 */ 238, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 289, 290, 291, 0, 292, 0, 0, 0, 0, 0, 0, 0, 1638400, 0, 1843200,
  /* 20305 */ 0, 0, 0, 1908736, 0, 0, 0, 0, 0, 126976, 126976, 126976, 0, 126976, 0, 0, 126976, 0, 126976, 0, 126976, 0,
  /* 20327 */ 126976, 126976, 126976, 126976, 126976, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
  /* 20351 */ 126976, 126976, 0, 0, 0, 2, 2, 1138922, 94212, 5, 6, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20378 */ 1165, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 818, 822, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 307, 325, 0, 0,
  /* 20406 */ 0, 0, 0, 0, 325, 0, 0, 1114112, 1321, 0, 0, 1326, 0, 1114112, 1114112, 1380352, 1114112, 1114112, 1114112,
  /* 20425 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 245760, 0, 0, 49152,
  /* 20440 */ 53248, 0, 135168, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 266, 302, 269, 269, 300, 0, 0, 0, 0, 0, 135168, 0,
  /* 20466 */ 0, 135168, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0, 0,
  /* 20485 */ 0, 0, 0, 0, 0, 0, 0, 0, 253, 0, 301, 0, 135168, 135168, 0, 0, 135168, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0,
  /* 20513 */ 0, 0, 388, 388, 388, 388, 388, 388, 388, 844164, 388, 388, 439, 0, 0, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20538 */ 0, 0, 0, 0, 300, 0, 302, 0, 49152, 53248, 0, 0, 139264, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
  /* 20566 */ 289, 0, 289, 0, 0, 0, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264,
  /* 20583 */ 139264, 139264, 139264, 0, 0, 139264, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388,
  /* 20607 */ 388, 2045, 388, 388, 388, 439, 439, 439, 1711, 439, 1713, 439, 439, 439, 439, 439, 439, 439, 0, 0, 0, 0,
  /* 20629 */ 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 0, 335, 335, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
  /* 20661 */ 0, 0, 0, 0, 0, 0, 1060864, 0, 0, 0, 0, 0, 584, 0, 143360, 0, 0, 249, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20690 */ 0, 263, 264, 265, 0, 0, 0, 49152, 143698, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 310,
  /* 20718 */ 0, 310, 0, 249, 249, 0, 0, 249, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 531, 532, 0, 0, 0, 0, 0, 0, 0,
  /* 20748 */ 0, 0, 840, 0, 0, 0, 0, 844, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 2, 6, 0, 0, 0,
  /* 20780 */ 0, 0, 0, 249, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1204, 0, 0, 0, 0,
  /* 20809 */ 0, 0, 0, 246, 246, 0, 0, 246, 246, 147702, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 147702,
  /* 20831 */ 246, 246, 246, 246, 246, 49152, 53248, 246, 246, 246, 246, 246, 45056, 246, 246, 246, 246, 246, 246, 246,
  /* 20851 */ 246, 246, 293, 246, 246, 246, 147702, 246, 246, 246, 246, 246, 147702, 147702, 147702, 246, 147702, 246,
  /* 20869 */ 246, 246, 147702, 147702, 147702, 147702, 246, 246, 246, 297, 246, 246, 246, 246, 246, 246, 246, 246, 246,
  /* 20888 */ 246, 246, 246, 246, 246, 246, 246, 147702, 246, 147702, 147702, 147702, 147702, 147702, 147702, 147702, 0,
  /* 20905 */ 0, 0, 246, 0, 246, 246, 246, 246, 246, 246, 147702, 246, 147702, 246, 147702, 246, 147702, 147702, 147702,
  /* 20924 */ 147702, 147702, 147702, 147702, 147753, 147753, 147753, 147753, 147753, 147753, 147753, 147753, 147702,
  /* 20937 */ 147702, 147702, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 606, 0, 608, 0, 0, 0, 0, 0, 0, 0, 0, 126976,
  /* 20964 */ 126976, 0, 0, 126976, 126976, 126976, 126976, 0, 0, 0, 1135137, 1135137, 1135137, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20985 */ 0, 0, 330, 0, 0, 0, 0, 330, 1135137, 1135137, 0, 0, 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
  /* 21012 */ 0, 0, 0, 0, 0, 0, 49152, 53248, 159744, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388,
  /* 21038 */ 388, 388, 1489, 388, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 21052 */ 159744, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21076 */ 159744, 0, 0, 159744, 159744, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21103 */ 1196, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 159744, 0, 0, 2, 2, 0, 94212, 5, 6, 131072, 0, 0, 0, 0, 1224,
  /* 21128 */ 388, 1225, 388, 1227, 388, 388, 388, 388, 388, 1233, 388, 0, 0, 0, 163840, 163840, 163840, 0, 163840, 0,
  /* 21148 */ 0, 0, 163840, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 21163 */ 163840, 163840, 163840, 163840, 163840, 0, 0, 0, 0, 0, 106957, 163840, 0, 0, 0, 163840, 0, 0, 0, 163840,
  /* 21183 */ 0, 106957, 106957, 106957, 106957, 106957, 106957, 106957, 106957, 163840, 163840, 106957, 0, 0, 2, 2, 3,
  /* 21200 */ 94212, 5, 6, 0, 0, 0, 0, 0, 836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1418, 0, 0, 0, 0, 0, 0, 0, 0, 167936,
  /* 21229 */ 167936, 167936, 0, 167936, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 0, 0, 2, 2, 3, 94212,
  /* 21250 */ 5, 6, 0, 0, 0, 0, 0, 850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 0, 0, 0, 0, 139264, 167936, 167936,
  /* 21276 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 21289 */ 167936, 0, 0, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0, 0, 0, 1064960, 892, 0, 0,
  /* 21314 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 0, 0, 0, 0, 0, 0, 0, 49152, 53248, 172032, 0, 0, 0, 0, 45056, 172032, 0,
  /* 21341 */ 172032, 0, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 0, 172032, 0, 0, 0, 0, 0, 172032,
  /* 21359 */ 172032, 172032, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21378 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21396 */ 439, 439, 439, 439, 2172, 439, 2174, 2175, 0, 2, 3, 235, 5, 6, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 439, 439,
  /* 21422 */ 2170, 439, 439, 439, 439, 439, 0, 0, 0, 176128, 176128, 176128, 0, 176128, 0, 0, 0, 0, 0, 0, 176128,
  /* 21443 */ 176128, 176128, 176128, 176128, 57574, 57574, 2, 2, 3, 0, 5, 6, 0, 499, 0, 176128, 176128, 176128, 176128,
  /* 21462 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 0, 0,
  /* 21477 */ 0, 0, 0, 0, 0, 439, 2169, 439, 439, 439, 2173, 439, 439, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21506 */ 284, 0, 0, 874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 570, 0, 0, 0, 908, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21539 */ 0, 0, 0, 309, 0, 310, 439, 439, 439, 1722, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0,
  /* 21562 */ 462, 462, 462, 462, 462, 462, 1767, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 462,
  /* 21583 */ 0, 0, 0, 0, 0, 388, 439, 2138, 439, 439, 439, 439, 439, 439, 2144, 439, 439, 439, 439, 439, 733, 439, 439,
  /* 21606 */ 439, 439, 439, 439, 0, 462, 462, 752, 462, 2148, 462, 462, 462, 462, 462, 462, 2154, 462, 462, 462, 2157,
  /* 21627 */ 2158, 0, 0, 0, 0, 1413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 595, 0, 0, 0, 0, 439, 439, 2178, 462, 462, 462,
  /* 21655 */ 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 439, 439, 439, 439, 2269, 439, 462, 184810, 184810, 0,
  /* 21677 */ 0, 184810, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 861, 0, 0, 0, 921, 388, 388, 973, 974, 439,
  /* 21702 */ 439, 0, 0, 0, 192880, 192880, 192880, 0, 192880, 0, 0, 0, 0, 0, 0, 192880, 0, 0, 0, 0, 1613824, 0, 0, 0,
  /* 21726 */ 0, 0, 1122304, 1122304, 0, 0, 1114798, 1114798, 1114798, 1114798, 1114798, 1421998, 1426094, 1114798,
  /* 21740 */ 1114798, 1114798, 1458862, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1524398,
  /* 21751 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1602222, 1114798, 1114798, 1114798,
  /* 21762 */ 1114798, 192880, 192880, 192880, 192880, 192880, 192880, 192880, 192880, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
  /* 21781 */ 878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 192880, 192880, 192880, 192880, 0, 0, 0, 2, 2,
  /* 21807 */ 3, 94212, 5, 6, 0, 0, 0, 0, 0, 911, 0, 0, 0, 0, 0, 0, 0, 919, 0, 919, 0, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21838 */ 0, 0, 0, 0, 0, 539, 0, 0, 329, 329, 0, 0, 329, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 930, 0,
  /* 21866 */ 0, 0, 0, 388, 972, 973, 974, 439, 439, 0, 0, 0, 580, 893, 0, 0, 896, 0, 0, 0, 0, 0, 0, 0, 0, 572, 520, 0,
  /* 21894 */ 0, 567, 0, 0, 0, 0, 1122, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 520, 0, 0, 0, 0, 0, 462, 1122,
  /* 21923 */ 1403, 0, 0, 0, 0, 1128, 1405, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 937, 388, 941, 388, 943, 0, 49152,
  /* 21948 */ 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 599, 0,
  /* 21979 */ 0, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204800, 251, 252, 0, 204800, 204800, 204800, 204800,
  /* 22001 */ 204800, 205052, 205052, 204800, 204800, 204800, 204800, 205051, 204800, 204800, 204800, 204800, 205051,
  /* 22014 */ 205051, 204800, 204800, 204800, 204800, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22039 */ 0, 0, 307, 0, 0, 0, 0, 0, 204800, 205051, 204800, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 931, 0, 388,
  /* 22066 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 1242, 388, 388, 388, 388, 388, 0, 0, 0, 1135138, 155648,
  /* 22086 */ 1135138, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 936, 388, 388, 940, 388, 388, 0, 1135138, 0, 0,
  /* 22110 */ 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 592, 0, 0, 0, 0, 0, 0, 598, 1389229, 1114797, 1114797, 1114797,
  /* 22134 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1544877, 1114797, 1114797,
  /* 22145 */ 1114797, 1528493, 1548973, 1114797, 1561261, 1114797, 1114797, 1589933, 1114797, 1114797, 1114797,
  /* 22156 */ 1114797, 1114797, 1114797, 1933997, 1372907, 1114859, 1114859, 1430251, 1114859, 1114859, 1114859,
  /* 22167 */ 1512171, 1114859, 1114859, 1114797, 1712813, 1114797, 1114797, 1753773, 1114797, 1114797, 1114797,
  /* 22178 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1888941, 1581803, 1114859, 1598187,
  /* 22189 */ 1114859, 1606379, 1114859, 1114859, 1647339, 1114859, 1114859, 1667819, 1680107, 1114859, 1114859,
  /* 22200 */ 1114859, 1712875, 1381037, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 22211 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1508013, 1114797, 0, 0, 0, 0, 0, 1114859, 1114859, 1381099,
  /* 22226 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114797, 1114797, 1114797, 1114797, 0, 0,
  /* 22239 */ 1114859, 1114859, 1114859, 1114859, 1573611, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859,
  /* 22250 */ 1114859, 1114859, 1114859, 1676011, 1684203, 1692395, 1114859, 1114859, 1114859, 1114797, 1114797,
  /* 22261 */ 1114797, 1114797, 0, 0, 0, 1114859, 1114859, 1114859, 1114859, 0, 0, 1901291, 1114859, 1114859, 1114859,
  /* 22276 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114797, 1114797, 1114797, 1114797, 1114859, 1114859,
  /* 22287 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114797, 1114859, 0, 1449984,
  /* 22299 */ 1122304, 1122304, 1122304, 1961984, 0, 1122304, 1122304, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 22311 */ 1421997, 1426093, 1114797, 1114797, 1581741, 1114797, 1598125, 1114797, 1606317, 1114797, 1114797,
  /* 22322 */ 1647277, 1114797, 1114797, 1667757, 1680045, 1114797, 1114797, 1430189, 1114797, 1114797, 1114797,
  /* 22333 */ 1512109, 1114797, 1114797, 1577645, 1630893, 1114797, 1114797, 1114797, 1114797, 1114797, 1761965,
  /* 22344 */ 1114797, 1114797, 1811117, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114859, 1114859,
  /* 22355 */ 1114797, 1602221, 1114797, 1114797, 1114797, 1114797, 1639085, 1114797, 1651373, 1659565, 1114797,
  /* 22366 */ 1114797, 1114797, 1729197, 1745581, 1114797, 1114797, 1757869, 1114797, 1114797, 1114797, 1114797,
  /* 22377 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1860269, 1114797, 1114797, 1897133, 0, 1114859, 1114859,
  /* 22389 */ 1114859, 1114859, 1114859, 1422059, 1426155, 1114859, 1114859, 1114859, 1458923, 1114859, 1114859,
  /* 22400 */ 1114859, 1114859, 1446635, 1479403, 1483499, 1114859, 1114859, 1520363, 1114859, 1114859, 1114859,
  /* 22411 */ 1114859, 1114859, 1114859, 1762027, 1639147, 1114859, 1651435, 1659627, 1114859, 1114859, 1114859,
  /* 22422 */ 1729259, 1745643, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1508075, 1114859,
  /* 22433 */ 1114859, 1114859, 1114859, 1540843, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1839851,
  /* 22444 */ 1852139, 1114859, 1114859, 1114859, 1880811, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859,
  /* 22455 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1544939,
  /* 22466 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1962731, 1114859, 1114797, 1114797, 1114797, 1114797,
  /* 22477 */ 1114859, 1114859, 1114859, 1114859, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1421312, 1953792, 1122304,
  /* 22498 */ 1122304, 1364653, 1114797, 1114797, 1114797, 1114797, 1114797, 1438381, 1114797, 1114797, 1467053,
  /* 22509 */ 1114797, 1114797, 1114797, 1540781, 1114797, 1114797, 1114797, 1114797, 1573549, 1114797, 1114797,
  /* 22520 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1962669, 1114797, 0, 0, 0, 0, 1077248, 0, 0, 0, 1114797,
  /* 22536 */ 1917613, 1114797, 1114797, 1114797, 1954477, 1114797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
  /* 22559 */ 0, 0, 0, 1364715, 1114859, 1114859, 1114859, 1114859, 1114859, 1438443, 1114859, 1114859, 1467115,
  /* 22572 */ 1114859, 1114859, 1114859, 1524459, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859,
  /* 22583 */ 1602283, 1114859, 1114859, 1114859, 1114859, 1528555, 1549035, 1114859, 1561323, 1114859, 1114859,
  /* 22594 */ 1589995, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 0, 0, 0, 1376941, 1114797, 1114797,
  /* 22607 */ 1114797, 1114797, 1831597, 1377003, 1114859, 1114859, 1917675, 1114859, 1114859, 1114859, 1954539,
  /* 22618 */ 1114859, 1114797, 1114797, 1114797, 1114859, 1114859, 1114859, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0,
  /* 22638 */ 0, 0, 0, 1819, 0, 0, 1822, 0, 0, 1122304, 1122304, 1552384, 1122304, 1122304, 1695744, 1814528, 1122304,
  /* 22655 */ 1855488, 1122304, 1122304, 1122304, 1114797, 1114797, 1114797, 1409709, 1114797, 1696429, 1700525,
  /* 22666 */ 1114797, 1114797, 1770157, 1114797, 1114797, 1807021, 1114797, 1815213, 1114797, 1114797, 1856173,
  /* 22677 */ 1876653, 1114797, 1114797, 1925805, 1114797, 1966765, 0, 0, 0, 0, 1114859, 1114859, 1114859, 1409771,
  /* 22691 */ 1114859, 1114859, 1114859, 1831659, 1474560, 0, 1773568, 1114797, 1569453, 1790637, 1114797, 1114859,
  /* 22703 */ 1569515, 1790699, 1114859, 1593344, 1114859, 1114859, 1770219, 1114859, 1114859, 1807083, 1114859,
  /* 22714 */ 1815275, 1114859, 1114859, 1856235, 1876715, 1114859, 1114859, 1114859, 1925867, 1114859, 1966827,
  /* 22725 */ 1114797, 1114797, 1114859, 1114859, 0, 0, 0, 0, 1454080, 0, 0, 1482752, 1519616, 0, 0, 0, 0, 1765376, 0,
  /* 22744 */ 1929216, 0, 1576960, 0, 1556480, 1536000, 1585152, 0, 0, 1794048, 1114859, 1114859, 1811179, 1114859,
  /* 22758 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114797, 1114797, 1114859, 1114859, 1404928, 0, 0, 0, 0,
  /* 22772 */ 1440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1820, 0, 0, 0, 0, 0, 0, 1429504, 1630208, 0, 1122304, 1429504,
  /* 22796 */ 1122304, 1122304, 1630208, 1122304, 1122304, 1122304, 1122304, 1122304, 1372845, 1577707, 1630955,
  /* 22807 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1934059,
  /* 22818 */ 1114797, 1114797, 1114859, 0, 1441792, 0, 0, 0, 1703936, 0, 1822720, 0, 0, 1921024, 0, 1564672, 1785856,
  /* 22835 */ 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0, 1777664, 0, 1392640, 0, 1634304,
  /* 22863 */ 1392640, 1441792, 1122304, 1634304, 1822720, 1564672, 1785856, 1114797, 1458861, 1114797, 1114797,
  /* 22874 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1524397, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 22885 */ 1114797, 1487533, 1114797, 1114797, 1114797, 1114797, 1553069, 1114797, 1114797, 1610413, 1626797,
  /* 22896 */ 1114797, 1393325, 1401517, 1442477, 1114797, 1114797, 1114797, 1114797, 1565357, 1634989, 1704621,
  /* 22907 */ 1786541, 1114797, 1823405, 1114797, 1114797, 1114797, 1675949, 1684141, 1692333, 1114797, 1114797,
  /* 22918 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 746, 1114859,
  /* 22930 */ 1114859, 1114859, 1921709, 1114859, 1393387, 1401579, 1442539, 1114859, 1114859, 1114859, 1114859,
  /* 22941 */ 1565419, 1635051, 1704683, 1786603, 1114859, 1823467, 1114859, 1114859, 1753835, 1114859, 1114859,
  /* 22952 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1889003, 1114859, 1114859,
  /* 22963 */ 1487595, 1114859, 1114859, 1114859, 1114859, 1553131, 1114859, 1114859, 1610475, 1626859, 1114859,
  /* 22974 */ 1114859, 1696491, 1700587, 1114859, 1114859, 1921771, 1114797, 1114859, 0, 0, 0, 0, 0, 1720320, 0, 0, 0,
  /* 22991 */ 0, 1687552, 0, 1970176, 1499136, 1499136, 1114797, 1491629, 1499821, 1114797, 1114797, 1114797, 1114797,
  /* 23004 */ 1114797, 1114797, 1114797, 1114797, 1913517, 1114859, 1491691, 1499883, 1114859, 1114859, 1114859,
  /* 23015 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1913579, 1114797, 1114859, 0, 0, 0, 0, 1454, 0, 0, 0, 0, 0,
  /* 23033 */ 0, 0, 0, 0, 0, 0, 1848, 388, 388, 388, 388, 0, 0, 0, 1724416, 0, 0, 0, 0, 1114797, 1114797, 1114797,
  /* 23055 */ 1114797, 1114797, 1114797, 1114797, 1114797, 1839789, 1852077, 1114797, 1114797, 1114797, 1880749,
  /* 23066 */ 1114797, 1114797, 0, 0, 1818624, 0, 0, 0, 0, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 23081 */ 1114797, 1114797, 1114797, 1901229, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 23092 */ 1516267, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114797, 1114859, 1413120, 0,
  /* 23104 */ 1470464, 1835008, 0, 0, 0, 0, 1465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 831, 0, 0, 0, 0, 1114859, 1114859,
  /* 23129 */ 1835755, 1114797, 1114859, 1462272, 0, 0, 0, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 23142 */ 1114859, 1114859, 1757931, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859,
  /* 23153 */ 1114859, 1860331, 1114859, 1114859, 1897195, 1495725, 1114797, 1495787, 1114859, 1114797, 1114859,
  /* 23164 */ 1114797, 1114859, 1114797, 1114859, 1802925, 1802987, 0, 0, 0, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23186 */ 900, 0, 0, 0, 0, 0, 905, 0, 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0, 0, 0,
  /* 23214 */ 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0, 221184, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 23234 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0,
  /* 23249 */ 0, 0, 0, 0, 0, 596, 0, 0, 611, 0, 0, 0, 0, 0, 0, 221184, 221184, 221184, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0,
  /* 23277 */ 0, 0, 0, 1414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1458, 0, 0, 0, 1199, 0, 0, 0, 0, 32768, 0, 0, 1572864, 0,
  /* 23305 */ 1675264, 0, 0, 0, 0, 1335296, 0, 0, 0, 0, 1480, 0, 0, 1483, 388, 1485, 388, 388, 388, 388, 388, 388, 0, 0,
  /* 23329 */ 0, 0, 0, 0, 608, 0, 0, 0, 0, 1114112, 248, 0, 0, 0, 248, 0, 249, 0, 0, 0, 249, 0, 0, 0, 1421312, 1961984,
  /* 23355 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 248, 0, 249, 0, 0, 0, 0,
  /* 23371 */ 0, 1428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1432, 0, 0, 0, 0, 0, 1114112, 1916928, 1114112, 1114112, 1114112,
  /* 23394 */ 1953792, 1114112, 745, 0, 0, 0, 745, 0, 748, 0, 0, 0, 0, 1635, 0, 0, 0, 1639, 0, 0, 0, 0, 1643, 0, 0, 0,
  /* 23420 */ 0, 1649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 917, 918, 0, 0, 0, 0, 748, 0, 1363968, 1114112, 1114112,
  /* 23444 */ 1114112, 1114112, 1114112, 1437696, 1114112, 1114112, 1466368, 1114112, 1114112, 1114112, 1114112,
  /* 23455 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 1449984,
  /* 23467 */ 1114112, 1114112, 1925120, 1114112, 1966080, 745, 0, 748, 0, 1114112, 1114112, 1114112, 1409024, 1114112,
  /* 23481 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114857, 0,
  /* 23493 */ 1114112, 1114860, 1114112, 0, 0, 0, 225649, 225649, 225649, 0, 225649, 0, 0, 0, 0, 0, 0, 225649, 225649,
  /* 23512 */ 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649, 225649,
  /* 23525 */ 225649, 0, 0, 0, 0, 0, 0, 0, 0, 620, 0, 0, 0, 0, 0, 0, 0, 225768, 225768, 225649, 225649, 225775, 0, 0, 2,
  /* 23550 */ 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 241664, 0,
  /* 23580 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 845, 0, 2, 3, 94212, 5, 6, 0, 0, 253952, 0, 0, 0, 0, 253952, 0,
  /* 23610 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 0, 0, 0, 254322, 254322, 254322, 0, 254322, 0, 0, 0, 0, 0,
  /* 23638 */ 0, 254322, 253952, 253952, 253952, 253952, 254322, 253952, 253952, 254322, 254322, 254322, 254322, 254322,
  /* 23652 */ 254322, 254322, 254322, 254322, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254322, 254322,
  /* 23676 */ 254322, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1466, 0, 0, 0, 0, 0, 1472, 0, 0, 0, 0, 0, 0, 2166, 0,
  /* 23705 */ 439, 439, 439, 439, 439, 439, 439, 439, 1739, 439, 439, 439, 439, 439, 439, 439, 245760, 0, 266240, 0, 0,
  /* 23726 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 556, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 262144, 0, 0, 0, 0, 262144, 0,
  /* 23756 */ 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 612, 0, 0, 0, 0, 0, 0, 262515, 262515, 262515, 0, 262515,
  /* 23783 */ 0, 0, 0, 0, 0, 0, 262515, 262515, 262515, 0, 0, 2, 2, 3, 94212, 0, 6, 0, 0, 278528, 262515, 262515,
  /* 23805 */ 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515, 262515,
  /* 23818 */ 262515, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 258048, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
  /* 23846 */ 0, 2, 0, 180224, 299008, 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 1481, 0, 388, 388, 388,
  /* 23870 */ 388, 388, 388, 1488, 388, 388, 0, 2, 3, 94212, 1147116, 6, 0, 0, 0, 0, 240, 0, 0, 0, 0, 240, 0, 0, 0,
  /* 23895 */ 274432, 0, 274432, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 318, 0, 0, 0, 0, 0, 274432, 274432, 0, 0,
  /* 23919 */ 274432, 0, 0, 2, 2, 3, 94212, 1147116, 6, 0, 0, 0, 0, 0, 1636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
  /* 23948 */ 0, 0, 1389230, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 23961 */ 1114798, 1544878, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1581742, 1114798,
  /* 23972 */ 1598126, 1114798, 1606318, 1114798, 1114798, 1647278, 1114798, 1114798, 1667758, 1680046, 1114798,
  /* 23983 */ 1114798, 1114798, 1712814, 1114798, 1712814, 1114798, 1114798, 1753774, 1114798, 1114798, 1114798,
  /* 23994 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1888942, 1114798, 1114798, 1122304,
  /* 24005 */ 1122304, 1122304, 1961984, 0, 1122304, 1122304, 1114798, 1114798, 1114798, 1114798, 1114798, 1421998,
  /* 24017 */ 1426094, 1114798, 1114798, 1114798, 1114798, 1114798, 1933998, 1372846, 1114798, 1114798, 1430190,
  /* 24028 */ 1114798, 1114798, 1114798, 1512110, 1114798, 1114798, 1577646, 1630894, 1114798, 1114798, 1114798,
  /* 24039 */ 1114798, 1114798, 1114798, 1602222, 1114798, 1114798, 1114798, 1114798, 1639086, 1114798, 1651374,
  /* 24050 */ 1659566, 1114798, 1114798, 1114798, 1729198, 1745582, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24061 */ 1114798, 1114798, 1962670, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24072 */ 1114798, 0, 0, 0, 0, 0, 0, 0, 1816, 0, 0, 0, 0, 0, 0, 0, 0, 898, 0, 0, 0, 0, 0, 0, 0, 1953792, 1122304,
  /* 24099 */ 1122304, 1364654, 1114798, 1114798, 1114798, 1114798, 1114798, 1438382, 1114798, 1114798, 1467054,
  /* 24110 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1839790, 1852078, 1114798,
  /* 24121 */ 1114798, 1114798, 1880750, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24132 */ 1114798, 1114798, 1114798, 1528494, 1548974, 1114798, 1561262, 1114798, 1114798, 1589934, 1114798,
  /* 24143 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24154 */ 1114798, 1114798, 0, 1449984, 1114798, 1114798, 1757870, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24166 */ 1114798, 1114798, 1114798, 1114798, 1860270, 1114798, 1114798, 1897134, 1114798, 1917614, 1114798,
  /* 24177 */ 1114798, 1114798, 1954478, 1114798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1421312, 0, 0, 0, 1364654,
  /* 24200 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1438382, 1114798, 1114798, 1467054, 1114798, 1114798,
  /* 24211 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1901230, 1114798, 1114798, 1114798, 1114798,
  /* 24222 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24233 */ 1114798, 1114798, 1917614, 1114798, 1114798, 1114798, 1954478, 1114798, 1114798, 1114798, 1114798,
  /* 24244 */ 1114798, 1114798, 1114798, 0, 0, 0, 1376942, 1114798, 1114798, 1114798, 1114798, 1831598, 1376942,
  /* 24257 */ 1114798, 1122304, 1122304, 1552384, 1122304, 1122304, 1695744, 1814528, 1122304, 1855488, 1122304,
  /* 24268 */ 1122304, 1122304, 1114798, 1114798, 1114798, 1409710, 1114798, 1696430, 1700526, 1114798, 1114798,
  /* 24279 */ 1770158, 1114798, 1114798, 1807022, 1114798, 1815214, 1114798, 1114798, 1856174, 1876654, 1114798,
  /* 24290 */ 1114798, 1114798, 1925806, 1114798, 1114798, 1925806, 1114798, 1966766, 0, 0, 0, 0, 1114798, 1114798,
  /* 24304 */ 1114798, 1409710, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1962670, 1114798, 0, 0, 0, 0,
  /* 24318 */ 1077248, 0, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 0, 0, 0, 1060864, 248, 249, 0, 0, 0, 0, 0, 0,
  /* 24346 */ 0, 248, 249, 0, 0, 0, 0, 0, 508, 0, 1114798, 1966766, 1114798, 1114798, 1114798, 1114798, 0, 0, 0, 0,
  /* 24366 */ 1454080, 0, 0, 1482752, 1519616, 0, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 857, 0, 0, 0, 1114798,
  /* 24392 */ 1114798, 1114798, 1114798, 1761966, 1114798, 1114798, 1811118, 1114798, 1114798, 1114798, 1114798,
  /* 24403 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1404928, 0, 0, 0, 0, 1429504, 1630208, 0, 1122304,
  /* 24418 */ 1429504, 1122304, 1122304, 1630208, 1122304, 1122304, 1122304, 1122304, 1122304, 1372846, 1577646,
  /* 24429 */ 1630894, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24440 */ 1933998, 1114798, 1114798, 1114798, 1114798, 1114798, 1487534, 1114798, 1114798, 1114798, 1114798,
  /* 24451 */ 1553070, 1114798, 1114798, 1610414, 1626798, 1114798, 1114798, 1696430, 1700526, 0, 0, 0, 1777664, 0,
  /* 24465 */ 1392640, 0, 1634304, 1392640, 1441792, 1122304, 1634304, 1822720, 1564672, 1785856, 1114798, 0, 0, 0, 0,
  /* 24480 */ 0, 1114798, 1114798, 1381038, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24492 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1508014, 1114798, 1114798, 1114798, 1114798, 1540782,
  /* 24503 */ 1114798, 1114798, 1114798, 1114798, 1573550, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24514 */ 1114798, 1114798, 1114798, 1675950, 1684142, 1692334, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 24525 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 0, 1114798, 1114798, 1114798, 1921710,
  /* 24537 */ 1114798, 1393326, 1401518, 1442478, 1114798, 1114798, 1114798, 1114798, 1565358, 1634990, 1704622,
  /* 24548 */ 1786542, 1114798, 1823406, 1114798, 1114798, 1114798, 1114798, 1114798, 1921710, 1114798, 1114798, 0, 0,
  /* 24561 */ 0, 0, 0, 1720320, 0, 0, 0, 0, 1687552, 0, 1970176, 1499136, 1499136, 1114798, 1491630, 1499822, 1114798,
  /* 24578 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1913518, 1114798, 1114798, 0, 0, 0, 0, 0,
  /* 24593 */ 1724416, 0, 0, 0, 0, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 745, 0, 0,
  /* 24609 */ 748, 1114798, 1114798, 1389230, 1114798, 0, 0, 1818624, 0, 0, 0, 0, 1114798, 1114798, 1114798, 1114798,
  /* 24625 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 0, 0, 0, 0, 1114798,
  /* 24639 */ 1114798, 1532590, 1114798, 1708718, 1114798, 1114798, 1114798, 1835694, 1114798, 1114798, 1532590,
  /* 24650 */ 1114798, 1708718, 1114798, 0, 1441792, 0, 0, 0, 1703936, 0, 1822720, 0, 0, 1921024, 0, 1564672, 1785856,
  /* 24667 */ 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946, 0, 0, 0, 1950, 1114798, 1114798, 1835694, 1114798,
  /* 24692 */ 1114798, 1462272, 0, 0, 0, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 249856, 0, 0,
  /* 24707 */ 1114798, 1114798, 1114798, 1114798, 249856, 0, 1114798, 1114798, 1114798, 1831598, 1474560, 0, 1773568,
  /* 24720 */ 1114798, 1569454, 1790638, 1114798, 1114798, 1569454, 1790638, 1114798, 1593344, 1495726, 1114798,
  /* 24731 */ 1495726, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1802926, 1802926, 0, 0, 0, 0, 0,
  /* 24746 */ 0, 1193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 282624, 282624, 0, 0, 282624, 0, 0, 2, 2, 3,
  /* 24774 */ 94212, 5, 6, 0, 0, 0, 0, 0, 1690, 0, 0, 0, 0, 388, 388, 388, 388, 1696, 388, 1199, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24802 */ 0, 0, 0, 1205, 0, 0, 0, 0, 0, 1829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 973, 974, 439, 977, 0, 49152,
  /* 24830 */ 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 351, 0, 0, 0, 287, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0,
  /* 24860 */ 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 1430, 0, 1431, 0, 0, 0, 0, 0, 1435, 460, 460, 460, 460, 460, 460, 460,
  /* 24885 */ 460, 463, 463, 463, 463, 463, 463, 463, 463, 460, 460, 463, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0,
  /* 24908 */ 0, 0, 1929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1833, 0, 0, 0, 0, 0, 57575, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0,
  /* 24939 */ 0, 0, 0, 0, 883, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816, 0, 290816, 0, 0, 0, 0, 0, 0, 290816, 0,
  /* 24965 */ 0, 0, 292, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 586, 0, 290816, 290816, 290816, 290816,
  /* 24990 */ 290816, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1955, 1956, 0, 388, 1959, 388, 388, 388, 1962, 388,
  /* 25014 */ 1964, 0, 0, 909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 1904640, 0,
  /* 25040 */ 1368064, 0, 0, 1798144, 1941504, 233472, 0, 0, 1617920, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0, 0, 0, 1218, 0, 0,
  /* 25064 */ 1221, 0, 232, 3, 94212, 5, 237, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25093 */ 1470, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 587, 0, 0, 49152, 53248, 294912,
  /* 25122 */ 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 388, 439, 439, 439, 439, 439, 462, 439, 439, 294912, 294912,
  /* 25145 */ 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912,
  /* 25158 */ 294912, 0, 0, 0, 0, 0, 0, 0, 0, 850, 0, 388, 388, 973, 974, 439, 439, 0, 0, 294912, 294912, 294912, 0, 0,
  /* 25182 */ 232, 232, 3, 94212, 5, 2200050, 0, 0, 0, 0, 0, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 155648,
  /* 25207 */ 1060864, 248, 249, 0, 212992, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 317, 0, 0, 500, 0, 0, 0, 0, 0,
  /* 25234 */ 1060864, 248, 249, 0, 0, 0, 0, 0, 0, 0, 388, 439, 460, 460, 460, 439, 463, 460, 460, 232, 2200050, 0, 0,
  /* 25257 */ 0, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0, 0, 0,
  /* 25286 */ 0, 0, 0, 233, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901, 0, 902, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0,
  /* 25317 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 489, 489, 0, 0, 489, 0, 0, 2167281, 233, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  /* 25346 */ 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 625, 0, 0, 628, 0, 0, 0, 0, 501, 0, 0, 0, 1060864, 248, 249, 0, 0,
  /* 25374 */ 0, 0, 0, 0, 0, 388, 459, 459, 459, 459, 459, 483, 459, 459, 0, 0, 946176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25402 */ 0, 0, 594, 0, 0, 0, 0, 0, 817, 6, 0, 0, 303104, 0, 0, 0, 0, 1388544, 0, 0, 1417216, 0, 0, 0, 0, 0, 933888,
  /* 25429 */ 0, 0, 933888, 0, 0, 0, 0, 0, 0, 0, 913, 0, 0, 0, 0, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0, 253, 253, 301,
  /* 25459 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 886, 0, 0, 253, 321, 253, 0, 0, 0, 0, 0, 0, 0, 0, 331, 301, 0, 301,
  /* 25490 */ 0, 0, 0, 292, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 554, 555, 0, 49152, 53248, 0, 301, 0, 0, 0, 45056, 0, 0,
  /* 25517 */ 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 904, 0, 0, 358, 360, 372, 372, 372, 389, 372,
  /* 25546 */ 389, 389, 389, 389, 389, 389, 372, 412, 412, 412, 412, 412, 425, 425, 412, 412, 412, 412, 412, 412, 412,
  /* 25567 */ 412, 412, 389, 440, 440, 440, 440, 440, 464, 440, 440, 440, 440, 440, 484, 484, 484, 484, 484, 491, 491,
  /* 25588 */ 491, 491, 491, 491, 491, 491, 440, 440, 491, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1486848,
  /* 25611 */ 0, 1626112, 1699840, 0, 1748992, 0, 1806336, 0, 1814528, 0, 510, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25635 */ 0, 0, 920, 0, 526, 0, 528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 0, 0, 0, 507, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25667 */ 0, 0, 597, 0, 0, 0, 292, 292, 292, 0, 0, 0, 0, 0, 0, 0, 553, 0, 0, 388, 633, 388, 388, 388, 642, 388, 388,
  /* 25694 */ 650, 388, 388, 388, 657, 0, 0, 0, 603, 0, 0, 0, 0, 609, 0, 0, 0, 550, 0, 0, 0, 0, 0, 1744896, 0, 0, 0, 0,
  /* 25722 */ 1716224, 0, 0, 0, 0, 0, 0, 0, 1662976, 0, 0, 0, 0, 1069056, 0, 0, 0, 388, 660, 388, 388, 388, 614, 0, 0,
  /* 25747 */ 614, 0, 0, 0, 510, 0, 0, 0, 0, 0, 1859584, 0, 1937408, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
  /* 25776 */ 0, 576, 550, 0, 388, 388, 439, 439, 439, 692, 439, 439, 439, 439, 439, 716, 719, 721, 439, 726, 439, 729,
  /* 25798 */ 439, 439, 741, 439, 439, 439, 0, 462, 462, 462, 1575, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 25819 */ 462, 1618, 462, 462, 462, 462, 462, 754, 462, 462, 462, 462, 462, 778, 781, 783, 462, 788, 462, 791, 462,
  /* 25840 */ 462, 439, 439, 439, 439, 462, 462, 462, 462, 1403, 0, 1405, 0, 0, 1631, 803, 462, 462, 439, 439, 439, 729,
  /* 25862 */ 0, 0, 0, 462, 462, 462, 791, 0, 57574, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 855, 0, 0, 858, 0,
  /* 25891 */ 0, 2, 6, 0, 0, 0, 0, 819, 823, 0, 0, 0, 0, 0, 0, 0, 0, 853, 0, 0, 0, 0, 0, 0, 0, 292, 292, 861, 0, 0, 0,
  /* 25922 */ 0, 0, 0, 0, 0, 0, 0, 870, 0, 0, 0, 0, 1689, 0, 0, 0, 0, 0, 388, 388, 388, 1695, 388, 388, 388, 388, 0,
  /* 25949 */ 1506, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1266, 439, 439, 439, 439, 439, 439, 439, 906, 0,
  /* 25970 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 921, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388,
  /* 26002 */ 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 959, 388, 960, 388, 388, 388, 0, 0, 0, 0, 0,
  /* 26025 */ 0, 0, 1831, 1832, 0, 0, 0, 0, 0, 0, 0, 439, 439, 2199, 439, 439, 439, 439, 439, 439, 1031, 439, 439, 439,
  /* 26049 */ 439, 439, 439, 439, 745, 107540, 973, 748, 462, 462, 462, 462, 462, 462, 1590, 462, 462, 462, 1594, 462,
  /* 26069 */ 462, 462, 462, 462, 0, 0, 0, 439, 439, 2281, 2282, 439, 439, 462, 462, 0, 0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26095 */ 0, 0, 0, 0, 0, 1138, 0, 0, 1155, 0, 0, 1158, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
  /* 26126 */ 0, 0, 1222, 0, 0, 388, 388, 388, 388, 388, 388, 388, 1231, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 388, 388,
  /* 26151 */ 973, 974, 439, 439, 1249, 388, 388, 388, 0, 0, 0, 0, 0, 0, 388, 388, 973, 974, 439, 439, 439, 439, 439,
  /* 26174 */ 1018, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1314, 439, 439, 439, 439, 439, 439, 1322, 1325,
  /* 26194 */ 107540, 1327, 1325, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1349, 462, 462, 462, 462, 462, 462,
  /* 26214 */ 462, 462, 1343, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 462, 2159, 0, 462, 462,
  /* 26235 */ 462, 462, 1374, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1386, 462, 462, 462, 462, 1390, 462,
  /* 26255 */ 462, 462, 462, 1395, 439, 439, 439, 1399, 462, 462, 439, 439, 462, 57574, 57840, 2, 2, 3, 94212, 5, 6, 0,
  /* 26277 */ 0, 0, 0, 0, 1843, 1844, 0, 0, 0, 0, 0, 1849, 388, 388, 1851, 0, 1410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26306 */ 0, 0, 1139, 0, 0, 0, 0, 1426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 523, 524, 0, 0, 0, 1452, 0, 0, 0,
  /* 26336 */ 0, 0, 0, 0, 0, 0, 1460, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 571, 1477, 0, 0, 1479, 0, 0,
  /* 26367 */ 0, 388, 388, 388, 388, 1486, 1487, 388, 388, 388, 388, 0, 388, 388, 439, 439, 439, 439, 439, 439, 439,
  /* 26388 */ 439, 439, 742, 439, 439, 0, 462, 462, 462, 388, 388, 388, 388, 1477, 388, 388, 439, 439, 439, 439, 439,
  /* 26409 */ 439, 1513, 439, 1515, 439, 439, 439, 1518, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0,
  /* 26430 */ 462, 462, 751, 439, 439, 439, 439, 1533, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1550,
  /* 26451 */ 439, 439, 439, 439, 439, 439, 439, 1544, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1873,
  /* 26472 */ 439, 439, 439, 439, 439, 439, 439, 1748, 439, 439, 0, 1750, 0, 0, 0, 0, 0, 1752, 0, 0, 0, 292, 292, 292,
  /* 26496 */ 0, 0, 0, 0, 0, 0, 552, 0, 0, 0, 0, 578, 0, 0, 0, 0, 552, 578, 0, 0, 0, 0, 0, 0, 1060864, 248, 249, 200704,
  /* 26524 */ 0, 0, 0, 0, 0, 0, 0, 1692, 0, 0, 388, 388, 388, 388, 388, 388, 948, 388, 388, 388, 388, 388, 388, 388,
  /* 26548 */ 388, 388, 388, 1704, 388, 388, 1706, 388, 388, 462, 462, 462, 462, 1793, 462, 462, 439, 439, 439, 462,
  /* 26568 */ 462, 462, 0, 0, 0, 1404, 0, 820, 0, 0, 0, 1406, 0, 824, 0, 0, 0, 0, 0, 1804, 0, 0, 0, 0, 0, 0, 1808, 0, 0,
  /* 26597 */ 0, 0, 0, 0, 0, 1845, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 439,
  /* 26621 */ 439, 439, 1876, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1317, 439, 439, 1903,
  /* 26641 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1369, 0, 0, 1926, 0, 0, 0, 0,
  /* 26664 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1168, 0, 0, 462, 462, 462, 462, 2008, 462, 462, 462, 462, 439, 439, 462, 462,
  /* 26689 */ 0, 0, 0, 0, 0, 0, 1923, 0, 0, 0, 2161, 0, 0, 0, 0, 2165, 0, 2167, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 26715 */ 0, 0, 0, 0, 1325, 0, 0, 0, 0, 2192, 0, 0, 0, 2195, 0, 439, 439, 439, 439, 439, 439, 439, 439, 439, 462,
  /* 26740 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 0, 2223, 0, 2225, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 26761 */ 439, 439, 462, 462, 462, 462, 2069, 2070, 2071, 462, 462, 462, 0, 0, 254, 255, 256, 0, 0, 0, 0, 0, 0, 0,
  /* 26785 */ 0, 0, 0, 0, 926, 0, 0, 0, 0, 0, 49152, 53248, 0, 0, 0, 340, 0, 45056, 0, 340, 0, 0, 0, 0, 0, 0, 388, 0,
  /* 26813 */ 388, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 0, 441, 441, 441, 441, 441, 441, 441, 441,
  /* 26838 */ 465, 465, 465, 465, 465, 465, 465, 465, 441, 441, 465, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 26861 */ 257, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0,
  /* 26892 */ 0, 0, 0, 0, 439, 439, 439, 1307, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1729,
  /* 26914 */ 439, 439, 0, 0, 0, 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 583, 0, 0, 0, 0, 0, 0, 462, 462, 462, 1756,
  /* 26943 */ 462, 1758, 462, 462, 462, 462, 462, 462, 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 439, 462, 462, 462,
  /* 26965 */ 462, 2211, 462, 2213, 462, 2215, 462, 439, 462, 0, 0, 0, 0, 264, 0, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
  /* 26991 */ 0, 0, 0, 0, 0, 135168, 259, 49152, 53248, 0, 0, 261, 341, 342, 45056, 342, 341, 349, 342, 349, 0, 349,
  /* 27013 */ 349, 361, 373, 373, 373, 391, 406, 391, 391, 391, 391, 391, 391, 409, 413, 413, 423, 423, 424, 413, 413,
  /* 27034 */ 424, 424, 424, 424, 424, 424, 424, 424, 424, 391, 442, 442, 442, 442, 442, 466, 442, 442, 442, 442, 442,
  /* 27055 */ 442, 442, 442, 442, 442, 466, 466, 466, 466, 466, 466, 466, 466, 442, 442, 466, 57574, 57574, 2, 2, 3,
  /* 27076 */ 94212, 5, 6, 0, 0, 0, 0, 288, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 1544192, 0, 1581056, 1597440, 0, 0,
  /* 27102 */ 1646592, 1667072, 1679360, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 627, 629, 0, 0, 292, 292, 0,
  /* 27128 */ 0, 0, 0, 0, 0, 866, 834, 0, 0, 0, 0, 0, 0, 0, 1931, 0, 0, 0, 0, 0, 0, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 0,
  /* 27159 */ 388, 388, 388, 946, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1247, 388, 0, 0,
  /* 27181 */ 0, 925, 0, 0, 0, 0, 0, 0, 388, 388, 973, 974, 439, 976, 978, 439, 439, 439, 439, 439, 987, 439, 992, 439,
  /* 27205 */ 439, 439, 439, 439, 998, 439, 0, 0, 107540, 0, 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 27227 */ 1581, 462, 462, 1584, 462, 462, 462, 462, 1059, 462, 1064, 462, 462, 462, 462, 462, 1070, 462, 462, 462,
  /* 27247 */ 439, 439, 439, 439, 0, 0, 0, 462, 462, 462, 462, 0, 230, 462, 1354, 462, 462, 462, 462, 462, 462, 462,
  /* 27269 */ 462, 462, 462, 462, 462, 462, 462, 462, 1775, 462, 462, 1372, 1373, 462, 462, 462, 462, 462, 462, 462,
  /* 27289 */ 462, 462, 462, 462, 462, 462, 1788, 462, 462, 0, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
  /* 27315 */ 1170, 388, 388, 388, 1854, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 27336 */ 439, 439, 439, 439, 439, 439, 2111, 439, 439, 439, 1980, 1981, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 27356 */ 439, 439, 462, 462, 2068, 462, 462, 462, 462, 462, 462, 462, 439, 439, 439, 2064, 439, 439, 462, 462, 462,
  /* 27377 */ 462, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 2191, 0, 0, 0, 0, 0, 0, 439, 439, 439, 2200, 439,
  /* 27401 */ 439, 439, 439, 439, 0, 0, 0, 0, 462, 462, 462, 462, 1890, 462, 462, 439, 462, 462, 462, 2210, 462, 462,
  /* 27423 */ 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 2133, 0, 0, 0, 263, 49152, 53248, 0, 0, 0, 303, 0,
  /* 27448 */ 45056, 0, 303, 0, 0, 0, 352, 0, 0, 0, 292, 292, 292, 0, 0, 0, 0, 0, 551, 0, 0, 0, 0, 0, 0, 1060864, 25078,
  /* 27475 */ 249, 0, 0, 0, 0, 0, 0, 0, 248, 249, 0, 0, 0, 506, 0, 0, 0, 0, 359, 362, 374, 374, 374, 392, 374, 392, 392,
  /* 27502 */ 392, 392, 392, 392, 410, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
  /* 27523 */ 431, 414, 392, 443, 443, 443, 443, 443, 467, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 467, 467,
  /* 27544 */ 467, 467, 467, 467, 467, 467, 443, 443, 467, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 315, 0, 316,
  /* 27568 */ 0, 0, 0, 0, 0, 0, 316, 0, 320, 620, 0, 0, 0, 0, 620, 0, 0, 0, 0, 620, 0, 0, 0, 0, 620, 0, 0, 847, 848, 0,
  /* 27598 */ 0, 0, 0, 0, 0, 0, 856, 0, 0, 0, 0, 0, 0, 1456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 0, 0, 292, 292,
  /* 27630 */ 0, 0, 863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27663 */ 0, 0, 1137, 0, 0, 0, 929, 0, 0, 0, 0, 0, 932, 388, 934, 388, 388, 388, 388, 388, 388, 388, 962, 388, 388,
  /* 27688 */ 0, 0, 0, 0, 0, 0, 388, 945, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 954, 388, 388,
  /* 27711 */ 388, 388, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1680, 1681, 0, 0, 1684, 388, 956, 388, 388, 388, 388, 388,
  /* 27737 */ 388, 388, 388, 0, 848, 0, 0, 967, 847, 439, 439, 1015, 439, 1017, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 27759 */ 439, 439, 439, 439, 1882, 439, 439, 439, 439, 439, 439, 1037, 439, 439, 439, 439, 745, 107540, 973, 748,
  /* 27779 */ 462, 1049, 462, 462, 439, 439, 1625, 1626, 462, 462, 1628, 1629, 1403, 0, 1405, 0, 0, 0, 0, 304, 0, 388,
  /* 27801 */ 330, 388, 388, 388, 388, 388, 388, 330, 0, 1087, 462, 1089, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 27822 */ 462, 462, 462, 462, 439, 439, 462, 462, 1109, 462, 462, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462,
  /* 27844 */ 462, 462, 462, 462, 1578, 462, 462, 462, 462, 462, 462, 462, 439, 439, 439, 462, 462, 462, 1799, 1800, 0,
  /* 27865 */ 0, 0, 0, 1439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1448, 0, 0, 0, 292, 292, 292, 0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
  /* 27896 */ 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
  /* 27916 */ 388, 388, 973, 974, 439, 439, 439, 439, 1555, 439, 1557, 439, 439, 439, 0, 0, 0, 0, 1325, 0, 0, 0, 0, 322,
  /* 27940 */ 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 296, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1422, 0, 1686,
  /* 27970 */ 1687, 0, 0, 0, 0, 0, 0, 0, 388, 1693, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 388, 1255, 973, 974, 439, 439,
  /* 27996 */ 388, 388, 1708, 439, 439, 1710, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 744, 439, 0, 462, 462,
  /* 28017 */ 462, 439, 439, 439, 439, 1735, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 996, 439, 439, 439,
  /* 28038 */ 439, 0, 0, 0, 462, 462, 1755, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1786, 462, 462, 462, 462,
  /* 28060 */ 462, 462, 462, 462, 462, 1780, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1101, 462, 462, 462,
  /* 28081 */ 462, 388, 1853, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 28102 */ 439, 439, 439, 1717, 439, 439, 439, 439, 439, 1877, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 28123 */ 1269, 439, 439, 439, 439, 462, 462, 462, 1895, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 28144 */ 462, 2003, 2004, 462, 462, 1904, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 28164 */ 800, 462, 2028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1449, 439, 439, 439, 439, 2065, 439, 462,
  /* 28190 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1074, 462, 462, 462, 2125, 2126, 0,
  /* 28211 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1419, 0, 0, 0, 0, 268, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1185,
  /* 28243 */ 0, 300, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1219, 0, 0, 266, 49152, 53248, 0, 0, 0, 0, 0,
  /* 28271 */ 45056, 0, 0, 0, 269, 268, 0, 0, 0, 0, 1928, 0, 0, 0, 0, 0, 0, 0, 1934, 0, 0, 0, 0, 439, 2227, 439, 439,
  /* 28298 */ 439, 439, 439, 439, 439, 439, 462, 2236, 268, 268, 363, 375, 385, 375, 393, 375, 393, 393, 393, 393, 393,
  /* 28319 */ 393, 375, 415, 415, 415, 415, 415, 426, 426, 415, 415, 415, 415, 415, 415, 415, 415, 415, 393, 444, 444,
  /* 28340 */ 444, 444, 444, 468, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 468, 468, 468, 468, 468, 468, 468,
  /* 28361 */ 468, 444, 444, 468, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 324, 0, 0, 327, 0, 0, 0, 0, 327, 0,
  /* 28387 */ 327, 0, 0, 0, 558, 0, 0, 561, 0, 0, 0, 0, 0, 0, 0, 569, 0, 0, 0, 0, 1954, 0, 0, 0, 388, 388, 388, 388,
  /* 28415 */ 1961, 388, 388, 388, 388, 0, 388, 388, 439, 439, 439, 1511, 439, 439, 439, 439, 439, 0, 0, 0, 0, 462, 462,
  /* 28438 */ 1889, 462, 462, 462, 462, 0, 0, 0, 604, 605, 0, 607, 0, 0, 610, 0, 0, 0, 0, 0, 0, 0, 1957, 388, 388, 388,
  /* 28464 */ 388, 388, 388, 1963, 388, 0, 626, 0, 388, 388, 635, 388, 638, 388, 388, 646, 388, 652, 388, 656, 388, 388,
  /* 28486 */ 388, 388, 666, 0, 0, 0, 0, 615, 0, 0, 0, 615, 0, 0, 0, 0, 2098, 0, 0, 0, 388, 388, 388, 388, 388, 388,
  /* 28512 */ 388, 439, 1709, 439, 439, 439, 439, 439, 1714, 439, 439, 439, 439, 439, 439, 439, 2106, 439, 2107, 2108,
  /* 28532 */ 439, 439, 439, 439, 439, 0, 0, 0, 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 28555 */ 462, 462, 802, 659, 388, 388, 388, 388, 0, 0, 0, 0, 554, 0, 0, 0, 610, 0, 618, 0, 670, 0, 0, 0, 0, 0, 0,
  /* 28582 */ 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 292, 292, 292, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 249, 249, 249, 249, 249,
  /* 28610 */ 249, 249, 249, 249, 681, 670, 0, 0, 388, 388, 439, 439, 691, 439, 695, 439, 439, 707, 439, 717, 439, 722,
  /* 28632 */ 439, 439, 728, 731, 735, 439, 439, 439, 439, 439, 0, 462, 462, 462, 439, 439, 439, 439, 0, 0, 0, 462, 462,
  /* 28655 */ 462, 462, 0, 57574, 753, 462, 757, 462, 462, 769, 462, 779, 462, 784, 462, 462, 790, 793, 797, 462, 0,
  /* 28676 */ 1403, 0, 0, 0, 0, 0, 1405, 0, 0, 0, 0, 0, 0, 0, 388, 388, 935, 388, 388, 388, 388, 388, 388, 292, 292, 0,
  /* 28702 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 869, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 1232, 388, 388, 388,
  /* 28728 */ 388, 0, 388, 388, 439, 439, 439, 439, 439, 439, 439, 1514, 439, 0, 0, 875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28754 */ 0, 887, 0, 0, 0, 292, 292, 292, 0, 548, 0, 0, 0, 0, 0, 0, 0, 0, 925696, 292, 0, 0, 925696, 0, 925696, 0,
  /* 28780 */ 0, 0, 891, 581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28812 */ 0, 0, 0, 0, 1199, 0, 1032, 439, 439, 439, 439, 1039, 439, 439, 745, 107540, 973, 748, 462, 462, 462, 462,
  /* 28834 */ 462, 462, 1602, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1899, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 28855 */ 462, 462, 462, 1091, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1104, 462, 0, 1403, 0, 0, 0, 0, 0, 1405,
  /* 28878 */ 0, 0, 0, 0, 0, 1408, 0, 0, 0, 292, 292, 292, 0, 0, 0, 0, 550, 0, 0, 0, 0, 0, 0, 326, 0, 0, 316, 0, 0, 0,
  /* 28908 */ 332, 0, 0, 462, 462, 462, 1111, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 462, 462, 1577,
  /* 28930 */ 462, 1579, 462, 462, 462, 1582, 462, 462, 0, 0, 0, 1144, 0, 1146, 0, 0, 1148, 0, 0, 0, 1151, 0, 1153,
  /* 28953 */ 1154, 1171, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 0, 1482, 388, 1484, 388, 388, 388, 388,
  /* 28979 */ 388, 388, 388, 1240, 388, 388, 388, 388, 388, 388, 388, 388, 388, 950, 388, 388, 388, 388, 388, 388, 0, 0,
  /* 29001 */ 1189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 292, 292, 292, 547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 854,
  /* 29031 */ 0, 0, 0, 0, 0, 0, 388, 1235, 388, 388, 388, 388, 1239, 388, 388, 388, 388, 1243, 388, 388, 388, 388, 0, 0,
  /* 29055 */ 0, 0, 0, 0, 1254, 388, 973, 974, 439, 439, 439, 1258, 439, 439, 1261, 439, 439, 439, 439, 439, 439, 439,
  /* 29077 */ 1270, 439, 439, 439, 439, 439, 734, 439, 439, 439, 439, 439, 439, 0, 462, 462, 462, 439, 439, 439, 439, 0,
  /* 29099 */ 0, 580, 462, 462, 462, 462, 0, 57574, 439, 1274, 439, 439, 439, 1277, 439, 439, 439, 439, 439, 439, 439,
  /* 29120 */ 1284, 1286, 439, 0, 1325, 107540, 0, 1325, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1100, 462,
  /* 29140 */ 462, 462, 1103, 462, 1304, 439, 1306, 439, 439, 439, 439, 439, 439, 1313, 439, 439, 439, 439, 439, 439,
  /* 29160 */ 439, 1559, 0, 0, 0, 0, 1325, 0, 0, 0, 1320, 0, 1325, 107540, 0, 1325, 1330, 1331, 462, 1332, 462, 462,
  /* 29182 */ 1335, 462, 462, 462, 439, 439, 439, 439, 0, 0, 188416, 462, 462, 462, 462, 0, 57574, 462, 462, 462, 462,
  /* 29203 */ 1344, 462, 462, 462, 462, 1348, 462, 462, 462, 1351, 462, 462, 439, 1624, 439, 439, 462, 1627, 462, 462,
  /* 29223 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2092, 0, 0, 0, 0, 0, 1370, 1371, 462, 462, 462, 462, 462, 462, 1378, 462, 1380,
  /* 29249 */ 462, 462, 462, 462, 462, 0, 0, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 29271 */ 2073, 462, 462, 1387, 462, 462, 462, 462, 462, 462, 1394, 439, 439, 1397, 439, 462, 462, 1401, 0, 0, 0,
  /* 29292 */ 1412, 0, 0, 0, 0, 1417, 0, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 439, 2202, 439, 439, 439, 0, 0, 0, 1464,
  /* 29318 */ 0, 0, 0, 0, 0, 0, 1471, 0, 1473, 0, 0, 1476, 388, 388, 1505, 388, 0, 388, 1507, 439, 439, 439, 439, 439,
  /* 29342 */ 439, 439, 439, 439, 1267, 439, 439, 439, 439, 439, 439, 1516, 439, 439, 439, 439, 439, 1521, 439, 1523,
  /* 29362 */ 439, 439, 439, 439, 439, 439, 439, 0, 0, 0, 1751, 0, 1323, 0, 0, 0, 439, 1541, 1542, 439, 439, 439, 439,
  /* 29385 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1029, 439, 439, 1585, 462, 1587, 462, 462, 462, 462, 462,
  /* 29405 */ 462, 462, 462, 462, 462, 462, 462, 462, 792, 462, 462, 1645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29432 */ 1644, 1659, 0, 0, 0, 1662, 0, 1664, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 925, 0, 0, 0, 0, 0, 0, 0, 439, 1720,
  /* 29459 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 594359, 439, 0, 1325, 107540, 0, 1325, 462,
  /* 29479 */ 462, 462, 462, 462, 462, 462, 462, 462, 1339, 1731, 439, 1733, 439, 439, 439, 1737, 439, 439, 439, 439,
  /* 29499 */ 1742, 439, 439, 439, 439, 439, 439, 1019, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1025, 439, 439,
  /* 29519 */ 439, 439, 439, 439, 439, 439, 1746, 1747, 439, 439, 439, 0, 1750, 0, 0, 0, 0, 0, 1752, 0, 0, 0, 292, 292,
  /* 29543 */ 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 973, 974, 439, 439, 0, 0, 0, 462, 462, 462, 462, 1757,
  /* 29568 */ 462, 462, 462, 462, 462, 462, 462, 1763, 462, 1765, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 29589 */ 462, 594382, 462, 462, 462, 462, 462, 1358, 1360, 462, 462, 462, 462, 462, 462, 1367, 1368, 462, 462, 462,
  /* 29609 */ 462, 462, 1345, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1604, 462, 462, 462, 462, 462, 1776,
  /* 29629 */ 462, 1778, 462, 462, 462, 1782, 462, 462, 462, 462, 1787, 462, 462, 462, 462, 462, 462, 1614, 462, 462,
  /* 29649 */ 462, 462, 462, 462, 462, 462, 462, 439, 439, 439, 1398, 462, 462, 462, 462, 462, 1791, 1792, 462, 462,
  /* 29669 */ 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 0, 388, 388, 388, 388, 388, 1229, 388, 388, 388, 388, 388,
  /* 29691 */ 388, 961, 388, 963, 388, 0, 0, 0, 0, 0, 0, 0, 2197, 439, 439, 439, 439, 439, 439, 439, 439, 1023, 1024,
  /* 29714 */ 439, 439, 439, 439, 439, 439, 439, 1041, 745, 107540, 973, 748, 462, 462, 462, 462, 0, 0, 0, 1828, 0, 0,
  /* 29736 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1433, 0, 0, 0, 388, 388, 388, 388, 1855, 388, 388, 388, 388, 388, 388, 388,
  /* 29762 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1716, 439, 439, 439, 439, 439, 1866, 439, 439, 439, 439,
  /* 29783 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1743, 439, 439, 1875, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 29804 */ 1880, 439, 439, 439, 439, 439, 439, 439, 1560, 1750, 0, 0, 0, 0, 1566, 1752, 0, 1893, 462, 462, 462, 462,
  /* 29826 */ 462, 462, 462, 462, 462, 462, 462, 462, 1902, 462, 462, 439, 1915, 462, 1917, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29850 */ 0, 1652, 0, 0, 1655, 0, 0, 0, 1937, 0, 0, 0, 1939, 0, 0, 0, 0, 1944, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0,
  /* 29879 */ 0, 0, 0, 0, 0, 0, 0, 0, 439, 1979, 439, 439, 439, 439, 439, 439, 1984, 1986, 439, 439, 1989, 1990, 462,
  /* 29902 */ 462, 462, 439, 462, 0, 2262, 0, 2264, 439, 439, 439, 439, 439, 439, 462, 2179, 462, 462, 462, 2183, 462,
  /* 29923 */ 462, 462, 462, 439, 462, 0, 0, 2087, 0, 0, 0, 2090, 0, 0, 0, 0, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 0,
  /* 29951 */ 462, 1994, 462, 462, 462, 462, 462, 462, 462, 1999, 462, 462, 2002, 462, 462, 462, 439, 439, 439, 730, 0,
  /* 29972 */ 0, 0, 462, 462, 462, 792, 0, 57574, 462, 462, 462, 2007, 2009, 462, 462, 2012, 2013, 2014, 439, 2016, 462,
  /* 29993 */ 0, 0, 0, 0, 388, 388, 388, 388, 1228, 388, 388, 388, 388, 388, 388, 1234, 0, 2021, 0, 2023, 0, 0, 0, 0, 0,
  /* 30018 */ 0, 0, 0, 0, 0, 0, 0, 1446, 0, 0, 0, 439, 2050, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2058,
  /* 30042 */ 439, 439, 439, 439, 439, 983, 989, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1740, 439, 439, 439, 439,
  /* 30063 */ 1744, 439, 462, 462, 462, 2076, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 2084, 462, 462, 462,
  /* 30083 */ 462, 462, 1359, 462, 462, 462, 1364, 462, 462, 462, 462, 462, 462, 439, 439, 439, 1028, 0, 0, 462, 462,
  /* 30104 */ 462, 1100, 2085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2093, 0, 0, 2094, 0, 0, 2097, 0, 0, 0, 0, 0, 388, 388,
  /* 30132 */ 388, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 1973, 439, 439, 439, 439, 439, 439, 738,
  /* 30153 */ 439, 439, 439, 439, 439, 0, 462, 462, 462, 2123, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 2132, 0, 0, 2135,
  /* 30177 */ 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 439, 439, 439,
  /* 30207 */ 439, 2140, 439, 439, 439, 439, 439, 439, 439, 0, 0, 1564, 0, 0, 0, 0, 0, 1570, 462, 462, 462, 462, 2150,
  /* 30230 */ 462, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 439, 2266, 439, 439, 439, 2270, 462, 439, 2177,
  /* 30252 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 2187, 439, 462, 0, 0, 1126, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
  /* 30277 */ 0, 0, 0, 843776, 0, 0, 0, 0, 0, 0, 0, 0, 1469, 0, 0, 0, 0, 0, 1475, 0, 439, 462, 462, 2209, 462, 462, 462,
  /* 30304 */ 462, 462, 462, 462, 439, 462, 2219, 2220, 0, 0, 0, 380, 386, 386, 399, 386, 399, 399, 399, 399, 399, 399,
  /* 30326 */ 380, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 399, 450, 450, 450,
  /* 30347 */ 450, 450, 474, 450, 450, 462, 2237, 462, 2239, 462, 462, 462, 462, 2244, 2245, 0, 0, 0, 0, 0, 0, 0,
  /* 30369 */ 139264, 0, 0, 0, 0, 0, 0, 139264, 0, 2272, 462, 462, 462, 2276, 0, 0, 0, 439, 439, 439, 439, 439, 439,
  /* 30392 */ 462, 462, 439, 462, 439, 462, 439, 462, 439, 462, 0, 0, 0, 0, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2033, 0,
  /* 30419 */ 0, 0, 0, 0, 296, 49152, 53248, 0, 0, 296, 0, 343, 45056, 343, 0, 343, 343, 343, 0, 343, 343, 364, 0, 0, 0,
  /* 30444 */ 394, 296, 394, 394, 394, 394, 394, 394, 296, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
  /* 30465 */ 364, 364, 364, 364, 437, 445, 445, 445, 445, 445, 469, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
  /* 30486 */ 469, 469, 469, 469, 469, 469, 469, 469, 445, 445, 469, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 30509 */ 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2057, 439, 439, 439, 439, 0, 0, 0, 529,
  /* 30531 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0, 0, 0, 0, 0, 0, 388, 632, 388, 388, 388, 388, 388, 388, 388,
  /* 30559 */ 388, 388, 388, 388, 388, 439, 439, 1862, 439, 462, 462, 462, 687, 439, 439, 439, 0, 0, 0, 749, 462, 462,
  /* 30581 */ 462, 0, 57574, 292, 292, 0, 0, 0, 0, 0, 0, 0, 835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1206, 1207,
  /* 30610 */ 439, 439, 980, 439, 439, 439, 988, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1280, 439, 439, 439, 439,
  /* 30631 */ 439, 439, 1052, 462, 462, 462, 1060, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1381, 462,
  /* 30651 */ 462, 462, 462, 439, 1305, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2061,
  /* 30672 */ 1436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1658, 462, 462, 462, 462, 1600, 462, 462, 462, 462,
  /* 30698 */ 462, 462, 462, 462, 462, 462, 462, 1382, 462, 462, 462, 462, 0, 0, 2022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30724 */ 0, 0, 1474, 0, 0, 0, 49152, 53248, 0, 0, 0, 0, 344, 45056, 344, 0, 344, 344, 344, 353, 344, 344, 344, 376,
  /* 30748 */ 376, 376, 395, 376, 395, 395, 395, 395, 395, 395, 376, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
  /* 30769 */ 416, 416, 416, 416, 416, 416, 395, 446, 446, 446, 446, 446, 470, 446, 446, 446, 446, 446, 446, 446, 446,
  /* 30790 */ 446, 446, 470, 470, 470, 470, 470, 470, 470, 470, 446, 446, 470, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0,
  /* 30813 */ 0, 0, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 710, 439, 2, 6, 0, 0, 0, 0, 820, 824, 0, 0, 0, 0,
  /* 30839 */ 0, 0, 0, 0, 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 1323, 1325, 107540, 1328, 1325, 462, 462, 462, 462,
  /* 30864 */ 462, 462, 462, 462, 462, 462, 2000, 2001, 462, 462, 462, 462, 0, 1826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30890 */ 0, 0, 1421, 0, 1925, 0, 0, 1927, 0, 0, 0, 0, 1932, 0, 0, 0, 0, 0, 0, 0, 439, 439, 439, 439, 2201, 439,
  /* 30916 */ 2203, 439, 2205, 0, 0, 1938, 0, 0, 1940, 0, 0, 0, 0, 0, 0, 1947, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439,
  /* 30942 */ 439, 439, 706, 439, 439, 439, 439, 439, 984, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1281, 439,
  /* 30963 */ 439, 439, 439, 439, 0, 0, 1952, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 2048,
  /* 30986 */ 2038, 0, 0, 0, 0, 2041, 388, 388, 388, 388, 388, 388, 388, 2046, 2047, 439, 0, 1325, 107540, 0, 1325, 462,
  /* 31008 */ 462, 462, 462, 462, 462, 1336, 462, 462, 462, 439, 439, 809, 439, 0, 0, 0, 462, 462, 815, 462, 0, 57574,
  /* 31030 */ 2049, 439, 439, 439, 439, 439, 439, 439, 2056, 439, 439, 439, 439, 2059, 439, 439, 439, 439, 439, 1263,
  /* 31050 */ 1264, 439, 439, 439, 1268, 439, 439, 439, 439, 439, 0, 1564, 0, 1570, 462, 462, 462, 462, 462, 462, 462,
  /* 31071 */ 1097, 462, 462, 462, 462, 462, 462, 462, 462, 1347, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 31092 */ 2077, 462, 462, 462, 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 0, 1920, 0, 0, 0, 0, 0, 0, 0, 489,
  /* 31116 */ 489, 489, 489, 489, 489, 489, 489, 489, 439, 439, 439, 439, 2103, 439, 439, 439, 439, 439, 439, 2109, 439,
  /* 31137 */ 439, 439, 439, 439, 439, 1040, 439, 745, 107540, 973, 748, 1047, 462, 462, 1051, 2285, 2286, 462, 462, 0,
  /* 31157 */ 0, 0, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 0, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 0,
  /* 31181 */ 439, 439, 439, 2290, 462, 462, 462, 2292, 0, 542, 0, 0, 292, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31208 */ 0, 872, 462, 755, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1086, 462, 462,
  /* 31229 */ 804, 462, 439, 439, 439, 439, 0, 0, 0, 462, 462, 462, 462, 0, 57574, 388, 388, 388, 1252, 0, 0, 0, 0, 0,
  /* 31253 */ 0, 388, 388, 973, 974, 439, 439, 439, 439, 439, 1293, 1294, 439, 1296, 1297, 439, 439, 439, 439, 439, 439,
  /* 31274 */ 439, 1535, 439, 439, 439, 439, 439, 439, 439, 439, 0, 1563, 0, 0, 1325, 0, 1569, 0, 1409, 0, 0, 0, 0, 0,
  /* 31298 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 0, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 462,
  /* 31330 */ 2124, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1407, 0, 0, 0, 0, 270, 271, 272, 0, 0, 0, 0, 0,
  /* 31359 */ 0, 0, 0, 0, 0, 0, 1809, 0, 0, 0, 0, 270, 0, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 2030,
  /* 31389 */ 2031, 0, 0, 0, 0, 0, 0, 2034, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 698, 439, 439, 439, 439, 439,
  /* 31414 */ 439, 1546, 439, 439, 439, 439, 439, 439, 439, 1551, 439, 0, 270, 0, 0, 323, 0, 0, 0, 0, 0, 0, 270, 0, 0,
  /* 31439 */ 0, 0, 0, 0, 1637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 49152, 53248, 0, 0, 0, 0, 0, 45056,
  /* 31469 */ 0, 0, 0, 0, 0, 354, 0, 0, 0, 382, 382, 382, 403, 382, 403, 403, 403, 403, 403, 403, 382, 421, 382, 382,
  /* 31493 */ 382, 382, 421, 421, 428, 382, 428, 428, 428, 382, 382, 382, 428, 428, 428, 428, 430, 382, 436, 403, 455,
  /* 31514 */ 455, 455, 455, 455, 479, 455, 455, 455, 455, 455, 455, 455, 455, 479, 479, 479, 479, 479, 479, 479, 479,
  /* 31535 */ 455, 455, 479, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
  /* 31563 */ 0, 323, 377, 377, 377, 396, 377, 396, 396, 396, 396, 396, 396, 377, 417, 422, 422, 422, 422, 422, 427,
  /* 31584 */ 427, 422, 422, 422, 422, 422, 422, 422, 422, 422, 432, 422, 396, 447, 447, 447, 447, 447, 471, 447, 447,
  /* 31605 */ 447, 447, 447, 447, 447, 447, 447, 447, 471, 471, 471, 471, 471, 471, 471, 471, 447, 447, 471, 57574,
  /* 31625 */ 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 699, 439, 439, 712, 439, 0,
  /* 31649 */ 543, 544, 292, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 0, 0, 0, 602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31680 */ 0, 544, 0, 0, 0, 0, 2040, 388, 388, 388, 388, 388, 2044, 388, 388, 388, 388, 439, 439, 1970, 439, 439,
  /* 31702 */ 439, 439, 439, 439, 1975, 439, 439, 439, 462, 462, 758, 462, 766, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 31723 */ 462, 462, 462, 1605, 1606, 462, 462, 462, 462, 805, 462, 439, 439, 439, 439, 0, 0, 0, 462, 462, 462, 462,
  /* 31745 */ 0, 57574, 889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811, 439, 439, 1035, 439, 439, 439, 439, 439,
  /* 31772 */ 745, 107540, 973, 748, 462, 462, 462, 462, 462, 462, 1794, 439, 439, 439, 462, 462, 462, 0, 0, 0, 462,
  /* 31793 */ 462, 1054, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 796, 462, 462, 462, 462, 462,
  /* 31814 */ 1076, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1102, 462, 462, 462, 1107, 462, 462,
  /* 31834 */ 462, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 462, 462, 1898, 462, 462, 462, 462, 462, 462,
  /* 31856 */ 462, 462, 462, 1346, 462, 462, 462, 462, 462, 462, 462, 462, 1377, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 31877 */ 1363, 462, 462, 462, 462, 462, 462, 462, 0, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 2164,
  /* 31904 */ 0, 0, 0, 439, 439, 439, 439, 439, 439, 439, 439, 0, 1562, 0, 0, 1325, 0, 1568, 0, 0, 1209, 0, 0, 0, 0, 0,
  /* 31930 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1434, 0, 1450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459, 0, 0, 0, 0, 0, 0, 1677, 0,
  /* 31961 */ 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 1648, 0, 0, 1650, 0, 0, 0, 1653, 0, 0, 0,
  /* 31990 */ 1657, 0, 0, 0, 383, 383, 383, 404, 408, 404, 404, 404, 404, 404, 404, 408, 383, 383, 383, 383, 383, 383,
  /* 32012 */ 383, 383, 383, 383, 383, 383, 383, 408, 383, 383, 383, 383, 383, 383, 383, 404, 456, 456, 456, 456, 456,
  /* 32033 */ 480, 456, 456, 456, 456, 456, 456, 456, 456, 480, 480, 480, 480, 480, 480, 480, 480, 456, 456, 480, 57574,
  /* 32054 */ 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 910, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 884, 885, 0, 0, 0, 0, 0,
  /* 32084 */ 1660, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 1671, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 647, 388, 388,
  /* 32110 */ 388, 388, 658, 439, 1864, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1872, 439, 439, 439, 439, 439, 439,
  /* 32131 */ 1278, 439, 439, 439, 439, 439, 439, 439, 439, 439, 991, 439, 439, 439, 439, 439, 439, 439, 439, 1005, 439,
  /* 32152 */ 439, 439, 439, 439, 439, 1012, 439, 1884, 439, 439, 439, 439, 0, 0, 0, 0, 462, 1888, 462, 462, 462, 1891,
  /* 32174 */ 462, 462, 462, 462, 462, 1375, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2082, 462, 462, 439, 439,
  /* 32195 */ 462, 462, 462, 462, 1905, 462, 462, 462, 462, 1908, 462, 462, 462, 462, 1911, 462, 462, 462, 439, 462,
  /* 32215 */ 2127, 0, 2129, 0, 0, 0, 0, 0, 2134, 0, 0, 0, 0, 2194, 0, 2196, 439, 2198, 439, 439, 439, 439, 439, 439,
  /* 32239 */ 439, 740, 439, 439, 439, 439, 0, 462, 462, 462, 462, 2006, 462, 462, 462, 462, 462, 462, 462, 439, 439,
  /* 32260 */ 462, 462, 0, 0, 0, 0, 0, 1922, 0, 0, 0, 0, 2176, 439, 462, 462, 462, 462, 2182, 462, 2184, 2185, 2186,
  /* 32283 */ 462, 2188, 2189, 0, 0, 0, 0, 2226, 439, 439, 2228, 439, 2230, 439, 439, 439, 439, 2235, 462, 0, 439, 439,
  /* 32305 */ 439, 2252, 439, 2253, 439, 439, 439, 462, 462, 462, 2258, 462, 2259, 439, 439, 439, 485, 485, 485, 485,
  /* 32325 */ 439, 462, 462, 462, 462, 462, 462, 462, 462, 2118, 462, 2119, 2120, 462, 462, 462, 462, 492, 439, 439,
  /* 32345 */ 462, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 701, 439, 439,
  /* 32368 */ 439, 439, 439, 439, 1878, 439, 439, 439, 439, 1881, 439, 439, 439, 439, 439, 439, 1311, 439, 439, 439,
  /* 32388 */ 439, 439, 439, 439, 439, 439, 1871, 439, 439, 439, 439, 439, 439, 462, 1599, 462, 462, 462, 462, 462, 462,
  /* 32409 */ 462, 462, 462, 462, 462, 462, 462, 462, 1105, 462, 0, 49152, 53248, 0, 0, 0, 0, 345, 45056, 345, 0, 345,
  /* 32431 */ 345, 345, 0, 345, 345, 345, 378, 378, 378, 397, 378, 397, 397, 397, 397, 397, 397, 378, 418, 418, 418,
  /* 32452 */ 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 434, 397, 448, 448, 448, 448, 448, 472,
  /* 32473 */ 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 472, 472, 472, 472, 472, 472, 472, 472, 448, 448, 472,
  /* 32494 */ 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388, 439, 439, 439, 439, 439, 702, 439, 439, 439,
  /* 32517 */ 439, 439, 439, 2105, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1295, 439, 439, 439, 439, 439, 439, 439,
  /* 32538 */ 439, 1312, 439, 439, 439, 439, 1316, 439, 439, 439, 572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 572, 0, 0, 0, 586, 0,
  /* 32564 */ 0, 0, 388, 388, 388, 388, 388, 388, 388, 648, 388, 653, 388, 388, 388, 388, 0, 388, 388, 439, 1509, 439,
  /* 32586 */ 439, 439, 439, 439, 439, 439, 1021, 439, 439, 439, 439, 439, 439, 439, 439, 1007, 439, 439, 439, 1011,
  /* 32606 */ 439, 439, 439, 462, 462, 462, 760, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1350, 462,
  /* 32627 */ 462, 462, 2, 6, 0, 0, 0, 0, 820, 824, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1821,
  /* 32658 */ 0, 0, 0, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 868, 0, 0, 0, 0, 0, 0, 1941, 1942, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32689 */ 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 0, 0, 955, 388, 388,
  /* 32719 */ 388, 388, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 520, 0, 1000, 439, 439, 439, 439, 439, 439,
  /* 32744 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 999, 439, 439, 439, 1016, 439, 439, 439, 439, 439, 439,
  /* 32765 */ 1026, 439, 439, 439, 439, 439, 0, 0, 0, 0, 1887, 462, 462, 462, 462, 462, 462, 439, 439, 439, 439, 0, 0,
  /* 32788 */ 462, 462, 462, 462, 462, 462, 462, 1055, 1061, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1072, 462,
  /* 32808 */ 462, 462, 462, 462, 1391, 462, 462, 462, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 0, 0, 1630, 0, 462,
  /* 32831 */ 1088, 462, 462, 462, 462, 462, 462, 1098, 462, 462, 462, 462, 462, 462, 462, 439, 688567, 1796, 462,
  /* 32850 */ 688590, 1798, 0, 0, 0, 462, 462, 1110, 462, 462, 462, 439, 439, 439, 439, 0, 0, 462, 462, 462, 462, 462,
  /* 32872 */ 462, 1996, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 0,
  /* 32894 */ 0, 0, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1683, 0, 1187, 0, 0, 0, 1191, 0, 0, 0, 0, 0,
  /* 32925 */ 0, 0, 0, 0, 0, 0, 1834, 0, 0, 1836, 0, 439, 1323, 1325, 107540, 1328, 1325, 462, 462, 462, 462, 462, 462,
  /* 32948 */ 462, 1337, 1338, 462, 462, 462, 462, 462, 1601, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2156,
  /* 32968 */ 462, 439, 462, 0, 0, 462, 462, 1342, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1353, 0,
  /* 32990 */ 1451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1823, 0, 0, 0, 1463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33022 */ 0, 1682, 0, 0, 462, 462, 462, 462, 1612, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2083, 462,
  /* 33044 */ 439, 439, 462, 1697, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1248,
  /* 33065 */ 0, 0, 0, 1805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 1841, 0, 0, 0,
  /* 33095 */ 0, 1846, 0, 0, 0, 388, 388, 1850, 388, 388, 388, 388, 947, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 33117 */ 388, 388, 388, 1499, 388, 388, 1502, 1863, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 33137 */ 439, 439, 439, 1013, 1951, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 1490, 0, 0, 2029,
  /* 33161 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1810, 0, 0, 439, 2063, 439, 439, 439, 439, 462, 462, 462, 462, 462,
  /* 33188 */ 462, 462, 462, 462, 462, 439, 462, 2190, 0, 462, 462, 2238, 462, 2240, 462, 462, 462, 439, 462, 0, 0, 0,
  /* 33210 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 525, 0, 2250, 439, 439, 439, 439, 439, 439, 439, 439, 2256, 462, 462,
  /* 33236 */ 462, 462, 462, 0, 0, 0, 439, 439, 439, 439, 2283, 439, 462, 462, 0, 49152, 53248, 0, 0, 0, 0, 0, 45056, 0,
  /* 33260 */ 0, 0, 0, 0, 355, 0, 0, 0, 388, 388, 388, 388, 388, 640, 388, 388, 388, 388, 388, 388, 388, 1702, 388, 388,
  /* 33284 */ 388, 388, 388, 388, 388, 388, 1496, 388, 388, 388, 388, 388, 388, 388, 0, 0, 298, 379, 379, 387, 398, 379,
  /* 33306 */ 398, 398, 398, 398, 398, 398, 379, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
  /* 33327 */ 419, 419, 398, 449, 449, 449, 449, 449, 473, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 473, 473,
  /* 33348 */ 473, 473, 473, 473, 473, 473, 449, 449, 473, 57574, 57840, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388, 388,
  /* 33371 */ 439, 439, 439, 439, 439, 703, 439, 439, 439, 439, 439, 730, 439, 439, 439, 439, 439, 439, 0, 462, 462,
  /* 33392 */ 462, 462, 462, 462, 761, 462, 462, 774, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1099, 462, 462, 462,
  /* 33413 */ 462, 462, 462, 1014, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1027, 439, 439, 439, 439, 439, 439,
  /* 33434 */ 1749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1523712, 0, 0, 1650688, 0, 0, 0, 462, 462, 462, 1056, 462, 462, 462, 462,
  /* 33459 */ 462, 462, 462, 462, 462, 462, 462, 462, 1365, 462, 462, 462, 0, 0, 1124, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 0,
  /* 33484 */ 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 1273, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 33508 */ 439, 439, 1272, 1289, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1319, 0,
  /* 33529 */ 0, 1425, 0, 0, 0, 1429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 333, 0, 0, 439, 439, 439, 1543, 439, 439,
  /* 33557 */ 439, 1547, 439, 439, 439, 439, 439, 439, 439, 439, 1006, 439, 439, 1010, 439, 439, 439, 439, 462, 1586,
  /* 33577 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1352, 462, 462, 1611, 462, 462, 462,
  /* 33598 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1385, 462, 439, 439, 844215, 439, 439, 439, 462,
  /* 33618 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 2217, 2218, 0, 0, 2221, 0, 2162, 0, 0, 0, 0, 0, 0, 439, 439,
  /* 33642 */ 439, 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 823735, 823758, 0, 0, 0, 0, 439, 439,
  /* 33663 */ 439, 439, 439, 439, 462, 2067, 462, 462, 462, 462, 462, 462, 462, 2074, 311, 0, 0, 0, 0, 0, 0, 0, 0, 275,
  /* 33687 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 53248, 0, 310, 0, 0, 0, 45056, 0, 275, 0, 0, 0, 0, 0, 0, 516, 517, 518,
  /* 33715 */ 0, 0, 0, 0, 0, 0, 0, 390, 441, 441, 441, 441, 441, 465, 441, 441, 450, 450, 450, 450, 450, 450, 450, 450,
  /* 33739 */ 474, 474, 474, 474, 474, 474, 474, 474, 450, 450, 474, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 33762 */ 388, 388, 439, 439, 439, 439, 696, 439, 704, 439, 439, 439, 439, 439, 985, 439, 439, 439, 439, 995, 439,
  /* 33783 */ 439, 439, 439, 439, 439, 439, 2055, 439, 439, 439, 439, 439, 439, 439, 439, 0, 1750, 0, 0, 0, 0, 0, 1752,
  /* 33806 */ 0, 556, 0, 0, 559, 0, 0, 0, 0, 0, 565, 0, 0, 0, 0, 0, 0, 0, 225768, 225768, 225768, 225768, 225768,
  /* 33829 */ 225768, 225768, 225768, 225768, 0, 0, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1835, 0, 0, 0, 601, 0,
  /* 33855 */ 0, 0, 0, 0, 0, 0, 0, 522, 0, 0, 0, 0, 0, 0, 674, 675, 0, 0, 0, 0, 550, 0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0,
  /* 33887 */ 621, 0, 0, 0, 0, 0, 630, 0, 0, 0, 388, 388, 388, 388, 388, 641, 388, 388, 388, 388, 388, 388, 388, 1856,
  /* 33911 */ 388, 388, 1858, 1859, 439, 1861, 439, 439, 388, 388, 388, 664, 388, 0, 0, 630, 0, 0, 0, 613, 0, 0, 522, 0,
  /* 33935 */ 0, 0, 388, 388, 388, 388, 639, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1241, 388, 388, 388, 1245,
  /* 33956 */ 388, 388, 669, 0, 0, 556, 0, 673, 0, 0, 613, 522, 677, 0, 0, 0, 0, 680, 439, 439, 724, 439, 439, 439, 439,
  /* 33981 */ 739, 439, 439, 439, 439, 0, 462, 462, 750, 462, 462, 462, 762, 462, 462, 775, 462, 462, 462, 786, 462,
  /* 34002 */ 462, 462, 462, 801, 462, 462, 462, 688, 439, 724, 439, 0, 0, 0, 750, 462, 786, 462, 0, 57574, 831, 832, 0,
  /* 34025 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1949, 0, 292, 292, 0, 862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34056 */ 135168, 135168, 0, 0, 439, 1002, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 34076 */ 439, 2112, 462, 1341, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1597, 462,
  /* 34096 */ 388, 1504, 388, 388, 0, 388, 388, 439, 439, 1510, 439, 439, 439, 439, 439, 439, 439, 1738, 439, 439, 439,
  /* 34117 */ 439, 439, 439, 439, 439, 0, 0, 0, 1565, 1325, 0, 0, 0, 1540, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 34140 */ 439, 439, 439, 439, 439, 439, 1730, 439, 1554, 439, 439, 439, 439, 439, 439, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
  /* 34164 */ 388, 388, 439, 439, 439, 693, 439, 439, 439, 439, 439, 439, 439, 1724, 439, 439, 439, 439, 439, 439, 439,
  /* 34185 */ 439, 1522, 439, 439, 439, 439, 439, 439, 439, 439, 745, 107540, 973, 748, 462, 1048, 1050, 462, 0, 462,
  /* 34205 */ 462, 1574, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1383, 1384, 462, 462, 0, 0, 1647,
  /* 34226 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 0, 0, 0, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 0,
  /* 34256 */ 0, 439, 439, 1685, 0, 0, 1688, 0, 0, 1691, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388, 649, 388, 388,
  /* 34280 */ 388, 388, 388, 1698, 388, 388, 388, 1700, 388, 388, 388, 1703, 388, 388, 388, 388, 388, 388, 1495, 388,
  /* 34300 */ 388, 388, 1497, 1498, 388, 388, 388, 388, 1719, 439, 1721, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 34320 */ 1728, 439, 439, 439, 439, 439, 986, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1741, 439, 439, 439,
  /* 34341 */ 439, 439, 0, 0, 0, 462, 462, 462, 462, 462, 462, 462, 462, 1760, 462, 462, 462, 462, 462, 462, 1997, 462,
  /* 34363 */ 462, 462, 462, 462, 462, 462, 462, 462, 1068, 462, 462, 462, 462, 462, 462, 1764, 462, 1766, 462, 462,
  /* 34383 */ 462, 462, 462, 462, 462, 462, 462, 1773, 462, 462, 462, 439, 439, 439, 731, 0, 0, 0, 462, 462, 462, 793,
  /* 34405 */ 0, 57574, 0, 1812, 0, 0, 0, 0, 0, 0, 1817, 1818, 0, 0, 0, 0, 0, 0, 0, 274432, 274432, 274432, 274432,
  /* 34428 */ 274432, 274432, 274432, 274432, 274432, 0, 0, 1827, 0, 0, 0, 1830, 0, 0, 0, 0, 0, 0, 0, 0, 1837, 0, 0,
  /* 34451 */ 1840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 439, 462, 462, 462, 462, 1896, 462,
  /* 34475 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1603, 462, 462, 462, 462, 462, 1609, 0, 0, 0, 1953, 0,
  /* 34497 */ 0, 0, 0, 1958, 388, 388, 388, 388, 388, 388, 388, 1701, 388, 388, 388, 388, 388, 388, 388, 388, 388, 951,
  /* 34519 */ 388, 952, 388, 388, 388, 388, 388, 1966, 1967, 439, 1969, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 34539 */ 439, 1977, 1978, 439, 439, 439, 439, 1982, 439, 439, 439, 439, 439, 439, 439, 439, 462, 1992, 2005, 462,
  /* 34559 */ 462, 462, 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 0, 2019, 0, 2039, 0, 0, 0, 388, 388, 2042, 2043,
  /* 34582 */ 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 1712, 439, 439, 439, 439, 439, 439, 439, 1718, 439, 439,
  /* 34603 */ 439, 2051, 2052, 2053, 439, 439, 439, 439, 439, 439, 439, 439, 2060, 439, 0, 1325, 107540, 0, 1325, 462,
  /* 34623 */ 462, 462, 462, 1333, 462, 462, 462, 462, 462, 0, 0, 0, 439, 2280, 439, 439, 439, 439, 462, 2284, 462, 462,
  /* 34645 */ 462, 462, 462, 2078, 462, 462, 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 1919, 0, 0, 0, 0, 0, 0, 0,
  /* 34669 */ 0, 1061444, 0, 0, 0, 0, 0, 0, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 439, 439,
  /* 34695 */ 439, 439, 1972, 439, 439, 439, 439, 439, 439, 439, 439, 1560, 0, 0, 0, 1325, 1566, 0, 0, 0, 0, 0, 388,
  /* 34718 */ 439, 439, 439, 439, 439, 439, 2142, 439, 439, 439, 439, 439, 439, 439, 1879, 439, 439, 439, 439, 439, 439,
  /* 34739 */ 439, 439, 1022, 439, 439, 439, 439, 439, 439, 439, 439, 1725, 439, 439, 439, 439, 439, 439, 439, 0, 0,
  /* 34760 */ 2163, 0, 0, 0, 0, 0, 439, 439, 439, 2171, 439, 439, 439, 439, 439, 439, 1868, 439, 439, 439, 439, 439,
  /* 34782 */ 439, 439, 439, 439, 993, 439, 439, 439, 997, 439, 439, 0, 0, 0, 2193, 0, 0, 0, 439, 439, 439, 439, 439,
  /* 34805 */ 439, 439, 2204, 439, 439, 439, 439, 1276, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1537,
  /* 34825 */ 439, 439, 439, 439, 2206, 462, 462, 462, 462, 462, 462, 462, 2214, 462, 2216, 439, 462, 0, 0, 0, 0, 388,
  /* 34847 */ 388, 439, 687, 439, 439, 439, 439, 439, 439, 711, 439, 462, 2273, 2274, 462, 462, 0, 0, 0, 439, 439, 439,
  /* 34869 */ 439, 439, 439, 462, 462, 462, 2181, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 2265, 439, 439,
  /* 34891 */ 439, 439, 439, 2271, 0, 276, 278, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1069056, 0, 0, 0, 278, 49152,
  /* 34917 */ 53248, 0, 0, 277, 279, 278, 45056, 278, 279, 278, 350, 278, 0, 278, 278, 350, 381, 381, 381, 400, 407,
  /* 34938 */ 400, 400, 400, 400, 400, 400, 411, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
  /* 34959 */ 420, 420, 400, 451, 451, 451, 451, 451, 475, 451, 451, 451, 451, 451, 486, 486, 486, 486, 451, 475, 475,
  /* 34980 */ 475, 475, 475, 475, 475, 475, 493, 451, 451, 475, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 388,
  /* 35003 */ 388, 439, 688, 439, 439, 439, 700, 439, 439, 713, 439, 0, 0, 512, 513, 514, 515, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35028 */ 0, 0, 1847, 0, 388, 388, 388, 388, 0, 527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2027, 0, 0, 573, 0,
  /* 35057 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2036, 0, 0, 0, 0, 508, 588, 589, 590, 0, 0, 0, 0, 0, 596, 0, 0, 0,
  /* 35088 */ 0, 388, 388, 439, 689, 439, 439, 439, 439, 439, 439, 714, 439, 0, 0, 631, 388, 388, 388, 637, 388, 388,
  /* 35110 */ 645, 388, 388, 388, 655, 388, 388, 388, 388, 388, 1238, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 35131 */ 833, 0, 0, 0, 0, 0, 388, 388, 662, 388, 388, 514, 0, 0, 667, 0, 0, 0, 596, 0, 0, 0, 0, 439, 439, 439, 439,
  /* 35158 */ 439, 439, 439, 439, 2233, 439, 462, 462, 462, 462, 462, 462, 2116, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35179 */ 1592, 462, 462, 462, 462, 462, 462, 462, 0, 0, 671, 0, 628, 0, 596, 596, 0, 0, 0, 628, 0, 628, 0, 0, 0, 0,
  /* 35205 */ 172032, 0, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 247, 248, 249, 0, 0, 0, 0, 0, 0, 0,
  /* 35228 */ 388, 388, 388, 388, 388, 938, 388, 388, 388, 0, 0, 0, 628, 683, 388, 439, 439, 439, 694, 697, 439, 705,
  /* 35250 */ 439, 439, 439, 439, 439, 1004, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1009, 439, 439, 439, 439,
  /* 35271 */ 439, 720, 723, 439, 439, 439, 732, 736, 439, 439, 439, 439, 439, 0, 462, 462, 462, 439, 439, 439, 732, 0,
  /* 35293 */ 0, 0, 462, 462, 462, 794, 0, 57574, 462, 756, 759, 462, 767, 462, 462, 462, 782, 785, 462, 462, 462, 794,
  /* 35315 */ 798, 462, 462, 462, 462, 462, 1613, 462, 462, 462, 1616, 462, 462, 462, 1620, 462, 462, 462, 462, 462,
  /* 35335 */ 1095, 1096, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1591, 462, 1593, 462, 462, 462, 462, 462, 462,
  /* 35355 */ 439, 439, 439, 1003, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1028, 439, 439, 439, 439,
  /* 35376 */ 439, 1036, 439, 439, 439, 439, 439, 745, 107540, 973, 748, 462, 462, 462, 462, 462, 462, 2011, 462, 462,
  /* 35396 */ 439, 439, 462, 462, 0, 0, 0, 1921, 0, 0, 0, 0, 0, 1924, 462, 1075, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35420 */ 462, 462, 462, 462, 462, 462, 1608, 462, 462, 462, 462, 462, 1092, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35441 */ 462, 462, 462, 1785, 462, 462, 462, 462, 1789, 462, 1108, 462, 462, 462, 462, 462, 439, 1115, 439, 439, 0,
  /* 35462 */ 0, 462, 1119, 462, 462, 462, 462, 462, 1093, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1379, 462,
  /* 35483 */ 462, 462, 462, 462, 462, 0, 1172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 0, 0, 1188, 0, 1190,
  /* 35510 */ 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1933, 0, 0, 0, 0, 0, 0, 0, 1200, 0, 586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35542 */ 0, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1223, 0, 388, 388, 388, 1226, 388, 388, 388, 388, 388, 388,
  /* 35568 */ 388, 388, 388, 1857, 388, 388, 1860, 439, 439, 439, 388, 1250, 388, 388, 0, 1192, 0, 0, 0, 0, 388, 388,
  /* 35590 */ 973, 974, 439, 439, 439, 439, 439, 1545, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1524, 1525,
  /* 35610 */ 439, 439, 439, 439, 439, 439, 439, 1260, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1283,
  /* 35631 */ 439, 1287, 1288, 462, 462, 462, 462, 1357, 462, 1361, 1362, 462, 462, 462, 462, 462, 462, 462, 462, 1770,
  /* 35651 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 1388, 462, 462, 462, 462, 462, 462, 439, 439, 439, 439, 462,
  /* 35672 */ 462, 462, 462, 0, 1126, 0, 1132, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1948, 0, 0,
  /* 35700 */ 1753, 0, 1328, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1071, 1073, 462, 0, 0, 0,
  /* 35722 */ 1813, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 462, 462, 1995, 462, 462, 462, 462, 462,
  /* 35748 */ 462, 462, 462, 462, 462, 462, 462, 462, 1085, 462, 462, 439, 2113, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35769 */ 462, 462, 462, 462, 462, 462, 1912, 462, 0, 0, 0, 388, 439, 439, 439, 2139, 439, 439, 439, 439, 439, 439,
  /* 35791 */ 439, 439, 1561, 0, 0, 0, 1325, 1567, 0, 0, 462, 462, 462, 2149, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 35813 */ 439, 462, 0, 0, 0, 2130, 0, 0, 0, 0, 0, 0, 0, 533, 534, 535, 536, 0, 0, 0, 0, 0, 312, 0, 0, 0, 312, 0, 0,
  /* 35842 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 0, 0, 0, 0, 49152, 53248, 0, 327, 0, 0, 0, 45056, 0, 0, 0, 0, 0,
  /* 35870 */ 356, 0, 0, 0, 388, 388, 388, 636, 388, 388, 388, 388, 388, 388, 654, 388, 388, 388, 388, 0, 1221, 0, 1136,
  /* 35893 */ 1136, 1148, 388, 388, 973, 974, 1256, 1257, 0, 0, 324, 0, 0, 0, 388, 0, 388, 388, 388, 388, 388, 388, 0,
  /* 35916 */ 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 438, 452, 452, 452, 452,
  /* 35937 */ 452, 476, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 476, 476, 476, 476, 476, 476, 476, 476, 452,
  /* 35958 */ 452, 476, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 439, 2232, 439,
  /* 35981 */ 439, 462, 462, 462, 462, 462, 2115, 462, 462, 462, 462, 462, 462, 2121, 462, 462, 944, 388, 388, 388, 388,
  /* 36002 */ 388, 388, 388, 388, 388, 388, 388, 388, 953, 388, 388, 388, 388, 388, 1494, 388, 388, 388, 388, 388, 388,
  /* 36023 */ 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 439, 1034, 439, 439, 439, 439, 439,
  /* 36050 */ 439, 745, 107540, 973, 748, 462, 462, 462, 462, 462, 462, 2152, 462, 462, 462, 462, 462, 439, 462, 0,
  /* 36070 */ 2160, 462, 462, 462, 1057, 462, 462, 462, 462, 1067, 462, 462, 462, 462, 462, 462, 462, 1065, 462, 462,
  /* 36090 */ 462, 1069, 462, 462, 462, 462, 0, 0, 1125, 0, 0, 0, 1131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0,
  /* 36118 */ 0, 0, 900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 0, 1462, 0, 0, 0, 0, 0, 1468, 0, 0,
  /* 36147 */ 0, 0, 0, 0, 0, 0, 1943, 0, 0, 0, 0, 0, 0, 0, 0, 1478, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388,
  /* 36175 */ 388, 388, 388, 439, 388, 388, 1492, 1493, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 36196 */ 388, 1501, 388, 1530, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1874,
  /* 36216 */ 439, 1732, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 462, 462, 462, 1777, 462,
  /* 36237 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1607, 462, 462, 2136, 0, 0, 388, 439,
  /* 36258 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1300, 439, 439, 439, 616, 0, 0, 388, 388, 388, 388,
  /* 36280 */ 388, 643, 388, 388, 388, 388, 388, 388, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36308 */ 2032, 0, 0, 0, 2035, 0, 0, 462, 462, 462, 763, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 36331 */ 1595, 1596, 462, 1598, 462, 462, 806, 439, 439, 439, 439, 0, 0, 0, 462, 462, 462, 462, 0, 57574, 2, 6, 0,
  /* 36354 */ 0, 0, 0, 821, 825, 0, 0, 0, 0, 0, 0, 0, 0, 2168, 439, 439, 439, 439, 439, 439, 439, 439, 1324, 1325,
  /* 36378 */ 107540, 1329, 1325, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1900, 462, 462, 462, 462, 462, 462,
  /* 36398 */ 0, 49152, 53248, 0, 0, 0, 283, 282, 45056, 282, 283, 282, 282, 282, 0, 282, 282, 282, 0, 0, 0, 401, 0,
  /* 36421 */ 401, 401, 401, 401, 401, 401, 283, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
  /* 36442 */ 282, 282, 433, 282, 401, 453, 453, 453, 453, 453, 477, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
  /* 36463 */ 477, 477, 477, 477, 477, 477, 477, 477, 453, 453, 477, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 36486 */ 439, 439, 439, 439, 2229, 439, 2231, 439, 439, 439, 462, 462, 439, 462, 2297, 2298, 439, 462, 439, 462, 0,
  /* 36507 */ 0, 0, 0, 0, 0, 2099, 0, 388, 388, 2100, 388, 388, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 1974,
  /* 36530 */ 439, 439, 439, 439, 439, 439, 1020, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1985, 439, 439, 439, 439,
  /* 36551 */ 462, 462, 0, 557, 0, 0, 0, 0, 0, 563, 564, 0, 0, 0, 0, 0, 0, 0, 580, 329, 0, 0, 0, 0, 0, 0, 0, 388, 388,
  /* 36580 */ 388, 388, 388, 939, 388, 388, 388, 0, 0, 0, 575, 0, 0, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
  /* 36609 */ 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2037, 388, 388, 663, 388, 388, 0, 627, 0, 0, 0, 668,
  /* 36638 */ 0, 0, 0, 0, 591, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 678, 0, 629, 0, 0, 0, 0, 1114112, 1114112, 1515520,
  /* 36664 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1413120, 0, 1470464,
  /* 36676 */ 1835008, 0, 0, 0, 0, 0, 678, 388, 684, 439, 439, 439, 439, 439, 439, 439, 708, 439, 439, 439, 439, 439,
  /* 36698 */ 1558, 439, 439, 0, 0, 0, 0, 1325, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 1230, 388, 388, 388, 388, 388,
  /* 36722 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 439, 725, 727, 439, 439, 737, 439, 439,
  /* 36750 */ 439, 439, 439, 0, 462, 462, 462, 439, 439, 439, 734, 0, 0, 0, 462, 462, 462, 796, 0, 57574, 462, 462, 462,
  /* 36773 */ 807, 439, 725, 439, 0, 0, 0, 813, 462, 787, 462, 0, 57574, 292, 292, 0, 0, 0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
  /* 36800 */ 0, 0, 0, 836, 0, 0, 0, 971, 388, 973, 974, 439, 439, 0, 890, 0, 0, 0, 894, 0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
  /* 36829 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2026, 0, 0, 1001, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 36855 */ 439, 439, 439, 439, 1883, 462, 462, 462, 1090, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 36876 */ 1619, 462, 1621, 462, 388, 388, 1251, 388, 0, 0, 0, 0, 0, 0, 388, 388, 973, 974, 439, 439, 439, 439, 439,
  /* 36899 */ 1723, 439, 439, 439, 439, 1726, 1727, 439, 439, 439, 439, 439, 439, 2066, 462, 462, 462, 462, 462, 462,
  /* 36919 */ 2072, 462, 462, 439, 439, 1259, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1271,
  /* 36939 */ 439, 439, 439, 439, 439, 1308, 439, 439, 439, 439, 439, 439, 439, 1315, 439, 439, 1318, 439, 439, 439,
  /* 36959 */ 439, 1291, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1303, 462, 462, 462, 1389, 462, 462, 1392,
  /* 36979 */ 462, 462, 439, 439, 439, 439, 462, 462, 462, 462, 1403, 0, 1405, 0, 0, 0, 1423, 1424, 0, 0, 1427, 0, 0, 0,
  /* 37003 */ 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 1438, 0, 0, 0, 0, 0, 1443, 0, 0, 1445, 0, 1447, 0, 0, 0,
  /* 37033 */ 0, 1114797, 1114797, 1516205, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114859,
  /* 37045 */ 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114859, 1114797, 1114859, 0, 0,
  /* 37058 */ 0, 0, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1945, 0, 0, 0, 0, 0, 0, 0, 0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37090 */ 0, 0, 0, 0, 249856, 0, 0, 0, 0, 439, 439, 1531, 1532, 439, 1534, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 37113 */ 439, 1539, 0, 1572, 462, 462, 462, 1576, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1909, 462, 462,
  /* 37134 */ 462, 462, 462, 462, 462, 1623, 439, 439, 439, 439, 462, 462, 462, 462, 0, 0, 0, 0, 0, 0, 0, 0, 2091, 0, 0,
  /* 37159 */ 0, 0, 0, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 0, 0, 0, 0, 0, 462, 462, 462, 462,
  /* 37189 */ 462, 462, 462, 462, 462, 462, 1761, 462, 462, 462, 462, 462, 1094, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 37210 */ 462, 1106, 1825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 439, 1885, 439, 439, 439, 0, 0, 0,
  /* 37237 */ 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1762, 462, 1965, 388, 388, 1968, 439, 439, 439,
  /* 37258 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1526, 439, 439, 439, 462, 462, 462, 462, 462, 2010, 462, 462,
  /* 37279 */ 462, 439, 2015, 462, 2017, 0, 0, 0, 0, 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540, 0, 0, 0, 0, 388, 2137, 439,
  /* 37306 */ 439, 439, 439, 439, 439, 439, 439, 2145, 439, 439, 439, 439, 439, 1736, 439, 439, 439, 439, 439, 439, 439,
  /* 37327 */ 439, 439, 439, 1536, 439, 439, 439, 439, 439, 2147, 462, 462, 462, 462, 462, 462, 462, 462, 2155, 462,
  /* 37347 */ 462, 439, 462, 0, 0, 0, 0, 1114798, 1114798, 1516206, 1114798, 1114798, 1114798, 1114798, 1114798,
  /* 37362 */ 1114798, 1114798, 1114798, 1114798, 1413120, 0, 1470464, 1835008, 0, 0, 439, 462, 2208, 462, 462, 462,
  /* 37378 */ 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 0, 0, 0, 0, 2224, 0, 439, 439, 439, 439, 439, 439, 439,
  /* 37402 */ 439, 439, 439, 462, 462, 2180, 462, 462, 462, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0, 439, 439, 2267,
  /* 37424 */ 2268, 439, 439, 462, 462, 462, 462, 2275, 462, 2277, 0, 2279, 439, 439, 439, 439, 439, 439, 462, 462,
  /* 37444 */ 2295, 2296, 439, 462, 439, 462, 439, 462, 0, 0, 0, 0, 0, 0, 1930, 0, 0, 0, 0, 0, 0, 1935, 1936, 0, 284,
  /* 37469 */ 285, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 1960, 388,
  /* 37497 */ 388, 388, 388, 388, 0, 49152, 53248, 0, 0, 0, 0, 346, 45056, 346, 0, 346, 346, 346, 0, 346, 346, 365, 0,
  /* 37520 */ 0, 284, 402, 0, 402, 402, 402, 402, 402, 402, 0, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
  /* 37542 */ 365, 365, 365, 365, 365, 429, 365, 435, 402, 454, 454, 454, 454, 454, 478, 454, 454, 454, 454, 454, 487,
  /* 37563 */ 487, 487, 487, 454, 478, 478, 478, 478, 478, 478, 478, 478, 494, 454, 454, 478, 57574, 57574, 2, 2, 3,
  /* 37584 */ 94212, 5, 6, 0, 0, 0, 0, 560, 0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 519, 520, 0, 0, 0, 0, 0, 0, 0, 0, 388,
  /* 37614 */ 634, 388, 388, 388, 388, 388, 388, 651, 388, 388, 388, 388, 0, 0, 1169, 0, 0, 0, 388, 388, 973, 974, 439,
  /* 37637 */ 439, 622, 0, 0, 0, 0, 622, 0, 0, 608, 0, 622, 0, 0, 0, 0, 622, 462, 462, 462, 689, 808, 439, 439, 0, 0, 0,
  /* 37664 */ 751, 814, 462, 462, 0, 57574, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 826, 0, 0, 828, 0, 0, 0, 0, 1122304, 1122304,
  /* 37690 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 1114112,
  /* 37703 */ 1114112, 1114112, 1114112, 828, 920, 0, 0, 0, 923, 0, 0, 0, 0, 0, 0, 927, 0, 0, 0, 0, 576, 0, 0, 0, 0,
  /* 37728 */ 582, 0, 0, 0, 0, 585, 0, 927, 968, 969, 0, 927, 0, 920, 970, 0, 0, 388, 388, 973, 974, 439, 439, 439, 439,
  /* 37753 */ 439, 1750, 0, 1752, 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1580, 462, 462, 462, 462, 462, 439,
  /* 37774 */ 439, 439, 981, 439, 439, 990, 439, 439, 994, 439, 439, 439, 439, 439, 439, 439, 1869, 439, 439, 439, 439,
  /* 37795 */ 439, 439, 439, 439, 1008, 439, 439, 439, 439, 439, 439, 439, 462, 1053, 462, 462, 1062, 462, 462, 1066,
  /* 37815 */ 462, 462, 462, 462, 462, 462, 462, 462, 1784, 462, 462, 462, 462, 462, 462, 462, 0, 0, 1173, 0, 0, 1176,
  /* 37837 */ 0, 0, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 837, 0, 0, 0, 0, 0, 842, 0, 0, 0, 388, 388, 388, 388, 1139, 0, 0, 0,
  /* 37866 */ 0, 0, 388, 388, 973, 974, 439, 439, 439, 439, 439, 2104, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 37888 */ 1298, 1299, 439, 439, 439, 439, 0, 1437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 1553, 439,
  /* 37914 */ 439, 439, 439, 439, 439, 439, 0, 0, 0, 0, 1325, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 528, 0, 0, 0, 0, 0, 0,
  /* 37943 */ 1441, 1442, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0,
  /* 37962 */ 462, 1573, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1774, 462, 462, 1610, 462,
  /* 37982 */ 462, 462, 462, 462, 462, 462, 1615, 462, 1617, 462, 462, 462, 462, 462, 0, 2278, 0, 439, 439, 439, 439,
  /* 38003 */ 439, 439, 462, 462, 462, 462, 462, 462, 462, 1781, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2081,
  /* 38024 */ 462, 462, 462, 462, 439, 439, 462, 0, 1839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388,
  /* 38049 */ 388, 2101, 462, 462, 462, 462, 1906, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1393, 462,
  /* 38069 */ 439, 439, 439, 439, 462, 462, 462, 462, 2086, 0, 0, 2088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936,
  /* 38094 */ 167936, 167936, 167936, 167936, 2095, 0, 0, 0, 0, 0, 0, 0, 388, 388, 388, 388, 388, 388, 388, 439, 439,
  /* 38115 */ 439, 1971, 439, 439, 439, 439, 439, 439, 439, 1976, 439, 0, 0, 0, 388, 439, 439, 439, 439, 439, 2141, 439,
  /* 38137 */ 2143, 439, 439, 439, 439, 439, 439, 2054, 439, 439, 439, 439, 439, 439, 439, 439, 439, 743, 439, 439, 0,
  /* 38158 */ 462, 462, 462, 462, 462, 462, 462, 462, 2151, 462, 2153, 462, 462, 462, 462, 439, 462, 0, 0, 0, 0,
  /* 38179 */ 1122304, 1122304, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797, 1114797,
  /* 38190 */ 1114797, 745, 0, 0, 748, 1114859, 1114859, 1389291, 1114859, 439, 2207, 462, 462, 462, 462, 462, 462, 462,
  /* 38208 */ 462, 462, 439, 462, 0, 0, 0, 0, 0, 2248, 462, 462, 462, 462, 462, 2241, 462, 462, 439, 462, 0, 2246, 0, 0,
  /* 38232 */ 0, 0, 0, 0, 1060864, 248, 249, 0, 0, 217088, 0, 0, 0, 0, 0, 0, 1161, 0, 0, 1164, 0, 0, 1167, 0, 0, 0, 0,
  /* 38259 */ 439, 2251, 439, 439, 439, 439, 439, 439, 439, 462, 2257, 462, 462, 462, 462, 462, 462, 2242, 462, 439,
  /* 38279 */ 462, 0, 0, 0, 0, 0, 0, 0, 1540096, 0, 0, 1683456, 0, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 292, 295, 0,
  /* 38308 */ 0, 0, 0, 0, 0, 879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 248, 248, 0, 0, 0, 388, 661, 388, 388, 388, 0, 0,
  /* 38337 */ 0, 0, 0, 0, 0, 0, 0, 0, 619, 0, 624, 0, 0, 0, 0, 0, 0, 552, 0, 0, 0, 612, 0, 0, 0, 0, 624, 682, 0, 388,
  /* 38367 */ 388, 439, 690, 439, 439, 439, 439, 439, 709, 715, 718, 462, 462, 462, 690, 439, 439, 810, 0, 0, 0, 752,
  /* 38389 */ 462, 462, 816, 0, 57574, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38420 */ 928, 0, 0, 0, 0, 877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 0, 0, 0, 0, 0, 846, 0, 0, 0, 0, 851, 0,
  /* 38451 */ 0, 0, 0, 0, 0, 0, 0, 860, 292, 292, 0, 0, 0, 864, 865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 890, 947, 388, 973, 974,
  /* 38480 */ 439, 439, 388, 388, 957, 958, 388, 388, 388, 388, 388, 964, 0, 0, 966, 905, 0, 0, 0, 0, 1122304, 1122304,
  /* 38502 */ 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 1114798, 0, 0, 1114798,
  /* 38515 */ 1114798, 1114798, 1114798, 966, 0, 0, 865, 966, 0, 0, 966, 851, 0, 388, 388, 973, 974, 975, 439, 439, 439,
  /* 38536 */ 439, 1292, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1302, 439, 439, 439, 439, 1309, 1310, 439, 439,
  /* 38556 */ 439, 439, 439, 439, 439, 439, 439, 439, 1548, 439, 439, 439, 439, 439, 439, 979, 439, 439, 439, 439, 439,
  /* 38577 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 1030, 439, 462, 462, 462, 462, 1112, 462, 439, 439, 439, 439,
  /* 38598 */ 0, 0, 462, 462, 462, 462, 462, 770, 462, 462, 462, 462, 787, 789, 462, 462, 799, 462, 0, 0, 0, 1126, 0, 0,
  /* 38622 */ 0, 1132, 0, 0, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 1211, 0, 0, 0, 0, 0, 0, 1217, 0, 0, 0, 1220, 0, 0, 0, 388,
  /* 38651 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 0, 462, 462, 749, 388, 388, 388, 388, 1140, 0,
  /* 38673 */ 0, 1253, 1217, 1220, 388, 388, 973, 974, 439, 439, 439, 439, 982, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38694 */ 439, 439, 439, 1282, 439, 439, 439, 439, 439, 439, 1275, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38715 */ 1285, 439, 439, 439, 439, 1038, 439, 439, 439, 745, 107540, 973, 748, 462, 462, 462, 462, 462, 462, 1907,
  /* 38735 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 439, 462, 462, 0, 2018, 0, 439, 1290, 439, 439, 439,
  /* 38756 */ 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1528, 439, 0, 0, 1411, 0, 0, 0, 0, 1416, 0, 0, 0,
  /* 38780 */ 0, 0, 0, 0, 0, 225628, 0, 0, 0, 0, 0, 0, 0, 1461, 0, 0, 0, 0, 0, 1467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 915, 0,
  /* 38811 */ 0, 0, 0, 0, 0, 1503, 388, 388, 388, 0, 388, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1265, 439,
  /* 38834 */ 439, 439, 439, 439, 439, 439, 439, 745, 107540, 973, 748, 462, 462, 462, 462, 439, 439, 1517, 439, 439,
  /* 38854 */ 1520, 439, 439, 439, 439, 439, 439, 439, 1527, 439, 1529, 439, 439, 439, 1556, 439, 439, 439, 439, 0, 0,
  /* 38875 */ 1564, 0, 1325, 0, 0, 1570, 0, 1632, 0, 0, 0, 0, 0, 0, 0, 0, 1640, 0, 0, 0, 0, 0, 0, 895, 0, 899, 0, 0,
  /* 38903 */ 833, 0, 0, 0, 0, 0, 839, 0, 0, 0, 0, 843, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128,
  /* 38934 */ 176128, 176128, 176128, 176128, 176128, 388, 388, 388, 1699, 388, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 38952 */ 388, 388, 388, 388, 1500, 388, 388, 439, 439, 439, 1734, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 38973 */ 439, 439, 1538, 439, 439, 439, 0, 0, 0, 462, 1754, 462, 462, 462, 462, 462, 1759, 462, 462, 462, 462, 462,
  /* 38995 */ 462, 1376, 462, 462, 462, 462, 462, 462, 462, 462, 462, 772, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 39016 */ 439, 439, 462, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 388, 1694, 388, 388, 388, 462, 462, 462, 1779, 462,
  /* 39041 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1901, 462, 462, 462, 0, 1803, 0, 0, 1806, 0, 1807,
  /* 39063 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134, 0, 1136, 0, 0, 0, 0, 1838, 0, 0, 0, 1842, 0, 0, 0, 0, 0, 0, 0, 388, 388,
  /* 39093 */ 388, 388, 388, 388, 388, 942, 388, 1852, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439,
  /* 39114 */ 439, 439, 439, 439, 439, 439, 1715, 439, 439, 439, 439, 439, 439, 1865, 439, 1867, 439, 439, 439, 1870,
  /* 39134 */ 439, 439, 439, 439, 439, 439, 439, 1279, 439, 439, 439, 439, 439, 439, 439, 439, 745, 0, 0, 748, 462, 462,
  /* 39156 */ 462, 462, 439, 439, 439, 1886, 439, 0, 0, 0, 0, 462, 462, 462, 462, 462, 462, 1892, 462, 1894, 462, 462,
  /* 39178 */ 462, 1897, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1769, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 39199 */ 1783, 462, 462, 462, 462, 462, 462, 462, 462, 1081, 462, 462, 462, 462, 462, 462, 462, 1913, 462, 1914,
  /* 39219 */ 439, 1916, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 942080, 0, 0, 0, 0, 0, 1993, 462, 462, 462, 462, 462, 462,
  /* 39245 */ 1998, 462, 462, 462, 462, 462, 462, 462, 462, 1795, 439, 439, 1797, 462, 462, 0, 0, 1801, 2020, 0, 0, 0,
  /* 39267 */ 0, 2024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613824, 0, 0, 0, 0, 0, 1122304, 1122304, 0, 0, 1114112, 1114112,
  /* 39291 */ 2062, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2243, 439, 462, 0, 0, 0,
  /* 39313 */ 0, 2247, 0, 462, 462, 2075, 462, 462, 462, 462, 2080, 462, 462, 462, 462, 462, 439, 439, 462, 57574,
  /* 39333 */ 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 439, 439, 439, 2102, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 39356 */ 2110, 439, 439, 439, 439, 1262, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 1549, 439, 439,
  /* 39376 */ 439, 1552, 439, 462, 462, 462, 462, 2114, 462, 462, 462, 462, 462, 462, 462, 462, 462, 2122, 2222, 0, 0,
  /* 39397 */ 0, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2234, 462, 462, 462, 462, 462, 1113, 439, 439, 439, 439,
  /* 39418 */ 0, 0, 462, 462, 462, 462, 462, 1063, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 776, 462, 462, 462,
  /* 39440 */ 462, 462, 462, 462, 462, 462, 844238, 462, 462, 462, 606647, 439, 606670, 2249, 439, 439, 439, 439, 439,
  /* 39459 */ 439, 2254, 2255, 439, 462, 462, 462, 462, 462, 462, 462, 2117, 462, 462, 462, 462, 462, 462, 462, 2260,
  /* 39479 */ 2261, 462, 439, 462, 0, 0, 2263, 0, 439, 439, 439, 439, 439, 439, 462, 462, 462, 462, 462, 2212, 462, 462,
  /* 39501 */ 462, 462, 439, 462, 0, 0, 0, 0, 439, 439, 439, 439, 439, 439, 462, 439, 2293, 462, 2294, 439, 462, 439,
  /* 39523 */ 462, 439, 462, 439, 462, 0, 0, 0, 0, 0, 0, 1060864, 248, 25081, 0, 0, 0, 0, 0, 0, 0, 329, 329, 329, 329,
  /* 39548 */ 329, 329, 329, 329, 329, 0, 49152, 53248, 0, 0, 287, 0, 0, 45056, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 0, 0,
  /* 39575 */ 531, 0, 0, 462, 462, 462, 462, 768, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 439, 439, 1116,
  /* 39597 */ 439, 0, 0, 462, 462, 1120, 462, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 827, 0, 0, 0, 0, 0, 0, 1060864, 503, 504,
  /* 39625 */ 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1420, 0, 0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
  /* 39658 */ 0, 0, 0, 0, 0, 0, 0, 1195, 0, 0, 0, 1197, 0, 0, 462, 462, 462, 1058, 462, 462, 462, 462, 462, 462, 462,
  /* 39683 */ 462, 462, 462, 462, 462, 1910, 462, 462, 462, 0, 0, 1157, 0, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 0, 0, 0, 838,
  /* 39709 */ 0, 0, 0, 841, 0, 0, 0, 0, 1208, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
  /* 39741 */ 0, 0, 1150, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 439, 439, 439, 439, 388, 388, 388,
  /* 39763 */ 1236, 388, 388, 388, 388, 388, 388, 388, 388, 1244, 388, 388, 388, 388, 0, 388, 388, 1508, 439, 439, 439,
  /* 39784 */ 1512, 439, 439, 439, 439, 439, 439, 1983, 439, 439, 439, 439, 439, 439, 439, 462, 462, 439, 462, 439, 462,
  /* 39805 */ 2299, 2300, 439, 462, 0, 0, 0, 0, 0, 0, 1815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 249, 249, 0, 0, 0, 462,
  /* 39833 */ 462, 1355, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1366, 462, 462, 462, 439, 462, 0, 2128, 0, 0,
  /* 39854 */ 2131, 0, 0, 0, 0, 0, 0, 0, 294912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 1402, 0, 0, 0, 0, 0, 0, 0,
  /* 39884 */ 0, 0, 0, 0, 0, 0, 0, 0, 221184, 439, 439, 439, 439, 1519, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 39907 */ 439, 439, 1988, 439, 439, 462, 462, 1571, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 39928 */ 1583, 462, 462, 462, 462, 462, 1768, 462, 462, 462, 462, 1771, 1772, 462, 462, 462, 462, 462, 771, 777,
  /* 39948 */ 780, 462, 462, 462, 462, 462, 795, 462, 462, 1802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 937984,
  /* 39974 */ 462, 462, 2287, 462, 0, 0, 0, 439, 439, 439, 439, 462, 462, 462, 462, 0, 2288, 0, 439, 439, 439, 439, 462,
  /* 39997 */ 462, 462, 462, 0, 0, 0, 2289, 439, 439, 439, 2291, 462, 462, 462, 0, 0, 49152, 53248, 0, 0, 330, 0, 0,
  /* 40020 */ 45056, 0, 0, 0, 0, 0, 0, 0, 852, 0, 0, 0, 0, 0, 0, 0, 0, 1060864, 0, 0, 0, 0, 0, 0, 929792, 457, 457, 457,
  /* 40048 */ 457, 457, 457, 457, 457, 481, 481, 481, 481, 481, 481, 481, 481, 457, 457, 481, 57574, 57574, 2, 2, 3,
  /* 40069 */ 94212, 5, 6, 0, 0, 0, 0, 922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 462, 462, 462, 764, 462,
  /* 40098 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 773, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 40119 */ 439, 1396, 439, 439, 462, 1400, 462, 388, 388, 388, 388, 1237, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 40139 */ 388, 388, 388, 1705, 388, 388, 388, 388, 462, 462, 462, 1356, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 40160 */ 462, 462, 462, 1079, 462, 462, 462, 1083, 462, 462, 462, 462, 462, 0, 49152, 53248, 0, 289, 0, 0, 347,
  /* 40181 */ 45056, 347, 0, 347, 347, 347, 0, 347, 347, 366, 0, 0, 0, 405, 0, 405, 405, 405, 405, 405, 405, 0, 366,
  /* 40204 */ 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 405, 458, 458, 458, 458, 458,
  /* 40225 */ 482, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 482, 482, 482, 482, 482, 482, 482, 482, 458, 458,
  /* 40246 */ 482, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 930, 0, 0, 388, 388, 388, 388, 388, 388, 388, 388,
  /* 40270 */ 388, 388, 965, 0, 0, 0, 0, 0, 388, 1707, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
  /* 40293 */ 439, 1301, 439, 439, 1745, 439, 439, 439, 439, 439, 439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2025, 0, 0, 0, 0, 0,
  /* 40319 */ 0, 1790, 462, 462, 462, 462, 462, 462, 439, 439, 439, 462, 462, 462, 0, 0, 0, 0, 1127, 0, 0, 0, 1133, 0,
  /* 40343 */ 0, 0, 0, 0, 0, 0, 618, 0, 623, 0, 626, 0, 0, 0, 0, 459, 459, 459, 459, 459, 459, 459, 459, 483, 483, 483,
  /* 40369 */ 483, 483, 483, 483, 483, 459, 459, 483, 57574, 57574, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
  /* 40394 */ 1149, 0, 0, 0, 0, 0, 0, 0, 184648, 184810, 184810, 184810, 184810, 184810, 184810, 184810, 184810, 617, 0,
  /* 40413 */ 0, 388, 388, 388, 388, 388, 644, 388, 388, 388, 388, 388, 388, 388, 0, 530, 540, 0, 0, 530, 0, 0, 0, 0, 0,
  /* 40438 */ 0, 835, 0, 0, 0, 388, 388, 973, 974, 439, 439, 462, 462, 462, 765, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 40461 */ 462, 462, 462, 462, 1080, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1078, 462, 462, 1082, 462, 462,
  /* 40481 */ 462, 462, 462, 462, 439, 439, 439, 439, 908, 0, 462, 462, 462, 462, 873, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40507 */ 0, 0, 0, 888, 0, 1123, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 159744, 0,
  /* 40536 */ 0, 0, 159744, 0, 159744, 0, 0, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192880, 192880, 192880,
  /* 40560 */ 192880, 192880, 192880, 192880, 192880, 192880, 0, 0, 0, 583, 388, 388, 439, 439, 439, 439, 439, 439, 439,
  /* 40579 */ 439, 439, 439, 1987, 439, 439, 439, 1991, 462, 1033, 439, 439, 439, 439, 439, 439, 439, 745, 107540, 973,
  /* 40599 */ 748, 462, 462, 462, 462, 462, 1077, 462, 462, 462, 462, 462, 462, 1084, 462, 462, 462, 1141, 0, 0, 0, 0,
  /* 40621 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 942080, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1380352, 0,
  /* 40651 */ 1507328, 0, 0, 0, 0, 1340, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 40672 */ 1622, 388, 1491, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 388, 1246, 388, 462,
  /* 40692 */ 462, 462, 462, 1588, 1589, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 1114, 439, 439, 1117, 0, 0,
  /* 40713 */ 1118, 462, 462, 1121, 462, 462, 336311, 439, 439, 439, 336334, 462, 462, 462, 0, 0, 0, 0, 0, 0, 0,
  /* 40734 */ 1638400, 0, 1843200, 0, 0, 0, 1908736, 61440, 0, 0, 49152, 53248, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 0, 0,
  /* 40757 */ 357, 0, 0, 0, 388, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 2146, 439, 0, 1325, 107540, 0, 1325,
  /* 40779 */ 462, 462, 462, 462, 462, 1334, 462, 462, 462, 462, 462, 462, 2079, 462, 462, 462, 462, 462, 462, 439, 439,
  /* 40800 */ 462, 462, 1918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 275, 0, 0, 0, 0, 0, 925696, 0, 925696, 0, 0, 0, 0, 0,
  /* 40828 */ 0, 0, 0, 0, 0, 0, 0, 0, 925696, 0, 0, 925696, 0, 925696, 0, 0, 0, 0, 0, 0, 925696, 925696, 0, 0, 0, 0, 0,
  /* 40855 */ 0, 0, 925696, 0, 0, 925696, 925696, 0, 0, 0, 0, 925696, 925696, 0, 0, 925696, 925696, 0, 0, 0, 0, 1159, 0,
  /* 40878 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1654, 0, 0, 0, 0, 0, 0, 925696, 0, 0, 925696, 0, 0, 0, 925696, 0, 0, 0,
  /* 40906 */ 925696, 0, 0, 925696, 0, 0, 925696, 925696, 0, 0, 0, 0, 0, 0, 0, 925696, 0, 925696, 0, 925696, 0, 0, 0, 0,
  /* 40930 */ 926032, 926032, 0, 925696, 0, 0, 0, 926032, 0, 0, 0, 0, 0, 0, 0, 880, 0, 0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
  /* 40957 */ 0, 0, 0, 1199, 0, 0, 925696, 925696, 925696, 0, 0, 0, 2, 2166784, 3, 94212, 5, 6, 0, 0, 0, 0, 1175, 0, 0,
  /* 40982 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 893, 893, 0, 0, 896, 0, 0, 0, 311296, 0, 0, 1060864, 248, 249, 0, 0, 0, 0, 0,
  /* 41010 */ 0, 0, 897, 0, 0, 0, 0, 0, 0, 0, 0, 1060864, 0, 0, 0, 0, 36864, 0, 0, 2166784, 6, 0, 0, 0, 0, 0, 0, 0,
  /* 41038 */ 1388544, 0, 0, 1417216, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 567, 0, 0, 0, 0, 2166784, 0, 0,
  /* 41066 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0, 0, 934272, 934272, 934272, 0, 934272, 0, 0, 0, 0, 0,
  /* 41093 */ 0, 934272, 934272, 934272, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 934272, 934272, 934272, 934272, 934272,
  /* 41113 */ 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 934272, 0, 0, 0, 0, 0, 0,
  /* 41130 */ 0, 0, 1884160, 0, 0, 1949696, 0, 1961984, 0, 0, 0, 337, 337, 942419, 0, 0, 0, 0, 337, 0, 0, 0, 0, 0, 0, 0,
  /* 41156 */ 933, 388, 388, 388, 388, 388, 388, 388, 388, 949, 388, 388, 388, 388, 388, 388, 388, 0, 0, 942419, 0, 0,
  /* 41178 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419, 942419,
  /* 41197 */ 942419, 942419, 942419, 942419, 942419, 942419, 942419, 0, 0, 0, 0, 0, 0, 0, 0, 1896448, 1916928, 1363968,
  /* 41215 */ 1122304, 1122304, 1122304, 1122304, 1466368, 339, 0, 942419, 942419, 942419, 0, 0, 2, 2, 3, 94212, 5, 6,
  /* 41233 */ 0, 0, 0, 0, 1213, 0, 0, 1216, 0, 0, 0, 0, 0, 0, 0, 0, 914, 0, 0, 0, 0, 0, 0, 0, 950272, 0, 0, 0, 0, 0, 0,
  /* 41264 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1552384, 0, 0, 1122304, 1409024, 1122304, 1122304, 0, 0, 0, 110592, 0, 0, 0, 0,
  /* 41288 */ 0, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 1184, 0, 0, 0, 0, 110592, 110592, 110592, 110592, 0, 110592,
  /* 41313 */ 0, 0, 0, 0, 0, 0, 110592, 110592, 110592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41342 */ 1060864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592,
  /* 41360 */ 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 0, 0, 0, 0, 0, 0, 0, 0
];

ExistParser.EXPECTED =
[
  /*    0 */ 144, 152, 196, 160, 449, 168, 210, 176, 341, 334, 182, 1084, 190, 204, 218, 380, 226, 234, 242, 250, 748,
  /*   21 */ 365, 272, 259, 1080, 258, 259, 895, 259, 361, 259, 268, 533, 363, 259, 259, 280, 288, 811, 296, 304, 312,
  /*   42 */ 327, 356, 373, 388, 319, 526, 403, 411, 419, 427, 435, 443, 457, 465, 473, 481, 489, 497, 942, 505, 519,
  /*   63 */ 546, 616, 554, 569, 577, 585, 593, 601, 609, 348, 624, 632, 640, 648, 656, 664, 672, 734, 687, 971, 695,
  /*   84 */ 882, 703, 711, 719, 727, 742, 561, 756, 764, 772, 780, 788, 796, 804, 395, 819, 827, 835, 679, 843, 851,
  /*  105 */ 859, 867, 875, 921, 890, 907, 915, 929, 937, 950, 958, 538, 966, 979, 987, 1032, 995, 1003, 1011, 1019,
  /*  125 */ 1027, 511, 1040, 1045, 259, 899, 259, 260, 259, 259, 1074, 259, 1059, 260, 259, 1053, 1068, 1060, 259,
  /*  144 */ 1092, 1096, 1108, 1108, 1110, 1108, 1108, 1105, 1098, 1102, 1114, 1118, 1122, 1126, 1130, 1134, 2411, 1158,
  /*  162 */ 1147, 1812, 1814, 1242, 1166, 1170, 2412, 1192, 1357, 1749, 1749, 1749, 1266, 1242, 1215, 1147, 1729, 2412,
  /*  180 */ 1297, 1749, 1749, 1749, 1233, 1362, 1242, 1242, 1242, 1237, 1749, 1300, 1241, 1242, 1242, 1260, 1147, 1147,
  /*  198 */ 1145, 1147, 2855, 1153, 2432, 1147, 1147, 1727, 2413, 1749, 1749, 1360, 1242, 1242, 1257, 1208, 1147, 1147,
  /*  216 */ 1147, 1702, 1248, 1147, 1147, 1728, 1748, 1750, 1242, 1364, 1749, 1254, 1272, 1264, 1243, 1560, 1280, 2204,
  /*  234 */ 1270, 1561, 1244, 1278, 1284, 1288, 1304, 1291, 1308, 1312, 1323, 1323, 1316, 1320, 1323, 1326, 1330, 1334,
  /*  252 */ 1338, 1342, 1346, 1350, 1354, 1368, 1399, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1515, 1856, 1147,
  /*  270 */ 1147, 1147, 1147, 1147, 1147, 1147, 2157, 1147, 1147, 1147, 1406, 1903, 1147, 1147, 2714, 1417, 1147, 1421,
  /*  288 */ 1430, 1434, 1438, 1442, 1446, 1450, 1454, 2353, 1842, 1477, 1481, 1485, 1483, 2256, 1490, 1905, 1147, 2250,
  /*  306 */ 1147, 1726, 1217, 2663, 2079, 1494, 1147, 2584, 1501, 1147, 1147, 1147, 2456, 1147, 1147, 1618, 2006, 1147,
  /*  324 */ 1147, 2169, 2109, 1147, 2168, 1505, 2602, 1147, 1147, 1724, 1147, 1147, 1689, 1147, 2410, 2412, 1231, 1749,
  /*  342 */ 1221, 1242, 1242, 1242, 1223, 1227, 1147, 1147, 1552, 1160, 1931, 1944, 2140, 1948, 2112, 1522, 1526, 2607,
  /*  360 */ 1531, 1147, 1147, 1147, 1699, 1147, 1147, 1147, 1147, 1147, 1147, 1389, 1147, 2475, 1533, 1147, 1147, 1147,
  /*  378 */ 1542, 2601, 1147, 1147, 1745, 1749, 1279, 1363, 1273, 1554, 1147, 1659, 1147, 2114, 1548, 1518, 1558, 1147,
  /*  396 */ 1147, 1803, 2430, 1937, 1147, 1567, 2327, 1147, 2080, 2474, 1147, 1147, 2147, 1147, 1600, 2012, 1571, 2338,
  /*  414 */ 1147, 1147, 1577, 1147, 1788, 1495, 1659, 2102, 1583, 1147, 2280, 1147, 2147, 1724, 2861, 1584, 1978, 2282,
  /*  432 */ 2403, 2030, 1588, 2096, 1855, 1496, 1497, 2188, 1597, 2202, 1779, 1857, 1598, 1604, 1599, 1616, 1622, 1147,
  /*  450 */ 1147, 1146, 1147, 1181, 1147, 1147, 2410, 1147, 2007, 1901, 1147, 1147, 1632, 2343, 1636, 2788, 1642, 1646,
  /*  468 */ 1649, 1652, 1654, 1147, 2359, 1658, 2317, 1663, 1668, 2129, 1674, 2269, 2744, 2644, 1678, 1682, 1688, 1686,
  /*  486 */ 1147, 1147, 1899, 1147, 2306, 2418, 2211, 1693, 1864, 1147, 1706, 2800, 1718, 2312, 1722, 1147, 1147, 1733,
  /*  504 */ 1737, 1767, 1867, 1771, 2123, 1507, 1511, 1147, 1147, 1154, 2831, 2816, 2820, 2824, 1469, 1147, 1509, 1513,
  /*  522 */ 1147, 1147, 1147, 1874, 1147, 1147, 2077, 1973, 1565, 2080, 2474, 1147, 1147, 2188, 1147, 1147, 1147, 1147,
  /*  540 */ 1147, 1626, 1198, 1147, 1274, 2667, 1848, 1984, 1821, 1177, 1777, 2613, 1783, 1787, 1147, 1796, 1820, 1176,
  /*  558 */ 1801, 2614, 1809, 1147, 1147, 2208, 2694, 2329, 2215, 2219, 2226, 1147, 1148, 1809, 1147, 1147, 1934, 2318,
  /*  576 */ 1818, 1175, 1825, 2621, 1147, 1147, 1829, 1147, 1527, 1833, 1837, 1773, 2090, 1841, 1402, 1147, 1846, 2654,
  /*  594 */ 2087, 1426, 1664, 1854, 2459, 1861, 1871, 1714, 2750, 1878, 1882, 1888, 1922, 1892, 1896, 1911, 1923, 1920,
  /*  612 */ 1884, 1927, 2222, 1914, 1147, 1147, 2283, 1792, 1147, 1147, 1147, 1940, 1952, 1956, 1960, 1963, 1967, 1971,
  /*  630 */ 1147, 1486, 1977, 1424, 1982, 1988, 1995, 2011, 1696, 2017, 2733, 2021, 2025, 2029, 2027, 2350, 1147, 1550,
  /*  648 */ 1147, 2034, 2580, 2706, 1609, 2521, 2041, 2047, 2574, 2051, 1147, 2057, 1495, 1147, 1148, 2061, 1147, 2686,
  /*  666 */ 1147, 2594, 1141, 2036, 2582, 1995, 2065, 2069, 2074, 2084, 1147, 2397, 2401, 1147, 1147, 2323, 2395, 1712,
  /*  684 */ 1998, 2407, 2384, 2001, 2094, 2134, 2100, 2106, 1147, 1148, 2118, 2331, 2037, 2133, 1612, 2138, 1147, 2768,
  /*  702 */ 2006, 1611, 2161, 2178, 2167, 1147, 2053, 1495, 2391, 2356, 2755, 2173, 1147, 2177, 1149, 2195, 1162, 1188,
  /*  720 */ 2182, 2294, 1147, 2194, 2292, 2199, 1593, 2300, 1370, 1147, 1147, 2341, 1147, 1591, 1147, 1147, 2399, 1147,
  /*  738 */ 2013, 1147, 1573, 1148, 2342, 1701, 1147, 2155, 2341, 1607, 1147, 1147, 1374, 1147, 1147, 1381, 1850, 1147,
  /*  756 */ 2230, 2234, 2237, 2241, 2245, 2249, 1147, 2364, 2254, 2260, 2264, 1140, 2806, 2442, 1466, 2569, 2273, 1413,
  /*  774 */ 2689, 2693, 2691, 2277, 1147, 2773, 2210, 2288, 1137, 1147, 2298, 2630, 1147, 1544, 2185, 2304, 1147, 1538,
  /*  792 */ 2310, 1147, 1147, 2149, 2316, 1173, 1147, 2812, 1638, 2290, 1139, 2070, 2322, 1147, 1709, 2677, 1147, 1147,
  /*  810 */ 1805, 1147, 1147, 2462, 1670, 1463, 2661, 1473, 1738, 2335, 2121, 1991, 1147, 2347, 2732, 1147, 1916, 2363,
  /*  828 */ 1147, 1147, 1147, 2368, 1147, 2376, 2812, 1763, 2382, 1990, 1147, 2388, 1147, 2323, 2395, 2417, 2422, 1148,
  /*  846 */ 2429, 1147, 2866, 2370, 1250, 2407, 2436, 2424, 1148, 2440, 2163, 2431, 2446, 2450, 2425, 2559, 1148, 1411,
  /*  864 */ 2468, 1459, 2472, 1409, 2479, 2483, 2507, 2488, 2493, 2497, 2484, 2489, 2501, 2505, 2842, 2511, 2515, 2519,
  /*  882 */ 1147, 1147, 2768, 2006, 2730, 2004, 2144, 2153, 2533, 2537, 2541, 2545, 2549, 1147, 1147, 1147, 1700, 1147,
  /*  900 */ 1147, 1147, 1147, 1537, 1147, 1147, 1147, 2553, 2557, 2563, 2567, 2573, 2578, 2588, 2848, 2723, 2598, 1383,
  /*  918 */ 2606, 1385, 2611, 1147, 1147, 1377, 2078, 1147, 2670, 2525, 2529, 2618, 2650, 2590, 2794, 2043, 1579, 1147,
  /*  936 */ 1395, 2625, 2629, 1147, 1147, 2634, 1147, 1147, 1147, 1742, 1147, 1754, 1761, 2679, 2638, 2642, 1147, 1376,
  /*  954 */ 2648, 2652, 2592, 2573, 2658, 1147, 2453, 1147, 1147, 1147, 1624, 1628, 2785, 2674, 1907, 1147, 2683, 1147,
  /*  972 */ 1147, 1147, 2378, 2127, 1147, 2267, 1195, 2698, 1147, 1147, 1147, 2284, 2702, 2705, 2464, 2710, 2718, 1147,
  /*  990 */ 2722, 2727, 1147, 1147, 2737, 1147, 2754, 1147, 2759, 1147, 1147, 2763, 2372, 2741, 2772, 1756, 1147, 1186,
  /* 1008 */ 2190, 2778, 1204, 1147, 1757, 1184, 1147, 2777, 2713, 1147, 2782, 1211, 1147, 2792, 2798, 1147, 2804, 1147,
  /* 1026 */ 2810, 1147, 2799, 1797, 1147, 1147, 1147, 1147, 1147, 2737, 2766, 1201, 2741, 2748, 2828, 2835, 2839, 2846,
  /* 1044 */ 2852, 1147, 1147, 1147, 2859, 1535, 1147, 2156, 1147, 1147, 1457, 1147, 1147, 1147, 1147, 1147, 1147, 1516,
  /* 1062 */ 1147, 1147, 1147, 1147, 1147, 1147, 2865, 1147, 1147, 1147, 1147, 1535, 1147, 1147, 1517, 1147, 1147, 1147,
  /* 1080 */ 1147, 1147, 1393, 1147, 1147, 1147, 1147, 1147, 1294, 2412, 1748, 1749, 2977, 2870, 2880, 3754, 2894, 2906,
  /* 1098 */ 2917, 2917, 2916, 2917, 2921, 2917, 2925, 2917, 2917, 3226, 2917, 2917, 2917, 2917, 3224, 2897, 2927, 2953,
  /* 1116 */ 2931, 2933, 2937, 2938, 2942, 2946, 2951, 2947, 3003, 2957, 2961, 2962, 2967, 2966, 2971, 2975, 2978, 2871,
  /* 1134 */ 4033, 2909, 2987, 2880, 2874, 3384, 3699, 2880, 2880, 2880, 3612, 3578, 2982, 2880, 2880, 2880, 2880, 2881,
  /* 1152 */ 3594, 3818, 2880, 2880, 2880, 2888, 3049, 3399, 2880, 2880, 2873, 2880, 2884, 4060, 3041, 3057, 4644, 4646,
  /* 1170 */ 3007, 3093, 2987, 2880, 2879, 2877, 2880, 3314, 3696, 2880, 2880, 3585, 3634, 3022, 2880, 2880, 4515, 4657,
  /* 1188 */ 2880, 2880, 4103, 4107, 3049, 3049, 3015, 2880, 2880, 4543, 2872, 3961, 3961, 2880, 2880, 4569, 2880, 2880,
  /* 1206 */ 4602, 3689, 4049, 3094, 2987, 2880, 2880, 4608, 3961, 3021, 2879, 2880, 2880, 2873, 2987, 3830, 3039, 3954,
  /* 1224 */ 3954, 3043, 3953, 3081, 3094, 3094, 2987, 3049, 4614, 3056, 3056, 3026, 3037, 3042, 3952, 3080, 4051, 3038,
  /* 1242 */ 3954, 3954, 3954, 3954, 3068, 2880, 3042, 3956, 2880, 2880, 2880, 4299, 3953, 3954, 3954, 3954, 3042, 3058,
  /* 1260 */ 3954, 3041, 3952, 3957, 3396, 3056, 3056, 3056, 3832, 3954, 3953, 3954, 3041, 3957, 2880, 2880, 2880, 2984,
  /* 1278 */ 3055, 3056, 3952, 3954, 3954, 3068, 3041, 3957, 3055, 3066, 3954, 3957, 3056, 3952, 3077, 3077, 2880, 2880,
  /* 1296 */ 4613, 3049, 2880, 4613, 3056, 3044, 3026, 3037, 3954, 3348, 3066, 3955, 3127, 3086, 3085, 3092, 4121, 3099,
  /* 1314 */ 3106, 3110, 3094, 3116, 2912, 3123, 3138, 3102, 3132, 3094, 3094, 3094, 3094, 3095, 3136, 3142, 3094, 4123,
  /* 1332 */ 3112, 3463, 4124, 3161, 3163, 3167, 3170, 3198, 3174, 3177, 3181, 3187, 3191, 3184, 3191, 2984, 3195, 3119,
  /* 1350 */ 3202, 3206, 3212, 3208, 3216, 2880, 3128, 2880, 2880, 4613, 3056, 3035, 3040, 3954, 3954, 3954, 3951, 3957,
  /* 1368 */ 2986, 3222, 2880, 2880, 2880, 4330, 3230, 3126, 2880, 2880, 2880, 4349, 4564, 2880, 4108, 2880, 2880, 2880,
  /* 1386 */ 4462, 4466, 4413, 3839, 3316, 3748, 3128, 2880, 4016, 2880, 2880, 2880, 4481, 2880, 4015, 3008, 2880, 2881,
  /* 1404 */ 3770, 3775, 4036, 4035, 3245, 2880, 2881, 3905, 2872, 2880, 2880, 3883, 4210, 2880, 3737, 3756, 3414, 2880,
  /* 1422 */ 4032, 3263, 2880, 2881, 4029, 2880, 3783, 3777, 4061, 3739, 2876, 3741, 4240, 3751, 3266, 3269, 3273, 3275,
  /* 1440 */ 3279, 3283, 3286, 3286, 3286, 3287, 3291, 3291, 3292, 3296, 3302, 3300, 3304, 3308, 2880, 4035, 3506, 2880,
  /* 1458 */ 2882, 2880, 2880, 4451, 2880, 4062, 2880, 4239, 2880, 2885, 4026, 2887, 4629, 2888, 4633, 3322, 2880, 3919,
  /* 1476 */ 3337, 3421, 3342, 2880, 3017, 3347, 2880, 2880, 3073, 3354, 2880, 2880, 2880, 3011, 3362, 2880, 3958, 3819,
  /* 1494 */ 3378, 2872, 2880, 2880, 2880, 3059, 2880, 2880, 4283, 3407, 3382, 3217, 3399, 2880, 2880, 2881, 3712, 3703,
  /* 1512 */ 4133, 3488, 2872, 2880, 2880, 2883, 2880, 2880, 2880, 4282, 3419, 2880, 2880, 3425, 3433, 2880, 2880, 2880,
  /* 1530 */ 3154, 3395, 3240, 3442, 3381, 2880, 2880, 2884, 2880, 2880, 2880, 4250, 3398, 3398, 2880, 2880, 2885, 4234,
  /* 1548 */ 3427, 2872, 2880, 2880, 3010, 4002, 2880, 2880, 3049, 3050, 3374, 3429, 2880, 2880, 3056, 3056, 3952, 3813,
  /* 1566 */ 3449, 2880, 2880, 3217, 4114, 3883, 3448, 2880, 2880, 3239, 4056, 3373, 3449, 2880, 2880, 3239, 4524, 3455,
  /* 1584 */ 2880, 3371, 4484, 2880, 2900, 3348, 3469, 2880, 2990, 2880, 2880, 3595, 2880, 3059, 2880, 3349, 2880, 2880,
  /* 1602 */ 2880, 3315, 3365, 2880, 3350, 2880, 2990, 2880, 2988, 4106, 2880, 4497, 2880, 2880, 3350, 3348, 2880, 2880,
  /* 1620 */ 3241, 3444, 3059, 3349, 2880, 2880, 3248, 4555, 4530, 4509, 2872, 2880, 3646, 2880, 3482, 3493, 4031, 4301,
  /* 1638 */ 4030, 2880, 3880, 3009, 3515, 3519, 3523, 3527, 3529, 3538, 3533, 3538, 3538, 3536, 3542, 3542, 3542, 3542,
  /* 1656 */ 3545, 2880, 4658, 2880, 2880, 2880, 3316, 3550, 2880, 2880, 2880, 3318, 3960, 4029, 2880, 2880, 3313, 2880,
  /* 1674 */ 4052, 2880, 3315, 3560, 4274, 2880, 4206, 3609, 4604, 2880, 3072, 3617, 2880, 3617, 3621, 2880, 2880, 2880,
  /* 1692 */ 3324, 3556, 2984, 3062, 2880, 2997, 3889, 2880, 3008, 2880, 2880, 2880, 2988, 3634, 3639, 3723, 2872, 2880,
  /* 1710 */ 3010, 4281, 2880, 3031, 2880, 2880, 3795, 3776, 2880, 4097, 4573, 3070, 4010, 4238, 2880, 2880, 3314, 2880,
  /* 1728 */ 2880, 2880, 3049, 3049, 3049, 2880, 3820, 3652, 3656, 4236, 2880, 2880, 2880, 3328, 3153, 3157, 3721, 2880,
  /* 1746 */ 3048, 3049, 3050, 3056, 3056, 3056, 3056, 3952, 2880, 3687, 2880, 2880, 3317, 2880, 2880, 2880, 3961, 4030,
  /* 1764 */ 2880, 3883, 4035, 3061, 2880, 3314, 3348, 3676, 3682, 2880, 2880, 3317, 3009, 4224, 3678, 2880, 2880, 3350,
  /* 1782 */ 2880, 2880, 3711, 3715, 3485, 3489, 2880, 2880, 2880, 3331, 3713, 3719, 3487, 3777, 3686, 2880, 2880, 3958,
  /* 1800 */ 3961, 2984, 3727, 2880, 2880, 3357, 4288, 4010, 4014, 3713, 3731, 3488, 2880, 3051, 3056, 3056, 3001, 3948,
  /* 1818 */ 2880, 3958, 4027, 2880, 2987, 3062, 2880, 2880, 3745, 2880, 4028, 2881, 3714, 3706, 3777, 3760, 2880, 3778,
  /* 1836 */ 3688, 2880, 3958, 4028, 3060, 3774, 2880, 2880, 2880, 3336, 2880, 4094, 2880, 3685, 2880, 2880, 3348, 3237,
  /* 1854 */ 3784, 2880, 2880, 2880, 3366, 2880, 3059, 3788, 2880, 3315, 3315, 3626, 4590, 3697, 2880, 2880, 4223, 4029,
  /* 1872 */ 3318, 3797, 2880, 3153, 3157, 3478, 2878, 4491, 3795, 3801, 2880, 3795, 3801, 2880, 3810, 4543, 2885, 4095,
  /* 1890 */ 2878, 3804, 2885, 4095, 2879, 3805, 2880, 3803, 3801, 2880, 3155, 3476, 4657, 2880, 2880, 3253, 3258, 2880,
  /* 1908 */ 2880, 2880, 4523, 4366, 2878, 3804, 3238, 4088, 2880, 2880, 3358, 4289, 3029, 4458, 3238, 3239, 3806, 2880,
  /* 1926 */ 2988, 2880, 4545, 2878, 4544, 2882, 2880, 4030, 2880, 3155, 3735, 2880, 3060, 3060, 2880, 3153, 3157, 3151,
  /* 1944 */ 3817, 2881, 2880, 3824, 3818, 3836, 2902, 3937, 2884, 3939, 3941, 3843, 3846, 3850, 3863, 3865, 3854, 3857,
  /* 1962 */ 3854, 3854, 3860, 3874, 3874, 3875, 3869, 3874, 3874, 3872, 3879, 2880, 2880, 3384, 3883, 4003, 2880, 2880,
  /* 1980 */ 2880, 3372, 3930, 2880, 2880, 3959, 4028, 2880, 3349, 3838, 2880, 2880, 3388, 4034, 2880, 2880, 4035, 3008,
  /* 1998 */ 2880, 3218, 3658, 4030, 3929, 4026, 2880, 3239, 3382, 2880, 2880, 2880, 3155, 4105, 2880, 2880, 2880, 3384,
  /* 2016 */ 3384, 4143, 2880, 3885, 3893, 3900, 3911, 4635, 4659, 3917, 2880, 2880, 3923, 3927, 2880, 2880, 2880, 3385,
  /* 2034 */ 2881, 4030, 2880, 3931, 2880, 2880, 3961, 3883, 4143, 2880, 2880, 3400, 2880, 2880, 4471, 3966, 3970, 3983,
  /* 2052 */ 3988, 2880, 2880, 3436, 4079, 3233, 3145, 3149, 3994, 4472, 3147, 3992, 3996, 4105, 2880, 2880, 4308, 4142,
  /* 2070 */ 2880, 2880, 2880, 3387, 4035, 4007, 3971, 2880, 3315, 2880, 2880, 2880, 3239, 3374, 2880, 4021, 4040, 2880,
  /* 2088 */ 3316, 2880, 3317, 4029, 2880, 3769, 3958, 3348, 2880, 2880, 3467, 2872, 4307, 4263, 2880, 2880, 3546, 3882,
  /* 2106 */ 4035, 4309, 4030, 2880, 3331, 3086, 2880, 2986, 2880, 3384, 3337, 3239, 3765, 4310, 4066, 2872, 4525, 2880,
  /* 2124 */ 2880, 3693, 4028, 4072, 4081, 2880, 2880, 3555, 2880, 2880, 4364, 2988, 4106, 2880, 2880, 4078, 2880, 2880,
  /* 2142 */ 3570, 2880, 2880, 3613, 2890, 2880, 3332, 2880, 2880, 3232, 4252, 2880, 3961, 2880, 2988, 2880, 2880, 2880,
  /* 2160 */ 3567, 3314, 4101, 2880, 2880, 3591, 4315, 4080, 2880, 2880, 2880, 3397, 3397, 2880, 4497, 2880, 4498, 3593,
  /* 2178 */ 2880, 2880, 2880, 3437, 3314, 4263, 4498, 2880, 3338, 3318, 2880, 3365, 2880, 2880, 2880, 4516, 3593, 2880,
  /* 2196 */ 2880, 3472, 2880, 4328, 3323, 3323, 2880, 3365, 2880, 3348, 3056, 3056, 2880, 4112, 3658, 4030, 2880, 2880,
  /* 2214 */ 2992, 3696, 3818, 4118, 4128, 4137, 2880, 3415, 3239, 3238, 3812, 3802, 4442, 2880, 4147, 4090, 4158, 4168,
  /* 2232 */ 4172, 4161, 4164, 4176, 4178, 4184, 4184, 4184, 4184, 4182, 4193, 4193, 4194, 4188, 4193, 4193, 4191, 4198,
  /* 2250 */ 2880, 2880, 2880, 3578, 4113, 3659, 2880, 2880, 3622, 2880, 2880, 3881, 2880, 3819, 4581, 3317, 2873, 3546,
  /* 2268 */ 3546, 2880, 2880, 3564, 2880, 4420, 3672, 2880, 3309, 4229, 2880, 4230, 2880, 3372, 4485, 2880, 2880, 2880,
  /* 2286 */ 3247, 4553, 3882, 3009, 4035, 4582, 2880, 2874, 2880, 2880, 3592, 2872, 2880, 4547, 2880, 2880, 3635, 2880,
  /* 2304 */ 2880, 4244, 2880, 2880, 3645, 3551, 4254, 4013, 2880, 2880, 3650, 3654, 4256, 2880, 2880, 2880, 3778, 3688,
  /* 2322 */ 4270, 2880, 2880, 2880, 3827, 3660, 2880, 2880, 3882, 2880, 2880, 3611, 2880, 3818, 4580, 4584, 2880, 3374,
  /* 2340 */ 3450, 2880, 2989, 2880, 2880, 2880, 3504, 2880, 4278, 3883, 2880, 3386, 3546, 2880, 3254, 3259, 2880, 2883,
  /* 2358 */ 2890, 2880, 2885, 3156, 3477, 4011, 2880, 2880, 2880, 3958, 3356, 4287, 3657, 4013, 2880, 2880, 3698, 3317,
  /* 2376 */ 2879, 2879, 2880, 2880, 3763, 3438, 4583, 2880, 2875, 3642, 2880, 3388, 2880, 4280, 2880, 3384, 3386, 2880,
  /* 2394 */ 2873, 4290, 4012, 2880, 2880, 3763, 4046, 4074, 3997, 2880, 2880, 3459, 2880, 3881, 2880, 4598, 2880, 3396,
  /* 2412 */ 3049, 3049, 3049, 3049, 3056, 4034, 2880, 2880, 2880, 3961, 3629, 3546, 2880, 2880, 3880, 3384, 2880, 4295,
  /* 2430 */ 4010, 4014, 2880, 2880, 2880, 3881, 3383, 3688, 3387, 4305, 4314, 4013, 2880, 2880, 3883, 2880, 4319, 3882,
  /* 2448 */ 4597, 2874, 4246, 2880, 3389, 2880, 3401, 4539, 2880, 3405, 3380, 2880, 2885, 4095, 2880, 2983, 2880, 2880,
  /* 2466 */ 2880, 4561, 3778, 3632, 3471, 3388, 2880, 3903, 3907, 2880, 2880, 2880, 3240, 2880, 4325, 2872, 3584, 2880,
  /* 2484 */ 3601, 3605, 2880, 3087, 3087, 2880, 3602, 3382, 2881, 2881, 3604, 2880, 3779, 3088, 2880, 3603, 2872, 3604,
  /* 2502 */ 2880, 2875, 3584, 3602, 3382, 3601, 3605, 2880, 3667, 4546, 3578, 4336, 4334, 3088, 4656, 4656, 4017, 4340,
  /* 2520 */ 4340, 2880, 2880, 3896, 3945, 2880, 4355, 2880, 4321, 4361, 3496, 2880, 3498, 3500, 4370, 4373, 4377, 4384,
  /* 2538 */ 4391, 4394, 4397, 4383, 4381, 4384, 4388, 4406, 4406, 4407, 4401, 4406, 4406, 4404, 4411, 2880, 4350, 4565,
  /* 2556 */ 3315, 2880, 3694, 2880, 2880, 3904, 3382, 3580, 3584, 2880, 4418, 4424, 3399, 2880, 2880, 3913, 4281, 4140,
  /* 2574 */ 2880, 2880, 2880, 3975, 2880, 4435, 2880, 2880, 3960, 3935, 2880, 2880, 3393, 2880, 2880, 4440, 2880, 2880,
  /* 2592 */ 3979, 4476, 2880, 2880, 4001, 2872, 3343, 4456, 4357, 2880, 3411, 3086, 2880, 2880, 4466, 2880, 2880, 2880,
  /* 2610 */ 3984, 2880, 4414, 2880, 2880, 4029, 2880, 2881, 4349, 4564, 3315, 2880, 3435, 3715, 3707, 4541, 2880, 2880,
  /* 2628 */ 4489, 4495, 2880, 2880, 2880, 4024, 3247, 4502, 4506, 3906, 3249, 4504, 4508, 3382, 4513, 3962, 2880, 2880,
  /* 2646 */ 4059, 3599, 4564, 3317, 3695, 2880, 2880, 3581, 2880, 2880, 4030, 2878, 3126, 2880, 4523, 2880, 3461, 2880,
  /* 2664 */ 4452, 3370, 3420, 4351, 4068, 2880, 3697, 3778, 3578, 3791, 3978, 4477, 4139, 2880, 3546, 2880, 2880, 3664,
  /* 2682 */ 2880, 2880, 4535, 4539, 2880, 3546, 2880, 3385, 2880, 2880, 4217, 4221, 2880, 2880, 2880, 3697, 4551, 4555,
  /* 2700 */ 4531, 3906, 4131, 4519, 3382, 3960, 2880, 2880, 2880, 4042, 4571, 3694, 2880, 3578, 2880, 2880, 2880, 4150,
  /* 2718 */ 3582, 2880, 4154, 4139, 4524, 2880, 2880, 2880, 4090, 2988, 4537, 3883, 2880, 3546, 3384, 2880, 2880, 2880,
  /* 2736 */ 3884, 2988, 4225, 4531, 3449, 3696, 2880, 4577, 2880, 3577, 4272, 3589, 4154, 2991, 2880, 2880, 4092, 4096,
  /* 2754 */ 3670, 2880, 2880, 2880, 4105, 2880, 4266, 4518, 2872, 4265, 4517, 4343, 3960, 3961, 2880, 2880, 4085, 4557,
  /* 2772 */ 4588, 2880, 2880, 2880, 4112, 4516, 4594, 3961, 2880, 4526, 2880, 4031, 2983, 2880, 3579, 3583, 2880, 3510,
  /* 2790 */ 4213, 3573, 2880, 4031, 2880, 2880, 4141, 2880, 4031, 4611, 2880, 2880, 2880, 4200, 2880, 4611, 2880, 2880,
  /* 2808 */ 4204, 3511, 3958, 3961, 2880, 2880, 4260, 3658, 2880, 4619, 2880, 4624, 2880, 4625, 4469, 4623, 2888, 2886,
  /* 2826 */ 2887, 2887, 2882, 4639, 4642, 4618, 4619, 2880, 2985, 4650, 4663, 4666, 4663, 4431, 4430, 4665, 2880, 3584,
  /* 2844 */ 4335, 4655, 2885, 2888, 2880, 2880, 4446, 4436, 3895, 4427, 4653, 2880, 3585, 2996, 4345, 2889, 4153, 2880,
  /* 2862 */ 2880, 4449, 3454, 2881, 2880, 2880, 2880, 4294, 8388608, 16777216, 0x80000000, 0, 0, 0, 0x80000000, 0, 0,
  /* 2879 */ 128, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 2048, 536870912, 0, 524292, 524320, 1074266112, 1074266112,
  /* 2900 */ 524288, 0x80000000, 0, 0, 1, 512, 537133056, 262144, 1074266112, 524288, 0, 4, 32, 40, 32, 97, 524348,
  /* 2917 */ 524288, 524288, 524288, 524288, 524288, 536889728, 21120, 67633152, 17536, 524288, 524288, 524288,
  /* 2929 */ 67633152, 1544028160, 655360, 655392, 1074397184, 655364, 1544028160, 336068608, 336068608, 336068608,
  /* 2939 */ 336068608, 336068608, 470286336, 1544028160, 1544028160, 470286336, 470286336, 1544028160, 1544028160,
  /* 2948 */ 1544028160, 1544028160, 1544159232, 1544028160, 470286336, 1544028160, 1544028160, 655360, 1544028160,
  /* 2957 */ 294912, 34111552, 557120, 557120, 1074298944, 557120, 557120, 557120, 557180, 34111612, 34111612, 34111612,
  /* 2969 */ 34111612, 101220476, 34111612, 34111612, 1544060992, 1544060992, 503873660, 8192, 8192, 65536, 2097152,
  /* 2980 */ 4194304, 8388608, 1048576, 1048576, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 18, 28, 0, 0, 0, 34, 32768, 32768,
  /* 3003 */ 32768, 32832, 294976, 557120, 65536, 16777216, 0, 0, 0, 512, 4096, 262144, 131072, 131072, 0, 0,
  /* 3019 */ -1811939328, -1677721600, 16384, 128, 128, 128, 0, 64, 64, 64, 64, 0, 128, 0, 0, 128, 32768, 64, 64,
  /* 3038 */ 33554496, 33554496, 33554496, 33587200, 33587200, 33587200, 32768, 32768, 32768, 64, 0, 131072, 131072,
  /* 3051 */ 131072, 131072, 32768, 32768, 0, 32768, 32768, 32768, 32768, 0, 0, 0, 128, 16384, 0, 32768, 32768, 32768,
  /* 3069 */ 33587200, 0, 0, -1610612736, 0, 0, 0, 3002368, 32768, 33587200, 32768, 33587200, 33587200, 32, 32, 32, 0,
  /* 3086 */ 536870912, 0x80000000, 0, 0, 65536, 0, 4, 0, 32, 32, 32, 32, 40, 40, 96, 160, 544, 544, 544, 3145760,
  /* 3106 */ 131104, 524320, 1048608, 2097184, 536870944, 32, 32, 32, 33, 42, 32, 262176, 32, 32, 41, 224, 42, 33, 33,
  /* 3125 */ 34, 48, 0, 0, 0, 2048, 0, 1048608, 1048608, 2097184, 2097184, 33, 33, 608, 96, 2097696, 544, 1048608, 32,
  /* 3144 */ 32, 32, 64, 128, 256, 126976, 131072, 262144, 1048576, 0, 0, 2, 4, 16, 64, 512, 1024, 331350016, 544, 32,
  /* 3164 */ 544, 2097184, 1049120, 544, 544, 2228832, -331298904, -331298904, 32, -331298902, 40, 744, -331298902,
  /* 3177 */ -1402861600, -1402861600, -1402861600, -1402861600, -329119776, -1401813024, -1401813016, -329070624,
  /* 3185 */ -328546328, -328546328, -329070616, -329070624, -329070616, -328546336, -329070615, -329070616, -329070616,
  /* 3194 */ -329070616, -2147418112, 32, 160, 32, 96, 32, 168, 43, 106, 234, 281022507, 281030699, 281079851,
  /* 3208 */ 281081147, 281081147, -329070616, -328546328, 281081211, 281081147, 281081147, 281081147, -52283541, 0, 0,
  /* 3219 */ 0, 1024, 16384, 0, 65536, 524288, 1048576, 524288, 524320, 67633152, 1074266112, 32, 262144, 0, 0, 1, 2, 8,
  /* 3237 */ 201326592, 1073741824, 0, 0, 0, 4096, 49152, 524288, 0, 2560, 0, 0, 1, 8, 48, 512, 0, 262144, 4194304,
  /* 3256 */ 16777216, 33554432, 33554432, 67108864, 536870912, 0x80000000, 0, 262144, 1056768, 262144, 0x80000000,
  /* 3267 */ -2146959360, -1542717312, 402718787, 402718787, -1668476928, 402718787, -1668476928, -1668476928,
  /* 3275 */ -1668476928, -1668476928, 423690307, -2079522685, -2079522685, -2079522685, -1811087229, -1811087225,
  /* 3283 */ -1676869501, -2078465913, -2078465913, -1676869437, -1676869437, -1676869437, -1676869437, -1668476733,
  /* 3291 */ -592588800, -592588800, -592588800, -592588800, -592457728, -592457728, -592457728, -592457728, -592456636,
  /* 3300 */ -592456620, -592456492, -592456620, -592456620, -592456620, -592456620, -592588605, -592588605, -592456489,
  /* 3309 */ 0, 0, 0, 6656, 1056768, 0, 0, 0, 8192, 0, 0, 0, 6144, -1543503872, 0, 0, 0, 16384, 128, 856064, 8388608,
  /* 3330 */ -1677721600, 0, 0, 4194304, 16777216, 0x80000000, 0, 402653184, 0, 0, 0, 18432, -2080374784, 0, 0, 0,
  /* 3346 */ 28672, 1908736, 0, 0, 0, 32768, 0, 0, 8388608, -603979776, 0, 0, 1, 32, 512, 12288, 1024, 0, 3133440, 0, 0,
  /* 3367 */ 16777216, 0, 0, 603979776, 0, 0, 0, 49152, 524288, 2097152, 8388608, 65536, 786432, 8388608, 469762048,
  /* 3382 */ 1073741824, 0x80000000, 0, 0, 524288, 0, 0, 0, 65536, 131072, 0, 0, 335544320, 469762048, 0, 0, 0, 131072,
  /* 3400 */ 0, 0, 0, 48, 8192, 4096, 114688, 786432, 2097152, 8388608, 469762048, 0, 4194304, 16777216, 67108864,
  /* 3415 */ 67108864, 0, 0, 0x80000000, 0, 65536, 402653184, 0, 0, 851968, 4096, 65536, 524288, 8388608, 67108864,
  /* 3430 */ 402653184, 1073741824, 0x80000000, 469762048, 0x80000000, 0, 0, 1, 256, 4096, 8192, 16384, 65536, 524288,
  /* 3444 */ 2097152, 8388608, 67108864, 402653184, 524288, 8388608, 268435456, 0x80000000, 0, 0, 0, 524288, 268435456,
  /* 3457 */ 0x80000000, 0, 0, 16777216, 0x80000000, 0, 32, 0, 4, 608, 0, 32768, 524288, 2097152, 0x80000000, 0, 524288,
  /* 3474 */ 0, 524288, 512, 1024, 262144, 524288, 1048576, 0, 512, 0, 576, 262144, 524288, 3145728, 33554432, 67108864,
  /* 3490 */ 268435456, 1610612736, 0, 4194304, 8388608, 8388608, 134217728, 131136, 134217728, 37748736, 0, 268435472,
  /* 3502 */ 0, 268435472, 0, 512, 256, 0, 512, 2048, 262208, 0, 0, 0, 458752, -2139095008, -2146435040, 16512,
  /* 3518 */ -2147483616, -2146435040, -2146426848, -1600642528, 83918848, 88113152, 83918848, -2053594592, 83918852,
  /* 3527 */ -2053594592, -2053594592, -2053594592, -2053594592, 83919446, -1516723680, -1516723680, -1382505952,
  /* 3535 */ -1382505952, -1516723680, -1516722656, -1516723680, -1516723680, -1516723680, -1516723680, -138428631,
  /* 3543 */ -138428631, -138428631, -138428631, 0, 0, 0, 524288, 0, 4194304, 576, 0, 0, 18, 32, 0x80000000, 0, 0, 32,
  /* 3561 */ 8704, 9961472, -1610612736, 0, 32768, 83886080, 0, 0, 25165824, 0, 0x80000000, 256, 0, -2147483616, 594,
  /* 3576 */ -2147483616, 88080384, 0, 0, 0, 1048576, 128, 4, 65536, 0, 0, 0, 24, 93847552, 0x80000000, 0, 0, 1, 8192,
  /* 3595 */ 16384, 0x80000000, 0, 0, 22, 33344, 0, 0, 1, 1048576, 8388608, 1073741824, 0x80000000, 0, 0, 228065280, 0,
  /* 3612 */ 0, 1, 536870912, 0, 0, 0, 41, 245504, 129761280, -268435456, 0, 0, 0, 3133440, 0, 8704, -1610612736, 0, 0,
  /* 3631 */ 67108864, 268435456, 8, 16, 0, 0, 16384, 0x80000000, 32, 8704, 32768, 524288, 0, 4194304, 0, 0, 134217728,
  /* 3648 */ 0, 4194304, 0, 41, 16128, 32768, 196608, 786432, 3145728, 8388608, 16777216, 33554432, 67108864, 134217728,
  /* 3662 */ 536870912, 0, 0, 32, 0x80000000, 0, 0, 134217728, 16, 8192, 0, 0, 19456, 0, 8192, 32768, 524288, 1048576,
  /* 3680 */ 67108864, 0, 8388608, 67108864, 0x80000000, 0, 0, 134217728, 4194304, 0, 0, 0, 33554432, 6, 0, 0, 0,
  /* 3697 */ 67108864, 0, 0, 0, 4194304, 0, 1024, 14336, 32768, 196608, 262144, 2097152, 67108864, 1610612736, 1, 8, 32,
  /* 3714 */ 256, 512, 1024, 14336, 196608, 14336, 196608, 262144, 524288, 1048576, 8388608, 16777216, 67108864, 512,
  /* 3728 */ 8192, 1048576, 67108864, 14336, 196608, 262144, 3145728, 512, 1024, 262144, 0, 1048576, 0, 1048576, 0,
  /* 3743 */ 20971520, 0, 512, 8192, 67108864, 0, 0, 478150656, 0, 0x80000000, 32, -2147221504, 262144, 262144, 262144,
  /* 3758 */ 1048576, 33554432, 64, 512, 262144, 0, 1, 8, 64, 256, 4096, 1, 256, 512, 14336, 196608, 196608, 262144,
  /* 3776 */ 2097152, 1610612736, 0, 0, 0, 134217728, 0x80000000, 6144, 8192, 196608, 2097152, 1610612736, 0, 536870912,
  /* 3790 */ 0, 128, 0, 65540, 1073741824, 0, 6144, 8192, 131072, 2097152, 1610612736, 2097152, 1073741824, 0, 0, 4096,
  /* 3806 */ 131072, 2097152, 1073741824, 0, 0, 16, 128, 0, 0, 4096, 524288, 512, 0, 512, 0, 0, 0, 41, 8388612, 2048,
  /* 3826 */ 1073741824, 0, 1, 12288, 32768, 64, 64, 33554432, 33587200, 33554496, 32768, 8388612, 2097152, 0, 0, 0,
  /* 3842 */ 276824064, 16777224, 16777224, 134218768, 16777224, 16777224, 553680904, -1841143710, 306339938,
  /* 3851 */ 1380081762, 927129706, 306339939, 860020842, 860020842, 860020842, 860020842, 860021354, 860021354,
  /* 3860 */ 860020842, 860024938, 862117994, 927129706, 927129706, 927129706, 927129706, -1841143709, 860012650,
  /* 3869 */ -144707093, -144707093, -144707093, -145231381, -144707093, -145231381, -145231381, -145231381, -145231381,
  /* 3878 */ -144707093, -145231381, 0, 0, 0, 268435456, 0, 0, 0, 42, 188480, 155712, 37748736, 268435456, 0x80000000,
  /* 3893 */ 54525952, 872415232, 0, 0, 2, 32, 64, 180288, 54525952, 805306368, 0, 1, 1572864, 8388608, 268435456,
  /* 3908 */ 1073741824, 0x80000000, 0, 0, 188480, 0, 0, 2, 6656, 0, 56623104, 0, 0, 3, 65536, 1, 42, 520640, 55574528,
  /* 3927 */ 1946157056, 0x80000000, 0, 0, 4, 8388608, 2048, 0, 0, 32768, 0, 2097152, 0, 1, 0, 16777224, 0x80000000,
  /* 3944 */ 16777224, 24576, 131072, 4194304, 33554432, 33587200, 33587264, 33587200, 32768, 32768, 33587200, 33587200,
  /* 3956 */ 33587200, 33587200, 0, 0, 0, 256, 0, 0, 0, 304, 64, 57344, 131072, 20971520, 33554432, 67108864, 805306368,
  /* 3973 */ 0, 0, 49152, 20971520, 805306368, 0, 2, 64, 0, 0, 57344, 0, 0, 0, 335544320, 57856, 0, 0, 61440, 262144,
  /* 3993 */ 1048576, 20971520, 33554432, 67108864, 1879048192, 0x80000000, 0, 0, 4096, 262144, 67108864, 1073741824,
  /* 4005 */ 0x80000000, 0, 64, 8192, 49152, 16777216, 33554432, 67108864, 268435456, -1073741824, 0, 0, 0, 8388608, 0,
  /* 4020 */ 8388608, 0, 49152, 805306368, 0, 2, 2048, 0, 0, 0, 536870912, 0, 0, 0, 262144, 0, 0, 0, 8, 256, 0, 12288,
  /* 4042 */ 0, 0, 8, 16777216, 256, 12288, 49152, 65536, 32, 32, 32, 0, 0, 16512, 262144, 1073741824, 0x80000000, 0, 4,
  /* 4061 */ 0, 0, 0, 1318912, 0, 262144, 1048576, 536870912, 1073741824, 8192, 0, 32768, 65536, 262144, 1048576,
  /* 4076 */ 16777216, 67108864, 8, 8192, 16384, 536870912, 1073741824, 0x80000000, 0, 1, 8, 256, 4096, 0, 4096, 0, 0,
  /* 4093 */ 0, 2, 16, 64, 0, 0, 0, 201326592, 16384, 536870912, 0, 0, 16, 1024, 134217728, 0, 0, 0, 327155712, 256,
  /* 4113 */ 1024, 4096, 16384, 16777216, 33554432, 0, 8, 536870912, 4, -2147418112, 32, 33, 34, 32, 32, 2097168, 256,
  /* 4130 */ 4096, 8192, 16384, 262144, 524288, 3145728, 8388608, 2097152, 67108864, 0, 0, 16, 268435456, 0, 0,
  /* 4145 */ 1342177280, 0, 4194308, 0, 4194308, 0, 4, 0, 128, 0, 64, 0, 33554432, 4194308, 1024, 134234112, 67112960,
  /* 4162 */ 67112960, 336073216, 2050, 536872962, 335550978, 3074, 0, 67112960, 134234112, 67112960, 67113472,
  /* 4173 */ 67112960, 458752, 67112960, 335550978, 335550978, 335550978, 335550978, 134237186, 336075266, 336075266,
  /* 4183 */ 386406914, 336075266, 336075266, 336075266, 336075266, -677856605, -677856605, -677856605, -677856733,
  /* 4192 */ -677856605, -677856733, -677856733, -677856733, -677856733, -677856605, -677856733, 0, 0, 0, 22, 0, 0,
  /* 4205 */ 4608, 0, 0, 32, 32, 117440512, 0, 268435456, 0, 4, 594, -2147483616, 0, 35, 14848, 9994240, 117440512,
  /* 4222 */ -805306368, 0, 0, 32, 512, 8192, 16384, 0, 14976, -805306368, 0, 0, 512, 6144, 67108864, 268435456,
  /* 4238 */ -536870912, 0, 0, 0, 20971520, 0x80000000, 117440512, 0, 0, 524288, 4194304, 0, 1, 2, 32, 512, 14336,
  /* 4255 */ 32768, 9961472, 117440512, 268435456, -1073741824, 0, 1024, 4096, 16384, 0, 0, 0, 16, 512, 8192, 393216, 0,
  /* 4272 */ 0, 0, 32, 41472, 93847552, 0, 0, 512, 4096, 67108864, 268435456, 0, 0, 4096, 114688, 512, 12288, 32768,
  /* 4290 */ 1572864, 8388608, 16777216, 33554432, 1, 8192, 32768, 1572864, 8388608, 16384, 33554432, 134217728, 0,
  /* 4303 */ 134217728, 64, 131072, 262144, 0, 0, 64, 8192, 16384, 32768, 65536, 8192, 1572864, 8388608, 33554432,
  /* 4318 */ 268435456, 16384, 134217728, 0, 0, 66, 134217728, 0, 134217728, 8, 16, 134217728, 0, 0, 16, 134217728, 0,
  /* 4335 */ 1048576, 8388608, 1073741824, 0, 0, 8388608, 8388608, 8388608, 8388608, 0x80000000, 0, 256, 16512, 0, 0,
  /* 4350 */ 32, 2048, 4194304, 16777216, 134217728, 0, 65540, 0, 0, 112, 159744, 0, 65540, 37748736, 0, 8, 0, 0, 16,
  /* 4369 */ 64, 268435472, 268435472, 0, 268435472, 268435472, 1342177328, 544768, 67653632, 544768, 1342730288,
  /* 4380 */ 38293504, 1342722096, 1346916400, 1342722096, 1342730288, 1342730288, 1342730288, 1342730288, 1342787636,
  /* 4389 */ 1359499312, 1342861424, 1342730288, 1342730288, 38293504, 1342705712, 1342722096, 1342722096, 1342722096,
  /* 4398 */ 1342705712, 1342705712, 1342730288, -792922311, -792922311, -792922311, -792922567, -792922311, -792922567,
  /* 4407 */ -792922567, -792922567, -792922567, -792922311, -792922567, 0, 0, 0, 825, 0, 0, 0, 66, 0, 0, 3072, 0, 0,
  /* 4425 */ 33554432, 0, 64, 2, 122, 122, 120, 120, 122, 120, 48, 1342177280, 0, 0, 4718592, 0, 20480, 524288, 0, 0,
  /* 4445 */ 4194308, 0, 48, 28672, 524288, 0, 268435456, 0, 524288, 0, 786432, 52, 86016, 0, 0, 4096, 2097152, 0, 569,
  /* 4464 */ 324608, 3670016, 8388608, 1342177280, 0x80000000, 0, 8, 0, 2, 8, 32, 64, 0, 33554432, 131072, 0, 0, 48,
  /* 4482 */ 4096, 24576, 524288, 2097152, 268435456, 0x80000000, 0, 0, 24576, 0, 0, 8192, 8192, 0, 112, 0, 0, 8192,
  /* 4500 */ 16384, 0, 48, 512, 1024, 4096, 57344, 262144, 1572864, 2097152, 8388608, 268435456, 1073741824, 0, 304, 0,
  /* 4516 */ 0, 8192, 262144, 1048576, 2097152, 8388608, 268435456, 0, 16384, 524288, 0, 0, 4194304, 8192, 32768,
  /* 4531 */ 262144, 524288, 1048576, 2097152, 0, 16, 32, 8192, 16384, 524288, 268435456, 1073741824, 0, 0, 4096,
  /* 4546 */ 1073741824, 0, 0, 65536, 393216, 1, 8, 16, 32, 512, 1024, 8192, 16384, 65536, 536870912, 0, 32, 4194304,
  /* 4564 */ 16777216, 134217728, 536870912, 1073741824, 0, 0, 4194304, 536870912, 8192, 0, 0, 9728, 0, 1048576, 4,
  /* 4579 */ 65536, 0, 8, 4, 16, 2097152, 8192, 0, 0, 0, 33554432, 0, 0, 32768, 16777216, 8388608, 0, 256, 0, 8, 16,
  /* 4600 */ 2097152, 8192, 1048576, 65536, 0, 0, 42496, 0, 0, 262144, 1048576, 256, 256, 0, 0, 131072, 131072, 32768,
  /* 4618 */ 2, 0, 2, 0, 2, 10, 0, 0, 2, 2, 0, 0, 134, 134, 96, 134, 0, 0, 0, 188992, 0, 2, 0, 96, 24, 24, 0, 24,
  /* 4646 */ 33587200, 33587200, 0, 8192, 2, 0, 24, 120, 0, 0, 0, 1048576, 8388608, 0, 0, 0, 192576, 120, 120, 120, 120,
  /* 4667 */ 122, 122, 120
];

ExistParser.TOKEN =
[
  "(0)",
  "END",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "QName",
  "StringConstructorChars",
  "NCName",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "Wildcard",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'digit'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'json-item'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'object'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'self'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'when'",
  "'where'",
  "'window'",
  "'with'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
