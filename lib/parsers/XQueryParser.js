// This file was generated on Sun Dec 4, 2016 22:03 (UTC+01) by REx v5.41 which is Copyright (c) 1979-2016 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 276:                       // 'xquery'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64788                 // 'xquery' 'encoding'
     || lk == 135956)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    switch (l1)
    {
    case 184:                       // 'module'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 95416:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(276);                   // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 126:                       // 'encoding'
      consume(126);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(265);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 126)                // 'encoding'
      {
        consume(126);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(184);                   // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(186);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(213);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 154:                     // 'import'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 43117               // 'declare' 'base-uri'
       && lk != 44141               // 'declare' 'boundary-space'
       && lk != 50797               // 'declare' 'construction'
       && lk != 53869               // 'declare' 'copy-namespaces'
       && lk != 54893               // 'declare' 'decimal-format'
       && lk != 56429               // 'declare' 'default'
       && lk != 72813               // 'declare' 'ft-option'
       && lk != 94362               // 'import' 'module'
       && lk != 95341               // 'declare' 'namespace'
       && lk != 105069              // 'declare' 'ordering'
       && lk != 114797              // 'declare' 'revalidation'
       && lk != 116378)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(178);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 56429)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 95341:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 154:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 72813:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' |
                                    // 'except' | 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' |
                                    // 'integrity' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16493               // 'declare' '%'
       && lk != 49261               // 'declare' 'collection'
       && lk != 52333               // 'declare' 'context'
       && lk != 74861               // 'declare' 'function'
       && lk != 79981               // 'declare' 'index'
       && lk != 83053               // 'declare' 'integrity'
       && lk != 103021              // 'declare' 'option'
       && lk != 132717              // 'declare' 'updating'
       && lk != 135277)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(175);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 52333:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 103021:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 109:                       // 'declare'
      lookahead2W(172);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 56429)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 44141:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 43117:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50797:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 105069:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 114797:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53869:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(86);                    // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 216:                       // 'preserve'
      consume(216);                 // 'preserve'
      break;
    default:
      consume(243);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(110);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(95);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(109);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(110);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(95);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(84);                    // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(99);                    // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 243:                       // 'strip'
      consume(243);                 // 'strip'
      break;
    default:
      consume(216);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    consume(205);                   // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 204:                       // 'ordered'
      consume(204);                 // 'ordered'
      break;
    default:
      consume(258);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(110);                   // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consume(203);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(124);                   // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 148:                       // 'greatest'
      consume(148);                 // 'greatest'
      break;
    default:
      consume(174);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(109);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(110);                  // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consumeT(203);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(124);                  // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 148:                       // 'greatest'
      consumeT(148);                // 'greatest'
      break;
    default:
      consumeT(174);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(105);                   // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 216:                       // 'preserve'
      consume(216);                 // 'preserve'
      break;
    default:
      consume(192);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 158:                       // 'inherit'
      consume(158);                 // 'inherit'
      break;
    default:
      consume(191);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 107:                       // 'decimal-format'
      consume(107);                 // 'decimal-format'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(110);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(107);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(180);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 108:                       // 'decimal-separator'
      consume(108);                 // 'decimal-separator'
      break;
    case 150:                       // 'grouping-separator'
      consume(150);                 // 'grouping-separator'
      break;
    case 157:                       // 'infinity'
      consume(157);                 // 'infinity'
      break;
    case 181:                       // 'minus-sign'
      consume(181);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 211:                       // 'percent'
      consume(211);                 // 'percent'
      break;
    case 210:                       // 'per-mille'
      consume(210);                 // 'per-mille'
      break;
    case 277:                       // 'zero-digit'
      consume(277);                 // 'zero-digit'
      break;
    case 117:                       // 'digit'
      consume(117);                 // 'digit'
      break;
    default:
      consume(209);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 154:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 116378:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(154);                   // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    consume(227);                   // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      consume(82);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 186:                       // 'namespace'
      consume(186);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(110);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(122);                 // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      consume(186);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(154);                   // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    consume(184);                   // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 186)                  // 'namespace'
    {
      consume(186);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      consume(82);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(186);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(110);                   // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      consume(122);                 // 'element'
      break;
    default:
      consume(146);                 // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(186);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(109);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(110);                  // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      consumeT(122);                // 'element'
      break;
    default:
      consumeT(146);                // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consumeT(186);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(142);                   // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(109);                   // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 259)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 259:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 264:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 146:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 96:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 156:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(259);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(264);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(134);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(102);                   // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(166);                   // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      consume(80);                  // 'as'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(134);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(284);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    consume(201);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 222)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 222)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 138:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16010:                     // 'for' '$'
      parse_ForClause();
      break;
    case 175:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 138:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16010:                     // 'for' '$'
      try_ForClause();
      break;
    case 175:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 138:                       // 'for'
    case 175:                       // 'let'
      parse_InitialClause();
      break;
    case 268:                       // 'where'
      parse_WhereClause();
      break;
    case 149:                       // 'group'
      parse_GroupByClause();
      break;
    case 106:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 138:                       // 'for'
    case 175:                       // 'let'
      try_InitialClause();
      break;
    case 268:                       // 'where'
      try_WhereClause();
      break;
    case 149:                       // 'group'
      try_GroupByClause();
      break;
    case 106:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(138);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(138);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 230)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(155);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 230)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(155);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(73);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(124);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(73);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(124);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(82);                    // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(82);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(230);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(230);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(175);                   // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(175);                  // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(138);                   // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 253:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(138);                  // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 253:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(253);                   // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(271);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(155);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 200)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(253);                  // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(271);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(155);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 200)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(236);                   // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(271);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(155);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(236);                  // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(271);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(155);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(239);                   // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(267);                   // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(239);                  // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(267);                  // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 200)                  // 'only'
    {
      consume(200);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(127);                   // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(267);                   // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 200)                  // 'only'
    {
      consumeT(200);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(127);                  // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(267);                  // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 217)                  // 'previous'
    {
      consume(217);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 189)                  // 'next'
    {
      consume(189);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 217)                  // 'previous'
    {
      consumeT(217);                // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 189)                  // 'next'
    {
      consumeT(189);                // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(106);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(106);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(268);                   // 'where'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(268);                  // 'where'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(149);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(88);                    // 'by'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(149);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(88);                   // 'by'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 36383                 // '$' 'after'
     || lk == 37407                 // '$' 'allowing'
     || lk == 37919                 // '$' 'ancestor'
     || lk == 38431                 // '$' 'ancestor-or-self'
     || lk == 38943                 // '$' 'and'
     || lk == 39967                 // '$' 'append'
     || lk == 40479                 // '$' 'array'
     || lk == 40991                 // '$' 'as'
     || lk == 41503                 // '$' 'ascending'
     || lk == 42015                 // '$' 'at'
     || lk == 42527                 // '$' 'attribute'
     || lk == 43039                 // '$' 'base-uri'
     || lk == 43551                 // '$' 'before'
     || lk == 44063                 // '$' 'boundary-space'
     || lk == 44575                 // '$' 'break'
     || lk == 45599                 // '$' 'case'
     || lk == 46111                 // '$' 'cast'
     || lk == 46623                 // '$' 'castable'
     || lk == 47135                 // '$' 'catch'
     || lk == 48159                 // '$' 'child'
     || lk == 48671                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 50207                 // '$' 'constraint'
     || lk == 50719                 // '$' 'construction'
     || lk == 52255                 // '$' 'context'
     || lk == 52767                 // '$' 'continue'
     || lk == 53279                 // '$' 'copy'
     || lk == 53791                 // '$' 'copy-namespaces'
     || lk == 54303                 // '$' 'count'
     || lk == 54815                 // '$' 'decimal-format'
     || lk == 55839                 // '$' 'declare'
     || lk == 56351                 // '$' 'default'
     || lk == 56863                 // '$' 'delete'
     || lk == 57375                 // '$' 'descendant'
     || lk == 57887                 // '$' 'descendant-or-self'
     || lk == 58399                 // '$' 'descending'
     || lk == 60959                 // '$' 'div'
     || lk == 61471                 // '$' 'document'
     || lk == 61983                 // '$' 'document-node'
     || lk == 62495                 // '$' 'element'
     || lk == 63007                 // '$' 'else'
     || lk == 63519                 // '$' 'empty'
     || lk == 64031                 // '$' 'empty-sequence'
     || lk == 64543                 // '$' 'encoding'
     || lk == 65055                 // '$' 'end'
     || lk == 66079                 // '$' 'eq'
     || lk == 66591                 // '$' 'every'
     || lk == 67615                 // '$' 'except'
     || lk == 68127                 // '$' 'exit'
     || lk == 68639                 // '$' 'external'
     || lk == 69151                 // '$' 'first'
     || lk == 69663                 // '$' 'following'
     || lk == 70175                 // '$' 'following-sibling'
     || lk == 70687                 // '$' 'for'
     || lk == 72735                 // '$' 'ft-option'
     || lk == 74783                 // '$' 'function'
     || lk == 75295                 // '$' 'ge'
     || lk == 76319                 // '$' 'group'
     || lk == 77343                 // '$' 'gt'
     || lk == 77855                 // '$' 'idiv'
     || lk == 78367                 // '$' 'if'
     || lk == 78879                 // '$' 'import'
     || lk == 79391                 // '$' 'in'
     || lk == 79903                 // '$' 'index'
     || lk == 81951                 // '$' 'insert'
     || lk == 82463                 // '$' 'instance'
     || lk == 82975                 // '$' 'integrity'
     || lk == 83487                 // '$' 'intersect'
     || lk == 83999                 // '$' 'into'
     || lk == 84511                 // '$' 'is'
     || lk == 85023                 // '$' 'item'
     || lk == 85535                 // '$' 'json'
     || lk == 86047                 // '$' 'json-item'
     || lk == 87583                 // '$' 'last'
     || lk == 88095                 // '$' 'lax'
     || lk == 88607                 // '$' 'le'
     || lk == 89631                 // '$' 'let'
     || lk == 90655                 // '$' 'loop'
     || lk == 91679                 // '$' 'lt'
     || lk == 92191                 // '$' 'map'
     || lk == 93215                 // '$' 'mod'
     || lk == 93727                 // '$' 'modify'
     || lk == 94239                 // '$' 'module'
     || lk == 95263                 // '$' 'namespace'
     || lk == 95775                 // '$' 'namespace-node'
     || lk == 96287                 // '$' 'ne'
     || lk == 98847                 // '$' 'node'
     || lk == 99359                 // '$' 'nodes'
     || lk == 100383                // '$' 'object'
     || lk == 102431                // '$' 'only'
     || lk == 102943                // '$' 'option'
     || lk == 103455                // '$' 'or'
     || lk == 103967                // '$' 'order'
     || lk == 104479                // '$' 'ordered'
     || lk == 104991                // '$' 'ordering'
     || lk == 106527                // '$' 'parent'
     || lk == 109599                // '$' 'preceding'
     || lk == 110111                // '$' 'preceding-sibling'
     || lk == 111647                // '$' 'processing-instruction'
     || lk == 112671                // '$' 'rename'
     || lk == 113183                // '$' 'replace'
     || lk == 113695                // '$' 'return'
     || lk == 114207                // '$' 'returning'
     || lk == 114719                // '$' 'revalidation'
     || lk == 115743                // '$' 'satisfies'
     || lk == 116255                // '$' 'schema'
     || lk == 116767                // '$' 'schema-attribute'
     || lk == 117279                // '$' 'schema-element'
     || lk == 117791                // '$' 'score'
     || lk == 118303                // '$' 'self'
     || lk == 120863                // '$' 'sliding'
     || lk == 121375                // '$' 'some'
     || lk == 121887                // '$' 'stable'
     || lk == 122399                // '$' 'start'
     || lk == 123935                // '$' 'strict'
     || lk == 124959                // '$' 'structured-item'
     || lk == 125471                // '$' 'switch'
     || lk == 125983                // '$' 'text'
     || lk == 128031                // '$' 'to'
     || lk == 128543                // '$' 'treat'
     || lk == 129055                // '$' 'try'
     || lk == 129567                // '$' 'tumbling'
     || lk == 130079                // '$' 'type'
     || lk == 130591                // '$' 'typeswitch'
     || lk == 131103                // '$' 'union'
     || lk == 132127                // '$' 'unordered'
     || lk == 132639                // '$' 'updating'
     || lk == 134175                // '$' 'validate'
     || lk == 134687                // '$' 'value'
     || lk == 135199                // '$' 'variable'
     || lk == 135711                // '$' 'version'
     || lk == 137247                // '$' 'where'
     || lk == 137759                // '$' 'while'
     || lk == 139295                // '$' 'with'
     || lk == 141343)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(182);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 52              // ':='
           || l1 == 80)             // 'as'
          {
            if (l1 == 80)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            consumeT(52);           // ':='
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
          }
          if (l1 == 95)             // 'collation'
          {
            consumeT(95);           // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(182);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 52                  // ':='
       || l1 == 80)                 // 'as'
      {
        if (l1 == 80)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      if (l1 == 95)                 // 'collation'
      {
        consume(95);                // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 36383                 // '$' 'after'
     || lk == 37407                 // '$' 'allowing'
     || lk == 37919                 // '$' 'ancestor'
     || lk == 38431                 // '$' 'ancestor-or-self'
     || lk == 38943                 // '$' 'and'
     || lk == 39967                 // '$' 'append'
     || lk == 40479                 // '$' 'array'
     || lk == 40991                 // '$' 'as'
     || lk == 41503                 // '$' 'ascending'
     || lk == 42015                 // '$' 'at'
     || lk == 42527                 // '$' 'attribute'
     || lk == 43039                 // '$' 'base-uri'
     || lk == 43551                 // '$' 'before'
     || lk == 44063                 // '$' 'boundary-space'
     || lk == 44575                 // '$' 'break'
     || lk == 45599                 // '$' 'case'
     || lk == 46111                 // '$' 'cast'
     || lk == 46623                 // '$' 'castable'
     || lk == 47135                 // '$' 'catch'
     || lk == 48159                 // '$' 'child'
     || lk == 48671                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 50207                 // '$' 'constraint'
     || lk == 50719                 // '$' 'construction'
     || lk == 52255                 // '$' 'context'
     || lk == 52767                 // '$' 'continue'
     || lk == 53279                 // '$' 'copy'
     || lk == 53791                 // '$' 'copy-namespaces'
     || lk == 54303                 // '$' 'count'
     || lk == 54815                 // '$' 'decimal-format'
     || lk == 55839                 // '$' 'declare'
     || lk == 56351                 // '$' 'default'
     || lk == 56863                 // '$' 'delete'
     || lk == 57375                 // '$' 'descendant'
     || lk == 57887                 // '$' 'descendant-or-self'
     || lk == 58399                 // '$' 'descending'
     || lk == 60959                 // '$' 'div'
     || lk == 61471                 // '$' 'document'
     || lk == 61983                 // '$' 'document-node'
     || lk == 62495                 // '$' 'element'
     || lk == 63007                 // '$' 'else'
     || lk == 63519                 // '$' 'empty'
     || lk == 64031                 // '$' 'empty-sequence'
     || lk == 64543                 // '$' 'encoding'
     || lk == 65055                 // '$' 'end'
     || lk == 66079                 // '$' 'eq'
     || lk == 66591                 // '$' 'every'
     || lk == 67615                 // '$' 'except'
     || lk == 68127                 // '$' 'exit'
     || lk == 68639                 // '$' 'external'
     || lk == 69151                 // '$' 'first'
     || lk == 69663                 // '$' 'following'
     || lk == 70175                 // '$' 'following-sibling'
     || lk == 70687                 // '$' 'for'
     || lk == 72735                 // '$' 'ft-option'
     || lk == 74783                 // '$' 'function'
     || lk == 75295                 // '$' 'ge'
     || lk == 76319                 // '$' 'group'
     || lk == 77343                 // '$' 'gt'
     || lk == 77855                 // '$' 'idiv'
     || lk == 78367                 // '$' 'if'
     || lk == 78879                 // '$' 'import'
     || lk == 79391                 // '$' 'in'
     || lk == 79903                 // '$' 'index'
     || lk == 81951                 // '$' 'insert'
     || lk == 82463                 // '$' 'instance'
     || lk == 82975                 // '$' 'integrity'
     || lk == 83487                 // '$' 'intersect'
     || lk == 83999                 // '$' 'into'
     || lk == 84511                 // '$' 'is'
     || lk == 85023                 // '$' 'item'
     || lk == 85535                 // '$' 'json'
     || lk == 86047                 // '$' 'json-item'
     || lk == 87583                 // '$' 'last'
     || lk == 88095                 // '$' 'lax'
     || lk == 88607                 // '$' 'le'
     || lk == 89631                 // '$' 'let'
     || lk == 90655                 // '$' 'loop'
     || lk == 91679                 // '$' 'lt'
     || lk == 92191                 // '$' 'map'
     || lk == 93215                 // '$' 'mod'
     || lk == 93727                 // '$' 'modify'
     || lk == 94239                 // '$' 'module'
     || lk == 95263                 // '$' 'namespace'
     || lk == 95775                 // '$' 'namespace-node'
     || lk == 96287                 // '$' 'ne'
     || lk == 98847                 // '$' 'node'
     || lk == 99359                 // '$' 'nodes'
     || lk == 100383                // '$' 'object'
     || lk == 102431                // '$' 'only'
     || lk == 102943                // '$' 'option'
     || lk == 103455                // '$' 'or'
     || lk == 103967                // '$' 'order'
     || lk == 104479                // '$' 'ordered'
     || lk == 104991                // '$' 'ordering'
     || lk == 106527                // '$' 'parent'
     || lk == 109599                // '$' 'preceding'
     || lk == 110111                // '$' 'preceding-sibling'
     || lk == 111647                // '$' 'processing-instruction'
     || lk == 112671                // '$' 'rename'
     || lk == 113183                // '$' 'replace'
     || lk == 113695                // '$' 'return'
     || lk == 114207                // '$' 'returning'
     || lk == 114719                // '$' 'revalidation'
     || lk == 115743                // '$' 'satisfies'
     || lk == 116255                // '$' 'schema'
     || lk == 116767                // '$' 'schema-attribute'
     || lk == 117279                // '$' 'schema-element'
     || lk == 117791                // '$' 'score'
     || lk == 118303                // '$' 'self'
     || lk == 120863                // '$' 'sliding'
     || lk == 121375                // '$' 'some'
     || lk == 121887                // '$' 'stable'
     || lk == 122399                // '$' 'start'
     || lk == 123935                // '$' 'strict'
     || lk == 124959                // '$' 'structured-item'
     || lk == 125471                // '$' 'switch'
     || lk == 125983                // '$' 'text'
     || lk == 128031                // '$' 'to'
     || lk == 128543                // '$' 'treat'
     || lk == 129055                // '$' 'try'
     || lk == 129567                // '$' 'tumbling'
     || lk == 130079                // '$' 'type'
     || lk == 130591                // '$' 'typeswitch'
     || lk == 131103                // '$' 'union'
     || lk == 132127                // '$' 'unordered'
     || lk == 132639                // '$' 'updating'
     || lk == 134175                // '$' 'validate'
     || lk == 134687                // '$' 'value'
     || lk == 135199                // '$' 'variable'
     || lk == 135711                // '$' 'version'
     || lk == 137247                // '$' 'where'
     || lk == 137759                // '$' 'while'
     || lk == 139295                // '$' 'with'
     || lk == 141343)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(182);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 52              // ':='
           || l1 == 80)             // 'as'
          {
            if (l1 == 80)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            consumeT(52);           // ':='
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
          }
          if (l1 == 95)             // 'collation'
          {
            consumeT(95);           // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(182);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 52                  // ':='
       || l1 == 80)                 // 'as'
      {
        if (l1 == 80)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        consumeT(52);               // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      if (l1 == 95)                 // 'collation'
      {
        consumeT(95);               // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consumeT(7);                // URILiteral
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 203:                       // 'order'
      consume(203);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(88);                  // 'by'
      break;
    default:
      consume(238);                 // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consume(203);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(88);                  // 'by'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 203:                       // 'order'
      consumeT(203);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(88);                 // 'by'
      break;
    default:
      consumeT(238);                // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consumeT(203);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(88);                 // 'by'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        consume(81);                // 'ascending'
        break;
      default:
        consume(114);               // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 124)                  // 'empty'
    {
      consume(124);                 // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 148:                     // 'greatest'
        consume(148);               // 'greatest'
        break;
      default:
        consume(174);               // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consume(95);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        consumeT(81);               // 'ascending'
        break;
      default:
        consumeT(114);              // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 124)                  // 'empty'
    {
      consumeT(124);                // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 148:                     // 'greatest'
        consumeT(148);              // 'greatest'
        break;
      default:
        consumeT(174);              // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      consumeT(95);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(222);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(222);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 237:                       // 'some'
      consume(237);                 // 'some'
      break;
    default:
      consume(130);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(226);                   // 'satisfies'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 237:                       // 'some'
      consumeT(237);                // 'some'
      break;
    default:
      consumeT(130);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(226);                  // 'satisfies'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(155);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(155);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(245);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consume(110);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(222);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(245);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consumeT(110);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(222);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(89);                  // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consume(222);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(89);                 // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consumeT(222);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(255);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consume(110);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(222);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(255);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consumeT(110);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(222);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(89);                    // 'case'
    lookahead1W(266);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(80);                  // 'as'
    }
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(222);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(89);                   // 'case'
    lookahead1W(266);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(80);                 // 'as'
    }
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(222);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 281)                // '|'
      {
        break;
      }
      consume(281);                 // '|'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 281)                // '|'
      {
        break;
      }
      consumeT(281);                // '|'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(153);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(247);                   // 'then'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(123);                   // 'else'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(153);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(247);                  // 'then'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(123);                  // 'else'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(252);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(252);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(284);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(92);                    // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(92);                   // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(284);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 281)                // '|'
      {
        break;
      }
      consume(281);                 // '|'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 281)                // '|'
      {
        break;
      }
      consumeT(281);                // '|'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 202)                // 'or'
      {
        break;
      }
      consume(202);                 // 'or'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 202)                // 'or'
      {
        break;
      }
      consumeT(202);                // 'or'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      consume(76);                  // 'and'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      consumeT(76);                 // 'and'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 147                   // 'ge'
     || l1 == 151                   // 'gt'
     || l1 == 165                   // 'is'
     || l1 == 173                   // 'le'
     || l1 == 179                   // 'lt'
     || l1 == 188)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 147:                     // 'ge'
      case 151:                     // 'gt'
      case 173:                     // 'le'
      case 179:                     // 'lt'
      case 188:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 165:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 147                   // 'ge'
     || l1 == 151                   // 'gt'
     || l1 == 165                   // 'is'
     || l1 == 173                   // 'le'
     || l1 == 179                   // 'lt'
     || l1 == 188)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 147:                     // 'ge'
      case 151:                     // 'gt'
      case 173:                     // 'le'
      case 179:                     // 'lt'
      case 188:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 165:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      consume(100);                 // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consume(246);                 // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 273)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      consumeT(100);                // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consumeT(246);                // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 273)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 282)                // '||'
      {
        break;
      }
      consume(282);                 // '||'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 282)                // '||'
      {
        break;
      }
      consumeT(282);                // '||'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 250)                  // 'to'
    {
      consume(250);                 // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 250)                  // 'to'
    {
      consumeT(250);                // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 152                 // 'idiv'
       && l1 != 182)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 119:                     // 'div'
        consume(119);               // 'div'
        break;
      case 152:                     // 'idiv'
        consume(152);               // 'idiv'
        break;
      default:
        consume(182);               // 'mod'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 152                 // 'idiv'
       && l1 != 182)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 119:                     // 'div'
        consumeT(119);              // 'div'
        break;
      case 152:                     // 'idiv'
        consumeT(152);              // 'idiv'
        break;
      default:
        consumeT(182);              // 'mod'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 256                 // 'union'
       && l1 != 281)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 256:                     // 'union'
        consume(256);               // 'union'
        break;
      default:
        consume(281);               // '|'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 256                 // 'union'
       && l1 != 281)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 256:                     // 'union'
        consumeT(256);              // 'union'
        break;
      default:
        consumeT(281);              // '|'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 132                 // 'except'
       && l1 != 163)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 163:                     // 'intersect'
        consume(163);               // 'intersect'
        break;
      default:
        consume(132);               // 'except'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 132                 // 'except'
       && l1 != 163)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 163:                     // 'intersect'
        consumeT(163);              // 'intersect'
        break;
      default:
        consumeT(132);              // 'except'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 161)                  // 'instance'
    {
      consume(161);                 // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(198);                 // 'of'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 161)                  // 'instance'
    {
      consumeT(161);                // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(198);                // 'of'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 251)                  // 'treat'
    {
      consume(251);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(80);                  // 'as'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 251)                  // 'treat'
    {
      consumeT(251);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(80);                 // 'as'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 91)                   // 'castable'
    {
      consume(91);                  // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(80);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 91)                   // 'castable'
    {
      consumeT(91);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(80);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_ArrowExpr();
    if (l1 == 90)                   // 'cast'
    {
      consume(90);                  // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(80);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_ArrowExpr();
    if (l1 == 90)                   // 'cast'
    {
      consumeT(90);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(80);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(227);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(262);             // EQName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(22);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(227);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(262);             // EQName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(22);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 262:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 88326:                     // 'validate' 'lax'
    case 124166:                    // 'validate' 'strict'
    case 130310:                    // 'validate' 'type'
    case 142598:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 262:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 88326:                     // 'validate' 'lax'
    case 124166:                    // 'validate' 'strict'
    case 130310:                    // 'validate' 'type'
    case 142598:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 54:                        // '<'
      consume(54);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 54:                        // '<'
      consumeT(54);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 129:                       // 'eq'
      consume(129);                 // 'eq'
      break;
    case 188:                       // 'ne'
      consume(188);                 // 'ne'
      break;
    case 179:                       // 'lt'
      consume(179);                 // 'lt'
      break;
    case 173:                       // 'le'
      consume(173);                 // 'le'
      break;
    case 151:                       // 'gt'
      consume(151);                 // 'gt'
      break;
    default:
      consume(147);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 129:                       // 'eq'
      consumeT(129);                // 'eq'
      break;
    case 188:                       // 'ne'
      consumeT(188);                // 'ne'
      break;
    case 179:                       // 'lt'
      consumeT(179);                // 'lt'
      break;
    case 173:                       // 'le'
      consumeT(173);                // 'le'
      break;
    case 151:                       // 'gt'
      consumeT(151);                // 'gt'
      break;
    default:
      consumeT(147);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 165:                       // 'is'
      consume(165);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 165:                       // 'is'
      consumeT(165);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(262);                   // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 278)                  // '{'
    {
      switch (l1)
      {
      case 254:                     // 'type'
        consume(254);               // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(262);                  // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 278)                  // '{'
    {
      switch (l1)
      {
      case 254:                     // 'type'
        consumeT(254);              // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(284);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 172:                       // 'lax'
      consume(172);                 // 'lax'
      break;
    default:
      consume(242);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 172:                       // 'lax'
      consumeT(172);                // 'lax'
      break;
    default:
      consumeT(242);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(278);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(284);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(278);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      try_Expr();
    }
    consumeT(284);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 207:                     // 'paragraphs'
      case 234:                     // 'sentences'
      case 249:                     // 'times'
      case 275:                     // 'words'
      case 281:                     // '|'
      case 282:                     // '||'
      case 283:                     // '|}'
      case 284:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 207:                     // 'paragraphs'
      case 234:                     // 'sentences'
      case 249:                     // 'times'
      case 275:                     // 'words'
      case 281:                     // '|'
      case 282:                     // '||'
      case 283:                     // '|}'
      case 284:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 138                 // 'for'
       && lk != 147                 // 'ge'
       && lk != 149                 // 'group'
       && lk != 151                 // 'gt'
       && lk != 152                 // 'idiv'
       && lk != 161                 // 'instance'
       && lk != 163                 // 'intersect'
       && lk != 164                 // 'into'
       && lk != 165                 // 'is'
       && lk != 173                 // 'le'
       && lk != 175                 // 'let'
       && lk != 179                 // 'lt'
       && lk != 182                 // 'mod'
       && lk != 183                 // 'modify'
       && lk != 188                 // 'ne'
       && lk != 200                 // 'only'
       && lk != 202                 // 'or'
       && lk != 203                 // 'order'
       && lk != 207                 // 'paragraphs'
       && lk != 222                 // 'return'
       && lk != 226                 // 'satisfies'
       && lk != 234                 // 'sentences'
       && lk != 238                 // 'stable'
       && lk != 239                 // 'start'
       && lk != 249                 // 'times'
       && lk != 250                 // 'to'
       && lk != 251                 // 'treat'
       && lk != 256                 // 'union'
       && lk != 268                 // 'where'
       && lk != 272                 // 'with'
       && lk != 275                 // 'words'
       && lk != 281                 // '|'
       && lk != 282                 // '||'
       && lk != 283                 // '|}'
       && lk != 284                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(269);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      case 47:                      // '//'
        consume(47);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 138                 // 'for'
       && lk != 147                 // 'ge'
       && lk != 149                 // 'group'
       && lk != 151                 // 'gt'
       && lk != 152                 // 'idiv'
       && lk != 161                 // 'instance'
       && lk != 163                 // 'intersect'
       && lk != 164                 // 'into'
       && lk != 165                 // 'is'
       && lk != 173                 // 'le'
       && lk != 175                 // 'let'
       && lk != 179                 // 'lt'
       && lk != 182                 // 'mod'
       && lk != 183                 // 'modify'
       && lk != 188                 // 'ne'
       && lk != 200                 // 'only'
       && lk != 202                 // 'or'
       && lk != 203                 // 'order'
       && lk != 207                 // 'paragraphs'
       && lk != 222                 // 'return'
       && lk != 226                 // 'satisfies'
       && lk != 234                 // 'sentences'
       && lk != 238                 // 'stable'
       && lk != 239                 // 'start'
       && lk != 249                 // 'times'
       && lk != 250                 // 'to'
       && lk != 251                 // 'treat'
       && lk != 256                 // 'union'
       && lk != 268                 // 'where'
       && lk != 272                 // 'with'
       && lk != 275                 // 'words'
       && lk != 281                 // '|'
       && lk != 282                 // '||'
       && lk != 283                 // '|}'
       && lk != 284                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(269);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      case 47:                      // '//'
        consumeT(47);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(286);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 122:                       // 'element'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 186:                       // 'namespace'
    case 218:                       // 'processing-instruction'
      lookahead2W(284);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 97:                        // 'comment'
    case 120:                       // 'document'
    case 180:                       // 'map'
    case 204:                       // 'ordered'
    case 246:                       // 'text'
    case 258:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 79:                        // 'array'
    case 125:                       // 'empty-sequence'
    case 153:                       // 'if'
    case 166:                       // 'item'
    case 168:                       // 'json-item'
    case 244:                       // 'structured-item'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 136:                       // 'following'
    case 137:                       // 'following-sibling'
    case 208:                       // 'parent'
    case 214:                       // 'preceding'
    case 215:                       // 'preceding-sibling'
    case 231:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 121:                       // 'document-node'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 135:                       // 'first'
    case 138:                       // 'for'
    case 142:                       // 'ft-option'
    case 146:                       // 'function'
    case 147:                       // 'ge'
    case 149:                       // 'group'
    case 151:                       // 'gt'
    case 152:                       // 'idiv'
    case 154:                       // 'import'
    case 155:                       // 'in'
    case 156:                       // 'index'
    case 160:                       // 'insert'
    case 161:                       // 'instance'
    case 162:                       // 'integrity'
    case 163:                       // 'intersect'
    case 164:                       // 'into'
    case 165:                       // 'is'
    case 167:                       // 'json'
    case 171:                       // 'last'
    case 172:                       // 'lax'
    case 173:                       // 'le'
    case 175:                       // 'let'
    case 177:                       // 'loop'
    case 179:                       // 'lt'
    case 182:                       // 'mod'
    case 183:                       // 'modify'
    case 184:                       // 'module'
    case 187:                       // 'namespace-node'
    case 188:                       // 'ne'
    case 193:                       // 'node'
    case 194:                       // 'nodes'
    case 196:                       // 'object'
    case 200:                       // 'only'
    case 201:                       // 'option'
    case 202:                       // 'or'
    case 203:                       // 'order'
    case 205:                       // 'ordering'
    case 220:                       // 'rename'
    case 221:                       // 'replace'
    case 222:                       // 'return'
    case 223:                       // 'returning'
    case 224:                       // 'revalidation'
    case 226:                       // 'satisfies'
    case 227:                       // 'schema'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 230:                       // 'score'
    case 236:                       // 'sliding'
    case 237:                       // 'some'
    case 238:                       // 'stable'
    case 239:                       // 'start'
    case 242:                       // 'strict'
    case 250:                       // 'to'
    case 251:                       // 'treat'
    case 252:                       // 'try'
    case 253:                       // 'tumbling'
    case 254:                       // 'type'
    case 256:                       // 'union'
    case 259:                       // 'updating'
    case 262:                       // 'validate'
    case 263:                       // 'value'
    case 264:                       // 'variable'
    case 265:                       // 'version'
    case 268:                       // 'where'
    case 269:                       // 'while'
    case 272:                       // 'with'
    case 276:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 36435                 // 'attribute' 'after'
     || lk == 36474                 // 'element' 'after'
     || lk == 36538                 // 'namespace' 'after'
     || lk == 36570                 // 'processing-instruction' 'after'
     || lk == 38995                 // 'attribute' 'and'
     || lk == 39034                 // 'element' 'and'
     || lk == 39098                 // 'namespace' 'and'
     || lk == 39130                 // 'processing-instruction' 'and'
     || lk == 41043                 // 'attribute' 'as'
     || lk == 41082                 // 'element' 'as'
     || lk == 41146                 // 'namespace' 'as'
     || lk == 41178                 // 'processing-instruction' 'as'
     || lk == 41555                 // 'attribute' 'ascending'
     || lk == 41594                 // 'element' 'ascending'
     || lk == 41658                 // 'namespace' 'ascending'
     || lk == 41690                 // 'processing-instruction' 'ascending'
     || lk == 42067                 // 'attribute' 'at'
     || lk == 42106                 // 'element' 'at'
     || lk == 42170                 // 'namespace' 'at'
     || lk == 42202                 // 'processing-instruction' 'at'
     || lk == 43603                 // 'attribute' 'before'
     || lk == 43642                 // 'element' 'before'
     || lk == 43706                 // 'namespace' 'before'
     || lk == 43738                 // 'processing-instruction' 'before'
     || lk == 45651                 // 'attribute' 'case'
     || lk == 45690                 // 'element' 'case'
     || lk == 45754                 // 'namespace' 'case'
     || lk == 45786                 // 'processing-instruction' 'case'
     || lk == 46163                 // 'attribute' 'cast'
     || lk == 46202                 // 'element' 'cast'
     || lk == 46266                 // 'namespace' 'cast'
     || lk == 46298                 // 'processing-instruction' 'cast'
     || lk == 46675                 // 'attribute' 'castable'
     || lk == 46714                 // 'element' 'castable'
     || lk == 46778                 // 'namespace' 'castable'
     || lk == 46810                 // 'processing-instruction' 'castable'
     || lk == 48723                 // 'attribute' 'collation'
     || lk == 48762                 // 'element' 'collation'
     || lk == 48826                 // 'namespace' 'collation'
     || lk == 48858                 // 'processing-instruction' 'collation'
     || lk == 54355                 // 'attribute' 'count'
     || lk == 54394                 // 'element' 'count'
     || lk == 54458                 // 'namespace' 'count'
     || lk == 54490                 // 'processing-instruction' 'count'
     || lk == 56403                 // 'attribute' 'default'
     || lk == 56442                 // 'element' 'default'
     || lk == 56506                 // 'namespace' 'default'
     || lk == 56538                 // 'processing-instruction' 'default'
     || lk == 58451                 // 'attribute' 'descending'
     || lk == 58490                 // 'element' 'descending'
     || lk == 58554                 // 'namespace' 'descending'
     || lk == 58586                 // 'processing-instruction' 'descending'
     || lk == 61011                 // 'attribute' 'div'
     || lk == 61050                 // 'element' 'div'
     || lk == 61114                 // 'namespace' 'div'
     || lk == 61146                 // 'processing-instruction' 'div'
     || lk == 63059                 // 'attribute' 'else'
     || lk == 63098                 // 'element' 'else'
     || lk == 63162                 // 'namespace' 'else'
     || lk == 63194                 // 'processing-instruction' 'else'
     || lk == 63571                 // 'attribute' 'empty'
     || lk == 63610                 // 'element' 'empty'
     || lk == 63674                 // 'namespace' 'empty'
     || lk == 63706                 // 'processing-instruction' 'empty'
     || lk == 65107                 // 'attribute' 'end'
     || lk == 65146                 // 'element' 'end'
     || lk == 65210                 // 'namespace' 'end'
     || lk == 65242                 // 'processing-instruction' 'end'
     || lk == 66131                 // 'attribute' 'eq'
     || lk == 66170                 // 'element' 'eq'
     || lk == 66234                 // 'namespace' 'eq'
     || lk == 66266                 // 'processing-instruction' 'eq'
     || lk == 67667                 // 'attribute' 'except'
     || lk == 67706                 // 'element' 'except'
     || lk == 67770                 // 'namespace' 'except'
     || lk == 67802                 // 'processing-instruction' 'except'
     || lk == 70739                 // 'attribute' 'for'
     || lk == 70778                 // 'element' 'for'
     || lk == 70842                 // 'namespace' 'for'
     || lk == 70874                 // 'processing-instruction' 'for'
     || lk == 75347                 // 'attribute' 'ge'
     || lk == 75386                 // 'element' 'ge'
     || lk == 75450                 // 'namespace' 'ge'
     || lk == 75482                 // 'processing-instruction' 'ge'
     || lk == 76371                 // 'attribute' 'group'
     || lk == 76410                 // 'element' 'group'
     || lk == 76474                 // 'namespace' 'group'
     || lk == 76506                 // 'processing-instruction' 'group'
     || lk == 77395                 // 'attribute' 'gt'
     || lk == 77434                 // 'element' 'gt'
     || lk == 77498                 // 'namespace' 'gt'
     || lk == 77530                 // 'processing-instruction' 'gt'
     || lk == 77907                 // 'attribute' 'idiv'
     || lk == 77946                 // 'element' 'idiv'
     || lk == 78010                 // 'namespace' 'idiv'
     || lk == 78042                 // 'processing-instruction' 'idiv'
     || lk == 82515                 // 'attribute' 'instance'
     || lk == 82554                 // 'element' 'instance'
     || lk == 82618                 // 'namespace' 'instance'
     || lk == 82650                 // 'processing-instruction' 'instance'
     || lk == 83539                 // 'attribute' 'intersect'
     || lk == 83578                 // 'element' 'intersect'
     || lk == 83642                 // 'namespace' 'intersect'
     || lk == 83674                 // 'processing-instruction' 'intersect'
     || lk == 84051                 // 'attribute' 'into'
     || lk == 84090                 // 'element' 'into'
     || lk == 84154                 // 'namespace' 'into'
     || lk == 84186                 // 'processing-instruction' 'into'
     || lk == 84563                 // 'attribute' 'is'
     || lk == 84602                 // 'element' 'is'
     || lk == 84666                 // 'namespace' 'is'
     || lk == 84698                 // 'processing-instruction' 'is'
     || lk == 88659                 // 'attribute' 'le'
     || lk == 88698                 // 'element' 'le'
     || lk == 88762                 // 'namespace' 'le'
     || lk == 88794                 // 'processing-instruction' 'le'
     || lk == 89683                 // 'attribute' 'let'
     || lk == 89722                 // 'element' 'let'
     || lk == 89786                 // 'namespace' 'let'
     || lk == 89818                 // 'processing-instruction' 'let'
     || lk == 91731                 // 'attribute' 'lt'
     || lk == 91770                 // 'element' 'lt'
     || lk == 91834                 // 'namespace' 'lt'
     || lk == 91866                 // 'processing-instruction' 'lt'
     || lk == 93267                 // 'attribute' 'mod'
     || lk == 93306                 // 'element' 'mod'
     || lk == 93370                 // 'namespace' 'mod'
     || lk == 93402                 // 'processing-instruction' 'mod'
     || lk == 93779                 // 'attribute' 'modify'
     || lk == 93818                 // 'element' 'modify'
     || lk == 93882                 // 'namespace' 'modify'
     || lk == 93914                 // 'processing-instruction' 'modify'
     || lk == 96339                 // 'attribute' 'ne'
     || lk == 96378                 // 'element' 'ne'
     || lk == 96442                 // 'namespace' 'ne'
     || lk == 96474                 // 'processing-instruction' 'ne'
     || lk == 102483                // 'attribute' 'only'
     || lk == 102522                // 'element' 'only'
     || lk == 102586                // 'namespace' 'only'
     || lk == 102618                // 'processing-instruction' 'only'
     || lk == 103507                // 'attribute' 'or'
     || lk == 103546                // 'element' 'or'
     || lk == 103610                // 'namespace' 'or'
     || lk == 103642                // 'processing-instruction' 'or'
     || lk == 104019                // 'attribute' 'order'
     || lk == 104058                // 'element' 'order'
     || lk == 104122                // 'namespace' 'order'
     || lk == 104154                // 'processing-instruction' 'order'
     || lk == 113747                // 'attribute' 'return'
     || lk == 113786                // 'element' 'return'
     || lk == 113850                // 'namespace' 'return'
     || lk == 113882                // 'processing-instruction' 'return'
     || lk == 115795                // 'attribute' 'satisfies'
     || lk == 115834                // 'element' 'satisfies'
     || lk == 115898                // 'namespace' 'satisfies'
     || lk == 115930                // 'processing-instruction' 'satisfies'
     || lk == 121939                // 'attribute' 'stable'
     || lk == 121978                // 'element' 'stable'
     || lk == 122042                // 'namespace' 'stable'
     || lk == 122074                // 'processing-instruction' 'stable'
     || lk == 122451                // 'attribute' 'start'
     || lk == 122490                // 'element' 'start'
     || lk == 122554                // 'namespace' 'start'
     || lk == 122586                // 'processing-instruction' 'start'
     || lk == 128083                // 'attribute' 'to'
     || lk == 128122                // 'element' 'to'
     || lk == 128186                // 'namespace' 'to'
     || lk == 128218                // 'processing-instruction' 'to'
     || lk == 128595                // 'attribute' 'treat'
     || lk == 128634                // 'element' 'treat'
     || lk == 128698                // 'namespace' 'treat'
     || lk == 128730                // 'processing-instruction' 'treat'
     || lk == 131155                // 'attribute' 'union'
     || lk == 131194                // 'element' 'union'
     || lk == 131258                // 'namespace' 'union'
     || lk == 131290                // 'processing-instruction' 'union'
     || lk == 137299                // 'attribute' 'where'
     || lk == 137338                // 'element' 'where'
     || lk == 137402                // 'namespace' 'where'
     || lk == 137434                // 'processing-instruction' 'where'
     || lk == 139347                // 'attribute' 'with'
     || lk == 139386                // 'element' 'with'
     || lk == 139450                // 'namespace' 'with'
     || lk == 139482)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 278:                       // '{'
    case 280:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9914:                      // 'namespace' NCName^Token
    case 9946:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14927:                     // 'array' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14969:                     // 'document-node' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14973:                     // 'empty-sequence' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'first' '#'
    case 14984:                     // 'following' '#'
    case 14985:                     // 'following-sibling' '#'
    case 14986:                     // 'for' '#'
    case 14990:                     // 'ft-option' '#'
    case 14994:                     // 'function' '#'
    case 14995:                     // 'ge' '#'
    case 14997:                     // 'group' '#'
    case 14999:                     // 'gt' '#'
    case 15000:                     // 'idiv' '#'
    case 15001:                     // 'if' '#'
    case 15002:                     // 'import' '#'
    case 15003:                     // 'in' '#'
    case 15004:                     // 'index' '#'
    case 15008:                     // 'insert' '#'
    case 15009:                     // 'instance' '#'
    case 15010:                     // 'integrity' '#'
    case 15011:                     // 'intersect' '#'
    case 15012:                     // 'into' '#'
    case 15013:                     // 'is' '#'
    case 15014:                     // 'item' '#'
    case 15015:                     // 'json' '#'
    case 15016:                     // 'json-item' '#'
    case 15019:                     // 'last' '#'
    case 15020:                     // 'lax' '#'
    case 15021:                     // 'le' '#'
    case 15023:                     // 'let' '#'
    case 15025:                     // 'loop' '#'
    case 15027:                     // 'lt' '#'
    case 15028:                     // 'map' '#'
    case 15030:                     // 'mod' '#'
    case 15031:                     // 'modify' '#'
    case 15032:                     // 'module' '#'
    case 15034:                     // 'namespace' '#'
    case 15035:                     // 'namespace-node' '#'
    case 15036:                     // 'ne' '#'
    case 15041:                     // 'node' '#'
    case 15042:                     // 'nodes' '#'
    case 15044:                     // 'object' '#'
    case 15048:                     // 'only' '#'
    case 15049:                     // 'option' '#'
    case 15050:                     // 'or' '#'
    case 15051:                     // 'order' '#'
    case 15052:                     // 'ordered' '#'
    case 15053:                     // 'ordering' '#'
    case 15056:                     // 'parent' '#'
    case 15062:                     // 'preceding' '#'
    case 15063:                     // 'preceding-sibling' '#'
    case 15066:                     // 'processing-instruction' '#'
    case 15068:                     // 'rename' '#'
    case 15069:                     // 'replace' '#'
    case 15070:                     // 'return' '#'
    case 15071:                     // 'returning' '#'
    case 15072:                     // 'revalidation' '#'
    case 15074:                     // 'satisfies' '#'
    case 15075:                     // 'schema' '#'
    case 15076:                     // 'schema-attribute' '#'
    case 15077:                     // 'schema-element' '#'
    case 15078:                     // 'score' '#'
    case 15079:                     // 'self' '#'
    case 15084:                     // 'sliding' '#'
    case 15085:                     // 'some' '#'
    case 15086:                     // 'stable' '#'
    case 15087:                     // 'start' '#'
    case 15090:                     // 'strict' '#'
    case 15092:                     // 'structured-item' '#'
    case 15093:                     // 'switch' '#'
    case 15094:                     // 'text' '#'
    case 15098:                     // 'to' '#'
    case 15099:                     // 'treat' '#'
    case 15100:                     // 'try' '#'
    case 15101:                     // 'tumbling' '#'
    case 15102:                     // 'type' '#'
    case 15103:                     // 'typeswitch' '#'
    case 15104:                     // 'union' '#'
    case 15106:                     // 'unordered' '#'
    case 15107:                     // 'updating' '#'
    case 15110:                     // 'validate' '#'
    case 15111:                     // 'value' '#'
    case 15112:                     // 'variable' '#'
    case 15113:                     // 'version' '#'
    case 15116:                     // 'where' '#'
    case 15117:                     // 'while' '#'
    case 15120:                     // 'with' '#'
    case 15124:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17479:                     // 'after' '('
    case 17481:                     // 'allowing' '('
    case 17482:                     // 'ancestor' '('
    case 17483:                     // 'ancestor-or-self' '('
    case 17484:                     // 'and' '('
    case 17486:                     // 'append' '('
    case 17488:                     // 'as' '('
    case 17489:                     // 'ascending' '('
    case 17490:                     // 'at' '('
    case 17492:                     // 'base-uri' '('
    case 17493:                     // 'before' '('
    case 17494:                     // 'boundary-space' '('
    case 17495:                     // 'break' '('
    case 17497:                     // 'case' '('
    case 17498:                     // 'cast' '('
    case 17499:                     // 'castable' '('
    case 17500:                     // 'catch' '('
    case 17502:                     // 'child' '('
    case 17503:                     // 'collation' '('
    case 17506:                     // 'constraint' '('
    case 17507:                     // 'construction' '('
    case 17510:                     // 'context' '('
    case 17511:                     // 'continue' '('
    case 17512:                     // 'copy' '('
    case 17513:                     // 'copy-namespaces' '('
    case 17514:                     // 'count' '('
    case 17515:                     // 'decimal-format' '('
    case 17517:                     // 'declare' '('
    case 17518:                     // 'default' '('
    case 17519:                     // 'delete' '('
    case 17520:                     // 'descendant' '('
    case 17521:                     // 'descendant-or-self' '('
    case 17522:                     // 'descending' '('
    case 17527:                     // 'div' '('
    case 17528:                     // 'document' '('
    case 17531:                     // 'else' '('
    case 17532:                     // 'empty' '('
    case 17534:                     // 'encoding' '('
    case 17535:                     // 'end' '('
    case 17537:                     // 'eq' '('
    case 17538:                     // 'every' '('
    case 17540:                     // 'except' '('
    case 17541:                     // 'exit' '('
    case 17542:                     // 'external' '('
    case 17543:                     // 'first' '('
    case 17544:                     // 'following' '('
    case 17545:                     // 'following-sibling' '('
    case 17546:                     // 'for' '('
    case 17550:                     // 'ft-option' '('
    case 17554:                     // 'function' '('
    case 17555:                     // 'ge' '('
    case 17557:                     // 'group' '('
    case 17559:                     // 'gt' '('
    case 17560:                     // 'idiv' '('
    case 17562:                     // 'import' '('
    case 17563:                     // 'in' '('
    case 17564:                     // 'index' '('
    case 17568:                     // 'insert' '('
    case 17569:                     // 'instance' '('
    case 17570:                     // 'integrity' '('
    case 17571:                     // 'intersect' '('
    case 17572:                     // 'into' '('
    case 17573:                     // 'is' '('
    case 17575:                     // 'json' '('
    case 17579:                     // 'last' '('
    case 17580:                     // 'lax' '('
    case 17581:                     // 'le' '('
    case 17583:                     // 'let' '('
    case 17585:                     // 'loop' '('
    case 17587:                     // 'lt' '('
    case 17588:                     // 'map' '('
    case 17590:                     // 'mod' '('
    case 17591:                     // 'modify' '('
    case 17592:                     // 'module' '('
    case 17594:                     // 'namespace' '('
    case 17596:                     // 'ne' '('
    case 17602:                     // 'nodes' '('
    case 17604:                     // 'object' '('
    case 17608:                     // 'only' '('
    case 17609:                     // 'option' '('
    case 17610:                     // 'or' '('
    case 17611:                     // 'order' '('
    case 17612:                     // 'ordered' '('
    case 17613:                     // 'ordering' '('
    case 17616:                     // 'parent' '('
    case 17622:                     // 'preceding' '('
    case 17623:                     // 'preceding-sibling' '('
    case 17628:                     // 'rename' '('
    case 17629:                     // 'replace' '('
    case 17630:                     // 'return' '('
    case 17631:                     // 'returning' '('
    case 17632:                     // 'revalidation' '('
    case 17634:                     // 'satisfies' '('
    case 17635:                     // 'schema' '('
    case 17638:                     // 'score' '('
    case 17639:                     // 'self' '('
    case 17644:                     // 'sliding' '('
    case 17645:                     // 'some' '('
    case 17646:                     // 'stable' '('
    case 17647:                     // 'start' '('
    case 17650:                     // 'strict' '('
    case 17658:                     // 'to' '('
    case 17659:                     // 'treat' '('
    case 17660:                     // 'try' '('
    case 17661:                     // 'tumbling' '('
    case 17662:                     // 'type' '('
    case 17664:                     // 'union' '('
    case 17666:                     // 'unordered' '('
    case 17667:                     // 'updating' '('
    case 17670:                     // 'validate' '('
    case 17671:                     // 'value' '('
    case 17672:                     // 'variable' '('
    case 17673:                     // 'version' '('
    case 17676:                     // 'where' '('
    case 17677:                     // 'while' '('
    case 17680:                     // 'with' '('
    case 17684:                     // 'xquery' '('
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37562:                     // 'namespace' 'allowing'
    case 37594:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38074:                     // 'namespace' 'ancestor'
    case 38106:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38586:                     // 'namespace' 'ancestor-or-self'
    case 38618:                     // 'processing-instruction' 'ancestor-or-self'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40122:                     // 'namespace' 'append'
    case 40154:                     // 'processing-instruction' 'append'
    case 40531:                     // 'attribute' 'array'
    case 40570:                     // 'element' 'array'
    case 42579:                     // 'attribute' 'attribute'
    case 42618:                     // 'element' 'attribute'
    case 42682:                     // 'namespace' 'attribute'
    case 42714:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43194:                     // 'namespace' 'base-uri'
    case 43226:                     // 'processing-instruction' 'base-uri'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44218:                     // 'namespace' 'boundary-space'
    case 44250:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44730:                     // 'namespace' 'break'
    case 44762:                     // 'processing-instruction' 'break'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47290:                     // 'namespace' 'catch'
    case 47322:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48314:                     // 'namespace' 'child'
    case 48346:                     // 'processing-instruction' 'child'
    case 49747:                     // 'attribute' 'comment'
    case 49786:                     // 'element' 'comment'
    case 49850:                     // 'namespace' 'comment'
    case 49882:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50362:                     // 'namespace' 'constraint'
    case 50394:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50874:                     // 'namespace' 'construction'
    case 50906:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52410:                     // 'namespace' 'context'
    case 52442:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52922:                     // 'namespace' 'continue'
    case 52954:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53434:                     // 'namespace' 'copy'
    case 53466:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53946:                     // 'namespace' 'copy-namespaces'
    case 53978:                     // 'processing-instruction' 'copy-namespaces'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54970:                     // 'namespace' 'decimal-format'
    case 55002:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55994:                     // 'namespace' 'declare'
    case 56026:                     // 'processing-instruction' 'declare'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57018:                     // 'namespace' 'delete'
    case 57050:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57530:                     // 'namespace' 'descendant'
    case 57562:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58042:                     // 'namespace' 'descendant-or-self'
    case 58074:                     // 'processing-instruction' 'descendant-or-self'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61626:                     // 'namespace' 'document'
    case 61658:                     // 'processing-instruction' 'document'
    case 62035:                     // 'attribute' 'document-node'
    case 62074:                     // 'element' 'document-node'
    case 62138:                     // 'namespace' 'document-node'
    case 62170:                     // 'processing-instruction' 'document-node'
    case 62547:                     // 'attribute' 'element'
    case 62586:                     // 'element' 'element'
    case 62650:                     // 'namespace' 'element'
    case 62682:                     // 'processing-instruction' 'element'
    case 64083:                     // 'attribute' 'empty-sequence'
    case 64122:                     // 'element' 'empty-sequence'
    case 64186:                     // 'namespace' 'empty-sequence'
    case 64218:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64698:                     // 'namespace' 'encoding'
    case 64730:                     // 'processing-instruction' 'encoding'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66746:                     // 'namespace' 'every'
    case 66778:                     // 'processing-instruction' 'every'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68282:                     // 'namespace' 'exit'
    case 68314:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68794:                     // 'namespace' 'external'
    case 68826:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'first'
    case 69242:                     // 'element' 'first'
    case 69306:                     // 'namespace' 'first'
    case 69338:                     // 'processing-instruction' 'first'
    case 69715:                     // 'attribute' 'following'
    case 69754:                     // 'element' 'following'
    case 69818:                     // 'namespace' 'following'
    case 69850:                     // 'processing-instruction' 'following'
    case 70227:                     // 'attribute' 'following-sibling'
    case 70266:                     // 'element' 'following-sibling'
    case 70330:                     // 'namespace' 'following-sibling'
    case 70362:                     // 'processing-instruction' 'following-sibling'
    case 72787:                     // 'attribute' 'ft-option'
    case 72826:                     // 'element' 'ft-option'
    case 72890:                     // 'namespace' 'ft-option'
    case 72922:                     // 'processing-instruction' 'ft-option'
    case 74835:                     // 'attribute' 'function'
    case 74874:                     // 'element' 'function'
    case 74938:                     // 'namespace' 'function'
    case 74970:                     // 'processing-instruction' 'function'
    case 78419:                     // 'attribute' 'if'
    case 78458:                     // 'element' 'if'
    case 78522:                     // 'namespace' 'if'
    case 78554:                     // 'processing-instruction' 'if'
    case 78931:                     // 'attribute' 'import'
    case 78970:                     // 'element' 'import'
    case 79034:                     // 'namespace' 'import'
    case 79066:                     // 'processing-instruction' 'import'
    case 79443:                     // 'attribute' 'in'
    case 79482:                     // 'element' 'in'
    case 79546:                     // 'namespace' 'in'
    case 79578:                     // 'processing-instruction' 'in'
    case 79955:                     // 'attribute' 'index'
    case 79994:                     // 'element' 'index'
    case 80058:                     // 'namespace' 'index'
    case 80090:                     // 'processing-instruction' 'index'
    case 82003:                     // 'attribute' 'insert'
    case 82042:                     // 'element' 'insert'
    case 82106:                     // 'namespace' 'insert'
    case 82138:                     // 'processing-instruction' 'insert'
    case 83027:                     // 'attribute' 'integrity'
    case 83066:                     // 'element' 'integrity'
    case 83130:                     // 'namespace' 'integrity'
    case 83162:                     // 'processing-instruction' 'integrity'
    case 85075:                     // 'attribute' 'item'
    case 85114:                     // 'element' 'item'
    case 85178:                     // 'namespace' 'item'
    case 85210:                     // 'processing-instruction' 'item'
    case 85587:                     // 'attribute' 'json'
    case 85626:                     // 'element' 'json'
    case 85690:                     // 'namespace' 'json'
    case 85722:                     // 'processing-instruction' 'json'
    case 86099:                     // 'attribute' 'json-item'
    case 86138:                     // 'element' 'json-item'
    case 87635:                     // 'attribute' 'last'
    case 87674:                     // 'element' 'last'
    case 87738:                     // 'namespace' 'last'
    case 87770:                     // 'processing-instruction' 'last'
    case 88147:                     // 'attribute' 'lax'
    case 88186:                     // 'element' 'lax'
    case 88250:                     // 'namespace' 'lax'
    case 88282:                     // 'processing-instruction' 'lax'
    case 90707:                     // 'attribute' 'loop'
    case 90746:                     // 'element' 'loop'
    case 90810:                     // 'namespace' 'loop'
    case 90842:                     // 'processing-instruction' 'loop'
    case 92243:                     // 'attribute' 'map'
    case 92282:                     // 'element' 'map'
    case 92346:                     // 'namespace' 'map'
    case 92378:                     // 'processing-instruction' 'map'
    case 94291:                     // 'attribute' 'module'
    case 94330:                     // 'element' 'module'
    case 94394:                     // 'namespace' 'module'
    case 94426:                     // 'processing-instruction' 'module'
    case 95315:                     // 'attribute' 'namespace'
    case 95354:                     // 'element' 'namespace'
    case 95418:                     // 'namespace' 'namespace'
    case 95450:                     // 'processing-instruction' 'namespace'
    case 95827:                     // 'attribute' 'namespace-node'
    case 95866:                     // 'element' 'namespace-node'
    case 95930:                     // 'namespace' 'namespace-node'
    case 95962:                     // 'processing-instruction' 'namespace-node'
    case 98899:                     // 'attribute' 'node'
    case 98938:                     // 'element' 'node'
    case 99002:                     // 'namespace' 'node'
    case 99034:                     // 'processing-instruction' 'node'
    case 99411:                     // 'attribute' 'nodes'
    case 99450:                     // 'element' 'nodes'
    case 99514:                     // 'namespace' 'nodes'
    case 99546:                     // 'processing-instruction' 'nodes'
    case 100435:                    // 'attribute' 'object'
    case 100474:                    // 'element' 'object'
    case 100538:                    // 'namespace' 'object'
    case 100570:                    // 'processing-instruction' 'object'
    case 102995:                    // 'attribute' 'option'
    case 103034:                    // 'element' 'option'
    case 103098:                    // 'namespace' 'option'
    case 103130:                    // 'processing-instruction' 'option'
    case 104531:                    // 'attribute' 'ordered'
    case 104570:                    // 'element' 'ordered'
    case 104634:                    // 'namespace' 'ordered'
    case 104666:                    // 'processing-instruction' 'ordered'
    case 105043:                    // 'attribute' 'ordering'
    case 105082:                    // 'element' 'ordering'
    case 105146:                    // 'namespace' 'ordering'
    case 105178:                    // 'processing-instruction' 'ordering'
    case 106579:                    // 'attribute' 'parent'
    case 106618:                    // 'element' 'parent'
    case 106682:                    // 'namespace' 'parent'
    case 106714:                    // 'processing-instruction' 'parent'
    case 109651:                    // 'attribute' 'preceding'
    case 109690:                    // 'element' 'preceding'
    case 109754:                    // 'namespace' 'preceding'
    case 109786:                    // 'processing-instruction' 'preceding'
    case 110163:                    // 'attribute' 'preceding-sibling'
    case 110202:                    // 'element' 'preceding-sibling'
    case 110266:                    // 'namespace' 'preceding-sibling'
    case 110298:                    // 'processing-instruction' 'preceding-sibling'
    case 111699:                    // 'attribute' 'processing-instruction'
    case 111738:                    // 'element' 'processing-instruction'
    case 111802:                    // 'namespace' 'processing-instruction'
    case 111834:                    // 'processing-instruction' 'processing-instruction'
    case 112723:                    // 'attribute' 'rename'
    case 112762:                    // 'element' 'rename'
    case 112826:                    // 'namespace' 'rename'
    case 112858:                    // 'processing-instruction' 'rename'
    case 113235:                    // 'attribute' 'replace'
    case 113274:                    // 'element' 'replace'
    case 113338:                    // 'namespace' 'replace'
    case 113370:                    // 'processing-instruction' 'replace'
    case 114259:                    // 'attribute' 'returning'
    case 114298:                    // 'element' 'returning'
    case 114362:                    // 'namespace' 'returning'
    case 114394:                    // 'processing-instruction' 'returning'
    case 114771:                    // 'attribute' 'revalidation'
    case 114810:                    // 'element' 'revalidation'
    case 114874:                    // 'namespace' 'revalidation'
    case 114906:                    // 'processing-instruction' 'revalidation'
    case 116307:                    // 'attribute' 'schema'
    case 116346:                    // 'element' 'schema'
    case 116410:                    // 'namespace' 'schema'
    case 116442:                    // 'processing-instruction' 'schema'
    case 116819:                    // 'attribute' 'schema-attribute'
    case 116858:                    // 'element' 'schema-attribute'
    case 116922:                    // 'namespace' 'schema-attribute'
    case 116954:                    // 'processing-instruction' 'schema-attribute'
    case 117331:                    // 'attribute' 'schema-element'
    case 117370:                    // 'element' 'schema-element'
    case 117434:                    // 'namespace' 'schema-element'
    case 117466:                    // 'processing-instruction' 'schema-element'
    case 117843:                    // 'attribute' 'score'
    case 117882:                    // 'element' 'score'
    case 117946:                    // 'namespace' 'score'
    case 117978:                    // 'processing-instruction' 'score'
    case 118355:                    // 'attribute' 'self'
    case 118394:                    // 'element' 'self'
    case 118458:                    // 'namespace' 'self'
    case 118490:                    // 'processing-instruction' 'self'
    case 120915:                    // 'attribute' 'sliding'
    case 120954:                    // 'element' 'sliding'
    case 121018:                    // 'namespace' 'sliding'
    case 121050:                    // 'processing-instruction' 'sliding'
    case 121427:                    // 'attribute' 'some'
    case 121466:                    // 'element' 'some'
    case 121530:                    // 'namespace' 'some'
    case 121562:                    // 'processing-instruction' 'some'
    case 123987:                    // 'attribute' 'strict'
    case 124026:                    // 'element' 'strict'
    case 124090:                    // 'namespace' 'strict'
    case 124122:                    // 'processing-instruction' 'strict'
    case 125011:                    // 'attribute' 'structured-item'
    case 125050:                    // 'element' 'structured-item'
    case 125523:                    // 'attribute' 'switch'
    case 125562:                    // 'element' 'switch'
    case 125626:                    // 'namespace' 'switch'
    case 125658:                    // 'processing-instruction' 'switch'
    case 126035:                    // 'attribute' 'text'
    case 126074:                    // 'element' 'text'
    case 126138:                    // 'namespace' 'text'
    case 126170:                    // 'processing-instruction' 'text'
    case 129107:                    // 'attribute' 'try'
    case 129146:                    // 'element' 'try'
    case 129210:                    // 'namespace' 'try'
    case 129242:                    // 'processing-instruction' 'try'
    case 129619:                    // 'attribute' 'tumbling'
    case 129658:                    // 'element' 'tumbling'
    case 129722:                    // 'namespace' 'tumbling'
    case 129754:                    // 'processing-instruction' 'tumbling'
    case 130131:                    // 'attribute' 'type'
    case 130170:                    // 'element' 'type'
    case 130234:                    // 'namespace' 'type'
    case 130266:                    // 'processing-instruction' 'type'
    case 130643:                    // 'attribute' 'typeswitch'
    case 130682:                    // 'element' 'typeswitch'
    case 130746:                    // 'namespace' 'typeswitch'
    case 130778:                    // 'processing-instruction' 'typeswitch'
    case 132179:                    // 'attribute' 'unordered'
    case 132218:                    // 'element' 'unordered'
    case 132282:                    // 'namespace' 'unordered'
    case 132314:                    // 'processing-instruction' 'unordered'
    case 132691:                    // 'attribute' 'updating'
    case 132730:                    // 'element' 'updating'
    case 132794:                    // 'namespace' 'updating'
    case 132826:                    // 'processing-instruction' 'updating'
    case 134227:                    // 'attribute' 'validate'
    case 134266:                    // 'element' 'validate'
    case 134330:                    // 'namespace' 'validate'
    case 134362:                    // 'processing-instruction' 'validate'
    case 134739:                    // 'attribute' 'value'
    case 134778:                    // 'element' 'value'
    case 134842:                    // 'namespace' 'value'
    case 134874:                    // 'processing-instruction' 'value'
    case 135251:                    // 'attribute' 'variable'
    case 135290:                    // 'element' 'variable'
    case 135354:                    // 'namespace' 'variable'
    case 135386:                    // 'processing-instruction' 'variable'
    case 135763:                    // 'attribute' 'version'
    case 135802:                    // 'element' 'version'
    case 135866:                    // 'namespace' 'version'
    case 135898:                    // 'processing-instruction' 'version'
    case 137811:                    // 'attribute' 'while'
    case 137850:                    // 'element' 'while'
    case 137914:                    // 'namespace' 'while'
    case 137946:                    // 'processing-instruction' 'while'
    case 141395:                    // 'attribute' 'xquery'
    case 141434:                    // 'element' 'xquery'
    case 141498:                    // 'namespace' 'xquery'
    case 141530:                    // 'processing-instruction' 'xquery'
    case 142419:                    // 'attribute' '{'
    case 142433:                    // 'comment' '{'
    case 142456:                    // 'document' '{'
    case 142458:                    // 'element' '{'
    case 142516:                    // 'map' '{'
    case 142522:                    // 'namespace' '{'
    case 142540:                    // 'ordered' '{'
    case 142554:                    // 'processing-instruction' '{'
    case 142582:                    // 'text' '{'
    case 142594:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(286);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 122:                       // 'element'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 186:                       // 'namespace'
    case 218:                       // 'processing-instruction'
      lookahead2W(284);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 97:                        // 'comment'
    case 120:                       // 'document'
    case 180:                       // 'map'
    case 204:                       // 'ordered'
    case 246:                       // 'text'
    case 258:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 79:                        // 'array'
    case 125:                       // 'empty-sequence'
    case 153:                       // 'if'
    case 166:                       // 'item'
    case 168:                       // 'json-item'
    case 244:                       // 'structured-item'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 136:                       // 'following'
    case 137:                       // 'following-sibling'
    case 208:                       // 'parent'
    case 214:                       // 'preceding'
    case 215:                       // 'preceding-sibling'
    case 231:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 121:                       // 'document-node'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 135:                       // 'first'
    case 138:                       // 'for'
    case 142:                       // 'ft-option'
    case 146:                       // 'function'
    case 147:                       // 'ge'
    case 149:                       // 'group'
    case 151:                       // 'gt'
    case 152:                       // 'idiv'
    case 154:                       // 'import'
    case 155:                       // 'in'
    case 156:                       // 'index'
    case 160:                       // 'insert'
    case 161:                       // 'instance'
    case 162:                       // 'integrity'
    case 163:                       // 'intersect'
    case 164:                       // 'into'
    case 165:                       // 'is'
    case 167:                       // 'json'
    case 171:                       // 'last'
    case 172:                       // 'lax'
    case 173:                       // 'le'
    case 175:                       // 'let'
    case 177:                       // 'loop'
    case 179:                       // 'lt'
    case 182:                       // 'mod'
    case 183:                       // 'modify'
    case 184:                       // 'module'
    case 187:                       // 'namespace-node'
    case 188:                       // 'ne'
    case 193:                       // 'node'
    case 194:                       // 'nodes'
    case 196:                       // 'object'
    case 200:                       // 'only'
    case 201:                       // 'option'
    case 202:                       // 'or'
    case 203:                       // 'order'
    case 205:                       // 'ordering'
    case 220:                       // 'rename'
    case 221:                       // 'replace'
    case 222:                       // 'return'
    case 223:                       // 'returning'
    case 224:                       // 'revalidation'
    case 226:                       // 'satisfies'
    case 227:                       // 'schema'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 230:                       // 'score'
    case 236:                       // 'sliding'
    case 237:                       // 'some'
    case 238:                       // 'stable'
    case 239:                       // 'start'
    case 242:                       // 'strict'
    case 250:                       // 'to'
    case 251:                       // 'treat'
    case 252:                       // 'try'
    case 253:                       // 'tumbling'
    case 254:                       // 'type'
    case 256:                       // 'union'
    case 259:                       // 'updating'
    case 262:                       // 'validate'
    case 263:                       // 'value'
    case 264:                       // 'variable'
    case 265:                       // 'version'
    case 268:                       // 'where'
    case 269:                       // 'while'
    case 272:                       // 'with'
    case 276:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 36435                 // 'attribute' 'after'
     || lk == 36474                 // 'element' 'after'
     || lk == 36538                 // 'namespace' 'after'
     || lk == 36570                 // 'processing-instruction' 'after'
     || lk == 38995                 // 'attribute' 'and'
     || lk == 39034                 // 'element' 'and'
     || lk == 39098                 // 'namespace' 'and'
     || lk == 39130                 // 'processing-instruction' 'and'
     || lk == 41043                 // 'attribute' 'as'
     || lk == 41082                 // 'element' 'as'
     || lk == 41146                 // 'namespace' 'as'
     || lk == 41178                 // 'processing-instruction' 'as'
     || lk == 41555                 // 'attribute' 'ascending'
     || lk == 41594                 // 'element' 'ascending'
     || lk == 41658                 // 'namespace' 'ascending'
     || lk == 41690                 // 'processing-instruction' 'ascending'
     || lk == 42067                 // 'attribute' 'at'
     || lk == 42106                 // 'element' 'at'
     || lk == 42170                 // 'namespace' 'at'
     || lk == 42202                 // 'processing-instruction' 'at'
     || lk == 43603                 // 'attribute' 'before'
     || lk == 43642                 // 'element' 'before'
     || lk == 43706                 // 'namespace' 'before'
     || lk == 43738                 // 'processing-instruction' 'before'
     || lk == 45651                 // 'attribute' 'case'
     || lk == 45690                 // 'element' 'case'
     || lk == 45754                 // 'namespace' 'case'
     || lk == 45786                 // 'processing-instruction' 'case'
     || lk == 46163                 // 'attribute' 'cast'
     || lk == 46202                 // 'element' 'cast'
     || lk == 46266                 // 'namespace' 'cast'
     || lk == 46298                 // 'processing-instruction' 'cast'
     || lk == 46675                 // 'attribute' 'castable'
     || lk == 46714                 // 'element' 'castable'
     || lk == 46778                 // 'namespace' 'castable'
     || lk == 46810                 // 'processing-instruction' 'castable'
     || lk == 48723                 // 'attribute' 'collation'
     || lk == 48762                 // 'element' 'collation'
     || lk == 48826                 // 'namespace' 'collation'
     || lk == 48858                 // 'processing-instruction' 'collation'
     || lk == 54355                 // 'attribute' 'count'
     || lk == 54394                 // 'element' 'count'
     || lk == 54458                 // 'namespace' 'count'
     || lk == 54490                 // 'processing-instruction' 'count'
     || lk == 56403                 // 'attribute' 'default'
     || lk == 56442                 // 'element' 'default'
     || lk == 56506                 // 'namespace' 'default'
     || lk == 56538                 // 'processing-instruction' 'default'
     || lk == 58451                 // 'attribute' 'descending'
     || lk == 58490                 // 'element' 'descending'
     || lk == 58554                 // 'namespace' 'descending'
     || lk == 58586                 // 'processing-instruction' 'descending'
     || lk == 61011                 // 'attribute' 'div'
     || lk == 61050                 // 'element' 'div'
     || lk == 61114                 // 'namespace' 'div'
     || lk == 61146                 // 'processing-instruction' 'div'
     || lk == 63059                 // 'attribute' 'else'
     || lk == 63098                 // 'element' 'else'
     || lk == 63162                 // 'namespace' 'else'
     || lk == 63194                 // 'processing-instruction' 'else'
     || lk == 63571                 // 'attribute' 'empty'
     || lk == 63610                 // 'element' 'empty'
     || lk == 63674                 // 'namespace' 'empty'
     || lk == 63706                 // 'processing-instruction' 'empty'
     || lk == 65107                 // 'attribute' 'end'
     || lk == 65146                 // 'element' 'end'
     || lk == 65210                 // 'namespace' 'end'
     || lk == 65242                 // 'processing-instruction' 'end'
     || lk == 66131                 // 'attribute' 'eq'
     || lk == 66170                 // 'element' 'eq'
     || lk == 66234                 // 'namespace' 'eq'
     || lk == 66266                 // 'processing-instruction' 'eq'
     || lk == 67667                 // 'attribute' 'except'
     || lk == 67706                 // 'element' 'except'
     || lk == 67770                 // 'namespace' 'except'
     || lk == 67802                 // 'processing-instruction' 'except'
     || lk == 70739                 // 'attribute' 'for'
     || lk == 70778                 // 'element' 'for'
     || lk == 70842                 // 'namespace' 'for'
     || lk == 70874                 // 'processing-instruction' 'for'
     || lk == 75347                 // 'attribute' 'ge'
     || lk == 75386                 // 'element' 'ge'
     || lk == 75450                 // 'namespace' 'ge'
     || lk == 75482                 // 'processing-instruction' 'ge'
     || lk == 76371                 // 'attribute' 'group'
     || lk == 76410                 // 'element' 'group'
     || lk == 76474                 // 'namespace' 'group'
     || lk == 76506                 // 'processing-instruction' 'group'
     || lk == 77395                 // 'attribute' 'gt'
     || lk == 77434                 // 'element' 'gt'
     || lk == 77498                 // 'namespace' 'gt'
     || lk == 77530                 // 'processing-instruction' 'gt'
     || lk == 77907                 // 'attribute' 'idiv'
     || lk == 77946                 // 'element' 'idiv'
     || lk == 78010                 // 'namespace' 'idiv'
     || lk == 78042                 // 'processing-instruction' 'idiv'
     || lk == 82515                 // 'attribute' 'instance'
     || lk == 82554                 // 'element' 'instance'
     || lk == 82618                 // 'namespace' 'instance'
     || lk == 82650                 // 'processing-instruction' 'instance'
     || lk == 83539                 // 'attribute' 'intersect'
     || lk == 83578                 // 'element' 'intersect'
     || lk == 83642                 // 'namespace' 'intersect'
     || lk == 83674                 // 'processing-instruction' 'intersect'
     || lk == 84051                 // 'attribute' 'into'
     || lk == 84090                 // 'element' 'into'
     || lk == 84154                 // 'namespace' 'into'
     || lk == 84186                 // 'processing-instruction' 'into'
     || lk == 84563                 // 'attribute' 'is'
     || lk == 84602                 // 'element' 'is'
     || lk == 84666                 // 'namespace' 'is'
     || lk == 84698                 // 'processing-instruction' 'is'
     || lk == 88659                 // 'attribute' 'le'
     || lk == 88698                 // 'element' 'le'
     || lk == 88762                 // 'namespace' 'le'
     || lk == 88794                 // 'processing-instruction' 'le'
     || lk == 89683                 // 'attribute' 'let'
     || lk == 89722                 // 'element' 'let'
     || lk == 89786                 // 'namespace' 'let'
     || lk == 89818                 // 'processing-instruction' 'let'
     || lk == 91731                 // 'attribute' 'lt'
     || lk == 91770                 // 'element' 'lt'
     || lk == 91834                 // 'namespace' 'lt'
     || lk == 91866                 // 'processing-instruction' 'lt'
     || lk == 93267                 // 'attribute' 'mod'
     || lk == 93306                 // 'element' 'mod'
     || lk == 93370                 // 'namespace' 'mod'
     || lk == 93402                 // 'processing-instruction' 'mod'
     || lk == 93779                 // 'attribute' 'modify'
     || lk == 93818                 // 'element' 'modify'
     || lk == 93882                 // 'namespace' 'modify'
     || lk == 93914                 // 'processing-instruction' 'modify'
     || lk == 96339                 // 'attribute' 'ne'
     || lk == 96378                 // 'element' 'ne'
     || lk == 96442                 // 'namespace' 'ne'
     || lk == 96474                 // 'processing-instruction' 'ne'
     || lk == 102483                // 'attribute' 'only'
     || lk == 102522                // 'element' 'only'
     || lk == 102586                // 'namespace' 'only'
     || lk == 102618                // 'processing-instruction' 'only'
     || lk == 103507                // 'attribute' 'or'
     || lk == 103546                // 'element' 'or'
     || lk == 103610                // 'namespace' 'or'
     || lk == 103642                // 'processing-instruction' 'or'
     || lk == 104019                // 'attribute' 'order'
     || lk == 104058                // 'element' 'order'
     || lk == 104122                // 'namespace' 'order'
     || lk == 104154                // 'processing-instruction' 'order'
     || lk == 113747                // 'attribute' 'return'
     || lk == 113786                // 'element' 'return'
     || lk == 113850                // 'namespace' 'return'
     || lk == 113882                // 'processing-instruction' 'return'
     || lk == 115795                // 'attribute' 'satisfies'
     || lk == 115834                // 'element' 'satisfies'
     || lk == 115898                // 'namespace' 'satisfies'
     || lk == 115930                // 'processing-instruction' 'satisfies'
     || lk == 121939                // 'attribute' 'stable'
     || lk == 121978                // 'element' 'stable'
     || lk == 122042                // 'namespace' 'stable'
     || lk == 122074                // 'processing-instruction' 'stable'
     || lk == 122451                // 'attribute' 'start'
     || lk == 122490                // 'element' 'start'
     || lk == 122554                // 'namespace' 'start'
     || lk == 122586                // 'processing-instruction' 'start'
     || lk == 128083                // 'attribute' 'to'
     || lk == 128122                // 'element' 'to'
     || lk == 128186                // 'namespace' 'to'
     || lk == 128218                // 'processing-instruction' 'to'
     || lk == 128595                // 'attribute' 'treat'
     || lk == 128634                // 'element' 'treat'
     || lk == 128698                // 'namespace' 'treat'
     || lk == 128730                // 'processing-instruction' 'treat'
     || lk == 131155                // 'attribute' 'union'
     || lk == 131194                // 'element' 'union'
     || lk == 131258                // 'namespace' 'union'
     || lk == 131290                // 'processing-instruction' 'union'
     || lk == 137299                // 'attribute' 'where'
     || lk == 137338                // 'element' 'where'
     || lk == 137402                // 'namespace' 'where'
     || lk == 137434                // 'processing-instruction' 'where'
     || lk == 139347                // 'attribute' 'with'
     || lk == 139386                // 'element' 'with'
     || lk == 139450                // 'namespace' 'with'
     || lk == 139482)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(4, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 278:                       // '{'
    case 280:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9914:                      // 'namespace' NCName^Token
    case 9946:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14927:                     // 'array' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14969:                     // 'document-node' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14973:                     // 'empty-sequence' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'first' '#'
    case 14984:                     // 'following' '#'
    case 14985:                     // 'following-sibling' '#'
    case 14986:                     // 'for' '#'
    case 14990:                     // 'ft-option' '#'
    case 14994:                     // 'function' '#'
    case 14995:                     // 'ge' '#'
    case 14997:                     // 'group' '#'
    case 14999:                     // 'gt' '#'
    case 15000:                     // 'idiv' '#'
    case 15001:                     // 'if' '#'
    case 15002:                     // 'import' '#'
    case 15003:                     // 'in' '#'
    case 15004:                     // 'index' '#'
    case 15008:                     // 'insert' '#'
    case 15009:                     // 'instance' '#'
    case 15010:                     // 'integrity' '#'
    case 15011:                     // 'intersect' '#'
    case 15012:                     // 'into' '#'
    case 15013:                     // 'is' '#'
    case 15014:                     // 'item' '#'
    case 15015:                     // 'json' '#'
    case 15016:                     // 'json-item' '#'
    case 15019:                     // 'last' '#'
    case 15020:                     // 'lax' '#'
    case 15021:                     // 'le' '#'
    case 15023:                     // 'let' '#'
    case 15025:                     // 'loop' '#'
    case 15027:                     // 'lt' '#'
    case 15028:                     // 'map' '#'
    case 15030:                     // 'mod' '#'
    case 15031:                     // 'modify' '#'
    case 15032:                     // 'module' '#'
    case 15034:                     // 'namespace' '#'
    case 15035:                     // 'namespace-node' '#'
    case 15036:                     // 'ne' '#'
    case 15041:                     // 'node' '#'
    case 15042:                     // 'nodes' '#'
    case 15044:                     // 'object' '#'
    case 15048:                     // 'only' '#'
    case 15049:                     // 'option' '#'
    case 15050:                     // 'or' '#'
    case 15051:                     // 'order' '#'
    case 15052:                     // 'ordered' '#'
    case 15053:                     // 'ordering' '#'
    case 15056:                     // 'parent' '#'
    case 15062:                     // 'preceding' '#'
    case 15063:                     // 'preceding-sibling' '#'
    case 15066:                     // 'processing-instruction' '#'
    case 15068:                     // 'rename' '#'
    case 15069:                     // 'replace' '#'
    case 15070:                     // 'return' '#'
    case 15071:                     // 'returning' '#'
    case 15072:                     // 'revalidation' '#'
    case 15074:                     // 'satisfies' '#'
    case 15075:                     // 'schema' '#'
    case 15076:                     // 'schema-attribute' '#'
    case 15077:                     // 'schema-element' '#'
    case 15078:                     // 'score' '#'
    case 15079:                     // 'self' '#'
    case 15084:                     // 'sliding' '#'
    case 15085:                     // 'some' '#'
    case 15086:                     // 'stable' '#'
    case 15087:                     // 'start' '#'
    case 15090:                     // 'strict' '#'
    case 15092:                     // 'structured-item' '#'
    case 15093:                     // 'switch' '#'
    case 15094:                     // 'text' '#'
    case 15098:                     // 'to' '#'
    case 15099:                     // 'treat' '#'
    case 15100:                     // 'try' '#'
    case 15101:                     // 'tumbling' '#'
    case 15102:                     // 'type' '#'
    case 15103:                     // 'typeswitch' '#'
    case 15104:                     // 'union' '#'
    case 15106:                     // 'unordered' '#'
    case 15107:                     // 'updating' '#'
    case 15110:                     // 'validate' '#'
    case 15111:                     // 'value' '#'
    case 15112:                     // 'variable' '#'
    case 15113:                     // 'version' '#'
    case 15116:                     // 'where' '#'
    case 15117:                     // 'while' '#'
    case 15120:                     // 'with' '#'
    case 15124:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17479:                     // 'after' '('
    case 17481:                     // 'allowing' '('
    case 17482:                     // 'ancestor' '('
    case 17483:                     // 'ancestor-or-self' '('
    case 17484:                     // 'and' '('
    case 17486:                     // 'append' '('
    case 17488:                     // 'as' '('
    case 17489:                     // 'ascending' '('
    case 17490:                     // 'at' '('
    case 17492:                     // 'base-uri' '('
    case 17493:                     // 'before' '('
    case 17494:                     // 'boundary-space' '('
    case 17495:                     // 'break' '('
    case 17497:                     // 'case' '('
    case 17498:                     // 'cast' '('
    case 17499:                     // 'castable' '('
    case 17500:                     // 'catch' '('
    case 17502:                     // 'child' '('
    case 17503:                     // 'collation' '('
    case 17506:                     // 'constraint' '('
    case 17507:                     // 'construction' '('
    case 17510:                     // 'context' '('
    case 17511:                     // 'continue' '('
    case 17512:                     // 'copy' '('
    case 17513:                     // 'copy-namespaces' '('
    case 17514:                     // 'count' '('
    case 17515:                     // 'decimal-format' '('
    case 17517:                     // 'declare' '('
    case 17518:                     // 'default' '('
    case 17519:                     // 'delete' '('
    case 17520:                     // 'descendant' '('
    case 17521:                     // 'descendant-or-self' '('
    case 17522:                     // 'descending' '('
    case 17527:                     // 'div' '('
    case 17528:                     // 'document' '('
    case 17531:                     // 'else' '('
    case 17532:                     // 'empty' '('
    case 17534:                     // 'encoding' '('
    case 17535:                     // 'end' '('
    case 17537:                     // 'eq' '('
    case 17538:                     // 'every' '('
    case 17540:                     // 'except' '('
    case 17541:                     // 'exit' '('
    case 17542:                     // 'external' '('
    case 17543:                     // 'first' '('
    case 17544:                     // 'following' '('
    case 17545:                     // 'following-sibling' '('
    case 17546:                     // 'for' '('
    case 17550:                     // 'ft-option' '('
    case 17554:                     // 'function' '('
    case 17555:                     // 'ge' '('
    case 17557:                     // 'group' '('
    case 17559:                     // 'gt' '('
    case 17560:                     // 'idiv' '('
    case 17562:                     // 'import' '('
    case 17563:                     // 'in' '('
    case 17564:                     // 'index' '('
    case 17568:                     // 'insert' '('
    case 17569:                     // 'instance' '('
    case 17570:                     // 'integrity' '('
    case 17571:                     // 'intersect' '('
    case 17572:                     // 'into' '('
    case 17573:                     // 'is' '('
    case 17575:                     // 'json' '('
    case 17579:                     // 'last' '('
    case 17580:                     // 'lax' '('
    case 17581:                     // 'le' '('
    case 17583:                     // 'let' '('
    case 17585:                     // 'loop' '('
    case 17587:                     // 'lt' '('
    case 17588:                     // 'map' '('
    case 17590:                     // 'mod' '('
    case 17591:                     // 'modify' '('
    case 17592:                     // 'module' '('
    case 17594:                     // 'namespace' '('
    case 17596:                     // 'ne' '('
    case 17602:                     // 'nodes' '('
    case 17604:                     // 'object' '('
    case 17608:                     // 'only' '('
    case 17609:                     // 'option' '('
    case 17610:                     // 'or' '('
    case 17611:                     // 'order' '('
    case 17612:                     // 'ordered' '('
    case 17613:                     // 'ordering' '('
    case 17616:                     // 'parent' '('
    case 17622:                     // 'preceding' '('
    case 17623:                     // 'preceding-sibling' '('
    case 17628:                     // 'rename' '('
    case 17629:                     // 'replace' '('
    case 17630:                     // 'return' '('
    case 17631:                     // 'returning' '('
    case 17632:                     // 'revalidation' '('
    case 17634:                     // 'satisfies' '('
    case 17635:                     // 'schema' '('
    case 17638:                     // 'score' '('
    case 17639:                     // 'self' '('
    case 17644:                     // 'sliding' '('
    case 17645:                     // 'some' '('
    case 17646:                     // 'stable' '('
    case 17647:                     // 'start' '('
    case 17650:                     // 'strict' '('
    case 17658:                     // 'to' '('
    case 17659:                     // 'treat' '('
    case 17660:                     // 'try' '('
    case 17661:                     // 'tumbling' '('
    case 17662:                     // 'type' '('
    case 17664:                     // 'union' '('
    case 17666:                     // 'unordered' '('
    case 17667:                     // 'updating' '('
    case 17670:                     // 'validate' '('
    case 17671:                     // 'value' '('
    case 17672:                     // 'variable' '('
    case 17673:                     // 'version' '('
    case 17676:                     // 'where' '('
    case 17677:                     // 'while' '('
    case 17680:                     // 'with' '('
    case 17684:                     // 'xquery' '('
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37562:                     // 'namespace' 'allowing'
    case 37594:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38074:                     // 'namespace' 'ancestor'
    case 38106:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38586:                     // 'namespace' 'ancestor-or-self'
    case 38618:                     // 'processing-instruction' 'ancestor-or-self'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40122:                     // 'namespace' 'append'
    case 40154:                     // 'processing-instruction' 'append'
    case 40531:                     // 'attribute' 'array'
    case 40570:                     // 'element' 'array'
    case 42579:                     // 'attribute' 'attribute'
    case 42618:                     // 'element' 'attribute'
    case 42682:                     // 'namespace' 'attribute'
    case 42714:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43194:                     // 'namespace' 'base-uri'
    case 43226:                     // 'processing-instruction' 'base-uri'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44218:                     // 'namespace' 'boundary-space'
    case 44250:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44730:                     // 'namespace' 'break'
    case 44762:                     // 'processing-instruction' 'break'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47290:                     // 'namespace' 'catch'
    case 47322:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48314:                     // 'namespace' 'child'
    case 48346:                     // 'processing-instruction' 'child'
    case 49747:                     // 'attribute' 'comment'
    case 49786:                     // 'element' 'comment'
    case 49850:                     // 'namespace' 'comment'
    case 49882:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50362:                     // 'namespace' 'constraint'
    case 50394:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50874:                     // 'namespace' 'construction'
    case 50906:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52410:                     // 'namespace' 'context'
    case 52442:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52922:                     // 'namespace' 'continue'
    case 52954:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53434:                     // 'namespace' 'copy'
    case 53466:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53946:                     // 'namespace' 'copy-namespaces'
    case 53978:                     // 'processing-instruction' 'copy-namespaces'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54970:                     // 'namespace' 'decimal-format'
    case 55002:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55994:                     // 'namespace' 'declare'
    case 56026:                     // 'processing-instruction' 'declare'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57018:                     // 'namespace' 'delete'
    case 57050:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57530:                     // 'namespace' 'descendant'
    case 57562:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58042:                     // 'namespace' 'descendant-or-self'
    case 58074:                     // 'processing-instruction' 'descendant-or-self'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61626:                     // 'namespace' 'document'
    case 61658:                     // 'processing-instruction' 'document'
    case 62035:                     // 'attribute' 'document-node'
    case 62074:                     // 'element' 'document-node'
    case 62138:                     // 'namespace' 'document-node'
    case 62170:                     // 'processing-instruction' 'document-node'
    case 62547:                     // 'attribute' 'element'
    case 62586:                     // 'element' 'element'
    case 62650:                     // 'namespace' 'element'
    case 62682:                     // 'processing-instruction' 'element'
    case 64083:                     // 'attribute' 'empty-sequence'
    case 64122:                     // 'element' 'empty-sequence'
    case 64186:                     // 'namespace' 'empty-sequence'
    case 64218:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64698:                     // 'namespace' 'encoding'
    case 64730:                     // 'processing-instruction' 'encoding'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66746:                     // 'namespace' 'every'
    case 66778:                     // 'processing-instruction' 'every'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68282:                     // 'namespace' 'exit'
    case 68314:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68794:                     // 'namespace' 'external'
    case 68826:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'first'
    case 69242:                     // 'element' 'first'
    case 69306:                     // 'namespace' 'first'
    case 69338:                     // 'processing-instruction' 'first'
    case 69715:                     // 'attribute' 'following'
    case 69754:                     // 'element' 'following'
    case 69818:                     // 'namespace' 'following'
    case 69850:                     // 'processing-instruction' 'following'
    case 70227:                     // 'attribute' 'following-sibling'
    case 70266:                     // 'element' 'following-sibling'
    case 70330:                     // 'namespace' 'following-sibling'
    case 70362:                     // 'processing-instruction' 'following-sibling'
    case 72787:                     // 'attribute' 'ft-option'
    case 72826:                     // 'element' 'ft-option'
    case 72890:                     // 'namespace' 'ft-option'
    case 72922:                     // 'processing-instruction' 'ft-option'
    case 74835:                     // 'attribute' 'function'
    case 74874:                     // 'element' 'function'
    case 74938:                     // 'namespace' 'function'
    case 74970:                     // 'processing-instruction' 'function'
    case 78419:                     // 'attribute' 'if'
    case 78458:                     // 'element' 'if'
    case 78522:                     // 'namespace' 'if'
    case 78554:                     // 'processing-instruction' 'if'
    case 78931:                     // 'attribute' 'import'
    case 78970:                     // 'element' 'import'
    case 79034:                     // 'namespace' 'import'
    case 79066:                     // 'processing-instruction' 'import'
    case 79443:                     // 'attribute' 'in'
    case 79482:                     // 'element' 'in'
    case 79546:                     // 'namespace' 'in'
    case 79578:                     // 'processing-instruction' 'in'
    case 79955:                     // 'attribute' 'index'
    case 79994:                     // 'element' 'index'
    case 80058:                     // 'namespace' 'index'
    case 80090:                     // 'processing-instruction' 'index'
    case 82003:                     // 'attribute' 'insert'
    case 82042:                     // 'element' 'insert'
    case 82106:                     // 'namespace' 'insert'
    case 82138:                     // 'processing-instruction' 'insert'
    case 83027:                     // 'attribute' 'integrity'
    case 83066:                     // 'element' 'integrity'
    case 83130:                     // 'namespace' 'integrity'
    case 83162:                     // 'processing-instruction' 'integrity'
    case 85075:                     // 'attribute' 'item'
    case 85114:                     // 'element' 'item'
    case 85178:                     // 'namespace' 'item'
    case 85210:                     // 'processing-instruction' 'item'
    case 85587:                     // 'attribute' 'json'
    case 85626:                     // 'element' 'json'
    case 85690:                     // 'namespace' 'json'
    case 85722:                     // 'processing-instruction' 'json'
    case 86099:                     // 'attribute' 'json-item'
    case 86138:                     // 'element' 'json-item'
    case 87635:                     // 'attribute' 'last'
    case 87674:                     // 'element' 'last'
    case 87738:                     // 'namespace' 'last'
    case 87770:                     // 'processing-instruction' 'last'
    case 88147:                     // 'attribute' 'lax'
    case 88186:                     // 'element' 'lax'
    case 88250:                     // 'namespace' 'lax'
    case 88282:                     // 'processing-instruction' 'lax'
    case 90707:                     // 'attribute' 'loop'
    case 90746:                     // 'element' 'loop'
    case 90810:                     // 'namespace' 'loop'
    case 90842:                     // 'processing-instruction' 'loop'
    case 92243:                     // 'attribute' 'map'
    case 92282:                     // 'element' 'map'
    case 92346:                     // 'namespace' 'map'
    case 92378:                     // 'processing-instruction' 'map'
    case 94291:                     // 'attribute' 'module'
    case 94330:                     // 'element' 'module'
    case 94394:                     // 'namespace' 'module'
    case 94426:                     // 'processing-instruction' 'module'
    case 95315:                     // 'attribute' 'namespace'
    case 95354:                     // 'element' 'namespace'
    case 95418:                     // 'namespace' 'namespace'
    case 95450:                     // 'processing-instruction' 'namespace'
    case 95827:                     // 'attribute' 'namespace-node'
    case 95866:                     // 'element' 'namespace-node'
    case 95930:                     // 'namespace' 'namespace-node'
    case 95962:                     // 'processing-instruction' 'namespace-node'
    case 98899:                     // 'attribute' 'node'
    case 98938:                     // 'element' 'node'
    case 99002:                     // 'namespace' 'node'
    case 99034:                     // 'processing-instruction' 'node'
    case 99411:                     // 'attribute' 'nodes'
    case 99450:                     // 'element' 'nodes'
    case 99514:                     // 'namespace' 'nodes'
    case 99546:                     // 'processing-instruction' 'nodes'
    case 100435:                    // 'attribute' 'object'
    case 100474:                    // 'element' 'object'
    case 100538:                    // 'namespace' 'object'
    case 100570:                    // 'processing-instruction' 'object'
    case 102995:                    // 'attribute' 'option'
    case 103034:                    // 'element' 'option'
    case 103098:                    // 'namespace' 'option'
    case 103130:                    // 'processing-instruction' 'option'
    case 104531:                    // 'attribute' 'ordered'
    case 104570:                    // 'element' 'ordered'
    case 104634:                    // 'namespace' 'ordered'
    case 104666:                    // 'processing-instruction' 'ordered'
    case 105043:                    // 'attribute' 'ordering'
    case 105082:                    // 'element' 'ordering'
    case 105146:                    // 'namespace' 'ordering'
    case 105178:                    // 'processing-instruction' 'ordering'
    case 106579:                    // 'attribute' 'parent'
    case 106618:                    // 'element' 'parent'
    case 106682:                    // 'namespace' 'parent'
    case 106714:                    // 'processing-instruction' 'parent'
    case 109651:                    // 'attribute' 'preceding'
    case 109690:                    // 'element' 'preceding'
    case 109754:                    // 'namespace' 'preceding'
    case 109786:                    // 'processing-instruction' 'preceding'
    case 110163:                    // 'attribute' 'preceding-sibling'
    case 110202:                    // 'element' 'preceding-sibling'
    case 110266:                    // 'namespace' 'preceding-sibling'
    case 110298:                    // 'processing-instruction' 'preceding-sibling'
    case 111699:                    // 'attribute' 'processing-instruction'
    case 111738:                    // 'element' 'processing-instruction'
    case 111802:                    // 'namespace' 'processing-instruction'
    case 111834:                    // 'processing-instruction' 'processing-instruction'
    case 112723:                    // 'attribute' 'rename'
    case 112762:                    // 'element' 'rename'
    case 112826:                    // 'namespace' 'rename'
    case 112858:                    // 'processing-instruction' 'rename'
    case 113235:                    // 'attribute' 'replace'
    case 113274:                    // 'element' 'replace'
    case 113338:                    // 'namespace' 'replace'
    case 113370:                    // 'processing-instruction' 'replace'
    case 114259:                    // 'attribute' 'returning'
    case 114298:                    // 'element' 'returning'
    case 114362:                    // 'namespace' 'returning'
    case 114394:                    // 'processing-instruction' 'returning'
    case 114771:                    // 'attribute' 'revalidation'
    case 114810:                    // 'element' 'revalidation'
    case 114874:                    // 'namespace' 'revalidation'
    case 114906:                    // 'processing-instruction' 'revalidation'
    case 116307:                    // 'attribute' 'schema'
    case 116346:                    // 'element' 'schema'
    case 116410:                    // 'namespace' 'schema'
    case 116442:                    // 'processing-instruction' 'schema'
    case 116819:                    // 'attribute' 'schema-attribute'
    case 116858:                    // 'element' 'schema-attribute'
    case 116922:                    // 'namespace' 'schema-attribute'
    case 116954:                    // 'processing-instruction' 'schema-attribute'
    case 117331:                    // 'attribute' 'schema-element'
    case 117370:                    // 'element' 'schema-element'
    case 117434:                    // 'namespace' 'schema-element'
    case 117466:                    // 'processing-instruction' 'schema-element'
    case 117843:                    // 'attribute' 'score'
    case 117882:                    // 'element' 'score'
    case 117946:                    // 'namespace' 'score'
    case 117978:                    // 'processing-instruction' 'score'
    case 118355:                    // 'attribute' 'self'
    case 118394:                    // 'element' 'self'
    case 118458:                    // 'namespace' 'self'
    case 118490:                    // 'processing-instruction' 'self'
    case 120915:                    // 'attribute' 'sliding'
    case 120954:                    // 'element' 'sliding'
    case 121018:                    // 'namespace' 'sliding'
    case 121050:                    // 'processing-instruction' 'sliding'
    case 121427:                    // 'attribute' 'some'
    case 121466:                    // 'element' 'some'
    case 121530:                    // 'namespace' 'some'
    case 121562:                    // 'processing-instruction' 'some'
    case 123987:                    // 'attribute' 'strict'
    case 124026:                    // 'element' 'strict'
    case 124090:                    // 'namespace' 'strict'
    case 124122:                    // 'processing-instruction' 'strict'
    case 125011:                    // 'attribute' 'structured-item'
    case 125050:                    // 'element' 'structured-item'
    case 125523:                    // 'attribute' 'switch'
    case 125562:                    // 'element' 'switch'
    case 125626:                    // 'namespace' 'switch'
    case 125658:                    // 'processing-instruction' 'switch'
    case 126035:                    // 'attribute' 'text'
    case 126074:                    // 'element' 'text'
    case 126138:                    // 'namespace' 'text'
    case 126170:                    // 'processing-instruction' 'text'
    case 129107:                    // 'attribute' 'try'
    case 129146:                    // 'element' 'try'
    case 129210:                    // 'namespace' 'try'
    case 129242:                    // 'processing-instruction' 'try'
    case 129619:                    // 'attribute' 'tumbling'
    case 129658:                    // 'element' 'tumbling'
    case 129722:                    // 'namespace' 'tumbling'
    case 129754:                    // 'processing-instruction' 'tumbling'
    case 130131:                    // 'attribute' 'type'
    case 130170:                    // 'element' 'type'
    case 130234:                    // 'namespace' 'type'
    case 130266:                    // 'processing-instruction' 'type'
    case 130643:                    // 'attribute' 'typeswitch'
    case 130682:                    // 'element' 'typeswitch'
    case 130746:                    // 'namespace' 'typeswitch'
    case 130778:                    // 'processing-instruction' 'typeswitch'
    case 132179:                    // 'attribute' 'unordered'
    case 132218:                    // 'element' 'unordered'
    case 132282:                    // 'namespace' 'unordered'
    case 132314:                    // 'processing-instruction' 'unordered'
    case 132691:                    // 'attribute' 'updating'
    case 132730:                    // 'element' 'updating'
    case 132794:                    // 'namespace' 'updating'
    case 132826:                    // 'processing-instruction' 'updating'
    case 134227:                    // 'attribute' 'validate'
    case 134266:                    // 'element' 'validate'
    case 134330:                    // 'namespace' 'validate'
    case 134362:                    // 'processing-instruction' 'validate'
    case 134739:                    // 'attribute' 'value'
    case 134778:                    // 'element' 'value'
    case 134842:                    // 'namespace' 'value'
    case 134874:                    // 'processing-instruction' 'value'
    case 135251:                    // 'attribute' 'variable'
    case 135290:                    // 'element' 'variable'
    case 135354:                    // 'namespace' 'variable'
    case 135386:                    // 'processing-instruction' 'variable'
    case 135763:                    // 'attribute' 'version'
    case 135802:                    // 'element' 'version'
    case 135866:                    // 'namespace' 'version'
    case 135898:                    // 'processing-instruction' 'version'
    case 137811:                    // 'attribute' 'while'
    case 137850:                    // 'element' 'while'
    case 137914:                    // 'namespace' 'while'
    case 137946:                    // 'processing-instruction' 'while'
    case 141395:                    // 'attribute' 'xquery'
    case 141434:                    // 'element' 'xquery'
    case 141498:                    // 'namespace' 'xquery'
    case 141530:                    // 'processing-instruction' 'xquery'
    case 142419:                    // 'attribute' '{'
    case 142433:                    // 'comment' '{'
    case 142456:                    // 'document' '{'
    case 142458:                    // 'element' '{'
    case 142516:                    // 'map' '{'
    case 142522:                    // 'namespace' '{'
    case 142540:                    // 'ordered' '{'
    case 142554:                    // 'processing-instruction' '{'
    case 142582:                    // 'text' '{'
    case 142594:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 208:                       // 'parent'
    case 214:                       // 'preceding'
    case 215:                       // 'preceding-sibling'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26186:                     // 'ancestor' '::'
    case 26187:                     // 'ancestor-or-self' '::'
    case 26320:                     // 'parent' '::'
    case 26326:                     // 'preceding' '::'
    case 26327:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(238);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 208:                       // 'parent'
    case 214:                       // 'preceding'
    case 215:                       // 'preceding-sibling'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26186:                     // 'ancestor' '::'
    case 26187:                     // 'ancestor-or-self' '::'
    case 26320:                     // 'parent' '::'
    case 26326:                     // 'preceding' '::'
    case 26327:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(238);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 136:                       // 'following'
    case 137:                       // 'following-sibling'
    case 231:                       // 'self'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26195:                     // 'attribute' '::'
    case 26206:                     // 'child' '::'
    case 26224:                     // 'descendant' '::'
    case 26225:                     // 'descendant-or-self' '::'
    case 26248:                     // 'following' '::'
    case 26249:                     // 'following-sibling' '::'
    case 26343:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 136:                       // 'following'
    case 137:                       // 'following-sibling'
    case 231:                       // 'self'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26195:                     // 'attribute' '::'
    case 26206:                     // 'child' '::'
    case 26224:                     // 'descendant' '::'
    case 26225:                     // 'descendant-or-self' '::'
    case 26248:                     // 'following' '::'
    case 26249:                     // 'following-sibling' '::'
    case 26343:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 94:                        // 'child'
      consume(94);                  // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 112:                       // 'descendant'
      consume(112);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 83:                        // 'attribute'
      consume(83);                  // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 231:                       // 'self'
      consume(231);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 113:                       // 'descendant-or-self'
      consume(113);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 137:                       // 'following-sibling'
      consume(137);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(136);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 112:                       // 'descendant'
      consumeT(112);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 83:                        // 'attribute'
      consumeT(83);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 231:                       // 'self'
      consumeT(231);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 113:                       // 'descendant-or-self'
      consumeT(113);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 137:                       // 'following-sibling'
      consumeT(137);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(136);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 208:                       // 'parent'
      consume(208);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 74:                        // 'ancestor'
      consume(74);                  // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 215:                       // 'preceding-sibling'
      consume(215);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 214:                       // 'preceding'
      consume(214);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(75);                  // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 208:                       // 'parent'
      consumeT(208);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 74:                        // 'ancestor'
      consumeT(74);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 215:                       // 'preceding-sibling'
      consumeT(215);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 214:                       // 'preceding'
      consumeT(214);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(75);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 187:                       // 'namespace-node'
    case 193:                       // 'node'
    case 218:                       // 'processing-instruction'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 246:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17491:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17529:                     // 'document-node' '('
    case 17530:                     // 'element' '('
    case 17595:                     // 'namespace-node' '('
    case 17601:                     // 'node' '('
    case 17626:                     // 'processing-instruction' '('
    case 17636:                     // 'schema-attribute' '('
    case 17637:                     // 'schema-element' '('
    case 17654:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 187:                       // 'namespace-node'
    case 193:                       // 'node'
    case 218:                       // 'processing-instruction'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 246:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17491:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17529:                     // 'document-node' '('
    case 17530:                     // 'element' '('
    case 17595:                     // 'namespace-node' '('
    case 17601:                     // 'node' '('
    case 17626:                     // 'processing-instruction' '('
    case 17636:                     // 'schema-attribute' '('
    case 17637:                     // 'schema-element' '('
    case 17654:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(238);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(238);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(70);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(204);                   // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(204);                  // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(284);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(258);                   // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(258);                  // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(284);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(265);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 21057:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(265);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 21057:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(54);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consume(21);                // S
      }
      lookahead1(8);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(54);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consumeT(21);               // S
      }
      lookahead1(8);                // '>'
      consumeT(62);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consume(21);                  // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        lookahead1(7);              // '='
        consume(60);                // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consumeT(21);                 // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        lookahead1(7);              // '='
        consumeT(60);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(55);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(55);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(43);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(66);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 120:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 122:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 186:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 246:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 120:                       // 'document'
      try_CompDocConstructor();
      break;
    case 122:                       // 'element'
      try_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 186:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 246:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(122);                   // 'element'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consume(278);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(284);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(284);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(122);                  // 'element'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consumeT(278);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(284);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(284);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(186);                   // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consume(278);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(284);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(186);                  // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consumeT(278);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(284);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(284);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 146:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17554:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 146:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17554:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(146);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      consume(80);                  // 'as'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(146);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      consumeT(80);                 // 'as'
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(80);                    // 'as'
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(80);                   // 'as'
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 125:                       // 'empty-sequence'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17533:                     // 'empty-sequence' '('
      consume(125);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(235);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 125:                       // 'empty-sequence'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17533:                     // 'empty-sequence' '('
      consumeT(125);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(235);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 79:                        // 'array'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 146:                       // 'function'
    case 166:                       // 'item'
    case 168:                       // 'json-item'
    case 180:                       // 'map'
    case 187:                       // 'namespace-node'
    case 193:                       // 'node'
    case 196:                       // 'object'
    case 218:                       // 'processing-instruction'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 244:                       // 'structured-item'
    case 246:                       // 'text'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17491:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17529:                     // 'document-node' '('
    case 17530:                     // 'element' '('
    case 17595:                     // 'namespace-node' '('
    case 17601:                     // 'node' '('
    case 17626:                     // 'processing-instruction' '('
    case 17636:                     // 'schema-attribute' '('
    case 17637:                     // 'schema-element' '('
    case 17654:                     // 'text' '('
      parse_KindTest();
      break;
    case 17574:                     // 'item' '('
      consume(166);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17554:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17487:                     // 'array' '('
    case 17576:                     // 'json-item' '('
    case 17604:                     // 'object' '('
      parse_JSONTest();
      break;
    case 17588:                     // 'map' '('
      parse_MapType();
      break;
    case 17652:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 79:                        // 'array'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 146:                       // 'function'
    case 166:                       // 'item'
    case 168:                       // 'json-item'
    case 180:                       // 'map'
    case 187:                       // 'namespace-node'
    case 193:                       // 'node'
    case 196:                       // 'object'
    case 218:                       // 'processing-instruction'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 244:                       // 'structured-item'
    case 246:                       // 'text'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17491:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17529:                     // 'document-node' '('
    case 17530:                     // 'element' '('
    case 17595:                     // 'namespace-node' '('
    case 17601:                     // 'node' '('
    case 17626:                     // 'processing-instruction' '('
    case 17636:                     // 'schema-attribute' '('
    case 17637:                     // 'schema-element' '('
    case 17654:                     // 'text' '('
      try_KindTest();
      break;
    case 17574:                     // 'item' '('
      consumeT(166);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17554:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17487:                     // 'array' '('
    case 17576:                     // 'json-item' '('
    case 17604:                     // 'object' '('
      try_JSONTest();
      break;
    case 17588:                     // 'map' '('
      try_MapType();
      break;
    case 17652:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(180);                   // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consume(41);                  // ','
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(180);                  // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consumeT(41);                 // ','
      lookahead1W(263);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(180);                   // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(284);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(180);                  // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_MapConstructorEntry();
      }
    }
    consumeT(284);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 168:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 196:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 168:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 196:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(244);                   // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(244);                  // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(168);                   // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(168);                  // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(196);                   // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(196);                  // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(79);                    // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(79);                   // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 121:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 122:                       // 'element'
      parse_ElementTest();
      break;
    case 83:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 229:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 228:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 218:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 246:                       // 'text'
      parse_TextTest();
      break;
    case 187:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 121:                       // 'document-node'
      try_DocumentTest();
      break;
    case 122:                       // 'element'
      try_ElementTest();
      break;
    case 83:                        // 'attribute'
      try_AttributeTest();
      break;
    case 229:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 228:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 218:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 246:                       // 'text'
      try_TextTest();
      break;
    case 187:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(193);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(193);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(121);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(121);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(246);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(246);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(187);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(187);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(218);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(218);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(83);                    // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(83);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(228);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(228);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(122);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(122);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(229);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(229);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 146:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 146:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(146);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(146);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(146);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(263);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(80);                    // 'as'
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(146);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(263);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(80);                   // 'as'
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(109);                   // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    consume(224);                   // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 242:                       // 'strict'
      consume(242);                 // 'strict'
      break;
    case 172:                       // 'lax'
      consume(172);                 // 'lax'
      break;
    default:
      consume(235);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 71:                        // 'after'
      consume(71);                  // 'after'
      break;
    case 85:                        // 'before'
      consume(85);                  // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        consume(80);                // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 135:                   // 'first'
          consume(135);             // 'first'
          break;
        default:
          consume(171);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(164);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 71:                        // 'after'
      consumeT(71);                 // 'after'
      break;
    case 85:                        // 'before'
      consumeT(85);                 // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        consumeT(80);               // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 135:                   // 'first'
          consumeT(135);            // 'first'
          break;
        default:
          consumeT(171);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(164);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(160);                   // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 193:                       // 'node'
      consume(193);                 // 'node'
      break;
    default:
      consume(194);                 // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(160);                  // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 193:                       // 'node'
      consumeT(193);                // 'node'
      break;
    default:
      consumeT(194);                // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(111);                   // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 193:                       // 'node'
      consume(193);                 // 'node'
      break;
    default:
      consume(194);                 // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(111);                  // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 193:                       // 'node'
      consumeT(193);                // 'node'
      break;
    default:
      consumeT(194);                // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(221);                   // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 263)                  // 'value'
    {
      consume(263);                 // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(198);                 // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(193);                   // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(272);                   // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(221);                  // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 263)                  // 'value'
    {
      consumeT(263);                // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(198);                // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(193);                  // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(272);                  // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(220);                   // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(193);                   // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(80);                    // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(220);                  // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(193);                  // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(80);                   // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(104);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_TransformSpec();
    }
    consume(183);                   // 'modify'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(222);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(104);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_TransformSpec();
    }
    consumeT(183);                  // 'modify'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(222);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TransformSpec()
  {
    eventHandler.startNonterminal("TransformSpec", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformSpec", e0);
  }

  function try_TransformSpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 204                 // 'ordered'
       && lk != 225                 // 'same'
       && lk != 271                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 122450)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 204                 // 'ordered'
       && lk != 225                 // 'same'
       && lk != 271                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 122450)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(266);                   // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(278);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(266);                  // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(278);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(284);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 145)                // 'ftor'
      {
        break;
      }
      consume(145);                 // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 145)                // 'ftor'
      {
        break;
      }
      consumeT(145);                // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 143)                // 'ftand'
      {
        break;
      }
      consume(143);                 // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 143)                // 'ftand'
      {
        break;
      }
      consumeT(143);                // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 195)                // 'not'
      {
        break;
      }
      consume(195);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(155);                 // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 195)                // 'not'
      {
        break;
      }
      consumeT(195);                // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(155);                // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 144)                  // 'ftnot'
    {
      consume(144);                 // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 144)                  // 'ftnot'
    {
      consumeT(144);                // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 261)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 266)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 261)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 266)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 197)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 197)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 212)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 212)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(278);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(284);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(278);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(284);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(278);                   // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 284)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(284);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(278);                  // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 284)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(284);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 77:                        // 'any'
      consume(77);                  // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 274)                // 'word'
      {
        consume(274);               // 'word'
      }
      break;
    case 72:                        // 'all'
      consume(72);                  // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 275)                // 'words'
      {
        consume(275);               // 'words'
      }
      break;
    default:
      consume(212);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 77:                        // 'any'
      consumeT(77);                 // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 274)                // 'word'
      {
        consumeT(274);              // 'word'
      }
      break;
    case 72:                        // 'all'
      consumeT(72);                 // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 275)                // 'words'
      {
        consumeT(275);              // 'words'
      }
      break;
    default:
      consumeT(212);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(197);                   // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(249);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(197);                  // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(249);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      consume(131);                 // 'exactly'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 82:                        // 'at'
      consume(82);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 174:                     // 'least'
        consume(174);               // 'least'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(185);               // 'most'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(141);                 // 'from'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(250);                 // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      consumeT(131);                // 'exactly'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 82:                        // 'at'
      consumeT(82);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 174:                     // 'least'
        consumeT(174);              // 'least'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(185);              // 'most'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(141);                // 'from'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(250);                // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 204:                       // 'ordered'
      parse_FTOrder();
      break;
    case 271:                       // 'window'
      parse_FTWindow();
      break;
    case 118:                       // 'distance'
      parse_FTDistance();
      break;
    case 116:                       // 'different'
    case 225:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 204:                       // 'ordered'
      try_FTOrder();
      break;
    case 271:                       // 'window'
      try_FTWindow();
      break;
    case 118:                       // 'distance'
      try_FTDistance();
      break;
    case 116:                       // 'different'
    case 225:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(204);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(204);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(271);                   // 'window'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(271);                  // 'window'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(118);                   // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(118);                  // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 275:                       // 'words'
      consume(275);                 // 'words'
      break;
    case 234:                       // 'sentences'
      consume(234);                 // 'sentences'
      break;
    default:
      consume(207);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 275:                       // 'words'
      consumeT(275);                // 'words'
      break;
    case 234:                       // 'sentences'
      consumeT(234);                // 'sentences'
      break;
    default:
      consumeT(207);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 225:                       // 'same'
      consume(225);                 // 'same'
      break;
    default:
      consume(116);                 // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 225:                       // 'same'
      consumeT(225);                // 'same'
      break;
    default:
      consumeT(116);                // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 233:                       // 'sentence'
      consume(233);                 // 'sentence'
      break;
    default:
      consume(206);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 233:                       // 'sentence'
      consumeT(233);                // 'sentence'
      break;
    default:
      consumeT(206);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      consume(82);                  // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 239:                     // 'start'
        consume(239);               // 'start'
        break;
      default:
        consume(127);               // 'end'
      }
      break;
    default:
      consume(128);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(101);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      consumeT(82);                 // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 239:                     // 'start'
        consumeT(239);              // 'start'
        break;
      default:
        consumeT(127);              // 'end'
      }
      break;
    default:
      consumeT(128);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(101);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(261);                 // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 261)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(261);                // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 261)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 190:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 170:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 270:                       // 'wildcards'
    case 138430:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 248:                       // 'thesaurus'
    case 127166:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 240:                       // 'stemming'
    case 123070:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 241:                       // 'stop'
    case 123582:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 201:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 190:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 170:                       // 'language'
      try_FTLanguageOption();
      break;
    case 270:                       // 'wildcards'
    case 138430:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 248:                       // 'thesaurus'
    case 127166:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 240:                       // 'stemming'
    case 123070:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 241:                       // 'stop'
    case 123582:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 201:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 89:                        // 'case'
      consume(89);                  // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 159:                     // 'insensitive'
        consume(159);               // 'insensitive'
        break;
      default:
        consume(232);               // 'sensitive'
      }
      break;
    case 178:                       // 'lowercase'
      consume(178);                 // 'lowercase'
      break;
    default:
      consume(260);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 89:                        // 'case'
      consumeT(89);                 // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 159:                     // 'insensitive'
        consumeT(159);              // 'insensitive'
        break;
      default:
        consumeT(232);              // 'sensitive'
      }
      break;
    case 178:                       // 'lowercase'
      consumeT(178);                // 'lowercase'
      break;
    default:
      consumeT(260);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(115);                   // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 159:                       // 'insensitive'
      consume(159);                 // 'insensitive'
      break;
    default:
      consume(232);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(115);                  // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 159:                       // 'insensitive'
      consumeT(159);                // 'insensitive'
      break;
    default:
      consumeT(232);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 240:                       // 'stemming'
      consume(240);                 // 'stemming'
      break;
    default:
      consume(190);                 // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consume(240);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 240:                       // 'stemming'
      consumeT(240);                // 'stemming'
      break;
    default:
      consumeT(190);                // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consumeT(240);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 248:                       // 'thesaurus'
      consume(248);                 // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 110:                     // 'default'
        consume(110);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(110);             // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consume(41);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(190);                 // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consume(248);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 248:                       // 'thesaurus'
      consumeT(248);                // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        try_FTThesaurusID();
        break;
      case 110:                     // 'default'
        consumeT(110);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(110);            // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consumeT(41);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(190);                // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consumeT(248);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(82);                    // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 219)                  // 'relationship'
    {
      consume(219);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 141                   // 'from'
     || lk == 89170                 // 'at' 'least'
     || lk == 94802)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consume(176);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(82);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 219)                  // 'relationship'
    {
      consumeT(219);                // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 141                   // 'from'
     || lk == 89170                 // 'at' 'least'
     || lk == 94802)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consumeT(176);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      consume(131);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 82:                        // 'at'
      consume(82);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 174:                     // 'least'
        consume(174);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(185);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(141);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consume(250);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      consumeT(131);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 82:                        // 'at'
      consumeT(82);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 174:                     // 'least'
        consumeT(174);              // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(185);              // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(141);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consumeT(250);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 241:                       // 'stop'
      consume(241);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(275);                 // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        consume(110);               // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 132             // 'except'
           && l1 != 256)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 132             // 'except'
           && l1 != 256)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(190);                 // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consume(241);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(275);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 241:                       // 'stop'
      consumeT(241);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(275);                // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        consumeT(110);              // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 132             // 'except'
           && l1 != 256)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 132             // 'except'
           && l1 != 256)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(190);                // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consumeT(241);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(275);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      consume(82);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(34);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      consumeT(82);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 256:                       // 'union'
      consume(256);                 // 'union'
      break;
    default:
      consume(132);                 // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 256:                       // 'union'
      consumeT(256);                // 'union'
      break;
    default:
      consumeT(132);                // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(170);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(170);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 270:                       // 'wildcards'
      consume(270);                 // 'wildcards'
      break;
    default:
      consume(190);                 // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consume(270);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 270:                       // 'wildcards'
      consumeT(270);                // 'wildcards'
      break;
    default:
      consumeT(190);                // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consumeT(270);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(201);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(201);                  // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(273);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(101);                   // 'content'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(273);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(101);                  // 'content'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(96);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(80);                    // 'as'
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 95)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(80);                    // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 65)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(95);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(156);                   // 'index'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    consume(199);                   // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    consume(194);                   // 'nodes'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(88);                    // 'by'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(162);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(98);                    // 'constraint'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 199:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(199);                   // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(96);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 193:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(93);                    // 'check'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(193);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(93);                    // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    consume(257);                   // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(169);                   // 'key'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(139);                   // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(193);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(93);                    // 'check'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(140);                   // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(169);                   // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(141);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(250);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(96);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(193);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(169);                   // 'key'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        consumeT(24);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(50);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      consumeT(22);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 83:                        // 'attribute'
      consume(83);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 121:                       // 'document-node'
      consume(121);                 // 'document-node'
      break;
    case 122:                       // 'element'
      consume(122);                 // 'element'
      break;
    case 125:                       // 'empty-sequence'
      consume(125);                 // 'empty-sequence'
      break;
    case 146:                       // 'function'
      consume(146);                 // 'function'
      break;
    case 153:                       // 'if'
      consume(153);                 // 'if'
      break;
    case 166:                       // 'item'
      consume(166);                 // 'item'
      break;
    case 187:                       // 'namespace-node'
      consume(187);                 // 'namespace-node'
      break;
    case 193:                       // 'node'
      consume(193);                 // 'node'
      break;
    case 218:                       // 'processing-instruction'
      consume(218);                 // 'processing-instruction'
      break;
    case 228:                       // 'schema-attribute'
      consume(228);                 // 'schema-attribute'
      break;
    case 229:                       // 'schema-element'
      consume(229);                 // 'schema-element'
      break;
    case 245:                       // 'switch'
      consume(245);                 // 'switch'
      break;
    case 246:                       // 'text'
      consume(246);                 // 'text'
      break;
    case 255:                       // 'typeswitch'
      consume(255);                 // 'typeswitch'
      break;
    case 79:                        // 'array'
      consume(79);                  // 'array'
      break;
    case 168:                       // 'json-item'
      consume(168);                 // 'json-item'
      break;
    case 244:                       // 'structured-item'
      consume(244);                 // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 83:                        // 'attribute'
      consumeT(83);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 121:                       // 'document-node'
      consumeT(121);                // 'document-node'
      break;
    case 122:                       // 'element'
      consumeT(122);                // 'element'
      break;
    case 125:                       // 'empty-sequence'
      consumeT(125);                // 'empty-sequence'
      break;
    case 146:                       // 'function'
      consumeT(146);                // 'function'
      break;
    case 153:                       // 'if'
      consumeT(153);                // 'if'
      break;
    case 166:                       // 'item'
      consumeT(166);                // 'item'
      break;
    case 187:                       // 'namespace-node'
      consumeT(187);                // 'namespace-node'
      break;
    case 193:                       // 'node'
      consumeT(193);                // 'node'
      break;
    case 218:                       // 'processing-instruction'
      consumeT(218);                // 'processing-instruction'
      break;
    case 228:                       // 'schema-attribute'
      consumeT(228);                // 'schema-attribute'
      break;
    case 229:                       // 'schema-element'
      consumeT(229);                // 'schema-element'
      break;
    case 245:                       // 'switch'
      consumeT(245);                // 'switch'
      break;
    case 246:                       // 'text'
      consumeT(246);                // 'text'
      break;
    case 255:                       // 'typeswitch'
      consumeT(255);                // 'typeswitch'
      break;
    case 79:                        // 'array'
      consumeT(79);                 // 'array'
      break;
    case 168:                       // 'json-item'
      consumeT(168);                // 'json-item'
      break;
    case 244:                       // 'structured-item'
      consumeT(244);                // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 71:                        // 'after'
      consume(71);                  // 'after'
      break;
    case 74:                        // 'ancestor'
      consume(74);                  // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      consume(75);                  // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      consume(76);                  // 'and'
      break;
    case 80:                        // 'as'
      consume(80);                  // 'as'
      break;
    case 81:                        // 'ascending'
      consume(81);                  // 'ascending'
      break;
    case 85:                        // 'before'
      consume(85);                  // 'before'
      break;
    case 89:                        // 'case'
      consume(89);                  // 'case'
      break;
    case 90:                        // 'cast'
      consume(90);                  // 'cast'
      break;
    case 91:                        // 'castable'
      consume(91);                  // 'castable'
      break;
    case 94:                        // 'child'
      consume(94);                  // 'child'
      break;
    case 95:                        // 'collation'
      consume(95);                  // 'collation'
      break;
    case 104:                       // 'copy'
      consume(104);                 // 'copy'
      break;
    case 106:                       // 'count'
      consume(106);                 // 'count'
      break;
    case 109:                       // 'declare'
      consume(109);                 // 'declare'
      break;
    case 110:                       // 'default'
      consume(110);                 // 'default'
      break;
    case 111:                       // 'delete'
      consume(111);                 // 'delete'
      break;
    case 112:                       // 'descendant'
      consume(112);                 // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      consume(113);                 // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      consume(114);                 // 'descending'
      break;
    case 119:                       // 'div'
      consume(119);                 // 'div'
      break;
    case 120:                       // 'document'
      consume(120);                 // 'document'
      break;
    case 123:                       // 'else'
      consume(123);                 // 'else'
      break;
    case 124:                       // 'empty'
      consume(124);                 // 'empty'
      break;
    case 127:                       // 'end'
      consume(127);                 // 'end'
      break;
    case 129:                       // 'eq'
      consume(129);                 // 'eq'
      break;
    case 130:                       // 'every'
      consume(130);                 // 'every'
      break;
    case 132:                       // 'except'
      consume(132);                 // 'except'
      break;
    case 135:                       // 'first'
      consume(135);                 // 'first'
      break;
    case 136:                       // 'following'
      consume(136);                 // 'following'
      break;
    case 137:                       // 'following-sibling'
      consume(137);                 // 'following-sibling'
      break;
    case 138:                       // 'for'
      consume(138);                 // 'for'
      break;
    case 147:                       // 'ge'
      consume(147);                 // 'ge'
      break;
    case 149:                       // 'group'
      consume(149);                 // 'group'
      break;
    case 151:                       // 'gt'
      consume(151);                 // 'gt'
      break;
    case 152:                       // 'idiv'
      consume(152);                 // 'idiv'
      break;
    case 154:                       // 'import'
      consume(154);                 // 'import'
      break;
    case 160:                       // 'insert'
      consume(160);                 // 'insert'
      break;
    case 161:                       // 'instance'
      consume(161);                 // 'instance'
      break;
    case 163:                       // 'intersect'
      consume(163);                 // 'intersect'
      break;
    case 164:                       // 'into'
      consume(164);                 // 'into'
      break;
    case 165:                       // 'is'
      consume(165);                 // 'is'
      break;
    case 171:                       // 'last'
      consume(171);                 // 'last'
      break;
    case 173:                       // 'le'
      consume(173);                 // 'le'
      break;
    case 175:                       // 'let'
      consume(175);                 // 'let'
      break;
    case 179:                       // 'lt'
      consume(179);                 // 'lt'
      break;
    case 180:                       // 'map'
      consume(180);                 // 'map'
      break;
    case 182:                       // 'mod'
      consume(182);                 // 'mod'
      break;
    case 183:                       // 'modify'
      consume(183);                 // 'modify'
      break;
    case 184:                       // 'module'
      consume(184);                 // 'module'
      break;
    case 186:                       // 'namespace'
      consume(186);                 // 'namespace'
      break;
    case 188:                       // 'ne'
      consume(188);                 // 'ne'
      break;
    case 200:                       // 'only'
      consume(200);                 // 'only'
      break;
    case 202:                       // 'or'
      consume(202);                 // 'or'
      break;
    case 203:                       // 'order'
      consume(203);                 // 'order'
      break;
    case 204:                       // 'ordered'
      consume(204);                 // 'ordered'
      break;
    case 208:                       // 'parent'
      consume(208);                 // 'parent'
      break;
    case 214:                       // 'preceding'
      consume(214);                 // 'preceding'
      break;
    case 215:                       // 'preceding-sibling'
      consume(215);                 // 'preceding-sibling'
      break;
    case 220:                       // 'rename'
      consume(220);                 // 'rename'
      break;
    case 221:                       // 'replace'
      consume(221);                 // 'replace'
      break;
    case 222:                       // 'return'
      consume(222);                 // 'return'
      break;
    case 226:                       // 'satisfies'
      consume(226);                 // 'satisfies'
      break;
    case 231:                       // 'self'
      consume(231);                 // 'self'
      break;
    case 237:                       // 'some'
      consume(237);                 // 'some'
      break;
    case 238:                       // 'stable'
      consume(238);                 // 'stable'
      break;
    case 239:                       // 'start'
      consume(239);                 // 'start'
      break;
    case 250:                       // 'to'
      consume(250);                 // 'to'
      break;
    case 251:                       // 'treat'
      consume(251);                 // 'treat'
      break;
    case 252:                       // 'try'
      consume(252);                 // 'try'
      break;
    case 256:                       // 'union'
      consume(256);                 // 'union'
      break;
    case 258:                       // 'unordered'
      consume(258);                 // 'unordered'
      break;
    case 262:                       // 'validate'
      consume(262);                 // 'validate'
      break;
    case 268:                       // 'where'
      consume(268);                 // 'where'
      break;
    case 272:                       // 'with'
      consume(272);                 // 'with'
      break;
    case 276:                       // 'xquery'
      consume(276);                 // 'xquery'
      break;
    case 73:                        // 'allowing'
      consume(73);                  // 'allowing'
      break;
    case 82:                        // 'at'
      consume(82);                  // 'at'
      break;
    case 84:                        // 'base-uri'
      consume(84);                  // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      consume(86);                  // 'boundary-space'
      break;
    case 87:                        // 'break'
      consume(87);                  // 'break'
      break;
    case 92:                        // 'catch'
      consume(92);                  // 'catch'
      break;
    case 99:                        // 'construction'
      consume(99);                  // 'construction'
      break;
    case 102:                       // 'context'
      consume(102);                 // 'context'
      break;
    case 103:                       // 'continue'
      consume(103);                 // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      consume(105);                 // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      consume(107);                 // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      consume(126);                 // 'encoding'
      break;
    case 133:                       // 'exit'
      consume(133);                 // 'exit'
      break;
    case 134:                       // 'external'
      consume(134);                 // 'external'
      break;
    case 142:                       // 'ft-option'
      consume(142);                 // 'ft-option'
      break;
    case 155:                       // 'in'
      consume(155);                 // 'in'
      break;
    case 156:                       // 'index'
      consume(156);                 // 'index'
      break;
    case 162:                       // 'integrity'
      consume(162);                 // 'integrity'
      break;
    case 172:                       // 'lax'
      consume(172);                 // 'lax'
      break;
    case 194:                       // 'nodes'
      consume(194);                 // 'nodes'
      break;
    case 201:                       // 'option'
      consume(201);                 // 'option'
      break;
    case 205:                       // 'ordering'
      consume(205);                 // 'ordering'
      break;
    case 224:                       // 'revalidation'
      consume(224);                 // 'revalidation'
      break;
    case 227:                       // 'schema'
      consume(227);                 // 'schema'
      break;
    case 230:                       // 'score'
      consume(230);                 // 'score'
      break;
    case 236:                       // 'sliding'
      consume(236);                 // 'sliding'
      break;
    case 242:                       // 'strict'
      consume(242);                 // 'strict'
      break;
    case 253:                       // 'tumbling'
      consume(253);                 // 'tumbling'
      break;
    case 254:                       // 'type'
      consume(254);                 // 'type'
      break;
    case 259:                       // 'updating'
      consume(259);                 // 'updating'
      break;
    case 263:                       // 'value'
      consume(263);                 // 'value'
      break;
    case 264:                       // 'variable'
      consume(264);                 // 'variable'
      break;
    case 265:                       // 'version'
      consume(265);                 // 'version'
      break;
    case 269:                       // 'while'
      consume(269);                 // 'while'
      break;
    case 98:                        // 'constraint'
      consume(98);                  // 'constraint'
      break;
    case 177:                       // 'loop'
      consume(177);                 // 'loop'
      break;
    case 223:                       // 'returning'
      consume(223);                 // 'returning'
      break;
    case 78:                        // 'append'
      consume(78);                  // 'append'
      break;
    case 167:                       // 'json'
      consume(167);                 // 'json'
      break;
    default:
      consume(196);                 // 'object'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 71:                        // 'after'
      consumeT(71);                 // 'after'
      break;
    case 74:                        // 'ancestor'
      consumeT(74);                 // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      consumeT(75);                 // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      consumeT(76);                 // 'and'
      break;
    case 80:                        // 'as'
      consumeT(80);                 // 'as'
      break;
    case 81:                        // 'ascending'
      consumeT(81);                 // 'ascending'
      break;
    case 85:                        // 'before'
      consumeT(85);                 // 'before'
      break;
    case 89:                        // 'case'
      consumeT(89);                 // 'case'
      break;
    case 90:                        // 'cast'
      consumeT(90);                 // 'cast'
      break;
    case 91:                        // 'castable'
      consumeT(91);                 // 'castable'
      break;
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      break;
    case 95:                        // 'collation'
      consumeT(95);                 // 'collation'
      break;
    case 104:                       // 'copy'
      consumeT(104);                // 'copy'
      break;
    case 106:                       // 'count'
      consumeT(106);                // 'count'
      break;
    case 109:                       // 'declare'
      consumeT(109);                // 'declare'
      break;
    case 110:                       // 'default'
      consumeT(110);                // 'default'
      break;
    case 111:                       // 'delete'
      consumeT(111);                // 'delete'
      break;
    case 112:                       // 'descendant'
      consumeT(112);                // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      consumeT(113);                // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      consumeT(114);                // 'descending'
      break;
    case 119:                       // 'div'
      consumeT(119);                // 'div'
      break;
    case 120:                       // 'document'
      consumeT(120);                // 'document'
      break;
    case 123:                       // 'else'
      consumeT(123);                // 'else'
      break;
    case 124:                       // 'empty'
      consumeT(124);                // 'empty'
      break;
    case 127:                       // 'end'
      consumeT(127);                // 'end'
      break;
    case 129:                       // 'eq'
      consumeT(129);                // 'eq'
      break;
    case 130:                       // 'every'
      consumeT(130);                // 'every'
      break;
    case 132:                       // 'except'
      consumeT(132);                // 'except'
      break;
    case 135:                       // 'first'
      consumeT(135);                // 'first'
      break;
    case 136:                       // 'following'
      consumeT(136);                // 'following'
      break;
    case 137:                       // 'following-sibling'
      consumeT(137);                // 'following-sibling'
      break;
    case 138:                       // 'for'
      consumeT(138);                // 'for'
      break;
    case 147:                       // 'ge'
      consumeT(147);                // 'ge'
      break;
    case 149:                       // 'group'
      consumeT(149);                // 'group'
      break;
    case 151:                       // 'gt'
      consumeT(151);                // 'gt'
      break;
    case 152:                       // 'idiv'
      consumeT(152);                // 'idiv'
      break;
    case 154:                       // 'import'
      consumeT(154);                // 'import'
      break;
    case 160:                       // 'insert'
      consumeT(160);                // 'insert'
      break;
    case 161:                       // 'instance'
      consumeT(161);                // 'instance'
      break;
    case 163:                       // 'intersect'
      consumeT(163);                // 'intersect'
      break;
    case 164:                       // 'into'
      consumeT(164);                // 'into'
      break;
    case 165:                       // 'is'
      consumeT(165);                // 'is'
      break;
    case 171:                       // 'last'
      consumeT(171);                // 'last'
      break;
    case 173:                       // 'le'
      consumeT(173);                // 'le'
      break;
    case 175:                       // 'let'
      consumeT(175);                // 'let'
      break;
    case 179:                       // 'lt'
      consumeT(179);                // 'lt'
      break;
    case 180:                       // 'map'
      consumeT(180);                // 'map'
      break;
    case 182:                       // 'mod'
      consumeT(182);                // 'mod'
      break;
    case 183:                       // 'modify'
      consumeT(183);                // 'modify'
      break;
    case 184:                       // 'module'
      consumeT(184);                // 'module'
      break;
    case 186:                       // 'namespace'
      consumeT(186);                // 'namespace'
      break;
    case 188:                       // 'ne'
      consumeT(188);                // 'ne'
      break;
    case 200:                       // 'only'
      consumeT(200);                // 'only'
      break;
    case 202:                       // 'or'
      consumeT(202);                // 'or'
      break;
    case 203:                       // 'order'
      consumeT(203);                // 'order'
      break;
    case 204:                       // 'ordered'
      consumeT(204);                // 'ordered'
      break;
    case 208:                       // 'parent'
      consumeT(208);                // 'parent'
      break;
    case 214:                       // 'preceding'
      consumeT(214);                // 'preceding'
      break;
    case 215:                       // 'preceding-sibling'
      consumeT(215);                // 'preceding-sibling'
      break;
    case 220:                       // 'rename'
      consumeT(220);                // 'rename'
      break;
    case 221:                       // 'replace'
      consumeT(221);                // 'replace'
      break;
    case 222:                       // 'return'
      consumeT(222);                // 'return'
      break;
    case 226:                       // 'satisfies'
      consumeT(226);                // 'satisfies'
      break;
    case 231:                       // 'self'
      consumeT(231);                // 'self'
      break;
    case 237:                       // 'some'
      consumeT(237);                // 'some'
      break;
    case 238:                       // 'stable'
      consumeT(238);                // 'stable'
      break;
    case 239:                       // 'start'
      consumeT(239);                // 'start'
      break;
    case 250:                       // 'to'
      consumeT(250);                // 'to'
      break;
    case 251:                       // 'treat'
      consumeT(251);                // 'treat'
      break;
    case 252:                       // 'try'
      consumeT(252);                // 'try'
      break;
    case 256:                       // 'union'
      consumeT(256);                // 'union'
      break;
    case 258:                       // 'unordered'
      consumeT(258);                // 'unordered'
      break;
    case 262:                       // 'validate'
      consumeT(262);                // 'validate'
      break;
    case 268:                       // 'where'
      consumeT(268);                // 'where'
      break;
    case 272:                       // 'with'
      consumeT(272);                // 'with'
      break;
    case 276:                       // 'xquery'
      consumeT(276);                // 'xquery'
      break;
    case 73:                        // 'allowing'
      consumeT(73);                 // 'allowing'
      break;
    case 82:                        // 'at'
      consumeT(82);                 // 'at'
      break;
    case 84:                        // 'base-uri'
      consumeT(84);                 // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      consumeT(86);                 // 'boundary-space'
      break;
    case 87:                        // 'break'
      consumeT(87);                 // 'break'
      break;
    case 92:                        // 'catch'
      consumeT(92);                 // 'catch'
      break;
    case 99:                        // 'construction'
      consumeT(99);                 // 'construction'
      break;
    case 102:                       // 'context'
      consumeT(102);                // 'context'
      break;
    case 103:                       // 'continue'
      consumeT(103);                // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      consumeT(105);                // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      consumeT(107);                // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      consumeT(126);                // 'encoding'
      break;
    case 133:                       // 'exit'
      consumeT(133);                // 'exit'
      break;
    case 134:                       // 'external'
      consumeT(134);                // 'external'
      break;
    case 142:                       // 'ft-option'
      consumeT(142);                // 'ft-option'
      break;
    case 155:                       // 'in'
      consumeT(155);                // 'in'
      break;
    case 156:                       // 'index'
      consumeT(156);                // 'index'
      break;
    case 162:                       // 'integrity'
      consumeT(162);                // 'integrity'
      break;
    case 172:                       // 'lax'
      consumeT(172);                // 'lax'
      break;
    case 194:                       // 'nodes'
      consumeT(194);                // 'nodes'
      break;
    case 201:                       // 'option'
      consumeT(201);                // 'option'
      break;
    case 205:                       // 'ordering'
      consumeT(205);                // 'ordering'
      break;
    case 224:                       // 'revalidation'
      consumeT(224);                // 'revalidation'
      break;
    case 227:                       // 'schema'
      consumeT(227);                // 'schema'
      break;
    case 230:                       // 'score'
      consumeT(230);                // 'score'
      break;
    case 236:                       // 'sliding'
      consumeT(236);                // 'sliding'
      break;
    case 242:                       // 'strict'
      consumeT(242);                // 'strict'
      break;
    case 253:                       // 'tumbling'
      consumeT(253);                // 'tumbling'
      break;
    case 254:                       // 'type'
      consumeT(254);                // 'type'
      break;
    case 259:                       // 'updating'
      consumeT(259);                // 'updating'
      break;
    case 263:                       // 'value'
      consumeT(263);                // 'value'
      break;
    case 264:                       // 'variable'
      consumeT(264);                // 'variable'
      break;
    case 265:                       // 'version'
      consumeT(265);                // 'version'
      break;
    case 269:                       // 'while'
      consumeT(269);                // 'while'
      break;
    case 98:                        // 'constraint'
      consumeT(98);                 // 'constraint'
      break;
    case 177:                       // 'loop'
      consumeT(177);                // 'loop'
      break;
    case 223:                       // 'returning'
      consumeT(223);                // 'returning'
      break;
    case 78:                        // 'append'
      consumeT(78);                 // 'append'
      break;
    case 167:                       // 'json'
      consumeT(167);                // 'json'
      break;
    default:
      consumeT(196);                // 'object'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 71:                        // 'after'
      consume(71);                  // 'after'
      break;
    case 76:                        // 'and'
      consume(76);                  // 'and'
      break;
    case 80:                        // 'as'
      consume(80);                  // 'as'
      break;
    case 81:                        // 'ascending'
      consume(81);                  // 'ascending'
      break;
    case 85:                        // 'before'
      consume(85);                  // 'before'
      break;
    case 89:                        // 'case'
      consume(89);                  // 'case'
      break;
    case 90:                        // 'cast'
      consume(90);                  // 'cast'
      break;
    case 91:                        // 'castable'
      consume(91);                  // 'castable'
      break;
    case 95:                        // 'collation'
      consume(95);                  // 'collation'
      break;
    case 106:                       // 'count'
      consume(106);                 // 'count'
      break;
    case 110:                       // 'default'
      consume(110);                 // 'default'
      break;
    case 114:                       // 'descending'
      consume(114);                 // 'descending'
      break;
    case 119:                       // 'div'
      consume(119);                 // 'div'
      break;
    case 123:                       // 'else'
      consume(123);                 // 'else'
      break;
    case 124:                       // 'empty'
      consume(124);                 // 'empty'
      break;
    case 127:                       // 'end'
      consume(127);                 // 'end'
      break;
    case 129:                       // 'eq'
      consume(129);                 // 'eq'
      break;
    case 132:                       // 'except'
      consume(132);                 // 'except'
      break;
    case 138:                       // 'for'
      consume(138);                 // 'for'
      break;
    case 147:                       // 'ge'
      consume(147);                 // 'ge'
      break;
    case 149:                       // 'group'
      consume(149);                 // 'group'
      break;
    case 151:                       // 'gt'
      consume(151);                 // 'gt'
      break;
    case 152:                       // 'idiv'
      consume(152);                 // 'idiv'
      break;
    case 161:                       // 'instance'
      consume(161);                 // 'instance'
      break;
    case 163:                       // 'intersect'
      consume(163);                 // 'intersect'
      break;
    case 164:                       // 'into'
      consume(164);                 // 'into'
      break;
    case 165:                       // 'is'
      consume(165);                 // 'is'
      break;
    case 173:                       // 'le'
      consume(173);                 // 'le'
      break;
    case 175:                       // 'let'
      consume(175);                 // 'let'
      break;
    case 179:                       // 'lt'
      consume(179);                 // 'lt'
      break;
    case 180:                       // 'map'
      consume(180);                 // 'map'
      break;
    case 182:                       // 'mod'
      consume(182);                 // 'mod'
      break;
    case 183:                       // 'modify'
      consume(183);                 // 'modify'
      break;
    case 188:                       // 'ne'
      consume(188);                 // 'ne'
      break;
    case 200:                       // 'only'
      consume(200);                 // 'only'
      break;
    case 202:                       // 'or'
      consume(202);                 // 'or'
      break;
    case 203:                       // 'order'
      consume(203);                 // 'order'
      break;
    case 222:                       // 'return'
      consume(222);                 // 'return'
      break;
    case 226:                       // 'satisfies'
      consume(226);                 // 'satisfies'
      break;
    case 238:                       // 'stable'
      consume(238);                 // 'stable'
      break;
    case 239:                       // 'start'
      consume(239);                 // 'start'
      break;
    case 250:                       // 'to'
      consume(250);                 // 'to'
      break;
    case 251:                       // 'treat'
      consume(251);                 // 'treat'
      break;
    case 256:                       // 'union'
      consume(256);                 // 'union'
      break;
    case 268:                       // 'where'
      consume(268);                 // 'where'
      break;
    case 272:                       // 'with'
      consume(272);                 // 'with'
      break;
    case 74:                        // 'ancestor'
      consume(74);                  // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      consume(75);                  // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      consume(83);                  // 'attribute'
      break;
    case 94:                        // 'child'
      consume(94);                  // 'child'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 104:                       // 'copy'
      consume(104);                 // 'copy'
      break;
    case 109:                       // 'declare'
      consume(109);                 // 'declare'
      break;
    case 111:                       // 'delete'
      consume(111);                 // 'delete'
      break;
    case 112:                       // 'descendant'
      consume(112);                 // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      consume(113);                 // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      consume(120);                 // 'document'
      break;
    case 121:                       // 'document-node'
      consume(121);                 // 'document-node'
      break;
    case 122:                       // 'element'
      consume(122);                 // 'element'
      break;
    case 125:                       // 'empty-sequence'
      consume(125);                 // 'empty-sequence'
      break;
    case 130:                       // 'every'
      consume(130);                 // 'every'
      break;
    case 135:                       // 'first'
      consume(135);                 // 'first'
      break;
    case 136:                       // 'following'
      consume(136);                 // 'following'
      break;
    case 137:                       // 'following-sibling'
      consume(137);                 // 'following-sibling'
      break;
    case 146:                       // 'function'
      consume(146);                 // 'function'
      break;
    case 153:                       // 'if'
      consume(153);                 // 'if'
      break;
    case 154:                       // 'import'
      consume(154);                 // 'import'
      break;
    case 160:                       // 'insert'
      consume(160);                 // 'insert'
      break;
    case 166:                       // 'item'
      consume(166);                 // 'item'
      break;
    case 171:                       // 'last'
      consume(171);                 // 'last'
      break;
    case 184:                       // 'module'
      consume(184);                 // 'module'
      break;
    case 186:                       // 'namespace'
      consume(186);                 // 'namespace'
      break;
    case 187:                       // 'namespace-node'
      consume(187);                 // 'namespace-node'
      break;
    case 193:                       // 'node'
      consume(193);                 // 'node'
      break;
    case 204:                       // 'ordered'
      consume(204);                 // 'ordered'
      break;
    case 208:                       // 'parent'
      consume(208);                 // 'parent'
      break;
    case 214:                       // 'preceding'
      consume(214);                 // 'preceding'
      break;
    case 215:                       // 'preceding-sibling'
      consume(215);                 // 'preceding-sibling'
      break;
    case 218:                       // 'processing-instruction'
      consume(218);                 // 'processing-instruction'
      break;
    case 220:                       // 'rename'
      consume(220);                 // 'rename'
      break;
    case 221:                       // 'replace'
      consume(221);                 // 'replace'
      break;
    case 228:                       // 'schema-attribute'
      consume(228);                 // 'schema-attribute'
      break;
    case 229:                       // 'schema-element'
      consume(229);                 // 'schema-element'
      break;
    case 231:                       // 'self'
      consume(231);                 // 'self'
      break;
    case 237:                       // 'some'
      consume(237);                 // 'some'
      break;
    case 245:                       // 'switch'
      consume(245);                 // 'switch'
      break;
    case 246:                       // 'text'
      consume(246);                 // 'text'
      break;
    case 252:                       // 'try'
      consume(252);                 // 'try'
      break;
    case 255:                       // 'typeswitch'
      consume(255);                 // 'typeswitch'
      break;
    case 258:                       // 'unordered'
      consume(258);                 // 'unordered'
      break;
    case 262:                       // 'validate'
      consume(262);                 // 'validate'
      break;
    case 264:                       // 'variable'
      consume(264);                 // 'variable'
      break;
    case 276:                       // 'xquery'
      consume(276);                 // 'xquery'
      break;
    case 73:                        // 'allowing'
      consume(73);                  // 'allowing'
      break;
    case 82:                        // 'at'
      consume(82);                  // 'at'
      break;
    case 84:                        // 'base-uri'
      consume(84);                  // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      consume(86);                  // 'boundary-space'
      break;
    case 87:                        // 'break'
      consume(87);                  // 'break'
      break;
    case 92:                        // 'catch'
      consume(92);                  // 'catch'
      break;
    case 99:                        // 'construction'
      consume(99);                  // 'construction'
      break;
    case 102:                       // 'context'
      consume(102);                 // 'context'
      break;
    case 103:                       // 'continue'
      consume(103);                 // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      consume(105);                 // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      consume(107);                 // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      consume(126);                 // 'encoding'
      break;
    case 133:                       // 'exit'
      consume(133);                 // 'exit'
      break;
    case 134:                       // 'external'
      consume(134);                 // 'external'
      break;
    case 142:                       // 'ft-option'
      consume(142);                 // 'ft-option'
      break;
    case 155:                       // 'in'
      consume(155);                 // 'in'
      break;
    case 156:                       // 'index'
      consume(156);                 // 'index'
      break;
    case 162:                       // 'integrity'
      consume(162);                 // 'integrity'
      break;
    case 172:                       // 'lax'
      consume(172);                 // 'lax'
      break;
    case 194:                       // 'nodes'
      consume(194);                 // 'nodes'
      break;
    case 201:                       // 'option'
      consume(201);                 // 'option'
      break;
    case 205:                       // 'ordering'
      consume(205);                 // 'ordering'
      break;
    case 224:                       // 'revalidation'
      consume(224);                 // 'revalidation'
      break;
    case 227:                       // 'schema'
      consume(227);                 // 'schema'
      break;
    case 230:                       // 'score'
      consume(230);                 // 'score'
      break;
    case 236:                       // 'sliding'
      consume(236);                 // 'sliding'
      break;
    case 242:                       // 'strict'
      consume(242);                 // 'strict'
      break;
    case 253:                       // 'tumbling'
      consume(253);                 // 'tumbling'
      break;
    case 254:                       // 'type'
      consume(254);                 // 'type'
      break;
    case 259:                       // 'updating'
      consume(259);                 // 'updating'
      break;
    case 263:                       // 'value'
      consume(263);                 // 'value'
      break;
    case 265:                       // 'version'
      consume(265);                 // 'version'
      break;
    case 269:                       // 'while'
      consume(269);                 // 'while'
      break;
    case 98:                        // 'constraint'
      consume(98);                  // 'constraint'
      break;
    case 177:                       // 'loop'
      consume(177);                 // 'loop'
      break;
    case 223:                       // 'returning'
      consume(223);                 // 'returning'
      break;
    case 78:                        // 'append'
      consume(78);                  // 'append'
      break;
    case 167:                       // 'json'
      consume(167);                 // 'json'
      break;
    default:
      consume(196);                 // 'object'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 71:                        // 'after'
      consumeT(71);                 // 'after'
      break;
    case 76:                        // 'and'
      consumeT(76);                 // 'and'
      break;
    case 80:                        // 'as'
      consumeT(80);                 // 'as'
      break;
    case 81:                        // 'ascending'
      consumeT(81);                 // 'ascending'
      break;
    case 85:                        // 'before'
      consumeT(85);                 // 'before'
      break;
    case 89:                        // 'case'
      consumeT(89);                 // 'case'
      break;
    case 90:                        // 'cast'
      consumeT(90);                 // 'cast'
      break;
    case 91:                        // 'castable'
      consumeT(91);                 // 'castable'
      break;
    case 95:                        // 'collation'
      consumeT(95);                 // 'collation'
      break;
    case 106:                       // 'count'
      consumeT(106);                // 'count'
      break;
    case 110:                       // 'default'
      consumeT(110);                // 'default'
      break;
    case 114:                       // 'descending'
      consumeT(114);                // 'descending'
      break;
    case 119:                       // 'div'
      consumeT(119);                // 'div'
      break;
    case 123:                       // 'else'
      consumeT(123);                // 'else'
      break;
    case 124:                       // 'empty'
      consumeT(124);                // 'empty'
      break;
    case 127:                       // 'end'
      consumeT(127);                // 'end'
      break;
    case 129:                       // 'eq'
      consumeT(129);                // 'eq'
      break;
    case 132:                       // 'except'
      consumeT(132);                // 'except'
      break;
    case 138:                       // 'for'
      consumeT(138);                // 'for'
      break;
    case 147:                       // 'ge'
      consumeT(147);                // 'ge'
      break;
    case 149:                       // 'group'
      consumeT(149);                // 'group'
      break;
    case 151:                       // 'gt'
      consumeT(151);                // 'gt'
      break;
    case 152:                       // 'idiv'
      consumeT(152);                // 'idiv'
      break;
    case 161:                       // 'instance'
      consumeT(161);                // 'instance'
      break;
    case 163:                       // 'intersect'
      consumeT(163);                // 'intersect'
      break;
    case 164:                       // 'into'
      consumeT(164);                // 'into'
      break;
    case 165:                       // 'is'
      consumeT(165);                // 'is'
      break;
    case 173:                       // 'le'
      consumeT(173);                // 'le'
      break;
    case 175:                       // 'let'
      consumeT(175);                // 'let'
      break;
    case 179:                       // 'lt'
      consumeT(179);                // 'lt'
      break;
    case 180:                       // 'map'
      consumeT(180);                // 'map'
      break;
    case 182:                       // 'mod'
      consumeT(182);                // 'mod'
      break;
    case 183:                       // 'modify'
      consumeT(183);                // 'modify'
      break;
    case 188:                       // 'ne'
      consumeT(188);                // 'ne'
      break;
    case 200:                       // 'only'
      consumeT(200);                // 'only'
      break;
    case 202:                       // 'or'
      consumeT(202);                // 'or'
      break;
    case 203:                       // 'order'
      consumeT(203);                // 'order'
      break;
    case 222:                       // 'return'
      consumeT(222);                // 'return'
      break;
    case 226:                       // 'satisfies'
      consumeT(226);                // 'satisfies'
      break;
    case 238:                       // 'stable'
      consumeT(238);                // 'stable'
      break;
    case 239:                       // 'start'
      consumeT(239);                // 'start'
      break;
    case 250:                       // 'to'
      consumeT(250);                // 'to'
      break;
    case 251:                       // 'treat'
      consumeT(251);                // 'treat'
      break;
    case 256:                       // 'union'
      consumeT(256);                // 'union'
      break;
    case 268:                       // 'where'
      consumeT(268);                // 'where'
      break;
    case 272:                       // 'with'
      consumeT(272);                // 'with'
      break;
    case 74:                        // 'ancestor'
      consumeT(74);                 // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      consumeT(75);                 // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      consumeT(83);                 // 'attribute'
      break;
    case 94:                        // 'child'
      consumeT(94);                 // 'child'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 104:                       // 'copy'
      consumeT(104);                // 'copy'
      break;
    case 109:                       // 'declare'
      consumeT(109);                // 'declare'
      break;
    case 111:                       // 'delete'
      consumeT(111);                // 'delete'
      break;
    case 112:                       // 'descendant'
      consumeT(112);                // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      consumeT(113);                // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      consumeT(120);                // 'document'
      break;
    case 121:                       // 'document-node'
      consumeT(121);                // 'document-node'
      break;
    case 122:                       // 'element'
      consumeT(122);                // 'element'
      break;
    case 125:                       // 'empty-sequence'
      consumeT(125);                // 'empty-sequence'
      break;
    case 130:                       // 'every'
      consumeT(130);                // 'every'
      break;
    case 135:                       // 'first'
      consumeT(135);                // 'first'
      break;
    case 136:                       // 'following'
      consumeT(136);                // 'following'
      break;
    case 137:                       // 'following-sibling'
      consumeT(137);                // 'following-sibling'
      break;
    case 146:                       // 'function'
      consumeT(146);                // 'function'
      break;
    case 153:                       // 'if'
      consumeT(153);                // 'if'
      break;
    case 154:                       // 'import'
      consumeT(154);                // 'import'
      break;
    case 160:                       // 'insert'
      consumeT(160);                // 'insert'
      break;
    case 166:                       // 'item'
      consumeT(166);                // 'item'
      break;
    case 171:                       // 'last'
      consumeT(171);                // 'last'
      break;
    case 184:                       // 'module'
      consumeT(184);                // 'module'
      break;
    case 186:                       // 'namespace'
      consumeT(186);                // 'namespace'
      break;
    case 187:                       // 'namespace-node'
      consumeT(187);                // 'namespace-node'
      break;
    case 193:                       // 'node'
      consumeT(193);                // 'node'
      break;
    case 204:                       // 'ordered'
      consumeT(204);                // 'ordered'
      break;
    case 208:                       // 'parent'
      consumeT(208);                // 'parent'
      break;
    case 214:                       // 'preceding'
      consumeT(214);                // 'preceding'
      break;
    case 215:                       // 'preceding-sibling'
      consumeT(215);                // 'preceding-sibling'
      break;
    case 218:                       // 'processing-instruction'
      consumeT(218);                // 'processing-instruction'
      break;
    case 220:                       // 'rename'
      consumeT(220);                // 'rename'
      break;
    case 221:                       // 'replace'
      consumeT(221);                // 'replace'
      break;
    case 228:                       // 'schema-attribute'
      consumeT(228);                // 'schema-attribute'
      break;
    case 229:                       // 'schema-element'
      consumeT(229);                // 'schema-element'
      break;
    case 231:                       // 'self'
      consumeT(231);                // 'self'
      break;
    case 237:                       // 'some'
      consumeT(237);                // 'some'
      break;
    case 245:                       // 'switch'
      consumeT(245);                // 'switch'
      break;
    case 246:                       // 'text'
      consumeT(246);                // 'text'
      break;
    case 252:                       // 'try'
      consumeT(252);                // 'try'
      break;
    case 255:                       // 'typeswitch'
      consumeT(255);                // 'typeswitch'
      break;
    case 258:                       // 'unordered'
      consumeT(258);                // 'unordered'
      break;
    case 262:                       // 'validate'
      consumeT(262);                // 'validate'
      break;
    case 264:                       // 'variable'
      consumeT(264);                // 'variable'
      break;
    case 276:                       // 'xquery'
      consumeT(276);                // 'xquery'
      break;
    case 73:                        // 'allowing'
      consumeT(73);                 // 'allowing'
      break;
    case 82:                        // 'at'
      consumeT(82);                 // 'at'
      break;
    case 84:                        // 'base-uri'
      consumeT(84);                 // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      consumeT(86);                 // 'boundary-space'
      break;
    case 87:                        // 'break'
      consumeT(87);                 // 'break'
      break;
    case 92:                        // 'catch'
      consumeT(92);                 // 'catch'
      break;
    case 99:                        // 'construction'
      consumeT(99);                 // 'construction'
      break;
    case 102:                       // 'context'
      consumeT(102);                // 'context'
      break;
    case 103:                       // 'continue'
      consumeT(103);                // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      consumeT(105);                // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      consumeT(107);                // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      consumeT(126);                // 'encoding'
      break;
    case 133:                       // 'exit'
      consumeT(133);                // 'exit'
      break;
    case 134:                       // 'external'
      consumeT(134);                // 'external'
      break;
    case 142:                       // 'ft-option'
      consumeT(142);                // 'ft-option'
      break;
    case 155:                       // 'in'
      consumeT(155);                // 'in'
      break;
    case 156:                       // 'index'
      consumeT(156);                // 'index'
      break;
    case 162:                       // 'integrity'
      consumeT(162);                // 'integrity'
      break;
    case 172:                       // 'lax'
      consumeT(172);                // 'lax'
      break;
    case 194:                       // 'nodes'
      consumeT(194);                // 'nodes'
      break;
    case 201:                       // 'option'
      consumeT(201);                // 'option'
      break;
    case 205:                       // 'ordering'
      consumeT(205);                // 'ordering'
      break;
    case 224:                       // 'revalidation'
      consumeT(224);                // 'revalidation'
      break;
    case 227:                       // 'schema'
      consumeT(227);                // 'schema'
      break;
    case 230:                       // 'score'
      consumeT(230);                // 'score'
      break;
    case 236:                       // 'sliding'
      consumeT(236);                // 'sliding'
      break;
    case 242:                       // 'strict'
      consumeT(242);                // 'strict'
      break;
    case 253:                       // 'tumbling'
      consumeT(253);                // 'tumbling'
      break;
    case 254:                       // 'type'
      consumeT(254);                // 'type'
      break;
    case 259:                       // 'updating'
      consumeT(259);                // 'updating'
      break;
    case 263:                       // 'value'
      consumeT(263);                // 'value'
      break;
    case 265:                       // 'version'
      consumeT(265);                // 'version'
      break;
    case 269:                       // 'while'
      consumeT(269);                // 'while'
      break;
    case 98:                        // 'constraint'
      consumeT(98);                 // 'constraint'
      break;
    case 177:                       // 'loop'
      consumeT(177);                // 'loop'
      break;
    case 223:                       // 'returning'
      consumeT(223);                // 'returning'
      break;
    case 78:                        // 'append'
      consumeT(78);                 // 'append'
      break;
    case 167:                       // 'json'
      consumeT(167);                // 'json'
      break;
    default:
      consumeT(196);                // 'object'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(280);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(287);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 65:                      // '?'
        lookahead2W(256);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 67:                      // '@'
        lookahead2W(258);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 69:                      // '['
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 78:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 83:                      // 'attribute'
        lookahead2W(283);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 122:                     // 'element'
        lookahead2W(282);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 133:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 138:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'sliding' | 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 175:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'score' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 221:                     // 'replace'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 262:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 278:                     // '{'
        lookahead2W(279);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 280:                     // '{|'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 111:                     // 'delete'
      case 160:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 186:                     // 'namespace'
      case 218:                     // 'processing-instruction'
        lookahead2W(272);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 237:                     // 'some'
      case 264:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 79:                      // 'array'
      case 125:                     // 'empty-sequence'
      case 166:                     // 'item'
      case 168:                     // 'json-item'
      case 244:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 97:                      // 'comment'
      case 120:                     // 'document'
      case 180:                     // 'map'
      case 204:                     // 'ordered'
      case 246:                     // 'text'
      case 252:                     // 'try'
      case 258:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 136:                     // 'following'
      case 137:                     // 'following-sibling'
      case 208:                     // 'parent'
      case 214:                     // 'preceding'
      case 215:                     // 'preceding-sibling'
      case 231:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 121:                     // 'document-node'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 135:                     // 'first'
      case 142:                     // 'ft-option'
      case 146:                     // 'function'
      case 147:                     // 'ge'
      case 149:                     // 'group'
      case 151:                     // 'gt'
      case 152:                     // 'idiv'
      case 153:                     // 'if'
      case 154:                     // 'import'
      case 155:                     // 'in'
      case 156:                     // 'index'
      case 161:                     // 'instance'
      case 162:                     // 'integrity'
      case 163:                     // 'intersect'
      case 164:                     // 'into'
      case 165:                     // 'is'
      case 167:                     // 'json'
      case 171:                     // 'last'
      case 172:                     // 'lax'
      case 173:                     // 'le'
      case 177:                     // 'loop'
      case 179:                     // 'lt'
      case 182:                     // 'mod'
      case 183:                     // 'modify'
      case 184:                     // 'module'
      case 187:                     // 'namespace-node'
      case 188:                     // 'ne'
      case 193:                     // 'node'
      case 194:                     // 'nodes'
      case 196:                     // 'object'
      case 200:                     // 'only'
      case 201:                     // 'option'
      case 202:                     // 'or'
      case 203:                     // 'order'
      case 205:                     // 'ordering'
      case 222:                     // 'return'
      case 223:                     // 'returning'
      case 224:                     // 'revalidation'
      case 226:                     // 'satisfies'
      case 227:                     // 'schema'
      case 228:                     // 'schema-attribute'
      case 229:                     // 'schema-element'
      case 230:                     // 'score'
      case 236:                     // 'sliding'
      case 238:                     // 'stable'
      case 239:                     // 'start'
      case 242:                     // 'strict'
      case 245:                     // 'switch'
      case 250:                     // 'to'
      case 251:                     // 'treat'
      case 253:                     // 'tumbling'
      case 254:                     // 'type'
      case 255:                     // 'typeswitch'
      case 256:                     // 'union'
      case 259:                     // 'updating'
      case 263:                     // 'value'
      case 265:                     // 'version'
      case 268:                     // 'where'
      case 269:                     // 'while'
      case 272:                     // 'with'
      case 276:                     // 'xquery'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 284                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12871               // 'after' EOF
       && lk != 12873               // 'allowing' EOF
       && lk != 12874               // 'ancestor' EOF
       && lk != 12875               // 'ancestor-or-self' EOF
       && lk != 12876               // 'and' EOF
       && lk != 12878               // 'append' EOF
       && lk != 12879               // 'array' EOF
       && lk != 12880               // 'as' EOF
       && lk != 12881               // 'ascending' EOF
       && lk != 12882               // 'at' EOF
       && lk != 12883               // 'attribute' EOF
       && lk != 12884               // 'base-uri' EOF
       && lk != 12885               // 'before' EOF
       && lk != 12886               // 'boundary-space' EOF
       && lk != 12887               // 'break' EOF
       && lk != 12889               // 'case' EOF
       && lk != 12890               // 'cast' EOF
       && lk != 12891               // 'castable' EOF
       && lk != 12892               // 'catch' EOF
       && lk != 12894               // 'child' EOF
       && lk != 12895               // 'collation' EOF
       && lk != 12897               // 'comment' EOF
       && lk != 12898               // 'constraint' EOF
       && lk != 12899               // 'construction' EOF
       && lk != 12902               // 'context' EOF
       && lk != 12903               // 'continue' EOF
       && lk != 12904               // 'copy' EOF
       && lk != 12905               // 'copy-namespaces' EOF
       && lk != 12906               // 'count' EOF
       && lk != 12907               // 'decimal-format' EOF
       && lk != 12909               // 'declare' EOF
       && lk != 12910               // 'default' EOF
       && lk != 12911               // 'delete' EOF
       && lk != 12912               // 'descendant' EOF
       && lk != 12913               // 'descendant-or-self' EOF
       && lk != 12914               // 'descending' EOF
       && lk != 12919               // 'div' EOF
       && lk != 12920               // 'document' EOF
       && lk != 12921               // 'document-node' EOF
       && lk != 12922               // 'element' EOF
       && lk != 12923               // 'else' EOF
       && lk != 12924               // 'empty' EOF
       && lk != 12925               // 'empty-sequence' EOF
       && lk != 12926               // 'encoding' EOF
       && lk != 12927               // 'end' EOF
       && lk != 12929               // 'eq' EOF
       && lk != 12930               // 'every' EOF
       && lk != 12932               // 'except' EOF
       && lk != 12933               // 'exit' EOF
       && lk != 12934               // 'external' EOF
       && lk != 12935               // 'first' EOF
       && lk != 12936               // 'following' EOF
       && lk != 12937               // 'following-sibling' EOF
       && lk != 12938               // 'for' EOF
       && lk != 12942               // 'ft-option' EOF
       && lk != 12946               // 'function' EOF
       && lk != 12947               // 'ge' EOF
       && lk != 12949               // 'group' EOF
       && lk != 12951               // 'gt' EOF
       && lk != 12952               // 'idiv' EOF
       && lk != 12953               // 'if' EOF
       && lk != 12954               // 'import' EOF
       && lk != 12955               // 'in' EOF
       && lk != 12956               // 'index' EOF
       && lk != 12960               // 'insert' EOF
       && lk != 12961               // 'instance' EOF
       && lk != 12962               // 'integrity' EOF
       && lk != 12963               // 'intersect' EOF
       && lk != 12964               // 'into' EOF
       && lk != 12965               // 'is' EOF
       && lk != 12966               // 'item' EOF
       && lk != 12967               // 'json' EOF
       && lk != 12968               // 'json-item' EOF
       && lk != 12971               // 'last' EOF
       && lk != 12972               // 'lax' EOF
       && lk != 12973               // 'le' EOF
       && lk != 12975               // 'let' EOF
       && lk != 12977               // 'loop' EOF
       && lk != 12979               // 'lt' EOF
       && lk != 12980               // 'map' EOF
       && lk != 12982               // 'mod' EOF
       && lk != 12983               // 'modify' EOF
       && lk != 12984               // 'module' EOF
       && lk != 12986               // 'namespace' EOF
       && lk != 12987               // 'namespace-node' EOF
       && lk != 12988               // 'ne' EOF
       && lk != 12993               // 'node' EOF
       && lk != 12994               // 'nodes' EOF
       && lk != 12996               // 'object' EOF
       && lk != 13000               // 'only' EOF
       && lk != 13001               // 'option' EOF
       && lk != 13002               // 'or' EOF
       && lk != 13003               // 'order' EOF
       && lk != 13004               // 'ordered' EOF
       && lk != 13005               // 'ordering' EOF
       && lk != 13008               // 'parent' EOF
       && lk != 13014               // 'preceding' EOF
       && lk != 13015               // 'preceding-sibling' EOF
       && lk != 13018               // 'processing-instruction' EOF
       && lk != 13020               // 'rename' EOF
       && lk != 13021               // 'replace' EOF
       && lk != 13022               // 'return' EOF
       && lk != 13023               // 'returning' EOF
       && lk != 13024               // 'revalidation' EOF
       && lk != 13026               // 'satisfies' EOF
       && lk != 13027               // 'schema' EOF
       && lk != 13028               // 'schema-attribute' EOF
       && lk != 13029               // 'schema-element' EOF
       && lk != 13030               // 'score' EOF
       && lk != 13031               // 'self' EOF
       && lk != 13036               // 'sliding' EOF
       && lk != 13037               // 'some' EOF
       && lk != 13038               // 'stable' EOF
       && lk != 13039               // 'start' EOF
       && lk != 13042               // 'strict' EOF
       && lk != 13044               // 'structured-item' EOF
       && lk != 13045               // 'switch' EOF
       && lk != 13046               // 'text' EOF
       && lk != 13050               // 'to' EOF
       && lk != 13051               // 'treat' EOF
       && lk != 13052               // 'try' EOF
       && lk != 13053               // 'tumbling' EOF
       && lk != 13054               // 'type' EOF
       && lk != 13055               // 'typeswitch' EOF
       && lk != 13056               // 'union' EOF
       && lk != 13058               // 'unordered' EOF
       && lk != 13059               // 'updating' EOF
       && lk != 13062               // 'validate' EOF
       && lk != 13063               // 'value' EOF
       && lk != 13064               // 'variable' EOF
       && lk != 13065               // 'version' EOF
       && lk != 13068               // 'where' EOF
       && lk != 13069               // 'while' EOF
       && lk != 13072               // 'with' EOF
       && lk != 13076               // 'xquery' EOF
       && lk != 16136               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21063               // 'after' ','
       && lk != 21065               // 'allowing' ','
       && lk != 21066               // 'ancestor' ','
       && lk != 21067               // 'ancestor-or-self' ','
       && lk != 21068               // 'and' ','
       && lk != 21070               // 'append' ','
       && lk != 21071               // 'array' ','
       && lk != 21072               // 'as' ','
       && lk != 21073               // 'ascending' ','
       && lk != 21074               // 'at' ','
       && lk != 21075               // 'attribute' ','
       && lk != 21076               // 'base-uri' ','
       && lk != 21077               // 'before' ','
       && lk != 21078               // 'boundary-space' ','
       && lk != 21079               // 'break' ','
       && lk != 21081               // 'case' ','
       && lk != 21082               // 'cast' ','
       && lk != 21083               // 'castable' ','
       && lk != 21084               // 'catch' ','
       && lk != 21086               // 'child' ','
       && lk != 21087               // 'collation' ','
       && lk != 21089               // 'comment' ','
       && lk != 21090               // 'constraint' ','
       && lk != 21091               // 'construction' ','
       && lk != 21094               // 'context' ','
       && lk != 21095               // 'continue' ','
       && lk != 21096               // 'copy' ','
       && lk != 21097               // 'copy-namespaces' ','
       && lk != 21098               // 'count' ','
       && lk != 21099               // 'decimal-format' ','
       && lk != 21101               // 'declare' ','
       && lk != 21102               // 'default' ','
       && lk != 21103               // 'delete' ','
       && lk != 21104               // 'descendant' ','
       && lk != 21105               // 'descendant-or-self' ','
       && lk != 21106               // 'descending' ','
       && lk != 21111               // 'div' ','
       && lk != 21112               // 'document' ','
       && lk != 21113               // 'document-node' ','
       && lk != 21114               // 'element' ','
       && lk != 21115               // 'else' ','
       && lk != 21116               // 'empty' ','
       && lk != 21117               // 'empty-sequence' ','
       && lk != 21118               // 'encoding' ','
       && lk != 21119               // 'end' ','
       && lk != 21121               // 'eq' ','
       && lk != 21122               // 'every' ','
       && lk != 21124               // 'except' ','
       && lk != 21125               // 'exit' ','
       && lk != 21126               // 'external' ','
       && lk != 21127               // 'first' ','
       && lk != 21128               // 'following' ','
       && lk != 21129               // 'following-sibling' ','
       && lk != 21130               // 'for' ','
       && lk != 21134               // 'ft-option' ','
       && lk != 21138               // 'function' ','
       && lk != 21139               // 'ge' ','
       && lk != 21141               // 'group' ','
       && lk != 21143               // 'gt' ','
       && lk != 21144               // 'idiv' ','
       && lk != 21145               // 'if' ','
       && lk != 21146               // 'import' ','
       && lk != 21147               // 'in' ','
       && lk != 21148               // 'index' ','
       && lk != 21152               // 'insert' ','
       && lk != 21153               // 'instance' ','
       && lk != 21154               // 'integrity' ','
       && lk != 21155               // 'intersect' ','
       && lk != 21156               // 'into' ','
       && lk != 21157               // 'is' ','
       && lk != 21158               // 'item' ','
       && lk != 21159               // 'json' ','
       && lk != 21160               // 'json-item' ','
       && lk != 21163               // 'last' ','
       && lk != 21164               // 'lax' ','
       && lk != 21165               // 'le' ','
       && lk != 21167               // 'let' ','
       && lk != 21169               // 'loop' ','
       && lk != 21171               // 'lt' ','
       && lk != 21172               // 'map' ','
       && lk != 21174               // 'mod' ','
       && lk != 21175               // 'modify' ','
       && lk != 21176               // 'module' ','
       && lk != 21178               // 'namespace' ','
       && lk != 21179               // 'namespace-node' ','
       && lk != 21180               // 'ne' ','
       && lk != 21185               // 'node' ','
       && lk != 21186               // 'nodes' ','
       && lk != 21188               // 'object' ','
       && lk != 21192               // 'only' ','
       && lk != 21193               // 'option' ','
       && lk != 21194               // 'or' ','
       && lk != 21195               // 'order' ','
       && lk != 21196               // 'ordered' ','
       && lk != 21197               // 'ordering' ','
       && lk != 21200               // 'parent' ','
       && lk != 21206               // 'preceding' ','
       && lk != 21207               // 'preceding-sibling' ','
       && lk != 21210               // 'processing-instruction' ','
       && lk != 21212               // 'rename' ','
       && lk != 21213               // 'replace' ','
       && lk != 21214               // 'return' ','
       && lk != 21215               // 'returning' ','
       && lk != 21216               // 'revalidation' ','
       && lk != 21218               // 'satisfies' ','
       && lk != 21219               // 'schema' ','
       && lk != 21220               // 'schema-attribute' ','
       && lk != 21221               // 'schema-element' ','
       && lk != 21222               // 'score' ','
       && lk != 21223               // 'self' ','
       && lk != 21228               // 'sliding' ','
       && lk != 21229               // 'some' ','
       && lk != 21230               // 'stable' ','
       && lk != 21231               // 'start' ','
       && lk != 21234               // 'strict' ','
       && lk != 21236               // 'structured-item' ','
       && lk != 21237               // 'switch' ','
       && lk != 21238               // 'text' ','
       && lk != 21242               // 'to' ','
       && lk != 21243               // 'treat' ','
       && lk != 21244               // 'try' ','
       && lk != 21245               // 'tumbling' ','
       && lk != 21246               // 'type' ','
       && lk != 21247               // 'typeswitch' ','
       && lk != 21248               // 'union' ','
       && lk != 21250               // 'unordered' ','
       && lk != 21251               // 'updating' ','
       && lk != 21254               // 'validate' ','
       && lk != 21255               // 'value' ','
       && lk != 21256               // 'variable' ','
       && lk != 21257               // 'version' ','
       && lk != 21260               // 'where' ','
       && lk != 21261               // 'while' ','
       && lk != 21264               // 'with' ','
       && lk != 21268               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27207               // 'after' ';'
       && lk != 27209               // 'allowing' ';'
       && lk != 27210               // 'ancestor' ';'
       && lk != 27211               // 'ancestor-or-self' ';'
       && lk != 27212               // 'and' ';'
       && lk != 27214               // 'append' ';'
       && lk != 27215               // 'array' ';'
       && lk != 27216               // 'as' ';'
       && lk != 27217               // 'ascending' ';'
       && lk != 27218               // 'at' ';'
       && lk != 27219               // 'attribute' ';'
       && lk != 27220               // 'base-uri' ';'
       && lk != 27221               // 'before' ';'
       && lk != 27222               // 'boundary-space' ';'
       && lk != 27223               // 'break' ';'
       && lk != 27225               // 'case' ';'
       && lk != 27226               // 'cast' ';'
       && lk != 27227               // 'castable' ';'
       && lk != 27228               // 'catch' ';'
       && lk != 27230               // 'child' ';'
       && lk != 27231               // 'collation' ';'
       && lk != 27233               // 'comment' ';'
       && lk != 27234               // 'constraint' ';'
       && lk != 27235               // 'construction' ';'
       && lk != 27238               // 'context' ';'
       && lk != 27239               // 'continue' ';'
       && lk != 27240               // 'copy' ';'
       && lk != 27241               // 'copy-namespaces' ';'
       && lk != 27242               // 'count' ';'
       && lk != 27243               // 'decimal-format' ';'
       && lk != 27245               // 'declare' ';'
       && lk != 27246               // 'default' ';'
       && lk != 27247               // 'delete' ';'
       && lk != 27248               // 'descendant' ';'
       && lk != 27249               // 'descendant-or-self' ';'
       && lk != 27250               // 'descending' ';'
       && lk != 27255               // 'div' ';'
       && lk != 27256               // 'document' ';'
       && lk != 27257               // 'document-node' ';'
       && lk != 27258               // 'element' ';'
       && lk != 27259               // 'else' ';'
       && lk != 27260               // 'empty' ';'
       && lk != 27261               // 'empty-sequence' ';'
       && lk != 27262               // 'encoding' ';'
       && lk != 27263               // 'end' ';'
       && lk != 27265               // 'eq' ';'
       && lk != 27266               // 'every' ';'
       && lk != 27268               // 'except' ';'
       && lk != 27269               // 'exit' ';'
       && lk != 27270               // 'external' ';'
       && lk != 27271               // 'first' ';'
       && lk != 27272               // 'following' ';'
       && lk != 27273               // 'following-sibling' ';'
       && lk != 27274               // 'for' ';'
       && lk != 27278               // 'ft-option' ';'
       && lk != 27282               // 'function' ';'
       && lk != 27283               // 'ge' ';'
       && lk != 27285               // 'group' ';'
       && lk != 27287               // 'gt' ';'
       && lk != 27288               // 'idiv' ';'
       && lk != 27289               // 'if' ';'
       && lk != 27290               // 'import' ';'
       && lk != 27291               // 'in' ';'
       && lk != 27292               // 'index' ';'
       && lk != 27296               // 'insert' ';'
       && lk != 27297               // 'instance' ';'
       && lk != 27298               // 'integrity' ';'
       && lk != 27299               // 'intersect' ';'
       && lk != 27300               // 'into' ';'
       && lk != 27301               // 'is' ';'
       && lk != 27302               // 'item' ';'
       && lk != 27303               // 'json' ';'
       && lk != 27304               // 'json-item' ';'
       && lk != 27307               // 'last' ';'
       && lk != 27308               // 'lax' ';'
       && lk != 27309               // 'le' ';'
       && lk != 27311               // 'let' ';'
       && lk != 27313               // 'loop' ';'
       && lk != 27315               // 'lt' ';'
       && lk != 27316               // 'map' ';'
       && lk != 27318               // 'mod' ';'
       && lk != 27319               // 'modify' ';'
       && lk != 27320               // 'module' ';'
       && lk != 27322               // 'namespace' ';'
       && lk != 27323               // 'namespace-node' ';'
       && lk != 27324               // 'ne' ';'
       && lk != 27329               // 'node' ';'
       && lk != 27330               // 'nodes' ';'
       && lk != 27332               // 'object' ';'
       && lk != 27336               // 'only' ';'
       && lk != 27337               // 'option' ';'
       && lk != 27338               // 'or' ';'
       && lk != 27339               // 'order' ';'
       && lk != 27340               // 'ordered' ';'
       && lk != 27341               // 'ordering' ';'
       && lk != 27344               // 'parent' ';'
       && lk != 27350               // 'preceding' ';'
       && lk != 27351               // 'preceding-sibling' ';'
       && lk != 27354               // 'processing-instruction' ';'
       && lk != 27356               // 'rename' ';'
       && lk != 27357               // 'replace' ';'
       && lk != 27358               // 'return' ';'
       && lk != 27359               // 'returning' ';'
       && lk != 27360               // 'revalidation' ';'
       && lk != 27362               // 'satisfies' ';'
       && lk != 27363               // 'schema' ';'
       && lk != 27364               // 'schema-attribute' ';'
       && lk != 27365               // 'schema-element' ';'
       && lk != 27366               // 'score' ';'
       && lk != 27367               // 'self' ';'
       && lk != 27372               // 'sliding' ';'
       && lk != 27373               // 'some' ';'
       && lk != 27374               // 'stable' ';'
       && lk != 27375               // 'start' ';'
       && lk != 27378               // 'strict' ';'
       && lk != 27380               // 'structured-item' ';'
       && lk != 27381               // 'switch' ';'
       && lk != 27382               // 'text' ';'
       && lk != 27386               // 'to' ';'
       && lk != 27387               // 'treat' ';'
       && lk != 27388               // 'try' ';'
       && lk != 27389               // 'tumbling' ';'
       && lk != 27390               // 'type' ';'
       && lk != 27391               // 'typeswitch' ';'
       && lk != 27392               // 'union' ';'
       && lk != 27394               // 'unordered' ';'
       && lk != 27395               // 'updating' ';'
       && lk != 27398               // 'validate' ';'
       && lk != 27399               // 'value' ';'
       && lk != 27400               // 'variable' ';'
       && lk != 27401               // 'version' ';'
       && lk != 27404               // 'where' ';'
       && lk != 27405               // 'while' ';'
       && lk != 27408               // 'with' ';'
       && lk != 27412               // 'xquery' ';'
       && lk != 90711               // 'break' 'loop'
       && lk != 90727               // 'continue' 'loop'
       && lk != 114309              // 'exit' 'returning'
       && lk != 145413              // Wildcard '}'
       && lk != 145414              // EQName^Token '}'
       && lk != 145416              // IntegerLiteral '}'
       && lk != 145417              // DecimalLiteral '}'
       && lk != 145418              // DoubleLiteral '}'
       && lk != 145419              // StringLiteral '}'
       && lk != 145452              // '.' '}'
       && lk != 145453              // '..' '}'
       && lk != 145454              // '/' '}'
       && lk != 145479              // 'after' '}'
       && lk != 145481              // 'allowing' '}'
       && lk != 145482              // 'ancestor' '}'
       && lk != 145483              // 'ancestor-or-self' '}'
       && lk != 145484              // 'and' '}'
       && lk != 145486              // 'append' '}'
       && lk != 145487              // 'array' '}'
       && lk != 145488              // 'as' '}'
       && lk != 145489              // 'ascending' '}'
       && lk != 145490              // 'at' '}'
       && lk != 145491              // 'attribute' '}'
       && lk != 145492              // 'base-uri' '}'
       && lk != 145493              // 'before' '}'
       && lk != 145494              // 'boundary-space' '}'
       && lk != 145495              // 'break' '}'
       && lk != 145497              // 'case' '}'
       && lk != 145498              // 'cast' '}'
       && lk != 145499              // 'castable' '}'
       && lk != 145500              // 'catch' '}'
       && lk != 145502              // 'child' '}'
       && lk != 145503              // 'collation' '}'
       && lk != 145505              // 'comment' '}'
       && lk != 145506              // 'constraint' '}'
       && lk != 145507              // 'construction' '}'
       && lk != 145510              // 'context' '}'
       && lk != 145511              // 'continue' '}'
       && lk != 145512              // 'copy' '}'
       && lk != 145513              // 'copy-namespaces' '}'
       && lk != 145514              // 'count' '}'
       && lk != 145515              // 'decimal-format' '}'
       && lk != 145517              // 'declare' '}'
       && lk != 145518              // 'default' '}'
       && lk != 145519              // 'delete' '}'
       && lk != 145520              // 'descendant' '}'
       && lk != 145521              // 'descendant-or-self' '}'
       && lk != 145522              // 'descending' '}'
       && lk != 145527              // 'div' '}'
       && lk != 145528              // 'document' '}'
       && lk != 145529              // 'document-node' '}'
       && lk != 145530              // 'element' '}'
       && lk != 145531              // 'else' '}'
       && lk != 145532              // 'empty' '}'
       && lk != 145533              // 'empty-sequence' '}'
       && lk != 145534              // 'encoding' '}'
       && lk != 145535              // 'end' '}'
       && lk != 145537              // 'eq' '}'
       && lk != 145538              // 'every' '}'
       && lk != 145540              // 'except' '}'
       && lk != 145541              // 'exit' '}'
       && lk != 145542              // 'external' '}'
       && lk != 145543              // 'first' '}'
       && lk != 145544              // 'following' '}'
       && lk != 145545              // 'following-sibling' '}'
       && lk != 145546              // 'for' '}'
       && lk != 145550              // 'ft-option' '}'
       && lk != 145554              // 'function' '}'
       && lk != 145555              // 'ge' '}'
       && lk != 145557              // 'group' '}'
       && lk != 145559              // 'gt' '}'
       && lk != 145560              // 'idiv' '}'
       && lk != 145561              // 'if' '}'
       && lk != 145562              // 'import' '}'
       && lk != 145563              // 'in' '}'
       && lk != 145564              // 'index' '}'
       && lk != 145568              // 'insert' '}'
       && lk != 145569              // 'instance' '}'
       && lk != 145570              // 'integrity' '}'
       && lk != 145571              // 'intersect' '}'
       && lk != 145572              // 'into' '}'
       && lk != 145573              // 'is' '}'
       && lk != 145574              // 'item' '}'
       && lk != 145575              // 'json' '}'
       && lk != 145576              // 'json-item' '}'
       && lk != 145579              // 'last' '}'
       && lk != 145580              // 'lax' '}'
       && lk != 145581              // 'le' '}'
       && lk != 145583              // 'let' '}'
       && lk != 145585              // 'loop' '}'
       && lk != 145587              // 'lt' '}'
       && lk != 145588              // 'map' '}'
       && lk != 145590              // 'mod' '}'
       && lk != 145591              // 'modify' '}'
       && lk != 145592              // 'module' '}'
       && lk != 145594              // 'namespace' '}'
       && lk != 145595              // 'namespace-node' '}'
       && lk != 145596              // 'ne' '}'
       && lk != 145601              // 'node' '}'
       && lk != 145602              // 'nodes' '}'
       && lk != 145604              // 'object' '}'
       && lk != 145608              // 'only' '}'
       && lk != 145609              // 'option' '}'
       && lk != 145610              // 'or' '}'
       && lk != 145611              // 'order' '}'
       && lk != 145612              // 'ordered' '}'
       && lk != 145613              // 'ordering' '}'
       && lk != 145616              // 'parent' '}'
       && lk != 145622              // 'preceding' '}'
       && lk != 145623              // 'preceding-sibling' '}'
       && lk != 145626              // 'processing-instruction' '}'
       && lk != 145628              // 'rename' '}'
       && lk != 145629              // 'replace' '}'
       && lk != 145630              // 'return' '}'
       && lk != 145631              // 'returning' '}'
       && lk != 145632              // 'revalidation' '}'
       && lk != 145634              // 'satisfies' '}'
       && lk != 145635              // 'schema' '}'
       && lk != 145636              // 'schema-attribute' '}'
       && lk != 145637              // 'schema-element' '}'
       && lk != 145638              // 'score' '}'
       && lk != 145639              // 'self' '}'
       && lk != 145644              // 'sliding' '}'
       && lk != 145645              // 'some' '}'
       && lk != 145646              // 'stable' '}'
       && lk != 145647              // 'start' '}'
       && lk != 145650              // 'strict' '}'
       && lk != 145652              // 'structured-item' '}'
       && lk != 145653              // 'switch' '}'
       && lk != 145654              // 'text' '}'
       && lk != 145658              // 'to' '}'
       && lk != 145659              // 'treat' '}'
       && lk != 145660              // 'try' '}'
       && lk != 145661              // 'tumbling' '}'
       && lk != 145662              // 'type' '}'
       && lk != 145663              // 'typeswitch' '}'
       && lk != 145664              // 'union' '}'
       && lk != 145666              // 'unordered' '}'
       && lk != 145667              // 'updating' '}'
       && lk != 145670              // 'validate' '}'
       && lk != 145671              // 'value' '}'
       && lk != 145672              // 'variable' '}'
       && lk != 145673              // 'version' '}'
       && lk != 145676              // 'where' '}'
       && lk != 145677              // 'while' '}'
       && lk != 145680              // 'with' '}'
       && lk != 145684)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16136               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27207               // 'after' ';'
       && lk != 27209               // 'allowing' ';'
       && lk != 27210               // 'ancestor' ';'
       && lk != 27211               // 'ancestor-or-self' ';'
       && lk != 27212               // 'and' ';'
       && lk != 27214               // 'append' ';'
       && lk != 27215               // 'array' ';'
       && lk != 27216               // 'as' ';'
       && lk != 27217               // 'ascending' ';'
       && lk != 27218               // 'at' ';'
       && lk != 27219               // 'attribute' ';'
       && lk != 27220               // 'base-uri' ';'
       && lk != 27221               // 'before' ';'
       && lk != 27222               // 'boundary-space' ';'
       && lk != 27223               // 'break' ';'
       && lk != 27225               // 'case' ';'
       && lk != 27226               // 'cast' ';'
       && lk != 27227               // 'castable' ';'
       && lk != 27228               // 'catch' ';'
       && lk != 27230               // 'child' ';'
       && lk != 27231               // 'collation' ';'
       && lk != 27233               // 'comment' ';'
       && lk != 27234               // 'constraint' ';'
       && lk != 27235               // 'construction' ';'
       && lk != 27238               // 'context' ';'
       && lk != 27239               // 'continue' ';'
       && lk != 27240               // 'copy' ';'
       && lk != 27241               // 'copy-namespaces' ';'
       && lk != 27242               // 'count' ';'
       && lk != 27243               // 'decimal-format' ';'
       && lk != 27245               // 'declare' ';'
       && lk != 27246               // 'default' ';'
       && lk != 27247               // 'delete' ';'
       && lk != 27248               // 'descendant' ';'
       && lk != 27249               // 'descendant-or-self' ';'
       && lk != 27250               // 'descending' ';'
       && lk != 27255               // 'div' ';'
       && lk != 27256               // 'document' ';'
       && lk != 27257               // 'document-node' ';'
       && lk != 27258               // 'element' ';'
       && lk != 27259               // 'else' ';'
       && lk != 27260               // 'empty' ';'
       && lk != 27261               // 'empty-sequence' ';'
       && lk != 27262               // 'encoding' ';'
       && lk != 27263               // 'end' ';'
       && lk != 27265               // 'eq' ';'
       && lk != 27266               // 'every' ';'
       && lk != 27268               // 'except' ';'
       && lk != 27269               // 'exit' ';'
       && lk != 27270               // 'external' ';'
       && lk != 27271               // 'first' ';'
       && lk != 27272               // 'following' ';'
       && lk != 27273               // 'following-sibling' ';'
       && lk != 27274               // 'for' ';'
       && lk != 27278               // 'ft-option' ';'
       && lk != 27282               // 'function' ';'
       && lk != 27283               // 'ge' ';'
       && lk != 27285               // 'group' ';'
       && lk != 27287               // 'gt' ';'
       && lk != 27288               // 'idiv' ';'
       && lk != 27289               // 'if' ';'
       && lk != 27290               // 'import' ';'
       && lk != 27291               // 'in' ';'
       && lk != 27292               // 'index' ';'
       && lk != 27296               // 'insert' ';'
       && lk != 27297               // 'instance' ';'
       && lk != 27298               // 'integrity' ';'
       && lk != 27299               // 'intersect' ';'
       && lk != 27300               // 'into' ';'
       && lk != 27301               // 'is' ';'
       && lk != 27302               // 'item' ';'
       && lk != 27303               // 'json' ';'
       && lk != 27304               // 'json-item' ';'
       && lk != 27307               // 'last' ';'
       && lk != 27308               // 'lax' ';'
       && lk != 27309               // 'le' ';'
       && lk != 27311               // 'let' ';'
       && lk != 27313               // 'loop' ';'
       && lk != 27315               // 'lt' ';'
       && lk != 27316               // 'map' ';'
       && lk != 27318               // 'mod' ';'
       && lk != 27319               // 'modify' ';'
       && lk != 27320               // 'module' ';'
       && lk != 27322               // 'namespace' ';'
       && lk != 27323               // 'namespace-node' ';'
       && lk != 27324               // 'ne' ';'
       && lk != 27329               // 'node' ';'
       && lk != 27330               // 'nodes' ';'
       && lk != 27332               // 'object' ';'
       && lk != 27336               // 'only' ';'
       && lk != 27337               // 'option' ';'
       && lk != 27338               // 'or' ';'
       && lk != 27339               // 'order' ';'
       && lk != 27340               // 'ordered' ';'
       && lk != 27341               // 'ordering' ';'
       && lk != 27344               // 'parent' ';'
       && lk != 27350               // 'preceding' ';'
       && lk != 27351               // 'preceding-sibling' ';'
       && lk != 27354               // 'processing-instruction' ';'
       && lk != 27356               // 'rename' ';'
       && lk != 27357               // 'replace' ';'
       && lk != 27358               // 'return' ';'
       && lk != 27359               // 'returning' ';'
       && lk != 27360               // 'revalidation' ';'
       && lk != 27362               // 'satisfies' ';'
       && lk != 27363               // 'schema' ';'
       && lk != 27364               // 'schema-attribute' ';'
       && lk != 27365               // 'schema-element' ';'
       && lk != 27366               // 'score' ';'
       && lk != 27367               // 'self' ';'
       && lk != 27372               // 'sliding' ';'
       && lk != 27373               // 'some' ';'
       && lk != 27374               // 'stable' ';'
       && lk != 27375               // 'start' ';'
       && lk != 27378               // 'strict' ';'
       && lk != 27380               // 'structured-item' ';'
       && lk != 27381               // 'switch' ';'
       && lk != 27382               // 'text' ';'
       && lk != 27386               // 'to' ';'
       && lk != 27387               // 'treat' ';'
       && lk != 27388               // 'try' ';'
       && lk != 27389               // 'tumbling' ';'
       && lk != 27390               // 'type' ';'
       && lk != 27391               // 'typeswitch' ';'
       && lk != 27392               // 'union' ';'
       && lk != 27394               // 'unordered' ';'
       && lk != 27395               // 'updating' ';'
       && lk != 27398               // 'validate' ';'
       && lk != 27399               // 'value' ';'
       && lk != 27400               // 'variable' ';'
       && lk != 27401               // 'version' ';'
       && lk != 27404               // 'where' ';'
       && lk != 27405               // 'while' ';'
       && lk != 27408               // 'with' ';'
       && lk != 27412               // 'xquery' ';'
       && lk != 90711               // 'break' 'loop'
       && lk != 90727               // 'continue' 'loop'
       && lk != 114309)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(280);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(287);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 65:                      // '?'
        lookahead2W(256);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 67:                      // '@'
        lookahead2W(258);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 69:                      // '['
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 78:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 83:                      // 'attribute'
        lookahead2W(283);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 122:                     // 'element'
        lookahead2W(282);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 133:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 138:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'sliding' | 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 175:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'score' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 221:                     // 'replace'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 262:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 278:                     // '{'
        lookahead2W(279);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 280:                     // '{|'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 111:                     // 'delete'
      case 160:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 186:                     // 'namespace'
      case 218:                     // 'processing-instruction'
        lookahead2W(272);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 237:                     // 'some'
      case 264:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 79:                      // 'array'
      case 125:                     // 'empty-sequence'
      case 166:                     // 'item'
      case 168:                     // 'json-item'
      case 244:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 97:                      // 'comment'
      case 120:                     // 'document'
      case 180:                     // 'map'
      case 204:                     // 'ordered'
      case 246:                     // 'text'
      case 252:                     // 'try'
      case 258:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 136:                     // 'following'
      case 137:                     // 'following-sibling'
      case 208:                     // 'parent'
      case 214:                     // 'preceding'
      case 215:                     // 'preceding-sibling'
      case 231:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 121:                     // 'document-node'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 135:                     // 'first'
      case 142:                     // 'ft-option'
      case 146:                     // 'function'
      case 147:                     // 'ge'
      case 149:                     // 'group'
      case 151:                     // 'gt'
      case 152:                     // 'idiv'
      case 153:                     // 'if'
      case 154:                     // 'import'
      case 155:                     // 'in'
      case 156:                     // 'index'
      case 161:                     // 'instance'
      case 162:                     // 'integrity'
      case 163:                     // 'intersect'
      case 164:                     // 'into'
      case 165:                     // 'is'
      case 167:                     // 'json'
      case 171:                     // 'last'
      case 172:                     // 'lax'
      case 173:                     // 'le'
      case 177:                     // 'loop'
      case 179:                     // 'lt'
      case 182:                     // 'mod'
      case 183:                     // 'modify'
      case 184:                     // 'module'
      case 187:                     // 'namespace-node'
      case 188:                     // 'ne'
      case 193:                     // 'node'
      case 194:                     // 'nodes'
      case 196:                     // 'object'
      case 200:                     // 'only'
      case 201:                     // 'option'
      case 202:                     // 'or'
      case 203:                     // 'order'
      case 205:                     // 'ordering'
      case 222:                     // 'return'
      case 223:                     // 'returning'
      case 224:                     // 'revalidation'
      case 226:                     // 'satisfies'
      case 227:                     // 'schema'
      case 228:                     // 'schema-attribute'
      case 229:                     // 'schema-element'
      case 230:                     // 'score'
      case 236:                     // 'sliding'
      case 238:                     // 'stable'
      case 239:                     // 'start'
      case 242:                     // 'strict'
      case 245:                     // 'switch'
      case 250:                     // 'to'
      case 251:                     // 'treat'
      case 253:                     // 'tumbling'
      case 254:                     // 'type'
      case 255:                     // 'typeswitch'
      case 256:                     // 'union'
      case 259:                     // 'updating'
      case 263:                     // 'value'
      case 265:                     // 'version'
      case 268:                     // 'where'
      case 269:                     // 'while'
      case 272:                     // 'with'
      case 276:                     // 'xquery'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 284                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12871               // 'after' EOF
       && lk != 12873               // 'allowing' EOF
       && lk != 12874               // 'ancestor' EOF
       && lk != 12875               // 'ancestor-or-self' EOF
       && lk != 12876               // 'and' EOF
       && lk != 12878               // 'append' EOF
       && lk != 12879               // 'array' EOF
       && lk != 12880               // 'as' EOF
       && lk != 12881               // 'ascending' EOF
       && lk != 12882               // 'at' EOF
       && lk != 12883               // 'attribute' EOF
       && lk != 12884               // 'base-uri' EOF
       && lk != 12885               // 'before' EOF
       && lk != 12886               // 'boundary-space' EOF
       && lk != 12887               // 'break' EOF
       && lk != 12889               // 'case' EOF
       && lk != 12890               // 'cast' EOF
       && lk != 12891               // 'castable' EOF
       && lk != 12892               // 'catch' EOF
       && lk != 12894               // 'child' EOF
       && lk != 12895               // 'collation' EOF
       && lk != 12897               // 'comment' EOF
       && lk != 12898               // 'constraint' EOF
       && lk != 12899               // 'construction' EOF
       && lk != 12902               // 'context' EOF
       && lk != 12903               // 'continue' EOF
       && lk != 12904               // 'copy' EOF
       && lk != 12905               // 'copy-namespaces' EOF
       && lk != 12906               // 'count' EOF
       && lk != 12907               // 'decimal-format' EOF
       && lk != 12909               // 'declare' EOF
       && lk != 12910               // 'default' EOF
       && lk != 12911               // 'delete' EOF
       && lk != 12912               // 'descendant' EOF
       && lk != 12913               // 'descendant-or-self' EOF
       && lk != 12914               // 'descending' EOF
       && lk != 12919               // 'div' EOF
       && lk != 12920               // 'document' EOF
       && lk != 12921               // 'document-node' EOF
       && lk != 12922               // 'element' EOF
       && lk != 12923               // 'else' EOF
       && lk != 12924               // 'empty' EOF
       && lk != 12925               // 'empty-sequence' EOF
       && lk != 12926               // 'encoding' EOF
       && lk != 12927               // 'end' EOF
       && lk != 12929               // 'eq' EOF
       && lk != 12930               // 'every' EOF
       && lk != 12932               // 'except' EOF
       && lk != 12933               // 'exit' EOF
       && lk != 12934               // 'external' EOF
       && lk != 12935               // 'first' EOF
       && lk != 12936               // 'following' EOF
       && lk != 12937               // 'following-sibling' EOF
       && lk != 12938               // 'for' EOF
       && lk != 12942               // 'ft-option' EOF
       && lk != 12946               // 'function' EOF
       && lk != 12947               // 'ge' EOF
       && lk != 12949               // 'group' EOF
       && lk != 12951               // 'gt' EOF
       && lk != 12952               // 'idiv' EOF
       && lk != 12953               // 'if' EOF
       && lk != 12954               // 'import' EOF
       && lk != 12955               // 'in' EOF
       && lk != 12956               // 'index' EOF
       && lk != 12960               // 'insert' EOF
       && lk != 12961               // 'instance' EOF
       && lk != 12962               // 'integrity' EOF
       && lk != 12963               // 'intersect' EOF
       && lk != 12964               // 'into' EOF
       && lk != 12965               // 'is' EOF
       && lk != 12966               // 'item' EOF
       && lk != 12967               // 'json' EOF
       && lk != 12968               // 'json-item' EOF
       && lk != 12971               // 'last' EOF
       && lk != 12972               // 'lax' EOF
       && lk != 12973               // 'le' EOF
       && lk != 12975               // 'let' EOF
       && lk != 12977               // 'loop' EOF
       && lk != 12979               // 'lt' EOF
       && lk != 12980               // 'map' EOF
       && lk != 12982               // 'mod' EOF
       && lk != 12983               // 'modify' EOF
       && lk != 12984               // 'module' EOF
       && lk != 12986               // 'namespace' EOF
       && lk != 12987               // 'namespace-node' EOF
       && lk != 12988               // 'ne' EOF
       && lk != 12993               // 'node' EOF
       && lk != 12994               // 'nodes' EOF
       && lk != 12996               // 'object' EOF
       && lk != 13000               // 'only' EOF
       && lk != 13001               // 'option' EOF
       && lk != 13002               // 'or' EOF
       && lk != 13003               // 'order' EOF
       && lk != 13004               // 'ordered' EOF
       && lk != 13005               // 'ordering' EOF
       && lk != 13008               // 'parent' EOF
       && lk != 13014               // 'preceding' EOF
       && lk != 13015               // 'preceding-sibling' EOF
       && lk != 13018               // 'processing-instruction' EOF
       && lk != 13020               // 'rename' EOF
       && lk != 13021               // 'replace' EOF
       && lk != 13022               // 'return' EOF
       && lk != 13023               // 'returning' EOF
       && lk != 13024               // 'revalidation' EOF
       && lk != 13026               // 'satisfies' EOF
       && lk != 13027               // 'schema' EOF
       && lk != 13028               // 'schema-attribute' EOF
       && lk != 13029               // 'schema-element' EOF
       && lk != 13030               // 'score' EOF
       && lk != 13031               // 'self' EOF
       && lk != 13036               // 'sliding' EOF
       && lk != 13037               // 'some' EOF
       && lk != 13038               // 'stable' EOF
       && lk != 13039               // 'start' EOF
       && lk != 13042               // 'strict' EOF
       && lk != 13044               // 'structured-item' EOF
       && lk != 13045               // 'switch' EOF
       && lk != 13046               // 'text' EOF
       && lk != 13050               // 'to' EOF
       && lk != 13051               // 'treat' EOF
       && lk != 13052               // 'try' EOF
       && lk != 13053               // 'tumbling' EOF
       && lk != 13054               // 'type' EOF
       && lk != 13055               // 'typeswitch' EOF
       && lk != 13056               // 'union' EOF
       && lk != 13058               // 'unordered' EOF
       && lk != 13059               // 'updating' EOF
       && lk != 13062               // 'validate' EOF
       && lk != 13063               // 'value' EOF
       && lk != 13064               // 'variable' EOF
       && lk != 13065               // 'version' EOF
       && lk != 13068               // 'where' EOF
       && lk != 13069               // 'while' EOF
       && lk != 13072               // 'with' EOF
       && lk != 13076               // 'xquery' EOF
       && lk != 16136               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21063               // 'after' ','
       && lk != 21065               // 'allowing' ','
       && lk != 21066               // 'ancestor' ','
       && lk != 21067               // 'ancestor-or-self' ','
       && lk != 21068               // 'and' ','
       && lk != 21070               // 'append' ','
       && lk != 21071               // 'array' ','
       && lk != 21072               // 'as' ','
       && lk != 21073               // 'ascending' ','
       && lk != 21074               // 'at' ','
       && lk != 21075               // 'attribute' ','
       && lk != 21076               // 'base-uri' ','
       && lk != 21077               // 'before' ','
       && lk != 21078               // 'boundary-space' ','
       && lk != 21079               // 'break' ','
       && lk != 21081               // 'case' ','
       && lk != 21082               // 'cast' ','
       && lk != 21083               // 'castable' ','
       && lk != 21084               // 'catch' ','
       && lk != 21086               // 'child' ','
       && lk != 21087               // 'collation' ','
       && lk != 21089               // 'comment' ','
       && lk != 21090               // 'constraint' ','
       && lk != 21091               // 'construction' ','
       && lk != 21094               // 'context' ','
       && lk != 21095               // 'continue' ','
       && lk != 21096               // 'copy' ','
       && lk != 21097               // 'copy-namespaces' ','
       && lk != 21098               // 'count' ','
       && lk != 21099               // 'decimal-format' ','
       && lk != 21101               // 'declare' ','
       && lk != 21102               // 'default' ','
       && lk != 21103               // 'delete' ','
       && lk != 21104               // 'descendant' ','
       && lk != 21105               // 'descendant-or-self' ','
       && lk != 21106               // 'descending' ','
       && lk != 21111               // 'div' ','
       && lk != 21112               // 'document' ','
       && lk != 21113               // 'document-node' ','
       && lk != 21114               // 'element' ','
       && lk != 21115               // 'else' ','
       && lk != 21116               // 'empty' ','
       && lk != 21117               // 'empty-sequence' ','
       && lk != 21118               // 'encoding' ','
       && lk != 21119               // 'end' ','
       && lk != 21121               // 'eq' ','
       && lk != 21122               // 'every' ','
       && lk != 21124               // 'except' ','
       && lk != 21125               // 'exit' ','
       && lk != 21126               // 'external' ','
       && lk != 21127               // 'first' ','
       && lk != 21128               // 'following' ','
       && lk != 21129               // 'following-sibling' ','
       && lk != 21130               // 'for' ','
       && lk != 21134               // 'ft-option' ','
       && lk != 21138               // 'function' ','
       && lk != 21139               // 'ge' ','
       && lk != 21141               // 'group' ','
       && lk != 21143               // 'gt' ','
       && lk != 21144               // 'idiv' ','
       && lk != 21145               // 'if' ','
       && lk != 21146               // 'import' ','
       && lk != 21147               // 'in' ','
       && lk != 21148               // 'index' ','
       && lk != 21152               // 'insert' ','
       && lk != 21153               // 'instance' ','
       && lk != 21154               // 'integrity' ','
       && lk != 21155               // 'intersect' ','
       && lk != 21156               // 'into' ','
       && lk != 21157               // 'is' ','
       && lk != 21158               // 'item' ','
       && lk != 21159               // 'json' ','
       && lk != 21160               // 'json-item' ','
       && lk != 21163               // 'last' ','
       && lk != 21164               // 'lax' ','
       && lk != 21165               // 'le' ','
       && lk != 21167               // 'let' ','
       && lk != 21169               // 'loop' ','
       && lk != 21171               // 'lt' ','
       && lk != 21172               // 'map' ','
       && lk != 21174               // 'mod' ','
       && lk != 21175               // 'modify' ','
       && lk != 21176               // 'module' ','
       && lk != 21178               // 'namespace' ','
       && lk != 21179               // 'namespace-node' ','
       && lk != 21180               // 'ne' ','
       && lk != 21185               // 'node' ','
       && lk != 21186               // 'nodes' ','
       && lk != 21188               // 'object' ','
       && lk != 21192               // 'only' ','
       && lk != 21193               // 'option' ','
       && lk != 21194               // 'or' ','
       && lk != 21195               // 'order' ','
       && lk != 21196               // 'ordered' ','
       && lk != 21197               // 'ordering' ','
       && lk != 21200               // 'parent' ','
       && lk != 21206               // 'preceding' ','
       && lk != 21207               // 'preceding-sibling' ','
       && lk != 21210               // 'processing-instruction' ','
       && lk != 21212               // 'rename' ','
       && lk != 21213               // 'replace' ','
       && lk != 21214               // 'return' ','
       && lk != 21215               // 'returning' ','
       && lk != 21216               // 'revalidation' ','
       && lk != 21218               // 'satisfies' ','
       && lk != 21219               // 'schema' ','
       && lk != 21220               // 'schema-attribute' ','
       && lk != 21221               // 'schema-element' ','
       && lk != 21222               // 'score' ','
       && lk != 21223               // 'self' ','
       && lk != 21228               // 'sliding' ','
       && lk != 21229               // 'some' ','
       && lk != 21230               // 'stable' ','
       && lk != 21231               // 'start' ','
       && lk != 21234               // 'strict' ','
       && lk != 21236               // 'structured-item' ','
       && lk != 21237               // 'switch' ','
       && lk != 21238               // 'text' ','
       && lk != 21242               // 'to' ','
       && lk != 21243               // 'treat' ','
       && lk != 21244               // 'try' ','
       && lk != 21245               // 'tumbling' ','
       && lk != 21246               // 'type' ','
       && lk != 21247               // 'typeswitch' ','
       && lk != 21248               // 'union' ','
       && lk != 21250               // 'unordered' ','
       && lk != 21251               // 'updating' ','
       && lk != 21254               // 'validate' ','
       && lk != 21255               // 'value' ','
       && lk != 21256               // 'variable' ','
       && lk != 21257               // 'version' ','
       && lk != 21260               // 'where' ','
       && lk != 21261               // 'while' ','
       && lk != 21264               // 'with' ','
       && lk != 21268               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27207               // 'after' ';'
       && lk != 27209               // 'allowing' ';'
       && lk != 27210               // 'ancestor' ';'
       && lk != 27211               // 'ancestor-or-self' ';'
       && lk != 27212               // 'and' ';'
       && lk != 27214               // 'append' ';'
       && lk != 27215               // 'array' ';'
       && lk != 27216               // 'as' ';'
       && lk != 27217               // 'ascending' ';'
       && lk != 27218               // 'at' ';'
       && lk != 27219               // 'attribute' ';'
       && lk != 27220               // 'base-uri' ';'
       && lk != 27221               // 'before' ';'
       && lk != 27222               // 'boundary-space' ';'
       && lk != 27223               // 'break' ';'
       && lk != 27225               // 'case' ';'
       && lk != 27226               // 'cast' ';'
       && lk != 27227               // 'castable' ';'
       && lk != 27228               // 'catch' ';'
       && lk != 27230               // 'child' ';'
       && lk != 27231               // 'collation' ';'
       && lk != 27233               // 'comment' ';'
       && lk != 27234               // 'constraint' ';'
       && lk != 27235               // 'construction' ';'
       && lk != 27238               // 'context' ';'
       && lk != 27239               // 'continue' ';'
       && lk != 27240               // 'copy' ';'
       && lk != 27241               // 'copy-namespaces' ';'
       && lk != 27242               // 'count' ';'
       && lk != 27243               // 'decimal-format' ';'
       && lk != 27245               // 'declare' ';'
       && lk != 27246               // 'default' ';'
       && lk != 27247               // 'delete' ';'
       && lk != 27248               // 'descendant' ';'
       && lk != 27249               // 'descendant-or-self' ';'
       && lk != 27250               // 'descending' ';'
       && lk != 27255               // 'div' ';'
       && lk != 27256               // 'document' ';'
       && lk != 27257               // 'document-node' ';'
       && lk != 27258               // 'element' ';'
       && lk != 27259               // 'else' ';'
       && lk != 27260               // 'empty' ';'
       && lk != 27261               // 'empty-sequence' ';'
       && lk != 27262               // 'encoding' ';'
       && lk != 27263               // 'end' ';'
       && lk != 27265               // 'eq' ';'
       && lk != 27266               // 'every' ';'
       && lk != 27268               // 'except' ';'
       && lk != 27269               // 'exit' ';'
       && lk != 27270               // 'external' ';'
       && lk != 27271               // 'first' ';'
       && lk != 27272               // 'following' ';'
       && lk != 27273               // 'following-sibling' ';'
       && lk != 27274               // 'for' ';'
       && lk != 27278               // 'ft-option' ';'
       && lk != 27282               // 'function' ';'
       && lk != 27283               // 'ge' ';'
       && lk != 27285               // 'group' ';'
       && lk != 27287               // 'gt' ';'
       && lk != 27288               // 'idiv' ';'
       && lk != 27289               // 'if' ';'
       && lk != 27290               // 'import' ';'
       && lk != 27291               // 'in' ';'
       && lk != 27292               // 'index' ';'
       && lk != 27296               // 'insert' ';'
       && lk != 27297               // 'instance' ';'
       && lk != 27298               // 'integrity' ';'
       && lk != 27299               // 'intersect' ';'
       && lk != 27300               // 'into' ';'
       && lk != 27301               // 'is' ';'
       && lk != 27302               // 'item' ';'
       && lk != 27303               // 'json' ';'
       && lk != 27304               // 'json-item' ';'
       && lk != 27307               // 'last' ';'
       && lk != 27308               // 'lax' ';'
       && lk != 27309               // 'le' ';'
       && lk != 27311               // 'let' ';'
       && lk != 27313               // 'loop' ';'
       && lk != 27315               // 'lt' ';'
       && lk != 27316               // 'map' ';'
       && lk != 27318               // 'mod' ';'
       && lk != 27319               // 'modify' ';'
       && lk != 27320               // 'module' ';'
       && lk != 27322               // 'namespace' ';'
       && lk != 27323               // 'namespace-node' ';'
       && lk != 27324               // 'ne' ';'
       && lk != 27329               // 'node' ';'
       && lk != 27330               // 'nodes' ';'
       && lk != 27332               // 'object' ';'
       && lk != 27336               // 'only' ';'
       && lk != 27337               // 'option' ';'
       && lk != 27338               // 'or' ';'
       && lk != 27339               // 'order' ';'
       && lk != 27340               // 'ordered' ';'
       && lk != 27341               // 'ordering' ';'
       && lk != 27344               // 'parent' ';'
       && lk != 27350               // 'preceding' ';'
       && lk != 27351               // 'preceding-sibling' ';'
       && lk != 27354               // 'processing-instruction' ';'
       && lk != 27356               // 'rename' ';'
       && lk != 27357               // 'replace' ';'
       && lk != 27358               // 'return' ';'
       && lk != 27359               // 'returning' ';'
       && lk != 27360               // 'revalidation' ';'
       && lk != 27362               // 'satisfies' ';'
       && lk != 27363               // 'schema' ';'
       && lk != 27364               // 'schema-attribute' ';'
       && lk != 27365               // 'schema-element' ';'
       && lk != 27366               // 'score' ';'
       && lk != 27367               // 'self' ';'
       && lk != 27372               // 'sliding' ';'
       && lk != 27373               // 'some' ';'
       && lk != 27374               // 'stable' ';'
       && lk != 27375               // 'start' ';'
       && lk != 27378               // 'strict' ';'
       && lk != 27380               // 'structured-item' ';'
       && lk != 27381               // 'switch' ';'
       && lk != 27382               // 'text' ';'
       && lk != 27386               // 'to' ';'
       && lk != 27387               // 'treat' ';'
       && lk != 27388               // 'try' ';'
       && lk != 27389               // 'tumbling' ';'
       && lk != 27390               // 'type' ';'
       && lk != 27391               // 'typeswitch' ';'
       && lk != 27392               // 'union' ';'
       && lk != 27394               // 'unordered' ';'
       && lk != 27395               // 'updating' ';'
       && lk != 27398               // 'validate' ';'
       && lk != 27399               // 'value' ';'
       && lk != 27400               // 'variable' ';'
       && lk != 27401               // 'version' ';'
       && lk != 27404               // 'where' ';'
       && lk != 27405               // 'while' ';'
       && lk != 27408               // 'with' ';'
       && lk != 27412               // 'xquery' ';'
       && lk != 90711               // 'break' 'loop'
       && lk != 90727               // 'continue' 'loop'
       && lk != 114309              // 'exit' 'returning'
       && lk != 145413              // Wildcard '}'
       && lk != 145414              // EQName^Token '}'
       && lk != 145416              // IntegerLiteral '}'
       && lk != 145417              // DecimalLiteral '}'
       && lk != 145418              // DoubleLiteral '}'
       && lk != 145419              // StringLiteral '}'
       && lk != 145452              // '.' '}'
       && lk != 145453              // '..' '}'
       && lk != 145454              // '/' '}'
       && lk != 145479              // 'after' '}'
       && lk != 145481              // 'allowing' '}'
       && lk != 145482              // 'ancestor' '}'
       && lk != 145483              // 'ancestor-or-self' '}'
       && lk != 145484              // 'and' '}'
       && lk != 145486              // 'append' '}'
       && lk != 145487              // 'array' '}'
       && lk != 145488              // 'as' '}'
       && lk != 145489              // 'ascending' '}'
       && lk != 145490              // 'at' '}'
       && lk != 145491              // 'attribute' '}'
       && lk != 145492              // 'base-uri' '}'
       && lk != 145493              // 'before' '}'
       && lk != 145494              // 'boundary-space' '}'
       && lk != 145495              // 'break' '}'
       && lk != 145497              // 'case' '}'
       && lk != 145498              // 'cast' '}'
       && lk != 145499              // 'castable' '}'
       && lk != 145500              // 'catch' '}'
       && lk != 145502              // 'child' '}'
       && lk != 145503              // 'collation' '}'
       && lk != 145505              // 'comment' '}'
       && lk != 145506              // 'constraint' '}'
       && lk != 145507              // 'construction' '}'
       && lk != 145510              // 'context' '}'
       && lk != 145511              // 'continue' '}'
       && lk != 145512              // 'copy' '}'
       && lk != 145513              // 'copy-namespaces' '}'
       && lk != 145514              // 'count' '}'
       && lk != 145515              // 'decimal-format' '}'
       && lk != 145517              // 'declare' '}'
       && lk != 145518              // 'default' '}'
       && lk != 145519              // 'delete' '}'
       && lk != 145520              // 'descendant' '}'
       && lk != 145521              // 'descendant-or-self' '}'
       && lk != 145522              // 'descending' '}'
       && lk != 145527              // 'div' '}'
       && lk != 145528              // 'document' '}'
       && lk != 145529              // 'document-node' '}'
       && lk != 145530              // 'element' '}'
       && lk != 145531              // 'else' '}'
       && lk != 145532              // 'empty' '}'
       && lk != 145533              // 'empty-sequence' '}'
       && lk != 145534              // 'encoding' '}'
       && lk != 145535              // 'end' '}'
       && lk != 145537              // 'eq' '}'
       && lk != 145538              // 'every' '}'
       && lk != 145540              // 'except' '}'
       && lk != 145541              // 'exit' '}'
       && lk != 145542              // 'external' '}'
       && lk != 145543              // 'first' '}'
       && lk != 145544              // 'following' '}'
       && lk != 145545              // 'following-sibling' '}'
       && lk != 145546              // 'for' '}'
       && lk != 145550              // 'ft-option' '}'
       && lk != 145554              // 'function' '}'
       && lk != 145555              // 'ge' '}'
       && lk != 145557              // 'group' '}'
       && lk != 145559              // 'gt' '}'
       && lk != 145560              // 'idiv' '}'
       && lk != 145561              // 'if' '}'
       && lk != 145562              // 'import' '}'
       && lk != 145563              // 'in' '}'
       && lk != 145564              // 'index' '}'
       && lk != 145568              // 'insert' '}'
       && lk != 145569              // 'instance' '}'
       && lk != 145570              // 'integrity' '}'
       && lk != 145571              // 'intersect' '}'
       && lk != 145572              // 'into' '}'
       && lk != 145573              // 'is' '}'
       && lk != 145574              // 'item' '}'
       && lk != 145575              // 'json' '}'
       && lk != 145576              // 'json-item' '}'
       && lk != 145579              // 'last' '}'
       && lk != 145580              // 'lax' '}'
       && lk != 145581              // 'le' '}'
       && lk != 145583              // 'let' '}'
       && lk != 145585              // 'loop' '}'
       && lk != 145587              // 'lt' '}'
       && lk != 145588              // 'map' '}'
       && lk != 145590              // 'mod' '}'
       && lk != 145591              // 'modify' '}'
       && lk != 145592              // 'module' '}'
       && lk != 145594              // 'namespace' '}'
       && lk != 145595              // 'namespace-node' '}'
       && lk != 145596              // 'ne' '}'
       && lk != 145601              // 'node' '}'
       && lk != 145602              // 'nodes' '}'
       && lk != 145604              // 'object' '}'
       && lk != 145608              // 'only' '}'
       && lk != 145609              // 'option' '}'
       && lk != 145610              // 'or' '}'
       && lk != 145611              // 'order' '}'
       && lk != 145612              // 'ordered' '}'
       && lk != 145613              // 'ordering' '}'
       && lk != 145616              // 'parent' '}'
       && lk != 145622              // 'preceding' '}'
       && lk != 145623              // 'preceding-sibling' '}'
       && lk != 145626              // 'processing-instruction' '}'
       && lk != 145628              // 'rename' '}'
       && lk != 145629              // 'replace' '}'
       && lk != 145630              // 'return' '}'
       && lk != 145631              // 'returning' '}'
       && lk != 145632              // 'revalidation' '}'
       && lk != 145634              // 'satisfies' '}'
       && lk != 145635              // 'schema' '}'
       && lk != 145636              // 'schema-attribute' '}'
       && lk != 145637              // 'schema-element' '}'
       && lk != 145638              // 'score' '}'
       && lk != 145639              // 'self' '}'
       && lk != 145644              // 'sliding' '}'
       && lk != 145645              // 'some' '}'
       && lk != 145646              // 'stable' '}'
       && lk != 145647              // 'start' '}'
       && lk != 145650              // 'strict' '}'
       && lk != 145652              // 'structured-item' '}'
       && lk != 145653              // 'switch' '}'
       && lk != 145654              // 'text' '}'
       && lk != 145658              // 'to' '}'
       && lk != 145659              // 'treat' '}'
       && lk != 145660              // 'try' '}'
       && lk != 145661              // 'tumbling' '}'
       && lk != 145662              // 'type' '}'
       && lk != 145663              // 'typeswitch' '}'
       && lk != 145664              // 'union' '}'
       && lk != 145666              // 'unordered' '}'
       && lk != 145667              // 'updating' '}'
       && lk != 145670              // 'validate' '}'
       && lk != 145671              // 'value' '}'
       && lk != 145672              // 'variable' '}'
       && lk != 145673              // 'version' '}'
       && lk != 145676              // 'where' '}'
       && lk != 145677              // 'while' '}'
       && lk != 145680              // 'with' '}'
       && lk != 145684)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16136               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27207               // 'after' ';'
       && lk != 27209               // 'allowing' ';'
       && lk != 27210               // 'ancestor' ';'
       && lk != 27211               // 'ancestor-or-self' ';'
       && lk != 27212               // 'and' ';'
       && lk != 27214               // 'append' ';'
       && lk != 27215               // 'array' ';'
       && lk != 27216               // 'as' ';'
       && lk != 27217               // 'ascending' ';'
       && lk != 27218               // 'at' ';'
       && lk != 27219               // 'attribute' ';'
       && lk != 27220               // 'base-uri' ';'
       && lk != 27221               // 'before' ';'
       && lk != 27222               // 'boundary-space' ';'
       && lk != 27223               // 'break' ';'
       && lk != 27225               // 'case' ';'
       && lk != 27226               // 'cast' ';'
       && lk != 27227               // 'castable' ';'
       && lk != 27228               // 'catch' ';'
       && lk != 27230               // 'child' ';'
       && lk != 27231               // 'collation' ';'
       && lk != 27233               // 'comment' ';'
       && lk != 27234               // 'constraint' ';'
       && lk != 27235               // 'construction' ';'
       && lk != 27238               // 'context' ';'
       && lk != 27239               // 'continue' ';'
       && lk != 27240               // 'copy' ';'
       && lk != 27241               // 'copy-namespaces' ';'
       && lk != 27242               // 'count' ';'
       && lk != 27243               // 'decimal-format' ';'
       && lk != 27245               // 'declare' ';'
       && lk != 27246               // 'default' ';'
       && lk != 27247               // 'delete' ';'
       && lk != 27248               // 'descendant' ';'
       && lk != 27249               // 'descendant-or-self' ';'
       && lk != 27250               // 'descending' ';'
       && lk != 27255               // 'div' ';'
       && lk != 27256               // 'document' ';'
       && lk != 27257               // 'document-node' ';'
       && lk != 27258               // 'element' ';'
       && lk != 27259               // 'else' ';'
       && lk != 27260               // 'empty' ';'
       && lk != 27261               // 'empty-sequence' ';'
       && lk != 27262               // 'encoding' ';'
       && lk != 27263               // 'end' ';'
       && lk != 27265               // 'eq' ';'
       && lk != 27266               // 'every' ';'
       && lk != 27268               // 'except' ';'
       && lk != 27269               // 'exit' ';'
       && lk != 27270               // 'external' ';'
       && lk != 27271               // 'first' ';'
       && lk != 27272               // 'following' ';'
       && lk != 27273               // 'following-sibling' ';'
       && lk != 27274               // 'for' ';'
       && lk != 27278               // 'ft-option' ';'
       && lk != 27282               // 'function' ';'
       && lk != 27283               // 'ge' ';'
       && lk != 27285               // 'group' ';'
       && lk != 27287               // 'gt' ';'
       && lk != 27288               // 'idiv' ';'
       && lk != 27289               // 'if' ';'
       && lk != 27290               // 'import' ';'
       && lk != 27291               // 'in' ';'
       && lk != 27292               // 'index' ';'
       && lk != 27296               // 'insert' ';'
       && lk != 27297               // 'instance' ';'
       && lk != 27298               // 'integrity' ';'
       && lk != 27299               // 'intersect' ';'
       && lk != 27300               // 'into' ';'
       && lk != 27301               // 'is' ';'
       && lk != 27302               // 'item' ';'
       && lk != 27303               // 'json' ';'
       && lk != 27304               // 'json-item' ';'
       && lk != 27307               // 'last' ';'
       && lk != 27308               // 'lax' ';'
       && lk != 27309               // 'le' ';'
       && lk != 27311               // 'let' ';'
       && lk != 27313               // 'loop' ';'
       && lk != 27315               // 'lt' ';'
       && lk != 27316               // 'map' ';'
       && lk != 27318               // 'mod' ';'
       && lk != 27319               // 'modify' ';'
       && lk != 27320               // 'module' ';'
       && lk != 27322               // 'namespace' ';'
       && lk != 27323               // 'namespace-node' ';'
       && lk != 27324               // 'ne' ';'
       && lk != 27329               // 'node' ';'
       && lk != 27330               // 'nodes' ';'
       && lk != 27332               // 'object' ';'
       && lk != 27336               // 'only' ';'
       && lk != 27337               // 'option' ';'
       && lk != 27338               // 'or' ';'
       && lk != 27339               // 'order' ';'
       && lk != 27340               // 'ordered' ';'
       && lk != 27341               // 'ordering' ';'
       && lk != 27344               // 'parent' ';'
       && lk != 27350               // 'preceding' ';'
       && lk != 27351               // 'preceding-sibling' ';'
       && lk != 27354               // 'processing-instruction' ';'
       && lk != 27356               // 'rename' ';'
       && lk != 27357               // 'replace' ';'
       && lk != 27358               // 'return' ';'
       && lk != 27359               // 'returning' ';'
       && lk != 27360               // 'revalidation' ';'
       && lk != 27362               // 'satisfies' ';'
       && lk != 27363               // 'schema' ';'
       && lk != 27364               // 'schema-attribute' ';'
       && lk != 27365               // 'schema-element' ';'
       && lk != 27366               // 'score' ';'
       && lk != 27367               // 'self' ';'
       && lk != 27372               // 'sliding' ';'
       && lk != 27373               // 'some' ';'
       && lk != 27374               // 'stable' ';'
       && lk != 27375               // 'start' ';'
       && lk != 27378               // 'strict' ';'
       && lk != 27380               // 'structured-item' ';'
       && lk != 27381               // 'switch' ';'
       && lk != 27382               // 'text' ';'
       && lk != 27386               // 'to' ';'
       && lk != 27387               // 'treat' ';'
       && lk != 27388               // 'try' ';'
       && lk != 27389               // 'tumbling' ';'
       && lk != 27390               // 'type' ';'
       && lk != 27391               // 'typeswitch' ';'
       && lk != 27392               // 'union' ';'
       && lk != 27394               // 'unordered' ';'
       && lk != 27395               // 'updating' ';'
       && lk != 27398               // 'validate' ';'
       && lk != 27399               // 'value' ';'
       && lk != 27400               // 'variable' ';'
       && lk != 27401               // 'version' ';'
       && lk != 27404               // 'where' ';'
       && lk != 27405               // 'while' ';'
       && lk != 27408               // 'with' ';'
       && lk != 27412               // 'xquery' ';'
       && lk != 90711               // 'break' 'loop'
       && lk != 90727               // 'continue' 'loop'
       && lk != 114309)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 284)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 284)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 138:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 175:                       // 'let'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 252:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||'
      break;
    case 264:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 153:                       // 'if'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
    case 269:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2838                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3350                  // '{' EQName^Token
     || lk == 4374                  // '{' IntegerLiteral
     || lk == 4886                  // '{' DecimalLiteral
     || lk == 5398                  // '{' DoubleLiteral
     || lk == 5910                  // '{' StringLiteral
     || lk == 16150                 // '{' '$'
     || lk == 16662                 // '{' '%'
     || lk == 17677                 // 'while' '('
     || lk == 17686                 // '{' '('
     || lk == 18198                 // '{' '(#'
     || lk == 20758                 // '{' '+'
     || lk == 21782                 // '{' '-'
     || lk == 22806                 // '{' '.'
     || lk == 23318                 // '{' '..'
     || lk == 23830                 // '{' '/'
     || lk == 24342                 // '{' '//'
     || lk == 27414                 // '{' ';'
     || lk == 27926                 // '{' '<'
     || lk == 28438                 // '{' '<!--'
     || lk == 30486                 // '{' '<?'
     || lk == 33558                 // '{' '?'
     || lk == 34582                 // '{' '@'
     || lk == 35606                 // '{' '['
     || lk == 36383                 // '$' 'after'
     || lk == 36384                 // '%' 'after'
     || lk == 36630                 // '{' 'after'
     || lk == 37407                 // '$' 'allowing'
     || lk == 37408                 // '%' 'allowing'
     || lk == 37654                 // '{' 'allowing'
     || lk == 37919                 // '$' 'ancestor'
     || lk == 37920                 // '%' 'ancestor'
     || lk == 38166                 // '{' 'ancestor'
     || lk == 38431                 // '$' 'ancestor-or-self'
     || lk == 38432                 // '%' 'ancestor-or-self'
     || lk == 38678                 // '{' 'ancestor-or-self'
     || lk == 38943                 // '$' 'and'
     || lk == 38944                 // '%' 'and'
     || lk == 39190                 // '{' 'and'
     || lk == 39967                 // '$' 'append'
     || lk == 39968                 // '%' 'append'
     || lk == 40214                 // '{' 'append'
     || lk == 40479                 // '$' 'array'
     || lk == 40480                 // '%' 'array'
     || lk == 40726                 // '{' 'array'
     || lk == 40991                 // '$' 'as'
     || lk == 40992                 // '%' 'as'
     || lk == 41238                 // '{' 'as'
     || lk == 41503                 // '$' 'ascending'
     || lk == 41504                 // '%' 'ascending'
     || lk == 41750                 // '{' 'ascending'
     || lk == 42015                 // '$' 'at'
     || lk == 42016                 // '%' 'at'
     || lk == 42262                 // '{' 'at'
     || lk == 42527                 // '$' 'attribute'
     || lk == 42528                 // '%' 'attribute'
     || lk == 42774                 // '{' 'attribute'
     || lk == 43039                 // '$' 'base-uri'
     || lk == 43040                 // '%' 'base-uri'
     || lk == 43286                 // '{' 'base-uri'
     || lk == 43551                 // '$' 'before'
     || lk == 43552                 // '%' 'before'
     || lk == 43798                 // '{' 'before'
     || lk == 44063                 // '$' 'boundary-space'
     || lk == 44064                 // '%' 'boundary-space'
     || lk == 44310                 // '{' 'boundary-space'
     || lk == 44575                 // '$' 'break'
     || lk == 44576                 // '%' 'break'
     || lk == 44822                 // '{' 'break'
     || lk == 45599                 // '$' 'case'
     || lk == 45600                 // '%' 'case'
     || lk == 45846                 // '{' 'case'
     || lk == 46111                 // '$' 'cast'
     || lk == 46112                 // '%' 'cast'
     || lk == 46358                 // '{' 'cast'
     || lk == 46623                 // '$' 'castable'
     || lk == 46624                 // '%' 'castable'
     || lk == 46870                 // '{' 'castable'
     || lk == 47135                 // '$' 'catch'
     || lk == 47136                 // '%' 'catch'
     || lk == 47382                 // '{' 'catch'
     || lk == 48159                 // '$' 'child'
     || lk == 48160                 // '%' 'child'
     || lk == 48406                 // '{' 'child'
     || lk == 48671                 // '$' 'collation'
     || lk == 48672                 // '%' 'collation'
     || lk == 48918                 // '{' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 49696                 // '%' 'comment'
     || lk == 49942                 // '{' 'comment'
     || lk == 50207                 // '$' 'constraint'
     || lk == 50208                 // '%' 'constraint'
     || lk == 50454                 // '{' 'constraint'
     || lk == 50719                 // '$' 'construction'
     || lk == 50720                 // '%' 'construction'
     || lk == 50966                 // '{' 'construction'
     || lk == 52255                 // '$' 'context'
     || lk == 52256                 // '%' 'context'
     || lk == 52502                 // '{' 'context'
     || lk == 52767                 // '$' 'continue'
     || lk == 52768                 // '%' 'continue'
     || lk == 53014                 // '{' 'continue'
     || lk == 53279                 // '$' 'copy'
     || lk == 53280                 // '%' 'copy'
     || lk == 53526                 // '{' 'copy'
     || lk == 53791                 // '$' 'copy-namespaces'
     || lk == 53792                 // '%' 'copy-namespaces'
     || lk == 54038                 // '{' 'copy-namespaces'
     || lk == 54303                 // '$' 'count'
     || lk == 54304                 // '%' 'count'
     || lk == 54550                 // '{' 'count'
     || lk == 54815                 // '$' 'decimal-format'
     || lk == 54816                 // '%' 'decimal-format'
     || lk == 55062                 // '{' 'decimal-format'
     || lk == 55839                 // '$' 'declare'
     || lk == 55840                 // '%' 'declare'
     || lk == 56086                 // '{' 'declare'
     || lk == 56351                 // '$' 'default'
     || lk == 56352                 // '%' 'default'
     || lk == 56598                 // '{' 'default'
     || lk == 56863                 // '$' 'delete'
     || lk == 56864                 // '%' 'delete'
     || lk == 57110                 // '{' 'delete'
     || lk == 57375                 // '$' 'descendant'
     || lk == 57376                 // '%' 'descendant'
     || lk == 57622                 // '{' 'descendant'
     || lk == 57887                 // '$' 'descendant-or-self'
     || lk == 57888                 // '%' 'descendant-or-self'
     || lk == 58134                 // '{' 'descendant-or-self'
     || lk == 58399                 // '$' 'descending'
     || lk == 58400                 // '%' 'descending'
     || lk == 58646                 // '{' 'descending'
     || lk == 60959                 // '$' 'div'
     || lk == 60960                 // '%' 'div'
     || lk == 61206                 // '{' 'div'
     || lk == 61471                 // '$' 'document'
     || lk == 61472                 // '%' 'document'
     || lk == 61718                 // '{' 'document'
     || lk == 61983                 // '$' 'document-node'
     || lk == 61984                 // '%' 'document-node'
     || lk == 62230                 // '{' 'document-node'
     || lk == 62495                 // '$' 'element'
     || lk == 62496                 // '%' 'element'
     || lk == 62742                 // '{' 'element'
     || lk == 63007                 // '$' 'else'
     || lk == 63008                 // '%' 'else'
     || lk == 63254                 // '{' 'else'
     || lk == 63519                 // '$' 'empty'
     || lk == 63520                 // '%' 'empty'
     || lk == 63766                 // '{' 'empty'
     || lk == 64031                 // '$' 'empty-sequence'
     || lk == 64032                 // '%' 'empty-sequence'
     || lk == 64278                 // '{' 'empty-sequence'
     || lk == 64543                 // '$' 'encoding'
     || lk == 64544                 // '%' 'encoding'
     || lk == 64790                 // '{' 'encoding'
     || lk == 65055                 // '$' 'end'
     || lk == 65056                 // '%' 'end'
     || lk == 65302                 // '{' 'end'
     || lk == 66079                 // '$' 'eq'
     || lk == 66080                 // '%' 'eq'
     || lk == 66326                 // '{' 'eq'
     || lk == 66591                 // '$' 'every'
     || lk == 66592                 // '%' 'every'
     || lk == 66838                 // '{' 'every'
     || lk == 67615                 // '$' 'except'
     || lk == 67616                 // '%' 'except'
     || lk == 67862                 // '{' 'except'
     || lk == 68127                 // '$' 'exit'
     || lk == 68128                 // '%' 'exit'
     || lk == 68374                 // '{' 'exit'
     || lk == 68639                 // '$' 'external'
     || lk == 68640                 // '%' 'external'
     || lk == 68886                 // '{' 'external'
     || lk == 69151                 // '$' 'first'
     || lk == 69152                 // '%' 'first'
     || lk == 69398                 // '{' 'first'
     || lk == 69663                 // '$' 'following'
     || lk == 69664                 // '%' 'following'
     || lk == 69910                 // '{' 'following'
     || lk == 70175                 // '$' 'following-sibling'
     || lk == 70176                 // '%' 'following-sibling'
     || lk == 70422                 // '{' 'following-sibling'
     || lk == 70687                 // '$' 'for'
     || lk == 70688                 // '%' 'for'
     || lk == 70934                 // '{' 'for'
     || lk == 72735                 // '$' 'ft-option'
     || lk == 72736                 // '%' 'ft-option'
     || lk == 72982                 // '{' 'ft-option'
     || lk == 74783                 // '$' 'function'
     || lk == 74784                 // '%' 'function'
     || lk == 75030                 // '{' 'function'
     || lk == 75295                 // '$' 'ge'
     || lk == 75296                 // '%' 'ge'
     || lk == 75542                 // '{' 'ge'
     || lk == 76319                 // '$' 'group'
     || lk == 76320                 // '%' 'group'
     || lk == 76566                 // '{' 'group'
     || lk == 77343                 // '$' 'gt'
     || lk == 77344                 // '%' 'gt'
     || lk == 77590                 // '{' 'gt'
     || lk == 77855                 // '$' 'idiv'
     || lk == 77856                 // '%' 'idiv'
     || lk == 78102                 // '{' 'idiv'
     || lk == 78367                 // '$' 'if'
     || lk == 78368                 // '%' 'if'
     || lk == 78614                 // '{' 'if'
     || lk == 78879                 // '$' 'import'
     || lk == 78880                 // '%' 'import'
     || lk == 79126                 // '{' 'import'
     || lk == 79391                 // '$' 'in'
     || lk == 79392                 // '%' 'in'
     || lk == 79638                 // '{' 'in'
     || lk == 79903                 // '$' 'index'
     || lk == 79904                 // '%' 'index'
     || lk == 80150                 // '{' 'index'
     || lk == 81951                 // '$' 'insert'
     || lk == 81952                 // '%' 'insert'
     || lk == 82198                 // '{' 'insert'
     || lk == 82463                 // '$' 'instance'
     || lk == 82464                 // '%' 'instance'
     || lk == 82710                 // '{' 'instance'
     || lk == 82975                 // '$' 'integrity'
     || lk == 82976                 // '%' 'integrity'
     || lk == 83222                 // '{' 'integrity'
     || lk == 83487                 // '$' 'intersect'
     || lk == 83488                 // '%' 'intersect'
     || lk == 83734                 // '{' 'intersect'
     || lk == 83999                 // '$' 'into'
     || lk == 84000                 // '%' 'into'
     || lk == 84246                 // '{' 'into'
     || lk == 84511                 // '$' 'is'
     || lk == 84512                 // '%' 'is'
     || lk == 84758                 // '{' 'is'
     || lk == 85023                 // '$' 'item'
     || lk == 85024                 // '%' 'item'
     || lk == 85270                 // '{' 'item'
     || lk == 85535                 // '$' 'json'
     || lk == 85536                 // '%' 'json'
     || lk == 85782                 // '{' 'json'
     || lk == 86047                 // '$' 'json-item'
     || lk == 86048                 // '%' 'json-item'
     || lk == 86294                 // '{' 'json-item'
     || lk == 87583                 // '$' 'last'
     || lk == 87584                 // '%' 'last'
     || lk == 87830                 // '{' 'last'
     || lk == 88095                 // '$' 'lax'
     || lk == 88096                 // '%' 'lax'
     || lk == 88342                 // '{' 'lax'
     || lk == 88607                 // '$' 'le'
     || lk == 88608                 // '%' 'le'
     || lk == 88854                 // '{' 'le'
     || lk == 89631                 // '$' 'let'
     || lk == 89632                 // '%' 'let'
     || lk == 89878                 // '{' 'let'
     || lk == 90655                 // '$' 'loop'
     || lk == 90656                 // '%' 'loop'
     || lk == 90902                 // '{' 'loop'
     || lk == 91679                 // '$' 'lt'
     || lk == 91680                 // '%' 'lt'
     || lk == 91926                 // '{' 'lt'
     || lk == 92191                 // '$' 'map'
     || lk == 92192                 // '%' 'map'
     || lk == 92438                 // '{' 'map'
     || lk == 93215                 // '$' 'mod'
     || lk == 93216                 // '%' 'mod'
     || lk == 93462                 // '{' 'mod'
     || lk == 93727                 // '$' 'modify'
     || lk == 93728                 // '%' 'modify'
     || lk == 93974                 // '{' 'modify'
     || lk == 94239                 // '$' 'module'
     || lk == 94240                 // '%' 'module'
     || lk == 94486                 // '{' 'module'
     || lk == 95263                 // '$' 'namespace'
     || lk == 95264                 // '%' 'namespace'
     || lk == 95510                 // '{' 'namespace'
     || lk == 95775                 // '$' 'namespace-node'
     || lk == 95776                 // '%' 'namespace-node'
     || lk == 96022                 // '{' 'namespace-node'
     || lk == 96287                 // '$' 'ne'
     || lk == 96288                 // '%' 'ne'
     || lk == 96534                 // '{' 'ne'
     || lk == 98847                 // '$' 'node'
     || lk == 98848                 // '%' 'node'
     || lk == 99094                 // '{' 'node'
     || lk == 99359                 // '$' 'nodes'
     || lk == 99360                 // '%' 'nodes'
     || lk == 99606                 // '{' 'nodes'
     || lk == 100383                // '$' 'object'
     || lk == 100384                // '%' 'object'
     || lk == 100630                // '{' 'object'
     || lk == 102431                // '$' 'only'
     || lk == 102432                // '%' 'only'
     || lk == 102678                // '{' 'only'
     || lk == 102943                // '$' 'option'
     || lk == 102944                // '%' 'option'
     || lk == 103190                // '{' 'option'
     || lk == 103455                // '$' 'or'
     || lk == 103456                // '%' 'or'
     || lk == 103702                // '{' 'or'
     || lk == 103967                // '$' 'order'
     || lk == 103968                // '%' 'order'
     || lk == 104214                // '{' 'order'
     || lk == 104479                // '$' 'ordered'
     || lk == 104480                // '%' 'ordered'
     || lk == 104726                // '{' 'ordered'
     || lk == 104991                // '$' 'ordering'
     || lk == 104992                // '%' 'ordering'
     || lk == 105238                // '{' 'ordering'
     || lk == 106527                // '$' 'parent'
     || lk == 106528                // '%' 'parent'
     || lk == 106774                // '{' 'parent'
     || lk == 109599                // '$' 'preceding'
     || lk == 109600                // '%' 'preceding'
     || lk == 109846                // '{' 'preceding'
     || lk == 110111                // '$' 'preceding-sibling'
     || lk == 110112                // '%' 'preceding-sibling'
     || lk == 110358                // '{' 'preceding-sibling'
     || lk == 111647                // '$' 'processing-instruction'
     || lk == 111648                // '%' 'processing-instruction'
     || lk == 111894                // '{' 'processing-instruction'
     || lk == 112671                // '$' 'rename'
     || lk == 112672                // '%' 'rename'
     || lk == 112918                // '{' 'rename'
     || lk == 113183                // '$' 'replace'
     || lk == 113184                // '%' 'replace'
     || lk == 113430                // '{' 'replace'
     || lk == 113695                // '$' 'return'
     || lk == 113696                // '%' 'return'
     || lk == 113942                // '{' 'return'
     || lk == 114207                // '$' 'returning'
     || lk == 114208                // '%' 'returning'
     || lk == 114454                // '{' 'returning'
     || lk == 114719                // '$' 'revalidation'
     || lk == 114720                // '%' 'revalidation'
     || lk == 114966                // '{' 'revalidation'
     || lk == 115743                // '$' 'satisfies'
     || lk == 115744                // '%' 'satisfies'
     || lk == 115990                // '{' 'satisfies'
     || lk == 116255                // '$' 'schema'
     || lk == 116256                // '%' 'schema'
     || lk == 116502                // '{' 'schema'
     || lk == 116767                // '$' 'schema-attribute'
     || lk == 116768                // '%' 'schema-attribute'
     || lk == 117014                // '{' 'schema-attribute'
     || lk == 117279                // '$' 'schema-element'
     || lk == 117280                // '%' 'schema-element'
     || lk == 117526                // '{' 'schema-element'
     || lk == 117791                // '$' 'score'
     || lk == 117792                // '%' 'score'
     || lk == 118038                // '{' 'score'
     || lk == 118303                // '$' 'self'
     || lk == 118304                // '%' 'self'
     || lk == 118550                // '{' 'self'
     || lk == 120863                // '$' 'sliding'
     || lk == 120864                // '%' 'sliding'
     || lk == 121110                // '{' 'sliding'
     || lk == 121375                // '$' 'some'
     || lk == 121376                // '%' 'some'
     || lk == 121622                // '{' 'some'
     || lk == 121887                // '$' 'stable'
     || lk == 121888                // '%' 'stable'
     || lk == 122134                // '{' 'stable'
     || lk == 122399                // '$' 'start'
     || lk == 122400                // '%' 'start'
     || lk == 122646                // '{' 'start'
     || lk == 123935                // '$' 'strict'
     || lk == 123936                // '%' 'strict'
     || lk == 124182                // '{' 'strict'
     || lk == 124959                // '$' 'structured-item'
     || lk == 124960                // '%' 'structured-item'
     || lk == 125206                // '{' 'structured-item'
     || lk == 125471                // '$' 'switch'
     || lk == 125472                // '%' 'switch'
     || lk == 125718                // '{' 'switch'
     || lk == 125983                // '$' 'text'
     || lk == 125984                // '%' 'text'
     || lk == 126230                // '{' 'text'
     || lk == 128031                // '$' 'to'
     || lk == 128032                // '%' 'to'
     || lk == 128278                // '{' 'to'
     || lk == 128543                // '$' 'treat'
     || lk == 128544                // '%' 'treat'
     || lk == 128790                // '{' 'treat'
     || lk == 129055                // '$' 'try'
     || lk == 129056                // '%' 'try'
     || lk == 129302                // '{' 'try'
     || lk == 129567                // '$' 'tumbling'
     || lk == 129568                // '%' 'tumbling'
     || lk == 129814                // '{' 'tumbling'
     || lk == 130079                // '$' 'type'
     || lk == 130080                // '%' 'type'
     || lk == 130326                // '{' 'type'
     || lk == 130591                // '$' 'typeswitch'
     || lk == 130592                // '%' 'typeswitch'
     || lk == 130838                // '{' 'typeswitch'
     || lk == 131103                // '$' 'union'
     || lk == 131104                // '%' 'union'
     || lk == 131350                // '{' 'union'
     || lk == 132127                // '$' 'unordered'
     || lk == 132128                // '%' 'unordered'
     || lk == 132374                // '{' 'unordered'
     || lk == 132639                // '$' 'updating'
     || lk == 132640                // '%' 'updating'
     || lk == 132886                // '{' 'updating'
     || lk == 134175                // '$' 'validate'
     || lk == 134176                // '%' 'validate'
     || lk == 134422                // '{' 'validate'
     || lk == 134687                // '$' 'value'
     || lk == 134688                // '%' 'value'
     || lk == 134934                // '{' 'value'
     || lk == 135199                // '$' 'variable'
     || lk == 135200                // '%' 'variable'
     || lk == 135446                // '{' 'variable'
     || lk == 135711                // '$' 'version'
     || lk == 135712                // '%' 'version'
     || lk == 135958                // '{' 'version'
     || lk == 137247                // '$' 'where'
     || lk == 137248                // '%' 'where'
     || lk == 137494                // '{' 'where'
     || lk == 137759                // '$' 'while'
     || lk == 137760                // '%' 'while'
     || lk == 138006                // '{' 'while'
     || lk == 139295                // '$' 'with'
     || lk == 139296                // '%' 'with'
     || lk == 139542                // '{' 'with'
     || lk == 141343                // '$' 'xquery'
     || lk == 141344                // '%' 'xquery'
     || lk == 141590                // '{' 'xquery'
     || lk == 142614                // '{' '{'
     || lk == 143638                // '{' '{|'
     || lk == 145686)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90711:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90727:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 114309:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16010:                     // 'for' '$'
    case 16047:                     // 'let' '$'
    case 117935:                    // 'let' 'score'
    case 120970:                    // 'for' 'sliding'
    case 129674:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17561:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17653:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 142588:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17663:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16136:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 53:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 138:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 175:                       // 'let'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 252:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||'
      break;
    case 264:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 153:                       // 'if'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
    case 269:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2838                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3350                  // '{' EQName^Token
     || lk == 4374                  // '{' IntegerLiteral
     || lk == 4886                  // '{' DecimalLiteral
     || lk == 5398                  // '{' DoubleLiteral
     || lk == 5910                  // '{' StringLiteral
     || lk == 16150                 // '{' '$'
     || lk == 16662                 // '{' '%'
     || lk == 17677                 // 'while' '('
     || lk == 17686                 // '{' '('
     || lk == 18198                 // '{' '(#'
     || lk == 20758                 // '{' '+'
     || lk == 21782                 // '{' '-'
     || lk == 22806                 // '{' '.'
     || lk == 23318                 // '{' '..'
     || lk == 23830                 // '{' '/'
     || lk == 24342                 // '{' '//'
     || lk == 27414                 // '{' ';'
     || lk == 27926                 // '{' '<'
     || lk == 28438                 // '{' '<!--'
     || lk == 30486                 // '{' '<?'
     || lk == 33558                 // '{' '?'
     || lk == 34582                 // '{' '@'
     || lk == 35606                 // '{' '['
     || lk == 36383                 // '$' 'after'
     || lk == 36384                 // '%' 'after'
     || lk == 36630                 // '{' 'after'
     || lk == 37407                 // '$' 'allowing'
     || lk == 37408                 // '%' 'allowing'
     || lk == 37654                 // '{' 'allowing'
     || lk == 37919                 // '$' 'ancestor'
     || lk == 37920                 // '%' 'ancestor'
     || lk == 38166                 // '{' 'ancestor'
     || lk == 38431                 // '$' 'ancestor-or-self'
     || lk == 38432                 // '%' 'ancestor-or-self'
     || lk == 38678                 // '{' 'ancestor-or-self'
     || lk == 38943                 // '$' 'and'
     || lk == 38944                 // '%' 'and'
     || lk == 39190                 // '{' 'and'
     || lk == 39967                 // '$' 'append'
     || lk == 39968                 // '%' 'append'
     || lk == 40214                 // '{' 'append'
     || lk == 40479                 // '$' 'array'
     || lk == 40480                 // '%' 'array'
     || lk == 40726                 // '{' 'array'
     || lk == 40991                 // '$' 'as'
     || lk == 40992                 // '%' 'as'
     || lk == 41238                 // '{' 'as'
     || lk == 41503                 // '$' 'ascending'
     || lk == 41504                 // '%' 'ascending'
     || lk == 41750                 // '{' 'ascending'
     || lk == 42015                 // '$' 'at'
     || lk == 42016                 // '%' 'at'
     || lk == 42262                 // '{' 'at'
     || lk == 42527                 // '$' 'attribute'
     || lk == 42528                 // '%' 'attribute'
     || lk == 42774                 // '{' 'attribute'
     || lk == 43039                 // '$' 'base-uri'
     || lk == 43040                 // '%' 'base-uri'
     || lk == 43286                 // '{' 'base-uri'
     || lk == 43551                 // '$' 'before'
     || lk == 43552                 // '%' 'before'
     || lk == 43798                 // '{' 'before'
     || lk == 44063                 // '$' 'boundary-space'
     || lk == 44064                 // '%' 'boundary-space'
     || lk == 44310                 // '{' 'boundary-space'
     || lk == 44575                 // '$' 'break'
     || lk == 44576                 // '%' 'break'
     || lk == 44822                 // '{' 'break'
     || lk == 45599                 // '$' 'case'
     || lk == 45600                 // '%' 'case'
     || lk == 45846                 // '{' 'case'
     || lk == 46111                 // '$' 'cast'
     || lk == 46112                 // '%' 'cast'
     || lk == 46358                 // '{' 'cast'
     || lk == 46623                 // '$' 'castable'
     || lk == 46624                 // '%' 'castable'
     || lk == 46870                 // '{' 'castable'
     || lk == 47135                 // '$' 'catch'
     || lk == 47136                 // '%' 'catch'
     || lk == 47382                 // '{' 'catch'
     || lk == 48159                 // '$' 'child'
     || lk == 48160                 // '%' 'child'
     || lk == 48406                 // '{' 'child'
     || lk == 48671                 // '$' 'collation'
     || lk == 48672                 // '%' 'collation'
     || lk == 48918                 // '{' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 49696                 // '%' 'comment'
     || lk == 49942                 // '{' 'comment'
     || lk == 50207                 // '$' 'constraint'
     || lk == 50208                 // '%' 'constraint'
     || lk == 50454                 // '{' 'constraint'
     || lk == 50719                 // '$' 'construction'
     || lk == 50720                 // '%' 'construction'
     || lk == 50966                 // '{' 'construction'
     || lk == 52255                 // '$' 'context'
     || lk == 52256                 // '%' 'context'
     || lk == 52502                 // '{' 'context'
     || lk == 52767                 // '$' 'continue'
     || lk == 52768                 // '%' 'continue'
     || lk == 53014                 // '{' 'continue'
     || lk == 53279                 // '$' 'copy'
     || lk == 53280                 // '%' 'copy'
     || lk == 53526                 // '{' 'copy'
     || lk == 53791                 // '$' 'copy-namespaces'
     || lk == 53792                 // '%' 'copy-namespaces'
     || lk == 54038                 // '{' 'copy-namespaces'
     || lk == 54303                 // '$' 'count'
     || lk == 54304                 // '%' 'count'
     || lk == 54550                 // '{' 'count'
     || lk == 54815                 // '$' 'decimal-format'
     || lk == 54816                 // '%' 'decimal-format'
     || lk == 55062                 // '{' 'decimal-format'
     || lk == 55839                 // '$' 'declare'
     || lk == 55840                 // '%' 'declare'
     || lk == 56086                 // '{' 'declare'
     || lk == 56351                 // '$' 'default'
     || lk == 56352                 // '%' 'default'
     || lk == 56598                 // '{' 'default'
     || lk == 56863                 // '$' 'delete'
     || lk == 56864                 // '%' 'delete'
     || lk == 57110                 // '{' 'delete'
     || lk == 57375                 // '$' 'descendant'
     || lk == 57376                 // '%' 'descendant'
     || lk == 57622                 // '{' 'descendant'
     || lk == 57887                 // '$' 'descendant-or-self'
     || lk == 57888                 // '%' 'descendant-or-self'
     || lk == 58134                 // '{' 'descendant-or-self'
     || lk == 58399                 // '$' 'descending'
     || lk == 58400                 // '%' 'descending'
     || lk == 58646                 // '{' 'descending'
     || lk == 60959                 // '$' 'div'
     || lk == 60960                 // '%' 'div'
     || lk == 61206                 // '{' 'div'
     || lk == 61471                 // '$' 'document'
     || lk == 61472                 // '%' 'document'
     || lk == 61718                 // '{' 'document'
     || lk == 61983                 // '$' 'document-node'
     || lk == 61984                 // '%' 'document-node'
     || lk == 62230                 // '{' 'document-node'
     || lk == 62495                 // '$' 'element'
     || lk == 62496                 // '%' 'element'
     || lk == 62742                 // '{' 'element'
     || lk == 63007                 // '$' 'else'
     || lk == 63008                 // '%' 'else'
     || lk == 63254                 // '{' 'else'
     || lk == 63519                 // '$' 'empty'
     || lk == 63520                 // '%' 'empty'
     || lk == 63766                 // '{' 'empty'
     || lk == 64031                 // '$' 'empty-sequence'
     || lk == 64032                 // '%' 'empty-sequence'
     || lk == 64278                 // '{' 'empty-sequence'
     || lk == 64543                 // '$' 'encoding'
     || lk == 64544                 // '%' 'encoding'
     || lk == 64790                 // '{' 'encoding'
     || lk == 65055                 // '$' 'end'
     || lk == 65056                 // '%' 'end'
     || lk == 65302                 // '{' 'end'
     || lk == 66079                 // '$' 'eq'
     || lk == 66080                 // '%' 'eq'
     || lk == 66326                 // '{' 'eq'
     || lk == 66591                 // '$' 'every'
     || lk == 66592                 // '%' 'every'
     || lk == 66838                 // '{' 'every'
     || lk == 67615                 // '$' 'except'
     || lk == 67616                 // '%' 'except'
     || lk == 67862                 // '{' 'except'
     || lk == 68127                 // '$' 'exit'
     || lk == 68128                 // '%' 'exit'
     || lk == 68374                 // '{' 'exit'
     || lk == 68639                 // '$' 'external'
     || lk == 68640                 // '%' 'external'
     || lk == 68886                 // '{' 'external'
     || lk == 69151                 // '$' 'first'
     || lk == 69152                 // '%' 'first'
     || lk == 69398                 // '{' 'first'
     || lk == 69663                 // '$' 'following'
     || lk == 69664                 // '%' 'following'
     || lk == 69910                 // '{' 'following'
     || lk == 70175                 // '$' 'following-sibling'
     || lk == 70176                 // '%' 'following-sibling'
     || lk == 70422                 // '{' 'following-sibling'
     || lk == 70687                 // '$' 'for'
     || lk == 70688                 // '%' 'for'
     || lk == 70934                 // '{' 'for'
     || lk == 72735                 // '$' 'ft-option'
     || lk == 72736                 // '%' 'ft-option'
     || lk == 72982                 // '{' 'ft-option'
     || lk == 74783                 // '$' 'function'
     || lk == 74784                 // '%' 'function'
     || lk == 75030                 // '{' 'function'
     || lk == 75295                 // '$' 'ge'
     || lk == 75296                 // '%' 'ge'
     || lk == 75542                 // '{' 'ge'
     || lk == 76319                 // '$' 'group'
     || lk == 76320                 // '%' 'group'
     || lk == 76566                 // '{' 'group'
     || lk == 77343                 // '$' 'gt'
     || lk == 77344                 // '%' 'gt'
     || lk == 77590                 // '{' 'gt'
     || lk == 77855                 // '$' 'idiv'
     || lk == 77856                 // '%' 'idiv'
     || lk == 78102                 // '{' 'idiv'
     || lk == 78367                 // '$' 'if'
     || lk == 78368                 // '%' 'if'
     || lk == 78614                 // '{' 'if'
     || lk == 78879                 // '$' 'import'
     || lk == 78880                 // '%' 'import'
     || lk == 79126                 // '{' 'import'
     || lk == 79391                 // '$' 'in'
     || lk == 79392                 // '%' 'in'
     || lk == 79638                 // '{' 'in'
     || lk == 79903                 // '$' 'index'
     || lk == 79904                 // '%' 'index'
     || lk == 80150                 // '{' 'index'
     || lk == 81951                 // '$' 'insert'
     || lk == 81952                 // '%' 'insert'
     || lk == 82198                 // '{' 'insert'
     || lk == 82463                 // '$' 'instance'
     || lk == 82464                 // '%' 'instance'
     || lk == 82710                 // '{' 'instance'
     || lk == 82975                 // '$' 'integrity'
     || lk == 82976                 // '%' 'integrity'
     || lk == 83222                 // '{' 'integrity'
     || lk == 83487                 // '$' 'intersect'
     || lk == 83488                 // '%' 'intersect'
     || lk == 83734                 // '{' 'intersect'
     || lk == 83999                 // '$' 'into'
     || lk == 84000                 // '%' 'into'
     || lk == 84246                 // '{' 'into'
     || lk == 84511                 // '$' 'is'
     || lk == 84512                 // '%' 'is'
     || lk == 84758                 // '{' 'is'
     || lk == 85023                 // '$' 'item'
     || lk == 85024                 // '%' 'item'
     || lk == 85270                 // '{' 'item'
     || lk == 85535                 // '$' 'json'
     || lk == 85536                 // '%' 'json'
     || lk == 85782                 // '{' 'json'
     || lk == 86047                 // '$' 'json-item'
     || lk == 86048                 // '%' 'json-item'
     || lk == 86294                 // '{' 'json-item'
     || lk == 87583                 // '$' 'last'
     || lk == 87584                 // '%' 'last'
     || lk == 87830                 // '{' 'last'
     || lk == 88095                 // '$' 'lax'
     || lk == 88096                 // '%' 'lax'
     || lk == 88342                 // '{' 'lax'
     || lk == 88607                 // '$' 'le'
     || lk == 88608                 // '%' 'le'
     || lk == 88854                 // '{' 'le'
     || lk == 89631                 // '$' 'let'
     || lk == 89632                 // '%' 'let'
     || lk == 89878                 // '{' 'let'
     || lk == 90655                 // '$' 'loop'
     || lk == 90656                 // '%' 'loop'
     || lk == 90902                 // '{' 'loop'
     || lk == 91679                 // '$' 'lt'
     || lk == 91680                 // '%' 'lt'
     || lk == 91926                 // '{' 'lt'
     || lk == 92191                 // '$' 'map'
     || lk == 92192                 // '%' 'map'
     || lk == 92438                 // '{' 'map'
     || lk == 93215                 // '$' 'mod'
     || lk == 93216                 // '%' 'mod'
     || lk == 93462                 // '{' 'mod'
     || lk == 93727                 // '$' 'modify'
     || lk == 93728                 // '%' 'modify'
     || lk == 93974                 // '{' 'modify'
     || lk == 94239                 // '$' 'module'
     || lk == 94240                 // '%' 'module'
     || lk == 94486                 // '{' 'module'
     || lk == 95263                 // '$' 'namespace'
     || lk == 95264                 // '%' 'namespace'
     || lk == 95510                 // '{' 'namespace'
     || lk == 95775                 // '$' 'namespace-node'
     || lk == 95776                 // '%' 'namespace-node'
     || lk == 96022                 // '{' 'namespace-node'
     || lk == 96287                 // '$' 'ne'
     || lk == 96288                 // '%' 'ne'
     || lk == 96534                 // '{' 'ne'
     || lk == 98847                 // '$' 'node'
     || lk == 98848                 // '%' 'node'
     || lk == 99094                 // '{' 'node'
     || lk == 99359                 // '$' 'nodes'
     || lk == 99360                 // '%' 'nodes'
     || lk == 99606                 // '{' 'nodes'
     || lk == 100383                // '$' 'object'
     || lk == 100384                // '%' 'object'
     || lk == 100630                // '{' 'object'
     || lk == 102431                // '$' 'only'
     || lk == 102432                // '%' 'only'
     || lk == 102678                // '{' 'only'
     || lk == 102943                // '$' 'option'
     || lk == 102944                // '%' 'option'
     || lk == 103190                // '{' 'option'
     || lk == 103455                // '$' 'or'
     || lk == 103456                // '%' 'or'
     || lk == 103702                // '{' 'or'
     || lk == 103967                // '$' 'order'
     || lk == 103968                // '%' 'order'
     || lk == 104214                // '{' 'order'
     || lk == 104479                // '$' 'ordered'
     || lk == 104480                // '%' 'ordered'
     || lk == 104726                // '{' 'ordered'
     || lk == 104991                // '$' 'ordering'
     || lk == 104992                // '%' 'ordering'
     || lk == 105238                // '{' 'ordering'
     || lk == 106527                // '$' 'parent'
     || lk == 106528                // '%' 'parent'
     || lk == 106774                // '{' 'parent'
     || lk == 109599                // '$' 'preceding'
     || lk == 109600                // '%' 'preceding'
     || lk == 109846                // '{' 'preceding'
     || lk == 110111                // '$' 'preceding-sibling'
     || lk == 110112                // '%' 'preceding-sibling'
     || lk == 110358                // '{' 'preceding-sibling'
     || lk == 111647                // '$' 'processing-instruction'
     || lk == 111648                // '%' 'processing-instruction'
     || lk == 111894                // '{' 'processing-instruction'
     || lk == 112671                // '$' 'rename'
     || lk == 112672                // '%' 'rename'
     || lk == 112918                // '{' 'rename'
     || lk == 113183                // '$' 'replace'
     || lk == 113184                // '%' 'replace'
     || lk == 113430                // '{' 'replace'
     || lk == 113695                // '$' 'return'
     || lk == 113696                // '%' 'return'
     || lk == 113942                // '{' 'return'
     || lk == 114207                // '$' 'returning'
     || lk == 114208                // '%' 'returning'
     || lk == 114454                // '{' 'returning'
     || lk == 114719                // '$' 'revalidation'
     || lk == 114720                // '%' 'revalidation'
     || lk == 114966                // '{' 'revalidation'
     || lk == 115743                // '$' 'satisfies'
     || lk == 115744                // '%' 'satisfies'
     || lk == 115990                // '{' 'satisfies'
     || lk == 116255                // '$' 'schema'
     || lk == 116256                // '%' 'schema'
     || lk == 116502                // '{' 'schema'
     || lk == 116767                // '$' 'schema-attribute'
     || lk == 116768                // '%' 'schema-attribute'
     || lk == 117014                // '{' 'schema-attribute'
     || lk == 117279                // '$' 'schema-element'
     || lk == 117280                // '%' 'schema-element'
     || lk == 117526                // '{' 'schema-element'
     || lk == 117791                // '$' 'score'
     || lk == 117792                // '%' 'score'
     || lk == 118038                // '{' 'score'
     || lk == 118303                // '$' 'self'
     || lk == 118304                // '%' 'self'
     || lk == 118550                // '{' 'self'
     || lk == 120863                // '$' 'sliding'
     || lk == 120864                // '%' 'sliding'
     || lk == 121110                // '{' 'sliding'
     || lk == 121375                // '$' 'some'
     || lk == 121376                // '%' 'some'
     || lk == 121622                // '{' 'some'
     || lk == 121887                // '$' 'stable'
     || lk == 121888                // '%' 'stable'
     || lk == 122134                // '{' 'stable'
     || lk == 122399                // '$' 'start'
     || lk == 122400                // '%' 'start'
     || lk == 122646                // '{' 'start'
     || lk == 123935                // '$' 'strict'
     || lk == 123936                // '%' 'strict'
     || lk == 124182                // '{' 'strict'
     || lk == 124959                // '$' 'structured-item'
     || lk == 124960                // '%' 'structured-item'
     || lk == 125206                // '{' 'structured-item'
     || lk == 125471                // '$' 'switch'
     || lk == 125472                // '%' 'switch'
     || lk == 125718                // '{' 'switch'
     || lk == 125983                // '$' 'text'
     || lk == 125984                // '%' 'text'
     || lk == 126230                // '{' 'text'
     || lk == 128031                // '$' 'to'
     || lk == 128032                // '%' 'to'
     || lk == 128278                // '{' 'to'
     || lk == 128543                // '$' 'treat'
     || lk == 128544                // '%' 'treat'
     || lk == 128790                // '{' 'treat'
     || lk == 129055                // '$' 'try'
     || lk == 129056                // '%' 'try'
     || lk == 129302                // '{' 'try'
     || lk == 129567                // '$' 'tumbling'
     || lk == 129568                // '%' 'tumbling'
     || lk == 129814                // '{' 'tumbling'
     || lk == 130079                // '$' 'type'
     || lk == 130080                // '%' 'type'
     || lk == 130326                // '{' 'type'
     || lk == 130591                // '$' 'typeswitch'
     || lk == 130592                // '%' 'typeswitch'
     || lk == 130838                // '{' 'typeswitch'
     || lk == 131103                // '$' 'union'
     || lk == 131104                // '%' 'union'
     || lk == 131350                // '{' 'union'
     || lk == 132127                // '$' 'unordered'
     || lk == 132128                // '%' 'unordered'
     || lk == 132374                // '{' 'unordered'
     || lk == 132639                // '$' 'updating'
     || lk == 132640                // '%' 'updating'
     || lk == 132886                // '{' 'updating'
     || lk == 134175                // '$' 'validate'
     || lk == 134176                // '%' 'validate'
     || lk == 134422                // '{' 'validate'
     || lk == 134687                // '$' 'value'
     || lk == 134688                // '%' 'value'
     || lk == 134934                // '{' 'value'
     || lk == 135199                // '$' 'variable'
     || lk == 135200                // '%' 'variable'
     || lk == 135446                // '{' 'variable'
     || lk == 135711                // '$' 'version'
     || lk == 135712                // '%' 'version'
     || lk == 135958                // '{' 'version'
     || lk == 137247                // '$' 'where'
     || lk == 137248                // '%' 'where'
     || lk == 137494                // '{' 'where'
     || lk == 137759                // '$' 'while'
     || lk == 137760                // '%' 'while'
     || lk == 138006                // '{' 'while'
     || lk == 139295                // '$' 'with'
     || lk == 139296                // '%' 'with'
     || lk == 139542                // '{' 'with'
     || lk == 141343                // '$' 'xquery'
     || lk == 141344                // '%' 'xquery'
     || lk == 141590                // '{' 'xquery'
     || lk == 142614                // '{' '{'
     || lk == 143638                // '{' '{|'
     || lk == 145686)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90711:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90727:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 114309:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16010:                     // 'for' '$'
    case 16047:                     // 'let' '$'
    case 117935:                    // 'let' 'score'
    case 120970:                    // 'for' 'sliding'
    case 129674:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17561:                     // 'if' '('
      try_IfStatement();
      break;
    case 17653:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 142588:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17663:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16136:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 53:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(53);                   // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(278);                   // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(284);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(278);                  // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(284);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(87);                    // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(177);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(87);                   // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(177);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(103);                   // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(177);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(103);                  // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(177);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(133);                   // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consume(223);                   // 'returning'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(133);                  // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consumeT(223);                  // 'returning'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 222)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 222)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(222);                   // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(222);                  // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(153);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(247);                   // 'then'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(123);                   // 'else'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(153);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(247);                  // 'then'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(123);                  // 'else'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(245);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consume(110);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(222);                   // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(245);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consumeT(110);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(222);                  // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(89);                  // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consume(222);                   // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(89);                 // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consumeT(222);                  // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(252);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(92);                  // 'catch'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(280);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(281);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 39004               // 'catch' 'and'
       || lk == 46172               // 'catch' 'cast'
       || lk == 46684               // 'catch' 'castable'
       || lk == 61020               // 'catch' 'div'
       || lk == 66140               // 'catch' 'eq'
       || lk == 67676               // 'catch' 'except'
       || lk == 75356               // 'catch' 'ge'
       || lk == 77404               // 'catch' 'gt'
       || lk == 77916               // 'catch' 'idiv'
       || lk == 82524               // 'catch' 'instance'
       || lk == 83548               // 'catch' 'intersect'
       || lk == 84572               // 'catch' 'is'
       || lk == 88668               // 'catch' 'le'
       || lk == 91740               // 'catch' 'lt'
       || lk == 93276               // 'catch' 'mod'
       || lk == 96348               // 'catch' 'ne'
       || lk == 103516              // 'catch' 'or'
       || lk == 128092              // 'catch' 'to'
       || lk == 128604              // 'catch' 'treat'
       || lk == 131164)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(92);           // 'catch'
            lookahead1W(258);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 40028               // 'catch' 'append'
       && lk != 40540               // 'catch' 'array'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 42588               // 'catch' 'attribute'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 49756               // 'catch' 'comment'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61532               // 'catch' 'document'
       && lk != 62044               // 'catch' 'document-node'
       && lk != 62556               // 'catch' 'element'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64092               // 'catch' 'empty-sequence'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66652               // 'catch' 'every'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'first'
       && lk != 69724               // 'catch' 'following'
       && lk != 70236               // 'catch' 'following-sibling'
       && lk != 70748               // 'catch' 'for'
       && lk != 72796               // 'catch' 'ft-option'
       && lk != 74844               // 'catch' 'function'
       && lk != 76380               // 'catch' 'group'
       && lk != 78428               // 'catch' 'if'
       && lk != 78940               // 'catch' 'import'
       && lk != 79452               // 'catch' 'in'
       && lk != 79964               // 'catch' 'index'
       && lk != 82012               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'into'
       && lk != 85084               // 'catch' 'item'
       && lk != 85596               // 'catch' 'json'
       && lk != 86108               // 'catch' 'json-item'
       && lk != 87644               // 'catch' 'last'
       && lk != 88156               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'let'
       && lk != 90716               // 'catch' 'loop'
       && lk != 92252               // 'catch' 'map'
       && lk != 93788               // 'catch' 'modify'
       && lk != 94300               // 'catch' 'module'
       && lk != 95324               // 'catch' 'namespace'
       && lk != 95836               // 'catch' 'namespace-node'
       && lk != 98908               // 'catch' 'node'
       && lk != 99420               // 'catch' 'nodes'
       && lk != 100444              // 'catch' 'object'
       && lk != 102492              // 'catch' 'only'
       && lk != 103004              // 'catch' 'option'
       && lk != 104028              // 'catch' 'order'
       && lk != 104540              // 'catch' 'ordered'
       && lk != 105052              // 'catch' 'ordering'
       && lk != 106588              // 'catch' 'parent'
       && lk != 109660              // 'catch' 'preceding'
       && lk != 110172              // 'catch' 'preceding-sibling'
       && lk != 111708              // 'catch' 'processing-instruction'
       && lk != 112732              // 'catch' 'rename'
       && lk != 113244              // 'catch' 'replace'
       && lk != 113756              // 'catch' 'return'
       && lk != 114268              // 'catch' 'returning'
       && lk != 114780              // 'catch' 'revalidation'
       && lk != 115804              // 'catch' 'satisfies'
       && lk != 116316              // 'catch' 'schema'
       && lk != 116828              // 'catch' 'schema-attribute'
       && lk != 117340              // 'catch' 'schema-element'
       && lk != 117852              // 'catch' 'score'
       && lk != 118364              // 'catch' 'self'
       && lk != 120924              // 'catch' 'sliding'
       && lk != 121436              // 'catch' 'some'
       && lk != 121948              // 'catch' 'stable'
       && lk != 122460              // 'catch' 'start'
       && lk != 123996              // 'catch' 'strict'
       && lk != 125020              // 'catch' 'structured-item'
       && lk != 125532              // 'catch' 'switch'
       && lk != 126044              // 'catch' 'text'
       && lk != 129116              // 'catch' 'try'
       && lk != 129628              // 'catch' 'tumbling'
       && lk != 130140              // 'catch' 'type'
       && lk != 130652              // 'catch' 'typeswitch'
       && lk != 132188              // 'catch' 'unordered'
       && lk != 132700              // 'catch' 'updating'
       && lk != 134236              // 'catch' 'validate'
       && lk != 134748              // 'catch' 'value'
       && lk != 135260              // 'catch' 'variable'
       && lk != 135772              // 'catch' 'version'
       && lk != 137308              // 'catch' 'where'
       && lk != 137820              // 'catch' 'while'
       && lk != 139356              // 'catch' 'with'
       && lk != 141404)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(252);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(92);                   // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(280);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(281);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 39004               // 'catch' 'and'
       || lk == 46172               // 'catch' 'cast'
       || lk == 46684               // 'catch' 'castable'
       || lk == 61020               // 'catch' 'div'
       || lk == 66140               // 'catch' 'eq'
       || lk == 67676               // 'catch' 'except'
       || lk == 75356               // 'catch' 'ge'
       || lk == 77404               // 'catch' 'gt'
       || lk == 77916               // 'catch' 'idiv'
       || lk == 82524               // 'catch' 'instance'
       || lk == 83548               // 'catch' 'intersect'
       || lk == 84572               // 'catch' 'is'
       || lk == 88668               // 'catch' 'le'
       || lk == 91740               // 'catch' 'lt'
       || lk == 93276               // 'catch' 'mod'
       || lk == 96348               // 'catch' 'ne'
       || lk == 103516              // 'catch' 'or'
       || lk == 128092              // 'catch' 'to'
       || lk == 128604              // 'catch' 'treat'
       || lk == 131164)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(92);           // 'catch'
            lookahead1W(258);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 40028               // 'catch' 'append'
       && lk != 40540               // 'catch' 'array'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 42588               // 'catch' 'attribute'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 49756               // 'catch' 'comment'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61532               // 'catch' 'document'
       && lk != 62044               // 'catch' 'document-node'
       && lk != 62556               // 'catch' 'element'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64092               // 'catch' 'empty-sequence'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66652               // 'catch' 'every'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'first'
       && lk != 69724               // 'catch' 'following'
       && lk != 70236               // 'catch' 'following-sibling'
       && lk != 70748               // 'catch' 'for'
       && lk != 72796               // 'catch' 'ft-option'
       && lk != 74844               // 'catch' 'function'
       && lk != 76380               // 'catch' 'group'
       && lk != 78428               // 'catch' 'if'
       && lk != 78940               // 'catch' 'import'
       && lk != 79452               // 'catch' 'in'
       && lk != 79964               // 'catch' 'index'
       && lk != 82012               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'into'
       && lk != 85084               // 'catch' 'item'
       && lk != 85596               // 'catch' 'json'
       && lk != 86108               // 'catch' 'json-item'
       && lk != 87644               // 'catch' 'last'
       && lk != 88156               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'let'
       && lk != 90716               // 'catch' 'loop'
       && lk != 92252               // 'catch' 'map'
       && lk != 93788               // 'catch' 'modify'
       && lk != 94300               // 'catch' 'module'
       && lk != 95324               // 'catch' 'namespace'
       && lk != 95836               // 'catch' 'namespace-node'
       && lk != 98908               // 'catch' 'node'
       && lk != 99420               // 'catch' 'nodes'
       && lk != 100444              // 'catch' 'object'
       && lk != 102492              // 'catch' 'only'
       && lk != 103004              // 'catch' 'option'
       && lk != 104028              // 'catch' 'order'
       && lk != 104540              // 'catch' 'ordered'
       && lk != 105052              // 'catch' 'ordering'
       && lk != 106588              // 'catch' 'parent'
       && lk != 109660              // 'catch' 'preceding'
       && lk != 110172              // 'catch' 'preceding-sibling'
       && lk != 111708              // 'catch' 'processing-instruction'
       && lk != 112732              // 'catch' 'rename'
       && lk != 113244              // 'catch' 'replace'
       && lk != 113756              // 'catch' 'return'
       && lk != 114268              // 'catch' 'returning'
       && lk != 114780              // 'catch' 'revalidation'
       && lk != 115804              // 'catch' 'satisfies'
       && lk != 116316              // 'catch' 'schema'
       && lk != 116828              // 'catch' 'schema-attribute'
       && lk != 117340              // 'catch' 'schema-element'
       && lk != 117852              // 'catch' 'score'
       && lk != 118364              // 'catch' 'self'
       && lk != 120924              // 'catch' 'sliding'
       && lk != 121436              // 'catch' 'some'
       && lk != 121948              // 'catch' 'stable'
       && lk != 122460              // 'catch' 'start'
       && lk != 123996              // 'catch' 'strict'
       && lk != 125020              // 'catch' 'structured-item'
       && lk != 125532              // 'catch' 'switch'
       && lk != 126044              // 'catch' 'text'
       && lk != 129116              // 'catch' 'try'
       && lk != 129628              // 'catch' 'tumbling'
       && lk != 130140              // 'catch' 'type'
       && lk != 130652              // 'catch' 'typeswitch'
       && lk != 132188              // 'catch' 'unordered'
       && lk != 132700              // 'catch' 'updating'
       && lk != 134236              // 'catch' 'validate'
       && lk != 134748              // 'catch' 'value'
       && lk != 135260              // 'catch' 'variable'
       && lk != 135772              // 'catch' 'version'
       && lk != 137308              // 'catch' 'where'
       && lk != 137820              // 'catch' 'while'
       && lk != 139356              // 'catch' 'with'
       && lk != 141404)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(92);                 // 'catch'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(255);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consume(110);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(222);                   // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(255);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    consumeT(110);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(222);                  // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(89);                    // 'case'
    lookahead1W(266);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(80);                  // 'as'
    }
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(222);                   // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(89);                   // 'case'
    lookahead1W(266);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(80);                 // 'as'
    }
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(222);                  // 'return'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(264);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(53);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(264);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consumeT(52);                 // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consumeT(52);               // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(53);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(269);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(269);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    consumeT(53);                   // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 138:                       // 'for'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 175:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 252:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 153:                       // 'if'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16010:                     // 'for' '$'
    case 16047:                     // 'let' '$'
    case 117935:                    // 'let' 'score'
    case 120970:                    // 'for' 'sliding'
    case 129674:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17561:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17653:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 142588:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17663:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 138:                       // 'for'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 175:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 252:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 153:                       // 'if'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16010:                     // 'for' '$'
    case 16047:                     // 'let' '$'
    case 117935:                    // 'let' 'score'
    case 120970:                    // 'for' 'sliding'
    case 129674:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17561:                     // 'if' '('
      try_IfExpr();
      break;
    case 17653:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 142588:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17663:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 221:                       // 'replace'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
      break;
    case 111:                       // 'delete'
    case 160:                       // 'insert'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 237:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 134877)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          lk = -6;
        }
        catch (p6A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16109:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 98976:                     // 'insert' 'node'
    case 99488:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 98927:                     // 'delete' 'node'
    case 99439:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 99036:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case -6:
    case 99037:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85615:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85664:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85724:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case -11:
      parse_JSONReplaceExpr();
      break;
    case 85582:                     // 'append' 'json'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 221:                       // 'replace'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
      break;
    case 111:                       // 'delete'
    case 160:                       // 'insert'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 237:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 134877)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          memoize(9, e0A, -6);
          lk = -13;
        }
        catch (p6A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16109:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 98976:                     // 'insert' 'node'
    case 99488:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 98927:                     // 'delete' 'node'
    case 99439:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 99036:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case -6:
    case 99037:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85615:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85664:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85724:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case -11:
      try_JSONReplaceExpr();
      break;
    case 85582:                     // 'append' 'json'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(111);                   // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(167);                   // 'json'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(111);                  // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(167);                  // 'json'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 160:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(160);              // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        consumeT(167);              // 'json'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(164);              // 'into'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 82:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 109138)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(82);         // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              consumeT(213);        // 'position'
              lookahead1W(271);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(82);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(213);            // 'position'
          lookahead1W(271);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(160);                 // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consume(167);                 // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      consume(164);                 // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 109138)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(82);           // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            consumeT(213);          // 'position'
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(11, e0, lk);
        }
      }
      if (lk == -1)
      {
        consume(82);                // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        consume(213);               // 'position'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      consume(160);                 // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consume(167);                 // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructorList();
      consume(164);                 // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 160:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(160);              // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        consumeT(167);              // 'json'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(164);              // 'into'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 82:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 109138)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(82);         // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              consumeT(213);        // 'position'
              lookahead1W(271);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(82);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(213);            // 'position'
          lookahead1W(271);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        memoize(10, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(160);                // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consumeT(167);                // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      consumeT(164);                // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 109138)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(82);           // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            consumeT(213);          // 'position'
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            memoize(11, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(11, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        consumeT(82);               // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        consumeT(213);              // 'position'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      consumeT(160);                // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consumeT(167);                // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PairConstructorList();
      consumeT(164);                // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(220);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(167);                   // 'json'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(80);                    // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(220);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(167);                  // 'json'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(80);                   // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(221);                   // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consume(263);                   // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consume(198);                   // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(167);                   // 'json'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(272);                   // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(221);                  // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consumeT(263);                  // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consumeT(198);                  // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(167);                  // 'json'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(272);                  // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(78);                    // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(167);                   // 'json'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(164);                   // 'into'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(78);                   // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(167);                  // 'json'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(164);                  // 'into'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consume(23);                  // CharRef
      break;
    case 279:                       // '{{'
      consume(279);                 // '{{'
      break;
    case 285:                       // '}}'
      consume(285);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consumeT(23);                 // CharRef
      break;
    case 279:                       // '{{'
      consumeT(279);                // '{{'
      break;
    case 285:                       // '}}'
      consumeT(285);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(120);                   // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(120);                  // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(83);                    // 'attribute'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consume(278);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(284);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145686)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(278);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(284);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(278);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(284);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(83);                   // 'attribute'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consumeT(278);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(284);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145686)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(278);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(284);            // '}'
          memoize(12, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(278);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(284);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(218);                   // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consume(278);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(284);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145686)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(278);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(284);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(278);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(284);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(218);                  // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consumeT(278);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(284);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145686)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(278);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(284);            // '}'
          memoize(13, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(278);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(284);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(246);                   // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(246);                  // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 186:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 218:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(261);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 246:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 180:                       // 'map'
    case 204:                       // 'ordered'
    case 258:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 135:                       // 'first'
    case 136:                       // 'following'
    case 137:                       // 'following-sibling'
    case 138:                       // 'for'
    case 142:                       // 'ft-option'
    case 147:                       // 'ge'
    case 149:                       // 'group'
    case 151:                       // 'gt'
    case 152:                       // 'idiv'
    case 154:                       // 'import'
    case 155:                       // 'in'
    case 156:                       // 'index'
    case 160:                       // 'insert'
    case 161:                       // 'instance'
    case 162:                       // 'integrity'
    case 163:                       // 'intersect'
    case 164:                       // 'into'
    case 165:                       // 'is'
    case 167:                       // 'json'
    case 171:                       // 'last'
    case 172:                       // 'lax'
    case 173:                       // 'le'
    case 175:                       // 'let'
    case 177:                       // 'loop'
    case 179:                       // 'lt'
    case 182:                       // 'mod'
    case 183:                       // 'modify'
    case 184:                       // 'module'
    case 188:                       // 'ne'
    case 194:                       // 'nodes'
    case 196:                       // 'object'
    case 200:                       // 'only'
    case 201:                       // 'option'
    case 202:                       // 'or'
    case 203:                       // 'order'
    case 205:                       // 'ordering'
    case 208:                       // 'parent'
    case 214:                       // 'preceding'
    case 215:                       // 'preceding-sibling'
    case 220:                       // 'rename'
    case 221:                       // 'replace'
    case 222:                       // 'return'
    case 223:                       // 'returning'
    case 224:                       // 'revalidation'
    case 226:                       // 'satisfies'
    case 227:                       // 'schema'
    case 230:                       // 'score'
    case 231:                       // 'self'
    case 236:                       // 'sliding'
    case 237:                       // 'some'
    case 238:                       // 'stable'
    case 239:                       // 'start'
    case 242:                       // 'strict'
    case 250:                       // 'to'
    case 251:                       // 'treat'
    case 252:                       // 'try'
    case 253:                       // 'tumbling'
    case 254:                       // 'type'
    case 256:                       // 'union'
    case 259:                       // 'updating'
    case 262:                       // 'validate'
    case 263:                       // 'value'
    case 264:                       // 'variable'
    case 265:                       // 'version'
    case 268:                       // 'where'
    case 269:                       // 'while'
    case 272:                       // 'with'
    case 276:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2838                  // '{' Wildcard
     || lk == 3350                  // '{' EQName^Token
     || lk == 4374                  // '{' IntegerLiteral
     || lk == 4886                  // '{' DecimalLiteral
     || lk == 5398                  // '{' DoubleLiteral
     || lk == 5910                  // '{' StringLiteral
     || lk == 16150                 // '{' '$'
     || lk == 16662                 // '{' '%'
     || lk == 17686                 // '{' '('
     || lk == 18198                 // '{' '(#'
     || lk == 20758                 // '{' '+'
     || lk == 21782                 // '{' '-'
     || lk == 22806                 // '{' '.'
     || lk == 23318                 // '{' '..'
     || lk == 23830                 // '{' '/'
     || lk == 24342                 // '{' '//'
     || lk == 27926                 // '{' '<'
     || lk == 28438                 // '{' '<!--'
     || lk == 30486                 // '{' '<?'
     || lk == 33558                 // '{' '?'
     || lk == 34582                 // '{' '@'
     || lk == 35606                 // '{' '['
     || lk == 36630                 // '{' 'after'
     || lk == 37654                 // '{' 'allowing'
     || lk == 38166                 // '{' 'ancestor'
     || lk == 38678                 // '{' 'ancestor-or-self'
     || lk == 39190                 // '{' 'and'
     || lk == 40214                 // '{' 'append'
     || lk == 40726                 // '{' 'array'
     || lk == 41238                 // '{' 'as'
     || lk == 41750                 // '{' 'ascending'
     || lk == 42262                 // '{' 'at'
     || lk == 42774                 // '{' 'attribute'
     || lk == 43286                 // '{' 'base-uri'
     || lk == 43798                 // '{' 'before'
     || lk == 44310                 // '{' 'boundary-space'
     || lk == 44822                 // '{' 'break'
     || lk == 45846                 // '{' 'case'
     || lk == 46358                 // '{' 'cast'
     || lk == 46870                 // '{' 'castable'
     || lk == 47382                 // '{' 'catch'
     || lk == 48406                 // '{' 'child'
     || lk == 48918                 // '{' 'collation'
     || lk == 49942                 // '{' 'comment'
     || lk == 50454                 // '{' 'constraint'
     || lk == 50966                 // '{' 'construction'
     || lk == 52502                 // '{' 'context'
     || lk == 53014                 // '{' 'continue'
     || lk == 53526                 // '{' 'copy'
     || lk == 54038                 // '{' 'copy-namespaces'
     || lk == 54550                 // '{' 'count'
     || lk == 55062                 // '{' 'decimal-format'
     || lk == 56086                 // '{' 'declare'
     || lk == 56598                 // '{' 'default'
     || lk == 57110                 // '{' 'delete'
     || lk == 57622                 // '{' 'descendant'
     || lk == 58134                 // '{' 'descendant-or-self'
     || lk == 58646                 // '{' 'descending'
     || lk == 61206                 // '{' 'div'
     || lk == 61718                 // '{' 'document'
     || lk == 62230                 // '{' 'document-node'
     || lk == 62742                 // '{' 'element'
     || lk == 63254                 // '{' 'else'
     || lk == 63766                 // '{' 'empty'
     || lk == 64278                 // '{' 'empty-sequence'
     || lk == 64790                 // '{' 'encoding'
     || lk == 65302                 // '{' 'end'
     || lk == 66326                 // '{' 'eq'
     || lk == 66838                 // '{' 'every'
     || lk == 67862                 // '{' 'except'
     || lk == 68374                 // '{' 'exit'
     || lk == 68886                 // '{' 'external'
     || lk == 69398                 // '{' 'first'
     || lk == 69910                 // '{' 'following'
     || lk == 70422                 // '{' 'following-sibling'
     || lk == 70934                 // '{' 'for'
     || lk == 72982                 // '{' 'ft-option'
     || lk == 75030                 // '{' 'function'
     || lk == 75542                 // '{' 'ge'
     || lk == 76566                 // '{' 'group'
     || lk == 77590                 // '{' 'gt'
     || lk == 78102                 // '{' 'idiv'
     || lk == 78614                 // '{' 'if'
     || lk == 79126                 // '{' 'import'
     || lk == 79638                 // '{' 'in'
     || lk == 80150                 // '{' 'index'
     || lk == 82198                 // '{' 'insert'
     || lk == 82710                 // '{' 'instance'
     || lk == 83222                 // '{' 'integrity'
     || lk == 83734                 // '{' 'intersect'
     || lk == 84246                 // '{' 'into'
     || lk == 84758                 // '{' 'is'
     || lk == 85270                 // '{' 'item'
     || lk == 85782                 // '{' 'json'
     || lk == 86294                 // '{' 'json-item'
     || lk == 87830                 // '{' 'last'
     || lk == 88342                 // '{' 'lax'
     || lk == 88854                 // '{' 'le'
     || lk == 89878                 // '{' 'let'
     || lk == 90902                 // '{' 'loop'
     || lk == 91926                 // '{' 'lt'
     || lk == 92438                 // '{' 'map'
     || lk == 93462                 // '{' 'mod'
     || lk == 93974                 // '{' 'modify'
     || lk == 94486                 // '{' 'module'
     || lk == 95510                 // '{' 'namespace'
     || lk == 96022                 // '{' 'namespace-node'
     || lk == 96534                 // '{' 'ne'
     || lk == 99094                 // '{' 'node'
     || lk == 99606                 // '{' 'nodes'
     || lk == 100630                // '{' 'object'
     || lk == 102678                // '{' 'only'
     || lk == 103190                // '{' 'option'
     || lk == 103702                // '{' 'or'
     || lk == 104214                // '{' 'order'
     || lk == 104726                // '{' 'ordered'
     || lk == 105238                // '{' 'ordering'
     || lk == 106774                // '{' 'parent'
     || lk == 109846                // '{' 'preceding'
     || lk == 110358                // '{' 'preceding-sibling'
     || lk == 111894                // '{' 'processing-instruction'
     || lk == 112918                // '{' 'rename'
     || lk == 113430                // '{' 'replace'
     || lk == 113942                // '{' 'return'
     || lk == 114454                // '{' 'returning'
     || lk == 114966                // '{' 'revalidation'
     || lk == 115990                // '{' 'satisfies'
     || lk == 116502                // '{' 'schema'
     || lk == 117014                // '{' 'schema-attribute'
     || lk == 117526                // '{' 'schema-element'
     || lk == 118038                // '{' 'score'
     || lk == 118550                // '{' 'self'
     || lk == 121110                // '{' 'sliding'
     || lk == 121622                // '{' 'some'
     || lk == 122134                // '{' 'stable'
     || lk == 122646                // '{' 'start'
     || lk == 124182                // '{' 'strict'
     || lk == 125206                // '{' 'structured-item'
     || lk == 125718                // '{' 'switch'
     || lk == 126230                // '{' 'text'
     || lk == 128278                // '{' 'to'
     || lk == 128790                // '{' 'treat'
     || lk == 129302                // '{' 'try'
     || lk == 129814                // '{' 'tumbling'
     || lk == 130326                // '{' 'type'
     || lk == 130838                // '{' 'typeswitch'
     || lk == 131350                // '{' 'union'
     || lk == 132374                // '{' 'unordered'
     || lk == 132886                // '{' 'updating'
     || lk == 134422                // '{' 'validate'
     || lk == 134934                // '{' 'value'
     || lk == 135446                // '{' 'variable'
     || lk == 135958                // '{' 'version'
     || lk == 137494                // '{' 'where'
     || lk == 138006                // '{' 'while'
     || lk == 139542                // '{' 'with'
     || lk == 141590                // '{' 'xquery'
     || lk == 142614                // '{' '{'
     || lk == 143638                // '{' '{|'
     || lk == 145686)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17479:                     // 'after' '('
    case 17481:                     // 'allowing' '('
    case 17482:                     // 'ancestor' '('
    case 17483:                     // 'ancestor-or-self' '('
    case 17484:                     // 'and' '('
    case 17486:                     // 'append' '('
    case 17488:                     // 'as' '('
    case 17489:                     // 'ascending' '('
    case 17490:                     // 'at' '('
    case 17492:                     // 'base-uri' '('
    case 17493:                     // 'before' '('
    case 17494:                     // 'boundary-space' '('
    case 17495:                     // 'break' '('
    case 17497:                     // 'case' '('
    case 17498:                     // 'cast' '('
    case 17499:                     // 'castable' '('
    case 17500:                     // 'catch' '('
    case 17502:                     // 'child' '('
    case 17503:                     // 'collation' '('
    case 17506:                     // 'constraint' '('
    case 17507:                     // 'construction' '('
    case 17510:                     // 'context' '('
    case 17511:                     // 'continue' '('
    case 17512:                     // 'copy' '('
    case 17513:                     // 'copy-namespaces' '('
    case 17514:                     // 'count' '('
    case 17515:                     // 'decimal-format' '('
    case 17517:                     // 'declare' '('
    case 17518:                     // 'default' '('
    case 17519:                     // 'delete' '('
    case 17520:                     // 'descendant' '('
    case 17521:                     // 'descendant-or-self' '('
    case 17522:                     // 'descending' '('
    case 17527:                     // 'div' '('
    case 17528:                     // 'document' '('
    case 17531:                     // 'else' '('
    case 17532:                     // 'empty' '('
    case 17534:                     // 'encoding' '('
    case 17535:                     // 'end' '('
    case 17537:                     // 'eq' '('
    case 17538:                     // 'every' '('
    case 17540:                     // 'except' '('
    case 17541:                     // 'exit' '('
    case 17542:                     // 'external' '('
    case 17543:                     // 'first' '('
    case 17544:                     // 'following' '('
    case 17545:                     // 'following-sibling' '('
    case 17546:                     // 'for' '('
    case 17550:                     // 'ft-option' '('
    case 17555:                     // 'ge' '('
    case 17557:                     // 'group' '('
    case 17559:                     // 'gt' '('
    case 17560:                     // 'idiv' '('
    case 17562:                     // 'import' '('
    case 17563:                     // 'in' '('
    case 17564:                     // 'index' '('
    case 17568:                     // 'insert' '('
    case 17569:                     // 'instance' '('
    case 17570:                     // 'integrity' '('
    case 17571:                     // 'intersect' '('
    case 17572:                     // 'into' '('
    case 17573:                     // 'is' '('
    case 17575:                     // 'json' '('
    case 17579:                     // 'last' '('
    case 17580:                     // 'lax' '('
    case 17581:                     // 'le' '('
    case 17583:                     // 'let' '('
    case 17585:                     // 'loop' '('
    case 17587:                     // 'lt' '('
    case 17588:                     // 'map' '('
    case 17590:                     // 'mod' '('
    case 17591:                     // 'modify' '('
    case 17592:                     // 'module' '('
    case 17594:                     // 'namespace' '('
    case 17596:                     // 'ne' '('
    case 17602:                     // 'nodes' '('
    case 17604:                     // 'object' '('
    case 17608:                     // 'only' '('
    case 17609:                     // 'option' '('
    case 17610:                     // 'or' '('
    case 17611:                     // 'order' '('
    case 17612:                     // 'ordered' '('
    case 17613:                     // 'ordering' '('
    case 17616:                     // 'parent' '('
    case 17622:                     // 'preceding' '('
    case 17623:                     // 'preceding-sibling' '('
    case 17628:                     // 'rename' '('
    case 17629:                     // 'replace' '('
    case 17630:                     // 'return' '('
    case 17631:                     // 'returning' '('
    case 17632:                     // 'revalidation' '('
    case 17634:                     // 'satisfies' '('
    case 17635:                     // 'schema' '('
    case 17638:                     // 'score' '('
    case 17639:                     // 'self' '('
    case 17644:                     // 'sliding' '('
    case 17645:                     // 'some' '('
    case 17646:                     // 'stable' '('
    case 17647:                     // 'start' '('
    case 17650:                     // 'strict' '('
    case 17658:                     // 'to' '('
    case 17659:                     // 'treat' '('
    case 17660:                     // 'try' '('
    case 17661:                     // 'tumbling' '('
    case 17662:                     // 'type' '('
    case 17664:                     // 'union' '('
    case 17666:                     // 'unordered' '('
    case 17667:                     // 'updating' '('
    case 17670:                     // 'validate' '('
    case 17671:                     // 'value' '('
    case 17672:                     // 'variable' '('
    case 17673:                     // 'version' '('
    case 17676:                     // 'where' '('
    case 17677:                     // 'while' '('
    case 17680:                     // 'with' '('
    case 17684:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 142540:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 142594:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 79:                        // 'array'
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 146:                       // 'function'
    case 153:                       // 'if'
    case 166:                       // 'item'
    case 168:                       // 'json-item'
    case 187:                       // 'namespace-node'
    case 193:                       // 'node'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 244:                       // 'structured-item'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'first' '#'
    case 14984:                     // 'following' '#'
    case 14985:                     // 'following-sibling' '#'
    case 14986:                     // 'for' '#'
    case 14990:                     // 'ft-option' '#'
    case 14995:                     // 'ge' '#'
    case 14997:                     // 'group' '#'
    case 14999:                     // 'gt' '#'
    case 15000:                     // 'idiv' '#'
    case 15002:                     // 'import' '#'
    case 15003:                     // 'in' '#'
    case 15004:                     // 'index' '#'
    case 15008:                     // 'insert' '#'
    case 15009:                     // 'instance' '#'
    case 15010:                     // 'integrity' '#'
    case 15011:                     // 'intersect' '#'
    case 15012:                     // 'into' '#'
    case 15013:                     // 'is' '#'
    case 15015:                     // 'json' '#'
    case 15019:                     // 'last' '#'
    case 15020:                     // 'lax' '#'
    case 15021:                     // 'le' '#'
    case 15023:                     // 'let' '#'
    case 15025:                     // 'loop' '#'
    case 15027:                     // 'lt' '#'
    case 15028:                     // 'map' '#'
    case 15030:                     // 'mod' '#'
    case 15031:                     // 'modify' '#'
    case 15032:                     // 'module' '#'
    case 15034:                     // 'namespace' '#'
    case 15036:                     // 'ne' '#'
    case 15042:                     // 'nodes' '#'
    case 15044:                     // 'object' '#'
    case 15048:                     // 'only' '#'
    case 15049:                     // 'option' '#'
    case 15050:                     // 'or' '#'
    case 15051:                     // 'order' '#'
    case 15052:                     // 'ordered' '#'
    case 15053:                     // 'ordering' '#'
    case 15056:                     // 'parent' '#'
    case 15062:                     // 'preceding' '#'
    case 15063:                     // 'preceding-sibling' '#'
    case 15066:                     // 'processing-instruction' '#'
    case 15068:                     // 'rename' '#'
    case 15069:                     // 'replace' '#'
    case 15070:                     // 'return' '#'
    case 15071:                     // 'returning' '#'
    case 15072:                     // 'revalidation' '#'
    case 15074:                     // 'satisfies' '#'
    case 15075:                     // 'schema' '#'
    case 15078:                     // 'score' '#'
    case 15079:                     // 'self' '#'
    case 15084:                     // 'sliding' '#'
    case 15085:                     // 'some' '#'
    case 15086:                     // 'stable' '#'
    case 15087:                     // 'start' '#'
    case 15090:                     // 'strict' '#'
    case 15094:                     // 'text' '#'
    case 15098:                     // 'to' '#'
    case 15099:                     // 'treat' '#'
    case 15100:                     // 'try' '#'
    case 15101:                     // 'tumbling' '#'
    case 15102:                     // 'type' '#'
    case 15104:                     // 'union' '#'
    case 15106:                     // 'unordered' '#'
    case 15107:                     // 'updating' '#'
    case 15110:                     // 'validate' '#'
    case 15111:                     // 'value' '#'
    case 15112:                     // 'variable' '#'
    case 15113:                     // 'version' '#'
    case 15116:                     // 'where' '#'
    case 15117:                     // 'while' '#'
    case 15120:                     // 'with' '#'
    case 15124:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 142516:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case -11:
    case 27414:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -12:
      parse_ObjectConstructor();
      break;
    case 69:                        // '['
      parse_ArrayConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    case 280:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 186:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 218:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 278:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(261);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 246:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 180:                       // 'map'
    case 204:                       // 'ordered'
    case 258:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 135:                       // 'first'
    case 136:                       // 'following'
    case 137:                       // 'following-sibling'
    case 138:                       // 'for'
    case 142:                       // 'ft-option'
    case 147:                       // 'ge'
    case 149:                       // 'group'
    case 151:                       // 'gt'
    case 152:                       // 'idiv'
    case 154:                       // 'import'
    case 155:                       // 'in'
    case 156:                       // 'index'
    case 160:                       // 'insert'
    case 161:                       // 'instance'
    case 162:                       // 'integrity'
    case 163:                       // 'intersect'
    case 164:                       // 'into'
    case 165:                       // 'is'
    case 167:                       // 'json'
    case 171:                       // 'last'
    case 172:                       // 'lax'
    case 173:                       // 'le'
    case 175:                       // 'let'
    case 177:                       // 'loop'
    case 179:                       // 'lt'
    case 182:                       // 'mod'
    case 183:                       // 'modify'
    case 184:                       // 'module'
    case 188:                       // 'ne'
    case 194:                       // 'nodes'
    case 196:                       // 'object'
    case 200:                       // 'only'
    case 201:                       // 'option'
    case 202:                       // 'or'
    case 203:                       // 'order'
    case 205:                       // 'ordering'
    case 208:                       // 'parent'
    case 214:                       // 'preceding'
    case 215:                       // 'preceding-sibling'
    case 220:                       // 'rename'
    case 221:                       // 'replace'
    case 222:                       // 'return'
    case 223:                       // 'returning'
    case 224:                       // 'revalidation'
    case 226:                       // 'satisfies'
    case 227:                       // 'schema'
    case 230:                       // 'score'
    case 231:                       // 'self'
    case 236:                       // 'sliding'
    case 237:                       // 'some'
    case 238:                       // 'stable'
    case 239:                       // 'start'
    case 242:                       // 'strict'
    case 250:                       // 'to'
    case 251:                       // 'treat'
    case 252:                       // 'try'
    case 253:                       // 'tumbling'
    case 254:                       // 'type'
    case 256:                       // 'union'
    case 259:                       // 'updating'
    case 262:                       // 'validate'
    case 263:                       // 'value'
    case 264:                       // 'variable'
    case 265:                       // 'version'
    case 268:                       // 'where'
    case 269:                       // 'while'
    case 272:                       // 'with'
    case 276:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2838                  // '{' Wildcard
     || lk == 3350                  // '{' EQName^Token
     || lk == 4374                  // '{' IntegerLiteral
     || lk == 4886                  // '{' DecimalLiteral
     || lk == 5398                  // '{' DoubleLiteral
     || lk == 5910                  // '{' StringLiteral
     || lk == 16150                 // '{' '$'
     || lk == 16662                 // '{' '%'
     || lk == 17686                 // '{' '('
     || lk == 18198                 // '{' '(#'
     || lk == 20758                 // '{' '+'
     || lk == 21782                 // '{' '-'
     || lk == 22806                 // '{' '.'
     || lk == 23318                 // '{' '..'
     || lk == 23830                 // '{' '/'
     || lk == 24342                 // '{' '//'
     || lk == 27926                 // '{' '<'
     || lk == 28438                 // '{' '<!--'
     || lk == 30486                 // '{' '<?'
     || lk == 33558                 // '{' '?'
     || lk == 34582                 // '{' '@'
     || lk == 35606                 // '{' '['
     || lk == 36630                 // '{' 'after'
     || lk == 37654                 // '{' 'allowing'
     || lk == 38166                 // '{' 'ancestor'
     || lk == 38678                 // '{' 'ancestor-or-self'
     || lk == 39190                 // '{' 'and'
     || lk == 40214                 // '{' 'append'
     || lk == 40726                 // '{' 'array'
     || lk == 41238                 // '{' 'as'
     || lk == 41750                 // '{' 'ascending'
     || lk == 42262                 // '{' 'at'
     || lk == 42774                 // '{' 'attribute'
     || lk == 43286                 // '{' 'base-uri'
     || lk == 43798                 // '{' 'before'
     || lk == 44310                 // '{' 'boundary-space'
     || lk == 44822                 // '{' 'break'
     || lk == 45846                 // '{' 'case'
     || lk == 46358                 // '{' 'cast'
     || lk == 46870                 // '{' 'castable'
     || lk == 47382                 // '{' 'catch'
     || lk == 48406                 // '{' 'child'
     || lk == 48918                 // '{' 'collation'
     || lk == 49942                 // '{' 'comment'
     || lk == 50454                 // '{' 'constraint'
     || lk == 50966                 // '{' 'construction'
     || lk == 52502                 // '{' 'context'
     || lk == 53014                 // '{' 'continue'
     || lk == 53526                 // '{' 'copy'
     || lk == 54038                 // '{' 'copy-namespaces'
     || lk == 54550                 // '{' 'count'
     || lk == 55062                 // '{' 'decimal-format'
     || lk == 56086                 // '{' 'declare'
     || lk == 56598                 // '{' 'default'
     || lk == 57110                 // '{' 'delete'
     || lk == 57622                 // '{' 'descendant'
     || lk == 58134                 // '{' 'descendant-or-self'
     || lk == 58646                 // '{' 'descending'
     || lk == 61206                 // '{' 'div'
     || lk == 61718                 // '{' 'document'
     || lk == 62230                 // '{' 'document-node'
     || lk == 62742                 // '{' 'element'
     || lk == 63254                 // '{' 'else'
     || lk == 63766                 // '{' 'empty'
     || lk == 64278                 // '{' 'empty-sequence'
     || lk == 64790                 // '{' 'encoding'
     || lk == 65302                 // '{' 'end'
     || lk == 66326                 // '{' 'eq'
     || lk == 66838                 // '{' 'every'
     || lk == 67862                 // '{' 'except'
     || lk == 68374                 // '{' 'exit'
     || lk == 68886                 // '{' 'external'
     || lk == 69398                 // '{' 'first'
     || lk == 69910                 // '{' 'following'
     || lk == 70422                 // '{' 'following-sibling'
     || lk == 70934                 // '{' 'for'
     || lk == 72982                 // '{' 'ft-option'
     || lk == 75030                 // '{' 'function'
     || lk == 75542                 // '{' 'ge'
     || lk == 76566                 // '{' 'group'
     || lk == 77590                 // '{' 'gt'
     || lk == 78102                 // '{' 'idiv'
     || lk == 78614                 // '{' 'if'
     || lk == 79126                 // '{' 'import'
     || lk == 79638                 // '{' 'in'
     || lk == 80150                 // '{' 'index'
     || lk == 82198                 // '{' 'insert'
     || lk == 82710                 // '{' 'instance'
     || lk == 83222                 // '{' 'integrity'
     || lk == 83734                 // '{' 'intersect'
     || lk == 84246                 // '{' 'into'
     || lk == 84758                 // '{' 'is'
     || lk == 85270                 // '{' 'item'
     || lk == 85782                 // '{' 'json'
     || lk == 86294                 // '{' 'json-item'
     || lk == 87830                 // '{' 'last'
     || lk == 88342                 // '{' 'lax'
     || lk == 88854                 // '{' 'le'
     || lk == 89878                 // '{' 'let'
     || lk == 90902                 // '{' 'loop'
     || lk == 91926                 // '{' 'lt'
     || lk == 92438                 // '{' 'map'
     || lk == 93462                 // '{' 'mod'
     || lk == 93974                 // '{' 'modify'
     || lk == 94486                 // '{' 'module'
     || lk == 95510                 // '{' 'namespace'
     || lk == 96022                 // '{' 'namespace-node'
     || lk == 96534                 // '{' 'ne'
     || lk == 99094                 // '{' 'node'
     || lk == 99606                 // '{' 'nodes'
     || lk == 100630                // '{' 'object'
     || lk == 102678                // '{' 'only'
     || lk == 103190                // '{' 'option'
     || lk == 103702                // '{' 'or'
     || lk == 104214                // '{' 'order'
     || lk == 104726                // '{' 'ordered'
     || lk == 105238                // '{' 'ordering'
     || lk == 106774                // '{' 'parent'
     || lk == 109846                // '{' 'preceding'
     || lk == 110358                // '{' 'preceding-sibling'
     || lk == 111894                // '{' 'processing-instruction'
     || lk == 112918                // '{' 'rename'
     || lk == 113430                // '{' 'replace'
     || lk == 113942                // '{' 'return'
     || lk == 114454                // '{' 'returning'
     || lk == 114966                // '{' 'revalidation'
     || lk == 115990                // '{' 'satisfies'
     || lk == 116502                // '{' 'schema'
     || lk == 117014                // '{' 'schema-attribute'
     || lk == 117526                // '{' 'schema-element'
     || lk == 118038                // '{' 'score'
     || lk == 118550                // '{' 'self'
     || lk == 121110                // '{' 'sliding'
     || lk == 121622                // '{' 'some'
     || lk == 122134                // '{' 'stable'
     || lk == 122646                // '{' 'start'
     || lk == 124182                // '{' 'strict'
     || lk == 125206                // '{' 'structured-item'
     || lk == 125718                // '{' 'switch'
     || lk == 126230                // '{' 'text'
     || lk == 128278                // '{' 'to'
     || lk == 128790                // '{' 'treat'
     || lk == 129302                // '{' 'try'
     || lk == 129814                // '{' 'tumbling'
     || lk == 130326                // '{' 'type'
     || lk == 130838                // '{' 'typeswitch'
     || lk == 131350                // '{' 'union'
     || lk == 132374                // '{' 'unordered'
     || lk == 132886                // '{' 'updating'
     || lk == 134422                // '{' 'validate'
     || lk == 134934                // '{' 'value'
     || lk == 135446                // '{' 'variable'
     || lk == 135958                // '{' 'version'
     || lk == 137494                // '{' 'where'
     || lk == 138006                // '{' 'while'
     || lk == 139542                // '{' 'with'
     || lk == 141590                // '{' 'xquery'
     || lk == 142614                // '{' '{'
     || lk == 143638                // '{' '{|'
     || lk == 145686)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(14, e0A, -11);
          lk = -16;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17479:                     // 'after' '('
    case 17481:                     // 'allowing' '('
    case 17482:                     // 'ancestor' '('
    case 17483:                     // 'ancestor-or-self' '('
    case 17484:                     // 'and' '('
    case 17486:                     // 'append' '('
    case 17488:                     // 'as' '('
    case 17489:                     // 'ascending' '('
    case 17490:                     // 'at' '('
    case 17492:                     // 'base-uri' '('
    case 17493:                     // 'before' '('
    case 17494:                     // 'boundary-space' '('
    case 17495:                     // 'break' '('
    case 17497:                     // 'case' '('
    case 17498:                     // 'cast' '('
    case 17499:                     // 'castable' '('
    case 17500:                     // 'catch' '('
    case 17502:                     // 'child' '('
    case 17503:                     // 'collation' '('
    case 17506:                     // 'constraint' '('
    case 17507:                     // 'construction' '('
    case 17510:                     // 'context' '('
    case 17511:                     // 'continue' '('
    case 17512:                     // 'copy' '('
    case 17513:                     // 'copy-namespaces' '('
    case 17514:                     // 'count' '('
    case 17515:                     // 'decimal-format' '('
    case 17517:                     // 'declare' '('
    case 17518:                     // 'default' '('
    case 17519:                     // 'delete' '('
    case 17520:                     // 'descendant' '('
    case 17521:                     // 'descendant-or-self' '('
    case 17522:                     // 'descending' '('
    case 17527:                     // 'div' '('
    case 17528:                     // 'document' '('
    case 17531:                     // 'else' '('
    case 17532:                     // 'empty' '('
    case 17534:                     // 'encoding' '('
    case 17535:                     // 'end' '('
    case 17537:                     // 'eq' '('
    case 17538:                     // 'every' '('
    case 17540:                     // 'except' '('
    case 17541:                     // 'exit' '('
    case 17542:                     // 'external' '('
    case 17543:                     // 'first' '('
    case 17544:                     // 'following' '('
    case 17545:                     // 'following-sibling' '('
    case 17546:                     // 'for' '('
    case 17550:                     // 'ft-option' '('
    case 17555:                     // 'ge' '('
    case 17557:                     // 'group' '('
    case 17559:                     // 'gt' '('
    case 17560:                     // 'idiv' '('
    case 17562:                     // 'import' '('
    case 17563:                     // 'in' '('
    case 17564:                     // 'index' '('
    case 17568:                     // 'insert' '('
    case 17569:                     // 'instance' '('
    case 17570:                     // 'integrity' '('
    case 17571:                     // 'intersect' '('
    case 17572:                     // 'into' '('
    case 17573:                     // 'is' '('
    case 17575:                     // 'json' '('
    case 17579:                     // 'last' '('
    case 17580:                     // 'lax' '('
    case 17581:                     // 'le' '('
    case 17583:                     // 'let' '('
    case 17585:                     // 'loop' '('
    case 17587:                     // 'lt' '('
    case 17588:                     // 'map' '('
    case 17590:                     // 'mod' '('
    case 17591:                     // 'modify' '('
    case 17592:                     // 'module' '('
    case 17594:                     // 'namespace' '('
    case 17596:                     // 'ne' '('
    case 17602:                     // 'nodes' '('
    case 17604:                     // 'object' '('
    case 17608:                     // 'only' '('
    case 17609:                     // 'option' '('
    case 17610:                     // 'or' '('
    case 17611:                     // 'order' '('
    case 17612:                     // 'ordered' '('
    case 17613:                     // 'ordering' '('
    case 17616:                     // 'parent' '('
    case 17622:                     // 'preceding' '('
    case 17623:                     // 'preceding-sibling' '('
    case 17628:                     // 'rename' '('
    case 17629:                     // 'replace' '('
    case 17630:                     // 'return' '('
    case 17631:                     // 'returning' '('
    case 17632:                     // 'revalidation' '('
    case 17634:                     // 'satisfies' '('
    case 17635:                     // 'schema' '('
    case 17638:                     // 'score' '('
    case 17639:                     // 'self' '('
    case 17644:                     // 'sliding' '('
    case 17645:                     // 'some' '('
    case 17646:                     // 'stable' '('
    case 17647:                     // 'start' '('
    case 17650:                     // 'strict' '('
    case 17658:                     // 'to' '('
    case 17659:                     // 'treat' '('
    case 17660:                     // 'try' '('
    case 17661:                     // 'tumbling' '('
    case 17662:                     // 'type' '('
    case 17664:                     // 'union' '('
    case 17666:                     // 'unordered' '('
    case 17667:                     // 'updating' '('
    case 17670:                     // 'validate' '('
    case 17671:                     // 'value' '('
    case 17672:                     // 'variable' '('
    case 17673:                     // 'version' '('
    case 17676:                     // 'where' '('
    case 17677:                     // 'while' '('
    case 17680:                     // 'with' '('
    case 17684:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 142540:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 142594:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 79:                        // 'array'
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 146:                       // 'function'
    case 153:                       // 'if'
    case 166:                       // 'item'
    case 168:                       // 'json-item'
    case 187:                       // 'namespace-node'
    case 193:                       // 'node'
    case 228:                       // 'schema-attribute'
    case 229:                       // 'schema-element'
    case 244:                       // 'structured-item'
    case 245:                       // 'switch'
    case 255:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'first' '#'
    case 14984:                     // 'following' '#'
    case 14985:                     // 'following-sibling' '#'
    case 14986:                     // 'for' '#'
    case 14990:                     // 'ft-option' '#'
    case 14995:                     // 'ge' '#'
    case 14997:                     // 'group' '#'
    case 14999:                     // 'gt' '#'
    case 15000:                     // 'idiv' '#'
    case 15002:                     // 'import' '#'
    case 15003:                     // 'in' '#'
    case 15004:                     // 'index' '#'
    case 15008:                     // 'insert' '#'
    case 15009:                     // 'instance' '#'
    case 15010:                     // 'integrity' '#'
    case 15011:                     // 'intersect' '#'
    case 15012:                     // 'into' '#'
    case 15013:                     // 'is' '#'
    case 15015:                     // 'json' '#'
    case 15019:                     // 'last' '#'
    case 15020:                     // 'lax' '#'
    case 15021:                     // 'le' '#'
    case 15023:                     // 'let' '#'
    case 15025:                     // 'loop' '#'
    case 15027:                     // 'lt' '#'
    case 15028:                     // 'map' '#'
    case 15030:                     // 'mod' '#'
    case 15031:                     // 'modify' '#'
    case 15032:                     // 'module' '#'
    case 15034:                     // 'namespace' '#'
    case 15036:                     // 'ne' '#'
    case 15042:                     // 'nodes' '#'
    case 15044:                     // 'object' '#'
    case 15048:                     // 'only' '#'
    case 15049:                     // 'option' '#'
    case 15050:                     // 'or' '#'
    case 15051:                     // 'order' '#'
    case 15052:                     // 'ordered' '#'
    case 15053:                     // 'ordering' '#'
    case 15056:                     // 'parent' '#'
    case 15062:                     // 'preceding' '#'
    case 15063:                     // 'preceding-sibling' '#'
    case 15066:                     // 'processing-instruction' '#'
    case 15068:                     // 'rename' '#'
    case 15069:                     // 'replace' '#'
    case 15070:                     // 'return' '#'
    case 15071:                     // 'returning' '#'
    case 15072:                     // 'revalidation' '#'
    case 15074:                     // 'satisfies' '#'
    case 15075:                     // 'schema' '#'
    case 15078:                     // 'score' '#'
    case 15079:                     // 'self' '#'
    case 15084:                     // 'sliding' '#'
    case 15085:                     // 'some' '#'
    case 15086:                     // 'stable' '#'
    case 15087:                     // 'start' '#'
    case 15090:                     // 'strict' '#'
    case 15094:                     // 'text' '#'
    case 15098:                     // 'to' '#'
    case 15099:                     // 'treat' '#'
    case 15100:                     // 'try' '#'
    case 15101:                     // 'tumbling' '#'
    case 15102:                     // 'type' '#'
    case 15104:                     // 'union' '#'
    case 15106:                     // 'unordered' '#'
    case 15107:                     // 'updating' '#'
    case 15110:                     // 'validate' '#'
    case 15111:                     // 'value' '#'
    case 15112:                     // 'variable' '#'
    case 15113:                     // 'version' '#'
    case 15116:                     // 'where' '#'
    case 15117:                     // 'while' '#'
    case 15120:                     // 'with' '#'
    case 15124:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 142516:                    // 'map' '{'
      try_MapConstructor();
      break;
    case -11:
    case 27414:                     // '{' ';'
      try_BlockExpr();
      break;
    case -12:
      try_ObjectConstructor();
      break;
    case 69:                        // '['
      try_ArrayConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    case 280:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -16:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(280);                   // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 283)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(283);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(280);                  // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 283)                  // '|}'
    {
      try_Expr();
    }
    consumeT(283);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(278);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    consume(284);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(278);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 284)                  // '}'
    {
      try_PairConstructorList();
    }
    consumeT(284);                  // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 70)                   // ']'
    {
      try_Expr();
    }
    consumeT(70);                   // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(278);                   // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(284);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(278);                  // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(284);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(146);                   // 'function'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 278:                       // '{'
      consume(278);                 // '{'
      lookahead1W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(284);                 // '}'
      break;
    default:
      consume(134);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    consume(80);                    // 'as'
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }
}

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 286; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3622 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
}

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;
  this.name = name;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  }
}

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;
  this.name = name;
  this.children = children;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  }
}

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289
];

XQueryParser.TRANSITION =
[
  /*     0 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*    15 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*    30 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*    45 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*    60 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*    75 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*    90 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   105 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   120 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   135 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   150 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   165 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   180 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   195 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   210 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   225 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   240 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   255 */ 22100, 18176, 18207, 18211, 18211, 18211, 18240, 18211, 18211, 18211, 18211, 18252, 18211, 18211, 18211,
  /*   270 */ 18211, 18227, 18211, 18211, 18191, 18268, 22100, 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100,
  /*   285 */ 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325,
  /*   300 */ 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913,
  /*   315 */ 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605,
  /*   330 */ 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099,
  /*   345 */ 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459,
  /*   360 */ 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098,
  /*   375 */ 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302,
  /*   390 */ 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445,
  /*   405 */ 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779,
  /*   420 */ 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068,
  /*   435 */ 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267,
  /*   450 */ 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584,
  /*   465 */ 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898,
  /*   480 */ 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   495 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   510 */ 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 22100, 22100, 22100, 22100, 37519, 21082, 21030,
  /*   525 */ 21053, 21065, 21037, 22100, 21081, 21098, 18268, 22100, 22100, 21738, 22099, 22100, 51343, 28886, 22100,
  /*   540 */ 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 25455, 24921, 19802, 18286, 31727, 18306,
  /*   555 */ 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563,
  /*   570 */ 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100,
  /*   585 */ 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734,
  /*   600 */ 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858,
  /*   615 */ 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351,
  /*   630 */ 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267,
  /*   645 */ 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408,
  /*   660 */ 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761,
  /*   675 */ 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677,
  /*   690 */ 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051,
  /*   705 */ 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926,
  /*   720 */ 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861,
  /*   735 */ 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   750 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*   765 */ 22100, 22100, 22100, 21114, 21130, 22100, 22100, 22100, 31757, 22100, 22100, 31734, 18373, 21162, 22100,
  /*   780 */ 22100, 22100, 22100, 21014, 18290, 21149, 21178, 21194, 22100, 22100, 21738, 22099, 22100, 44270, 22100,
  /*   795 */ 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19082, 18286, 31727,
  /*   810 */ 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993,
  /*   825 */ 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100,
  /*   840 */ 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728,
  /*   855 */ 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820,
  /*   870 */ 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070,
  /*   885 */ 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246,
  /*   900 */ 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422,
  /*   915 */ 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743,
  /*   930 */ 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661,
  /*   945 */ 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035,
  /*   960 */ 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537,
  /*   975 */ 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817,
  /*   990 */ 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1005 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1020 */ 22100, 22100, 22100, 22100, 21212, 21272, 22100, 22100, 22100, 27217, 22100, 22100, 40470, 22100, 37519,
  /*  1035 */ 50013, 21247, 21322, 21297, 21262, 21344, 21310, 21366, 18268, 22100, 22100, 21738, 21382, 22100, 51343,
  /*  1050 */ 21403, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19054, 18286,
  /*  1065 */ 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484,
  /*  1080 */ 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100,
  /*  1095 */ 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 19341, 20651,
  /*  1110 */ 18728, 20734, 51099, 18747, 20405, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226,
  /*  1125 */ 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042,
  /*  1140 */ 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428,
  /*  1155 */ 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399,
  /*  1170 */ 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725,
  /*  1185 */ 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609,
  /*  1200 */ 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261,
  /*  1215 */ 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913,
  /*  1230 */ 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769,
  /*  1245 */ 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1260 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1275 */ 22100, 22100, 22100, 22100, 22100, 21011, 41642, 22100, 22100, 22100, 27240, 41647, 22100, 45949, 22100,
  /*  1290 */ 21420, 43114, 21457, 22100, 21464, 22100, 21489, 21480, 21505, 18268, 22100, 22100, 21738, 22099, 22100,
  /*  1305 */ 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19802,
  /*  1320 */ 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426,
  /*  1335 */ 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580,
  /*  1350 */ 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828,
  /*  1365 */ 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766,
  /*  1380 */ 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960,
  /*  1395 */ 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230,
  /*  1410 */ 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376,
  /*  1425 */ 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693,
  /*  1440 */ 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984,
  /*  1455 */ 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045,
  /*  1470 */ 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506,
  /*  1485 */ 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753,
  /*  1500 */ 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1515 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1530 */ 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 21521, 22100, 22100,
  /*  1545 */ 22100, 43537, 22100, 22100, 21540, 22100, 22100, 18833, 18842, 21562, 18268, 22100, 22100, 21738, 22099,
  /*  1560 */ 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598,
  /*  1575 */ 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245,
  /*  1590 */ 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100,
  /*  1605 */ 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622,
  /*  1620 */ 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132,
  /*  1635 */ 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003,
  /*  1650 */ 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194,
  /*  1665 */ 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452,
  /*  1680 */ 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646,
  /*  1695 */ 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921,
  /*  1710 */ 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217,
  /*  1725 */ 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476,
  /*  1740 */ 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712,
  /*  1755 */ 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1770 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  1785 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 22100, 22100,
  /*  1800 */ 22100, 22100, 19578, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21578, 21594, 22100, 22100, 21738,
  /*  1815 */ 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845,
  /*  1830 */ 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683,
  /*  1845 */ 20245, 18426, 18484, 20625, 20563, 20913, 18514, 20796, 20722, 20568, 20918, 18519, 20801, 18535, 18563,
  /*  1860 */ 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174,
  /*  1875 */ 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100,
  /*  1890 */ 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971,
  /*  1905 */ 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194,
  /*  1920 */ 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415,
  /*  1935 */ 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594,
  /*  1950 */ 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902,
  /*  1965 */ 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169,
  /*  1980 */ 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428,
  /*  1995 */ 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707,
  /*  2010 */ 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  2025 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  2040 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21612, 21661, 22100, 22100, 22100, 31863, 22100,
  /*  2055 */ 22100, 19825, 20995, 21680, 22100, 22100, 22100, 22100, 21133, 21758, 25340, 21720, 21736, 22100, 22100,
  /*  2070 */ 21738, 22099, 22100, 51343, 21754, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838,
  /*  2085 */ 20845, 20598, 18547, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718,
  /*  2100 */ 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535,
  /*  2115 */ 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355,
  /*  2130 */ 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178,
  /*  2145 */ 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439,
  /*  2160 */ 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386,
  /*  2175 */ 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429,
  /*  2190 */ 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167,
  /*  2205 */ 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879,
  /*  2220 */ 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153,
  /*  2235 */ 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374,
  /*  2250 */ 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701,
  /*  2265 */ 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100,
  /*  2280 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  2295 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21774, 21789, 21817, 21817, 21817, 21796,
  /*  2310 */ 21812, 21817, 21822, 21902, 21838, 21880, 21941, 21896, 21853, 21867, 21918, 21932, 21957, 18268, 22100,
  /*  2325 */ 22100, 18309, 21982, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099,
  /*  2340 */ 20838, 20845, 20598, 19802, 18286, 31727, 18306, 21973, 22100, 22100, 18350, 22100, 18367, 18389, 43770,
  /*  2355 */ 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801,
  /*  2370 */ 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686,
  /*  2385 */ 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750,
  /*  2400 */ 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942,
  /*  2415 */ 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177,
  /*  2430 */ 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406,
  /*  2445 */ 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555,
  /*  2460 */ 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841,
  /*  2475 */ 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116,
  /*  2490 */ 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390,
  /*  2505 */ 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670,
  /*  2520 */ 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100,
  /*  2535 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  2550 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 19280, 22100, 22100, 22100,
  /*  2565 */ 25852, 41743, 22100, 38320, 41749, 37519, 19280, 22100, 21999, 22005, 22021, 18589, 19286, 22058, 18268,
  /*  2580 */ 22100, 22100, 21738, 22074, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175,
  /*  2595 */ 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 22091, 22100, 22100, 18350, 22100, 18367, 18389,
  /*  2610 */ 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519,
  /*  2625 */ 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174,
  /*  2640 */ 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099,
  /*  2655 */ 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900,
  /*  2670 */ 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135,
  /*  2685 */ 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383,
  /*  2700 */ 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777,
  /*  2715 */ 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818,
  /*  2730 */ 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100,
  /*  2745 */ 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371,
  /*  2760 */ 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641,
  /*  2775 */ 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100,
  /*  2790 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  2805 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 18867, 22100, 22100,
  /*  2820 */ 22100, 26815, 22100, 22100, 22100, 46139, 47632, 22144, 22117, 22138, 22122, 22160, 22200, 22231, 22215,
  /*  2835 */ 18268, 22100, 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912,
  /*  2850 */ 24175, 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367,
  /*  2865 */ 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20784, 20568, 20918,
  /*  2880 */ 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656,
  /*  2895 */ 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737,
  /*  2910 */ 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018,
  /*  2925 */ 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351,
  /*  2940 */ 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367,
  /*  2955 */ 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510,
  /*  2970 */ 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795,
  /*  2985 */ 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989,
  /*  3000 */ 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935,
  /*  3015 */ 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949,
  /*  3030 */ 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100,
  /*  3045 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3060 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100,
  /*  3075 */ 22100, 22100, 26815, 22100, 22100, 22100, 46455, 47683, 22276, 22247, 22270, 22247, 22254, 27888, 22247,
  /*  3090 */ 22292, 18268, 22100, 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3105 */ 50912, 24175, 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 22308, 22100,
  /*  3120 */ 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568,
  /*  3135 */ 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843,
  /*  3150 */ 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731,
  /*  3165 */ 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916,
  /*  3180 */ 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070,
  /*  3195 */ 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670,
  /*  3210 */ 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538,
  /*  3225 */ 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777,
  /*  3240 */ 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084,
  /*  3255 */ 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343,
  /*  3270 */ 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614,
  /*  3285 */ 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100,
  /*  3300 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3315 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22330,
  /*  3330 */ 22100, 22100, 22100, 26815, 42532, 22100, 39718, 22326, 48931, 22346, 22384, 22388, 22388, 22404, 22330,
  /*  3345 */ 42539, 22438, 18268, 22100, 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3360 */ 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350,
  /*  3375 */ 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552,
  /*  3390 */ 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640,
  /*  3405 */ 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654,
  /*  3420 */ 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694,
  /*  3435 */ 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042,
  /*  3450 */ 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329,
  /*  3465 */ 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501,
  /*  3480 */ 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759,
  /*  3495 */ 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067,
  /*  3510 */ 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327,
  /*  3525 */ 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412,
  /*  3540 */ 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989,
  /*  3555 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3570 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22454,
  /*  3585 */ 22100, 22100, 22100, 22100, 26815, 22100, 22100, 22100, 22100, 37519, 22506, 22477, 22500, 22477, 22484,
  /*  3600 */ 39735, 22477, 22522, 18268, 22100, 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100,
  /*  3615 */ 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 22538, 22100, 50344, 22100, 29077, 27510, 22100,
  /*  3630 */ 22308, 22559, 22100, 22100, 22100, 22100, 32524, 43818, 27273, 27273, 37889, 29241, 22579, 29241, 29241,
  /*  3645 */ 46264, 23581, 28759, 28759, 38433, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 25509, 49074, 24348,
  /*  3660 */ 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599,
  /*  3675 */ 28759, 28759, 28759, 28759, 28761, 48457, 22100, 25304, 22618, 22100, 22100, 22100, 22100, 37952, 22100,
  /*  3690 */ 22100, 41168, 43291, 27273, 27273, 27273, 32525, 22635, 45827, 29241, 22671, 29241, 29242, 22691, 30691,
  /*  3705 */ 28759, 22725, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 42166, 22100, 21278, 27273, 36059,
  /*  3720 */ 27273, 27273, 22769, 29241, 42044, 29241, 29241, 29242, 41071, 28759, 22745, 28759, 28759, 48449, 46116,
  /*  3735 */ 22100, 22100, 19206, 22100, 22100, 27273, 27273, 27273, 22763, 29241, 29241, 29241, 22785, 41074, 28759,
  /*  3750 */ 28759, 40424, 34938, 22804, 22100, 44675, 22825, 35007, 22842, 27273, 30840, 22862, 29241, 40932, 22881,
  /*  3765 */ 28759, 27438, 22901, 22100, 38553, 22809, 22918, 27273, 44298, 22953, 47991, 22972, 28759, 27437, 22100,
  /*  3780 */ 27158, 21281, 23001, 44108, 23045, 50889, 23069, 46119, 28839, 23097, 48524, 23113, 29819, 40888, 47795,
  /*  3795 */ 22747, 21280, 33748, 40930, 28366, 23162, 40816, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196,
  /*  3810 */ 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3825 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3840 */ 21011, 22100, 22100, 22100, 22100, 26815, 22100, 22100, 22100, 27164, 37519, 22100, 22100, 22100, 22100,
  /*  3855 */ 22100, 47878, 23178, 23193, 18268, 22100, 22100, 21738, 22099, 22100, 23682, 22100, 22100, 22100, 22100,
  /*  3870 */ 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 23209, 22538, 22100, 22100, 22100, 29077, 22100,
  /*  3885 */ 22100, 18350, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 37889, 29241, 29241, 29241,
  /*  3900 */ 29241, 46264, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 25509, 22100,
  /*  3915 */ 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241,
  /*  3930 */ 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  3945 */ 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073,
  /*  3960 */ 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273,
  /*  3975 */ 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759, 48449,
  /*  3990 */ 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241, 41074,
  /*  4005 */ 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932,
  /*  4020 */ 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437,
  /*  4035 */ 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275,
  /*  4050 */ 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542,
  /*  4065 */ 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4080 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4095 */ 22100, 21011, 23266, 22100, 22100, 22100, 30925, 22100, 22100, 22100, 22100, 37519, 18876, 23286, 23315,
  /*  4110 */ 23303, 18884, 50954, 23287, 23337, 18268, 22100, 22100, 21738, 22099, 22100, 51343, 51082, 22100, 20129,
  /*  4125 */ 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325,
  /*  4140 */ 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913,
  /*  4155 */ 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605,
  /*  4170 */ 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099,
  /*  4185 */ 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459,
  /*  4200 */ 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098,
  /*  4215 */ 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302,
  /*  4230 */ 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445,
  /*  4245 */ 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779,
  /*  4260 */ 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068,
  /*  4275 */ 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267,
  /*  4290 */ 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584,
  /*  4305 */ 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898,
  /*  4320 */ 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4335 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4350 */ 22100, 22100, 21011, 23395, 22100, 22100, 22100, 26815, 22100, 22100, 22100, 41212, 37519, 22100, 22100,
  /*  4365 */ 22100, 22100, 22100, 23353, 23364, 23380, 18268, 22100, 22100, 21738, 22099, 22100, 44261, 22100, 22100,
  /*  4380 */ 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 23412, 22538, 22100, 22100, 22100,
  /*  4395 */ 29077, 22100, 22100, 23464, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 37889, 29241,
  /*  4410 */ 29241, 29241, 29241, 46264, 28759, 28759, 28759, 22602, 27047, 23487, 22100, 22100, 22100, 22100, 22100,
  /*  4425 */ 34002, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241,
  /*  4440 */ 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 32051, 23524, 23544, 22100, 22100, 22100, 22100,
  /*  4455 */ 32774, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 30409, 28030, 29241, 29241, 29241, 29241,
  /*  4470 */ 30541, 41073, 28759, 28759, 28759, 28759, 28760, 28784, 23540, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4485 */ 21278, 27273, 27273, 27273, 27273, 32567, 29241, 29241, 29241, 29241, 30541, 23561, 28759, 28759, 28759,
  /*  4500 */ 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241,
  /*  4515 */ 29241, 23579, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241,
  /*  4530 */ 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759,
  /*  4545 */ 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760,
  /*  4560 */ 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769,
  /*  4575 */ 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4590 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4605 */ 22100, 22100, 22100, 21011, 21328, 22100, 22100, 22100, 23448, 35140, 22100, 22100, 23597, 37519, 39073,
  /*  4620 */ 34530, 23651, 23657, 23673, 22100, 19251, 23716, 23732, 22100, 22100, 19905, 23752, 22100, 51343, 22100,
  /*  4635 */ 22100, 22100, 22100, 22100, 22100, 22100, 50912, 20690, 24255, 18461, 23906, 24791, 24649, 18286, 31727,
  /*  4650 */ 18306, 23773, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484, 19313,
  /*  4665 */ 23799, 24034, 23839, 20193, 24637, 25119, 23867, 23897, 24778, 23922, 18563, 22100, 18580, 22100, 22100,
  /*  4680 */ 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 18451, 24687, 24022,
  /*  4695 */ 23823, 24255, 24250, 24064, 24071, 25110, 24127, 23904, 23950, 23966, 22100, 35132, 18766, 51226, 18820,
  /*  4710 */ 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 23982, 23851, 24010, 23998,
  /*  4725 */ 20201, 24050, 24087, 24962, 24115, 24103, 24136, 24152, 23965, 26386, 19194, 46194, 19230, 44428, 19246,
  /*  4740 */ 19267, 19302, 20231, 18498, 19329, 18670, 24192, 24238, 24273, 24207, 24289, 24333, 42992, 24952, 25009,
  /*  4755 */ 24492, 24436, 24370, 24386, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693, 24680, 24407,
  /*  4770 */ 24222, 24465, 24481, 23934, 24517, 24533, 24560, 19818, 19841, 19879, 19902, 19921, 19984, 19609, 20521,
  /*  4785 */ 23814, 24304, 24317, 24595, 24607, 24544, 49989, 20100, 20116, 20153, 20169, 20217, 24623, 24665, 19161,
  /*  4800 */ 24891, 24717, 24703, 20311, 20327, 20343, 19935, 24747, 24763, 24807, 24823, 24839, 20506, 18955, 24876,
  /*  4815 */ 23881, 24907, 20691, 24257, 18468, 20614, 20183, 24422, 25022, 19150, 24937, 24501, 24978, 24994, 24731,
  /*  4830 */ 25038, 25095, 24449, 25135, 25148, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4845 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  4860 */ 22100, 22100, 22100, 22100, 21011, 48951, 22100, 22100, 22100, 26815, 25175, 22100, 22100, 25170, 49770,
  /*  4875 */ 25191, 25220, 25220, 25220, 25198, 22100, 25214, 25236, 18268, 22100, 22100, 21738, 22099, 22100, 51343,
  /*  4890 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 20598, 19802, 18286,
  /*  4905 */ 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426, 18484,
  /*  4920 */ 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580, 22100,
  /*  4935 */ 22100, 22100, 25252, 25289, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828, 20651,
  /*  4950 */ 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 25377, 25326, 25352, 18766, 51226,
  /*  4965 */ 18820, 18858, 45514, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960, 19042,
  /*  4980 */ 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 25376, 21627, 19194, 46194, 19230, 44428,
  /*  4995 */ 19246, 19267, 19302, 20231, 18498, 19329, 18670, 25393, 19383, 19406, 19429, 25415, 25431, 25471, 19399,
  /*  5010 */ 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 25487, 19725,
  /*  5025 */ 19743, 19761, 19779, 25446, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984, 19609,
  /*  5040 */ 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045, 20261,
  /*  5055 */ 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506, 18913,
  /*  5070 */ 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753, 20769,
  /*  5085 */ 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5100 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5115 */ 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 22100, 22100, 22100, 22100,
  /*  5130 */ 30171, 22169, 22177, 22177, 22177, 22184, 49054, 25525, 25540, 18268, 22100, 22100, 21738, 22099, 22100,
  /*  5145 */ 51343, 22100, 22100, 22413, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 25815, 19802,
  /*  5160 */ 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245, 18426,
  /*  5175 */ 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100, 18580,
  /*  5190 */ 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622, 20828,
  /*  5205 */ 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132, 18766,
  /*  5220 */ 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003, 20960,
  /*  5235 */ 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194, 19230,
  /*  5250 */ 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452, 19376,
  /*  5265 */ 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646, 19693,
  /*  5280 */ 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921, 19984,
  /*  5295 */ 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217, 20045,
  /*  5310 */ 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476, 20506,
  /*  5325 */ 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712, 20753,
  /*  5340 */ 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5355 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5370 */ 22100, 22100, 22100, 22100, 22100, 22100, 25556, 40571, 22100, 22100, 22100, 26815, 22100, 22100, 22100,
  /*  5385 */ 22100, 37519, 25644, 25592, 25627, 25615, 25599, 22100, 25643, 25660, 25676, 22100, 22100, 21738, 22099,
  /*  5400 */ 22100, 51343, 22100, 22100, 33258, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845, 26485,
  /*  5415 */ 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245,
  /*  5430 */ 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563, 22100,
  /*  5445 */ 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622,
  /*  5460 */ 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132,
  /*  5475 */ 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003,
  /*  5490 */ 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194,
  /*  5505 */ 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452,
  /*  5520 */ 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646,
  /*  5535 */ 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921,
  /*  5550 */ 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217,
  /*  5565 */ 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476,
  /*  5580 */ 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712,
  /*  5595 */ 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5610 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5625 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25697, 25706, 22100, 22100, 22100, 29964, 22100, 22100,
  /*  5640 */ 22100, 22100, 37519, 25750, 25726, 25726, 25726, 25733, 22100, 25749, 25766, 25782, 22100, 22100, 21738,
  /*  5655 */ 22099, 22100, 51343, 22100, 22100, 50707, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845,
  /*  5670 */ 20598, 20295, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683,
  /*  5685 */ 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563,
  /*  5700 */ 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174,
  /*  5715 */ 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100,
  /*  5730 */ 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971,
  /*  5745 */ 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194,
  /*  5760 */ 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415,
  /*  5775 */ 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594,
  /*  5790 */ 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902,
  /*  5805 */ 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169,
  /*  5820 */ 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428,
  /*  5835 */ 20476, 20506, 18913, 20537, 18926, 25801, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707,
  /*  5850 */ 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5865 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  5880 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25831, 22100, 22100, 22100, 22100, 26815, 25909,
  /*  5895 */ 22100, 22100, 49180, 49951, 22100, 25881, 22100, 25868, 25910, 49409, 25900, 25926, 18268, 22100, 22100,
  /*  5910 */ 21738, 22099, 22100, 51343, 51361, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838,
  /*  5925 */ 19968, 51407, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718,
  /*  5940 */ 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535,
  /*  5955 */ 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355,
  /*  5970 */ 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178,
  /*  5985 */ 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439,
  /*  6000 */ 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386,
  /*  6015 */ 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429,
  /*  6030 */ 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167,
  /*  6045 */ 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879,
  /*  6060 */ 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153,
  /*  6075 */ 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374,
  /*  6090 */ 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701,
  /*  6105 */ 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100,
  /*  6120 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  6135 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815,
  /*  6150 */ 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 22100, 40869, 25942, 25957, 18268, 22100,
  /*  6165 */ 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099,
  /*  6180 */ 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770,
  /*  6195 */ 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801,
  /*  6210 */ 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686,
  /*  6225 */ 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750,
  /*  6240 */ 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942,
  /*  6255 */ 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177,
  /*  6270 */ 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406,
  /*  6285 */ 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555,
  /*  6300 */ 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841,
  /*  6315 */ 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116,
  /*  6330 */ 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390,
  /*  6345 */ 20374, 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670,
  /*  6360 */ 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100,
  /*  6375 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  6390 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 22100,
  /*  6405 */ 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224, 18268,
  /*  6420 */ 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274,
  /*  6435 */ 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  6450 */ 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759,
  /*  6465 */ 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 40691, 22100, 22100, 22100, 22100, 21278, 27273,
  /*  6480 */ 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759,
  /*  6495 */ 28761, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 22100, 22100, 22100, 35007, 27273, 27273,
  /*  6510 */ 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760,
  /*  6525 */ 28784, 23540, 22100, 22100, 22100, 22100, 26100, 22100, 21278, 27273, 27273, 27273, 27273, 40077, 29241,
  /*  6540 */ 29241, 29241, 29241, 29242, 23561, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100,
  /*  6555 */ 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579, 28759, 28759, 28759, 34938, 22100,
  /*  6570 */ 22100, 35992, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100,
  /*  6585 */ 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842,
  /*  6600 */ 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930,
  /*  6615 */ 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100,
  /*  6630 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  6645 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100,
  /*  6660 */ 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224,
  /*  6675 */ 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279,
  /*  6690 */ 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100,
  /*  6705 */ 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759,
  /*  6720 */ 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 40691, 22100, 22100, 22100, 22100, 21278,
  /*  6735 */ 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759,
  /*  6750 */ 28759, 28761, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 22100, 22100, 22100, 35007, 27273,
  /*  6765 */ 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759,
  /*  6780 */ 28760, 28784, 23540, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 40077,
  /*  6795 */ 29241, 29241, 29241, 29241, 29242, 23561, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100,
  /*  6810 */ 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579, 28759, 28759, 28759, 34938,
  /*  6825 */ 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100,
  /*  6840 */ 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273,
  /*  6855 */ 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748,
  /*  6870 */ 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100,
  /*  6885 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  6900 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100,
  /*  6915 */ 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293,
  /*  6930 */ 23224, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  6945 */ 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100,
  /*  6960 */ 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759,
  /*  6975 */ 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 40691, 31515, 22100, 22100, 22100,
  /*  6990 */ 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759,
  /*  7005 */ 28759, 28759, 28761, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 22100, 22100, 22100, 35007,
  /*  7020 */ 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759,
  /*  7035 */ 28759, 28760, 28784, 23540, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273,
  /*  7050 */ 40077, 29241, 29241, 29241, 29241, 29242, 23561, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100,
  /*  7065 */ 22100, 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579, 28759, 28759, 28759,
  /*  7080 */ 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438,
  /*  7095 */ 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281,
  /*  7110 */ 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280,
  /*  7125 */ 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100,
  /*  7140 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7155 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100,
  /*  7170 */ 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 25273, 25994,
  /*  7185 */ 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7200 */ 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100, 29077, 22100, 22100, 22100,
  /*  7215 */ 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044,
  /*  7230 */ 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 40691, 22100, 22100, 22100,
  /*  7245 */ 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599, 28759,
  /*  7260 */ 28759, 28759, 28759, 28761, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 26119, 22100, 22100,
  /*  7275 */ 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759,
  /*  7290 */ 28759, 28759, 28760, 28784, 23540, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273,
  /*  7305 */ 27273, 40077, 29241, 29241, 29241, 29241, 29242, 23561, 28759, 28759, 28759, 28759, 48449, 46116, 22100,
  /*  7320 */ 22100, 22100, 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579, 28759, 28759,
  /*  7335 */ 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759,
  /*  7350 */ 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158,
  /*  7365 */ 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747,
  /*  7380 */ 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206,
  /*  7395 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7410 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973,
  /*  7425 */ 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 25273,
  /*  7440 */ 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100, 30195, 22100, 22100, 22100, 22100, 22100,
  /*  7455 */ 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100, 29077, 22100, 22100,
  /*  7470 */ 30203, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241,
  /*  7485 */ 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 40691, 22100, 22100,
  /*  7500 */ 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599,
  /*  7515 */ 28759, 28759, 28759, 28759, 28761, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 22100, 22100,
  /*  7530 */ 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759,
  /*  7545 */ 28759, 28759, 28759, 28760, 28784, 23540, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273,
  /*  7560 */ 27273, 27273, 40077, 29241, 29241, 29241, 29241, 29242, 23561, 28759, 28759, 28759, 28759, 48449, 46116,
  /*  7575 */ 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579, 28759,
  /*  7590 */ 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759,
  /*  7605 */ 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100,
  /*  7620 */ 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756,
  /*  7635 */ 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196,
  /*  7650 */ 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7665 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7680 */ 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100,
  /*  7695 */ 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7710 */ 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100, 29077, 22100,
  /*  7725 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241,
  /*  7740 */ 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7755 */ 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241,
  /*  7770 */ 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7785 */ 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073,
  /*  7800 */ 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273,
  /*  7815 */ 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759, 48449,
  /*  7830 */ 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241, 41074,
  /*  7845 */ 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932,
  /*  7860 */ 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437,
  /*  7875 */ 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275,
  /*  7890 */ 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542,
  /*  7905 */ 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7920 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  7935 */ 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100,
  /*  7950 */ 22100, 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100,
  /*  7965 */ 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 28736, 22100, 22100, 22100, 29077,
  /*  7980 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241,
  /*  7995 */ 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8010 */ 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241,
  /*  8025 */ 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8040 */ 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242,
  /*  8055 */ 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278,
  /*  8070 */ 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759,
  /*  8085 */ 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241,
  /*  8100 */ 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241,
  /*  8115 */ 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759,
  /*  8130 */ 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307,
  /*  8145 */ 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299,
  /*  8160 */ 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8175 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8190 */ 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100,
  /*  8205 */ 22100, 22100, 25273, 25994, 32293, 23427, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100,
  /*  8220 */ 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100, 22100,
  /*  8235 */ 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241,
  /*  8250 */ 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100,
  /*  8265 */ 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241,
  /*  8280 */ 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8295 */ 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241,
  /*  8310 */ 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8325 */ 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759,
  /*  8340 */ 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241,
  /*  8355 */ 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241,
  /*  8370 */ 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759,
  /*  8385 */ 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760,
  /*  8400 */ 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769,
  /*  8415 */ 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8430 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8445 */ 22100, 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 47964,
  /*  8460 */ 22100, 22100, 22100, 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100,
  /*  8475 */ 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100, 22100,
  /*  8490 */ 22100, 29077, 22100, 22100, 22100, 18403, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616,
  /*  8505 */ 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100,
  /*  8520 */ 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241,
  /*  8535 */ 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100,
  /*  8550 */ 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241,
  /*  8565 */ 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8580 */ 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759,
  /*  8595 */ 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241,
  /*  8610 */ 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840,
  /*  8625 */ 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757,
  /*  8640 */ 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758,
  /*  8655 */ 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195,
  /*  8670 */ 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8685 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8700 */ 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519,
  /*  8715 */ 22100, 22100, 22100, 22100, 26924, 26140, 26192, 26155, 18268, 22100, 22100, 21738, 22099, 22100, 22100,
  /*  8730 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100,
  /*  8745 */ 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273,
  /*  8760 */ 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100,
  /*  8775 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241,
  /*  8790 */ 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100,
  /*  8805 */ 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241,
  /*  8820 */ 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100,
  /*  8835 */ 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759,
  /*  8850 */ 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241,
  /*  8865 */ 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273,
  /*  8880 */ 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241,
  /*  8895 */ 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050,
  /*  8910 */ 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930,
  /*  8925 */ 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8940 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  8955 */ 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100,
  /*  8970 */ 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100,
  /*  8985 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022,
  /*  9000 */ 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273,
  /*  9015 */ 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100,
  /*  9030 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401,
  /*  9045 */ 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100,
  /*  9060 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241,
  /*  9075 */ 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100,
  /*  9090 */ 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071,
  /*  9105 */ 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 42261, 22100, 22100, 27273, 27273, 27273, 32526,
  /*  9120 */ 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273,
  /*  9135 */ 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841,
  /*  9150 */ 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281,
  /*  9165 */ 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049,
  /*  9180 */ 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9195 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9210 */ 22100, 22100, 22100, 22100, 22100, 22100, 26208, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100,
  /*  9225 */ 22100, 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099,
  /*  9240 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654,
  /*  9255 */ 26022, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273,
  /*  9270 */ 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100,
  /*  9285 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273,
  /*  9300 */ 46401, 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100,
  /*  9315 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030,
  /*  9330 */ 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100,
  /*  9345 */ 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242,
  /*  9360 */ 41071, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273,
  /*  9375 */ 32526, 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007,
  /*  9390 */ 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273,
  /*  9405 */ 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119,
  /*  9420 */ 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366,
  /*  9435 */ 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9450 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9465 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 22100, 22100,
  /*  9480 */ 22100, 22100, 37519, 49524, 26229, 26264, 26252, 26236, 49520, 26229, 26286, 18268, 22100, 22100, 21738,
  /*  9495 */ 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838, 20845,
  /*  9510 */ 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 26302, 18367, 18389, 43770, 31718, 20683,
  /*  9525 */ 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563,
  /*  9540 */ 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174,
  /*  9555 */ 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100,
  /*  9570 */ 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971,
  /*  9585 */ 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194,
  /*  9600 */ 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415,
  /*  9615 */ 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594,
  /*  9630 */ 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902,
  /*  9645 */ 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 26322, 20153, 20169,
  /*  9660 */ 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428,
  /*  9675 */ 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707,
  /*  9690 */ 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9705 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9720 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 22100,
  /*  9735 */ 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 23337, 18268, 22100, 22100,
  /*  9750 */ 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099, 20838,
  /*  9765 */ 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718,
  /*  9780 */ 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535,
  /*  9795 */ 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355,
  /*  9810 */ 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178,
  /*  9825 */ 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439,
  /*  9840 */ 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386,
  /*  9855 */ 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429,
  /*  9870 */ 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167,
  /*  9885 */ 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879,
  /*  9900 */ 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153,
  /*  9915 */ 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374,
  /*  9930 */ 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701,
  /*  9945 */ 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100,
  /*  9960 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /*  9975 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815,
  /*  9990 */ 22100, 22100, 22100, 22100, 37519, 26335, 22100, 26355, 26361, 26377, 22100, 26339, 26402, 18268, 22100,
  /* 10005 */ 22100, 21738, 22099, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51099,
  /* 10020 */ 20838, 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770,
  /* 10035 */ 31718, 20683, 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801,
  /* 10050 */ 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686,
  /* 10065 */ 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750,
  /* 10080 */ 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942,
  /* 10095 */ 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177,
  /* 10110 */ 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406,
  /* 10125 */ 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555,
  /* 10140 */ 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841,
  /* 10155 */ 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116,
  /* 10170 */ 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 26418, 20343, 19935, 20371, 20390,
  /* 10185 */ 20374, 20428, 26434, 20506, 18913, 20537, 18926, 26471, 24176, 51099, 20412, 20614, 19949, 20641, 20670,
  /* 10200 */ 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100,
  /* 10215 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 10230 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 18270, 22100, 22100, 22100,
  /* 10245 */ 45211, 26501, 26532, 21196, 26517, 26549, 39413, 39421, 26580, 26594, 26610, 26626, 26678, 26641, 26694,
  /* 10260 */ 22100, 26730, 44236, 26751, 26270, 26787, 26808, 26831, 26874, 24860, 26903, 26885, 26940, 26956, 26985,
  /* 10275 */ 27032, 27069, 27138, 27180, 27196, 22100, 22100, 22100, 29077, 27233, 28135, 22100, 27256, 34747, 22100,
  /* 10290 */ 46916, 22100, 27272, 27273, 27273, 47705, 27616, 29241, 29241, 29241, 33152, 26044, 28759, 28759, 33213,
  /* 10305 */ 22602, 27047, 26027, 40054, 22100, 20876, 30392, 49018, 40691, 32066, 22100, 34340, 23545, 27291, 50466,
  /* 10320 */ 27273, 27273, 44554, 28402, 48512, 27315, 29241, 29241, 30308, 27343, 27377, 35747, 28759, 28759, 27408,
  /* 10335 */ 27430, 27454, 26065, 27491, 22100, 39673, 25845, 22100, 27526, 22100, 21441, 27554, 27576, 27597, 27273,
  /* 10350 */ 27632, 27649, 45765, 28708, 27669, 50299, 29241, 27703, 42811, 23563, 27722, 34377, 28759, 27756, 29276,
  /* 10365 */ 27775, 27819, 27852, 27871, 22100, 31603, 27904, 22100, 21278, 27947, 27273, 27273, 27998, 28019, 27353,
  /* 10380 */ 28049, 29241, 33336, 50817, 28069, 46291, 28759, 28759, 28114, 48449, 26006, 28130, 28151, 28171, 42205,
  /* 10395 */ 47604, 44980, 38738, 28188, 30451, 40364, 32651, 32952, 29241, 28209, 28248, 50151, 28759, 49118, 44164,
  /* 10410 */ 22100, 22100, 22100, 35007, 48162, 40612, 30840, 33799, 35780, 40932, 33524, 33531, 27438, 22100, 22100,
  /* 10425 */ 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842,
  /* 10440 */ 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 28276, 28327, 28343, 28359, 28389, 34203, 48714,
  /* 10455 */ 49242, 30048, 33767, 30073, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100,
  /* 10470 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 10485 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 28439, 22100,
  /* 10500 */ 22100, 45211, 22100, 22100, 22100, 22100, 47261, 28460, 22100, 28484, 28490, 28506, 28522, 28538, 28554,
  /* 10515 */ 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279,
  /* 10530 */ 32376, 48401, 42387, 33000, 31654, 26022, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100,
  /* 10545 */ 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759,
  /* 10560 */ 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 40177, 40691, 31819, 22100, 28591, 22100, 21278,
  /* 10575 */ 27273, 27273, 27273, 27273, 28610, 46401, 29241, 29241, 29241, 38619, 30499, 22599, 28759, 28759, 28759,
  /* 10590 */ 37847, 28653, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 22100, 22100, 22100, 35007, 27273,
  /* 10605 */ 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759,
  /* 10620 */ 28760, 28784, 23540, 22100, 43246, 22100, 22100, 22100, 27210, 40756, 28676, 27273, 27273, 27273, 28697,
  /* 10635 */ 44585, 29241, 29241, 29241, 31327, 28724, 28758, 28759, 28759, 28759, 28777, 46116, 22100, 22100, 22100,
  /* 10650 */ 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579, 28759, 28759, 28759, 34938,
  /* 10665 */ 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100,
  /* 10680 */ 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273,
  /* 10695 */ 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 28800,
  /* 10710 */ 28816, 28832, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100,
  /* 10725 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 10740 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 28855,
  /* 10755 */ 22100, 22100, 45211, 22100, 28884, 22100, 28902, 45929, 28921, 28929, 28945, 28960, 28976, 28992, 29008,
  /* 10770 */ 29023, 18268, 22100, 22100, 29071, 29093, 22100, 29113, 22100, 22100, 22100, 22100, 22100, 45204, 19539,
  /* 10785 */ 29132, 40530, 29241, 29152, 50159, 50736, 29175, 30624, 22100, 22100, 46938, 22100, 33722, 22100, 36882,
  /* 10800 */ 19516, 29197, 38694, 38028, 38928, 29217, 27273, 27273, 37307, 45374, 29240, 29241, 29241, 29258, 29292,
  /* 10815 */ 28759, 28759, 22602, 27047, 26027, 29330, 22100, 22100, 29352, 22100, 29373, 22100, 25053, 22100, 22100,
  /* 10830 */ 21278, 48685, 29411, 29428, 28415, 27273, 46401, 29445, 22675, 29241, 29483, 29241, 22599, 29504, 34301,
  /* 10845 */ 28759, 29531, 28761, 38486, 26065, 23544, 22100, 22100, 29549, 22100, 23238, 22100, 22100, 22100, 35007,
  /* 10860 */ 27273, 27273, 33634, 49622, 32525, 28030, 29241, 29241, 45834, 30664, 29242, 41073, 28759, 28759, 42449,
  /* 10875 */ 39997, 28760, 28784, 29567, 22100, 22100, 22100, 29595, 45483, 22100, 21278, 27273, 27273, 27273, 29616,
  /* 10890 */ 40077, 29241, 29241, 29241, 33379, 29242, 23561, 28759, 28759, 43654, 28759, 48449, 46116, 22100, 22100,
  /* 10905 */ 29633, 22100, 29651, 27273, 37969, 27273, 30451, 29241, 42738, 29241, 29241, 23579, 28759, 29667, 28759,
  /* 10920 */ 42155, 29685, 22100, 22100, 49881, 29136, 27273, 29710, 40909, 29241, 29729, 30860, 28759, 29748, 27438,
  /* 10935 */ 22100, 22100, 39328, 21277, 27273, 38861, 30841, 29241, 32132, 28759, 28759, 29768, 22100, 27158, 21281,
  /* 10950 */ 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 33176, 29789,
  /* 10965 */ 32384, 23053, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 45860, 29805, 41206, 22100,
  /* 10980 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 10995 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100,
  /* 11010 */ 21524, 22100, 22100, 45211, 22100, 29835, 19886, 22100, 39449, 29854, 29862, 29878, 29892, 29899, 29915,
  /* 11025 */ 29980, 29930, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 30007, 30005, 22100,
  /* 11040 */ 29996, 30024, 30044, 40796, 42387, 30066, 31654, 26022, 22100, 30089, 30105, 29077, 21983, 30127, 29336,
  /* 11055 */ 22100, 46578, 29600, 30144, 30187, 40962, 30220, 30240, 30277, 30295, 49543, 37680, 32598, 34896, 30342,
  /* 11070 */ 50869, 43177, 30366, 38145, 27047, 26027, 22100, 22100, 22100, 30389, 30902, 40691, 22100, 22100, 22100,
  /* 11085 */ 41972, 21278, 27273, 27273, 27273, 27273, 30408, 46401, 29241, 29241, 29241, 28053, 29241, 22599, 28759,
  /* 11100 */ 28759, 28759, 36821, 28761, 32163, 26065, 30425, 22100, 22100, 44877, 35688, 32774, 22100, 22100, 32184,
  /* 11115 */ 35953, 30448, 30467, 27273, 27273, 31588, 30486, 30521, 30539, 29241, 29241, 42378, 30557, 30586, 30604,
  /* 11130 */ 28759, 28759, 28223, 28784, 23540, 22100, 22100, 22100, 22100, 45689, 30622, 23321, 27273, 27273, 27653,
  /* 11145 */ 27273, 40077, 30640, 29241, 29241, 30660, 29242, 30680, 28759, 28759, 41401, 28759, 48449, 46116, 41234,
  /* 11160 */ 45707, 22100, 45901, 22100, 27273, 30714, 40292, 30451, 29241, 30734, 30317, 30754, 23579, 34295, 47164,
  /* 11175 */ 30774, 34938, 36563, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759,
  /* 11190 */ 27438, 22100, 42961, 22100, 21277, 27273, 40588, 30841, 29241, 27687, 28759, 28759, 30793, 22100, 27158,
  /* 11205 */ 21281, 27273, 30842, 35344, 28759, 22709, 46119, 21281, 30050, 30758, 28760, 32307, 39480, 30814, 49235,
  /* 11220 */ 21280, 30837, 30858, 30876, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206,
  /* 11235 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 11250 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973,
  /* 11265 */ 22100, 22101, 30899, 22100, 45211, 25310, 30918, 22100, 30941, 28098, 30965, 30975, 30991, 31005, 31021,
  /* 11280 */ 31037, 31089, 31052, 18268, 51027, 31105, 31121, 37450, 31143, 30195, 25978, 31159, 21404, 31197, 44502,
  /* 11295 */ 31213, 31173, 31250, 31287, 31343, 31359, 31375, 31403, 31419, 29957, 31441, 26792, 31466, 50560, 41750,
  /* 11310 */ 31491, 31512, 22100, 38120, 22100, 22100, 41097, 31531, 31553, 31573, 39606, 45044, 50836, 22583, 29467,
  /* 11325 */ 31625, 43351, 40143, 50645, 31641, 27047, 26027, 31670, 31690, 31750, 20490, 31773, 31798, 31835, 47917,
  /* 11340 */ 33696, 31856, 31879, 31895, 31911, 31947, 31963, 32002, 32036, 32088, 32123, 32148, 32200, 42037, 32231,
  /* 11355 */ 36856, 32247, 32263, 42639, 32279, 32349, 26065, 32400, 32416, 30204, 32436, 33269, 32774, 32457, 27469,
  /* 11370 */ 32499, 32520, 32542, 27273, 27273, 32558, 28637, 28030, 32583, 29241, 30523, 32643, 49204, 41073, 32667,
  /* 11385 */ 28759, 34647, 32707, 44603, 32731, 23540, 27502, 32769, 32790, 22100, 32842, 32859, 32875, 32900, 32918,
  /* 11400 */ 27803, 34122, 40077, 33329, 22646, 46407, 32938, 36411, 32974, 40648, 28759, 33023, 38464, 48449, 46116,
  /* 11415 */ 22100, 49923, 33052, 22100, 32746, 27273, 33073, 33090, 30451, 29241, 33120, 33137, 29241, 23579, 33173,
  /* 11430 */ 33192, 33212, 34938, 22100, 33229, 33285, 33244, 33307, 33352, 40315, 33368, 33402, 33466, 33512, 33547,
  /* 11445 */ 33563, 33592, 33875, 26763, 49334, 21387, 31264, 33629, 39515, 45064, 49492, 33650, 50861, 33675, 22100,
  /* 11460 */ 33712, 21281, 44519, 30842, 41818, 28759, 43698, 47858, 21281, 33746, 33764, 38649, 49729, 30718, 32107,
  /* 11475 */ 40429, 49604, 39487, 42080, 29314, 33785, 33821, 33837, 30049, 40930, 41887, 33860, 27299, 47542, 41196,
  /* 11490 */ 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 11505 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 11520 */ 25973, 22100, 22100, 33900, 22100, 45211, 33921, 33939, 23736, 34777, 33964, 33994, 22100, 33980, 34018,
  /* 11535 */ 34025, 34041, 34095, 34056, 18268, 22100, 36288, 21738, 22099, 22100, 22100, 22100, 29097, 22100, 22100,
  /* 11550 */ 49012, 29095, 22100, 34111, 34138, 34160, 37914, 34185, 31654, 26022, 41648, 22100, 22100, 31127, 22100,
  /* 11565 */ 22100, 22100, 30111, 19569, 22100, 34219, 22100, 44200, 27273, 27273, 27273, 27616, 34239, 29241, 29241,
  /* 11580 */ 29241, 34281, 34317, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 40691, 22100,
  /* 11595 */ 22100, 22100, 34337, 21278, 27273, 27273, 27273, 29412, 27273, 46401, 29241, 29241, 29241, 48831, 29241,
  /* 11610 */ 22599, 28759, 28759, 28759, 36126, 28761, 38486, 26065, 23544, 22100, 22100, 22100, 22100, 32774, 22100,
  /* 11625 */ 23441, 22100, 35007, 27273, 27273, 23138, 27273, 32525, 28030, 29241, 29241, 31320, 29241, 29242, 41073,
  /* 11640 */ 28759, 28759, 40843, 28759, 28760, 28784, 23540, 22100, 22100, 22100, 22100, 22100, 31813, 21278, 27273,
  /* 11655 */ 27273, 27273, 34356, 40077, 29241, 29241, 29241, 27361, 29242, 23561, 28759, 28759, 28759, 34376, 48449,
  /* 11670 */ 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 30451, 29241, 29241, 29241, 29241, 23579,
  /* 11685 */ 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932,
  /* 11700 */ 28759, 28759, 27438, 31066, 22100, 22100, 21277, 45757, 27273, 36948, 29241, 30757, 27122, 28759, 27437,
  /* 11715 */ 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275,
  /* 11730 */ 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 42909, 36091, 27299, 47127,
  /* 11745 */ 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 11760 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 11775 */ 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 31073, 22100, 22100, 26858, 34393, 34401, 34417,
  /* 11790 */ 34423, 34439, 34455, 34500, 34470, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 42260, 22100, 22100,
  /* 11805 */ 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 34516, 22100, 22100, 22100, 29077,
  /* 11820 */ 22100, 22100, 22100, 36296, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241,
  /* 11835 */ 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 11850 */ 22100, 36925, 22100, 38714, 21278, 27273, 27273, 27273, 27273, 27273, 48775, 29241, 29241, 29241, 29241,
  /* 11865 */ 29241, 34552, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 42579, 22100, 33905, 42702,
  /* 11880 */ 22100, 22100, 34571, 34591, 27273, 27273, 34611, 27273, 32525, 28030, 29241, 29241, 34629, 29241, 29242,
  /* 11895 */ 41073, 28759, 28759, 34646, 28759, 28760, 28084, 22100, 22100, 22100, 34663, 22100, 22100, 22100, 21278,
  /* 11910 */ 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759,
  /* 11925 */ 48449, 46116, 22100, 22100, 34682, 50222, 22100, 27273, 27273, 27273, 34701, 29241, 29241, 29241, 34723,
  /* 11940 */ 41074, 28759, 28759, 36815, 34938, 50412, 34743, 34763, 34799, 33607, 30261, 34819, 34855, 34265, 34876,
  /* 11955 */ 34912, 30698, 37075, 34934, 37540, 22100, 27538, 22543, 30470, 31977, 42301, 47387, 34954, 28759, 34970,
  /* 11970 */ 27437, 22100, 27158, 35005, 35023, 37781, 27105, 46069, 35061, 46119, 21281, 30050, 30758, 28760, 32307,
  /* 11985 */ 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 32320,
  /* 12000 */ 35089, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12015 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12030 */ 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100,
  /* 12045 */ 22100, 22100, 25273, 25994, 32293, 23224, 35119, 22100, 22100, 35156, 22099, 22100, 22100, 27855, 22100,
  /* 12060 */ 45684, 22100, 27854, 48744, 45679, 36164, 42326, 35187, 43329, 22729, 35207, 35279, 22100, 22100, 31609,
  /* 12075 */ 29077, 21637, 19522, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273, 44721, 27616, 29241,
  /* 12090 */ 29241, 29241, 35301, 26044, 28759, 28759, 26049, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100,
  /* 12105 */ 22100, 22100, 22100, 35318, 21223, 21278, 27273, 27273, 27273, 27273, 27273, 35338, 29241, 29241, 29241,
  /* 12120 */ 29241, 40629, 22599, 28759, 28759, 28759, 28759, 40449, 48457, 22100, 19863, 22100, 22100, 22100, 22100,
  /* 12135 */ 22100, 22100, 22100, 41276, 35007, 35360, 27273, 27273, 27273, 32525, 28030, 35378, 29241, 29241, 29241,
  /* 12150 */ 29242, 41073, 35395, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 26655, 22100, 22100, 22100,
  /* 12165 */ 21278, 27273, 27273, 27273, 31271, 22769, 29241, 29241, 29241, 29241, 35412, 41071, 28759, 28759, 28759,
  /* 12180 */ 43092, 48449, 46116, 22100, 22100, 28568, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241,
  /* 12195 */ 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241,
  /* 12210 */ 29241, 40932, 28759, 28759, 27438, 22100, 39307, 22100, 50684, 27273, 27273, 30841, 29241, 30757, 28759,
  /* 12225 */ 28759, 45155, 22100, 27158, 35437, 27273, 35459, 33157, 28759, 30373, 46119, 21281, 30050, 30758, 28760,
  /* 12240 */ 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769,
  /* 12255 */ 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12270 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12285 */ 22100, 22100, 22100, 25973, 22100, 22100, 35553, 22100, 45211, 21596, 21350, 38559, 18794, 18804, 48022,
  /* 12300 */ 48030, 35477, 35492, 35508, 35524, 35577, 35539, 18268, 22100, 22100, 24391, 31475, 22100, 22100, 22100,
  /* 12315 */ 35593, 35626, 22100, 48338, 35637, 35653, 31181, 43265, 43144, 44758, 22885, 50530, 35682, 22100, 22100,
  /* 12330 */ 22100, 35704, 22100, 51256, 22100, 22100, 22100, 19707, 29116, 22100, 41573, 43589, 27273, 43857, 35729,
  /* 12345 */ 36599, 35763, 29241, 35796, 26044, 35812, 35840, 38799, 35860, 27047, 26027, 29838, 22826, 35889, 21435,
  /* 12360 */ 35908, 22035, 23396, 35937, 35969, 35987, 35948, 49428, 27273, 42720, 36008, 36044, 46401, 38195, 29241,
  /* 12375 */ 37803, 36081, 36107, 22599, 40135, 28759, 38984, 29515, 36785, 48457, 22100, 22100, 22100, 22100, 49586,
  /* 12390 */ 36142, 26076, 22100, 22100, 22100, 46695, 36021, 27273, 27273, 48169, 29224, 36180, 32101, 29241, 29241,
  /* 12405 */ 36197, 33386, 36213, 42443, 28759, 28759, 41143, 37739, 36239, 22100, 43197, 36264, 32178, 36312, 31705,
  /* 12420 */ 36917, 32364, 27273, 39896, 45316, 36355, 36384, 29241, 27016, 36400, 36436, 36461, 43925, 28759, 36486,
  /* 12435 */ 36512, 39978, 49289, 33688, 36528, 41256, 43895, 45526, 36562, 36579, 36028, 36622, 36659, 36689, 36606,
  /* 12450 */ 36715, 36731, 36764, 48295, 36801, 36837, 30798, 22100, 22100, 27836, 36872, 37425, 28304, 30254, 42853,
  /* 12465 */ 37674, 47078, 46670, 34982, 50637, 27438, 22100, 36157, 49389, 21277, 27273, 27273, 30841, 29241, 30757,
  /* 12480 */ 28759, 28759, 27437, 36906, 27158, 28373, 27581, 40994, 22655, 37733, 37769, 46119, 41567, 30050, 30758,
  /* 12495 */ 28760, 32307, 49663, 27327, 41861, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 36941, 36964, 34195,
  /* 12510 */ 33769, 27299, 47542, 30570, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12525 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12540 */ 22100, 22100, 22100, 22100, 25973, 22100, 22100, 42174, 22100, 45211, 22100, 22100, 22100, 22100, 37519,
  /* 12555 */ 22100, 31450, 42182, 27931, 38582, 36980, 37025, 36995, 18268, 22100, 22100, 21738, 22099, 22100, 22100,
  /* 12570 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022, 22100,
  /* 12585 */ 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 34613, 27273,
  /* 12600 */ 27616, 29241, 29241, 40110, 29241, 26044, 28759, 28759, 37041, 22602, 27047, 26027, 22100, 22100, 22100,
  /* 12615 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241,
  /* 12630 */ 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100,
  /* 12645 */ 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241,
  /* 12660 */ 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100,
  /* 12675 */ 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759,
  /* 12690 */ 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241,
  /* 12705 */ 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273,
  /* 12720 */ 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241,
  /* 12735 */ 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050,
  /* 12750 */ 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930,
  /* 12765 */ 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12780 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 12795 */ 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22461, 22100, 45211, 22100, 22100, 22100, 22100,
  /* 12810 */ 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100,
  /* 12825 */ 45650, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022,
  /* 12840 */ 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273,
  /* 12855 */ 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100,
  /* 12870 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401,
  /* 12885 */ 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 26176, 22100,
  /* 12900 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 30028, 27273, 27273, 27273, 27273, 32525, 35045, 29241,
  /* 12915 */ 29241, 29241, 29241, 29242, 37061, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100,
  /* 12930 */ 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071,
  /* 12945 */ 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526,
  /* 12960 */ 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273,
  /* 12975 */ 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841,
  /* 12990 */ 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281,
  /* 13005 */ 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049,
  /* 13020 */ 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13035 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13050 */ 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 21546, 22100, 45211, 22100, 33884, 22100,
  /* 13065 */ 25360, 37091, 37142, 37154, 37170, 37176, 37192, 37208, 37268, 37223, 18268, 42234, 22100, 21738, 22099,
  /* 13080 */ 26103, 45254, 42260, 22100, 27835, 22100, 27827, 18624, 27833, 37284, 27982, 37323, 37345, 30350, 37375,
  /* 13095 */ 37411, 18615, 22100, 22100, 37441, 22100, 22100, 37466, 37485, 51033, 22100, 37507, 37535, 37556, 46533,
  /* 13110 */ 27633, 32012, 37596, 34248, 37641, 41120, 37660, 37696, 37719, 28759, 39959, 43433, 37755, 26027, 19855,
  /* 13125 */ 22100, 22100, 22100, 22902, 22100, 22100, 22100, 22100, 22100, 21278, 38287, 49900, 27273, 43299, 27273,
  /* 13140 */ 37797, 33432, 42114, 29241, 39922, 29732, 34552, 37819, 43425, 28759, 37843, 37395, 48457, 22100, 22100,
  /* 13155 */ 35285, 25266, 22100, 26533, 22100, 37863, 22100, 22100, 35007, 27273, 27273, 28628, 27962, 37882, 28030,
  /* 13170 */ 29241, 29241, 39554, 43382, 37905, 41073, 28759, 28759, 48856, 35251, 37930, 48456, 22100, 37949, 22100,
  /* 13185 */ 22100, 26917, 22100, 22100, 21278, 27273, 37968, 27273, 27273, 22769, 29241, 48198, 29241, 29241, 29242,
  /* 13200 */ 41071, 47831, 28759, 28759, 28759, 48449, 36248, 22100, 37985, 22100, 38004, 38026, 37580, 27273, 27273,
  /* 13215 */ 46327, 44307, 29241, 29241, 42414, 38044, 38081, 28759, 42501, 34938, 22100, 38099, 22100, 38118, 35007,
  /* 13230 */ 36065, 27273, 30840, 39929, 29241, 40932, 39848, 28759, 27438, 22100, 50612, 22100, 21277, 27273, 50793,
  /* 13245 */ 30841, 29241, 42074, 28759, 48580, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119,
  /* 13260 */ 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 40223, 38136, 38161,
  /* 13275 */ 42349, 35739, 34195, 33769, 49742, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13290 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13305 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22563, 22100, 45211, 22100, 25785,
  /* 13320 */ 22100, 22100, 37009, 48267, 48275, 38211, 38225, 38232, 38248, 38303, 38263, 18268, 27879, 22100, 21738,
  /* 13335 */ 22099, 22100, 38319, 22100, 22100, 27887, 22100, 27879, 48555, 27885, 48563, 38336, 37608, 36420, 38371,
  /* 13350 */ 31654, 26022, 22100, 33923, 22100, 29077, 22100, 48629, 36538, 22100, 22100, 22100, 44869, 31425, 43739,
  /* 13365 */ 27273, 28003, 47410, 27616, 34257, 29241, 47482, 38397, 26044, 38430, 28759, 38449, 41041, 38502, 38538,
  /* 13380 */ 26028, 38575, 50586, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 39653, 38598, 40257, 27273,
  /* 13395 */ 27273, 46401, 38407, 38618, 34891, 29241, 29241, 22599, 38635, 28759, 38674, 28759, 28761, 48457, 22100,
  /* 13410 */ 22100, 38692, 48546, 22100, 22100, 38710, 26846, 22100, 22100, 35007, 28423, 27273, 27273, 38730, 32525,
  /* 13425 */ 38754, 47753, 29241, 29241, 38773, 29242, 38796, 43457, 28759, 28759, 38815, 28760, 48456, 22100, 22100,
  /* 13440 */ 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241,
  /* 13455 */ 29242, 41071, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273,
  /* 13470 */ 27273, 32526, 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 38838, 22100, 22100, 22100,
  /* 13485 */ 35007, 38858, 27273, 30840, 38877, 29241, 40932, 38895, 28759, 27438, 22100, 22100, 22100, 21277, 27273,
  /* 13500 */ 27273, 30841, 42307, 30757, 28759, 36849, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933,
  /* 13515 */ 40673, 21281, 45357, 48903, 46269, 38914, 38944, 38967, 39000, 21280, 33748, 40930, 28366, 30048, 33767,
  /* 13530 */ 28366, 30049, 36119, 39026, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13545 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13560 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 21664, 22100, 32753, 22100,
  /* 13575 */ 19485, 39060, 26662, 39097, 39138, 39162, 39182, 39166, 39146, 39198, 39252, 39213, 18268, 31234, 28468,
  /* 13590 */ 41611, 35171, 39268, 22100, 39302, 39323, 39344, 39372, 39400, 49847, 39437, 39465, 39503, 39531, 39578,
  /* 13605 */ 39632, 31654, 26022, 45883, 22100, 22100, 47249, 29181, 39669, 18781, 39689, 39717, 39734, 39751, 39779,
  /* 13620 */ 35443, 47432, 27273, 44954, 27616, 35772, 48826, 22956, 29241, 26044, 39813, 28759, 34989, 27759, 39829,
  /* 13635 */ 26027, 39864, 29047, 34783, 22100, 22100, 22100, 23501, 22100, 22100, 42242, 21278, 39883, 27273, 22937,
  /* 13650 */ 27273, 27273, 46401, 39912, 29241, 27010, 29241, 29241, 39945, 44795, 28759, 39994, 28759, 28761, 48457,
  /* 13665 */ 22100, 22100, 22100, 22100, 22100, 40013, 22100, 29055, 40032, 40052, 38277, 27273, 27273, 29617, 27273,
  /* 13680 */ 40070, 40093, 29241, 29241, 37644, 29241, 44338, 40126, 28759, 28759, 30588, 28759, 32682, 48456, 43875,
  /* 13695 */ 40159, 37988, 44895, 40175, 38010, 40193, 39286, 31986, 40247, 40281, 40308, 22769, 30738, 40331, 27679,
  /* 13710 */ 40380, 29242, 41071, 35222, 40409, 33496, 40445, 28232, 40465, 27918, 40486, 40509, 40546, 40568, 40587,
  /* 13725 */ 40604, 23020, 48133, 40628, 48895, 39562, 30326, 40645, 29304, 38522, 42394, 40664, 42561, 40689, 22100,
  /* 13740 */ 39797, 40707, 49699, 37571, 39037, 41783, 39545, 38976, 49563, 43341, 27438, 40731, 22100, 22100, 40755,
  /* 13755 */ 40772, 46525, 27093, 40788, 40812, 41849, 40832, 27437, 40866, 36279, 21281, 40885, 35073, 30755, 29159,
  /* 13770 */ 37933, 46119, 21281, 40904, 40925, 36496, 40948, 40982, 41027, 41057, 41090, 41113, 41136, 41159, 30048,
  /* 13785 */ 33767, 28366, 30049, 40930, 39010, 41184, 27299, 47542, 41196, 41228, 22100, 22100, 22100, 22100, 22100,
  /* 13800 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 13815 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 41250, 45211,
  /* 13830 */ 22100, 19214, 41272, 22100, 39356, 41292, 41300, 41316, 41330, 41337, 41353, 41417, 41368, 41433, 41449,
  /* 13845 */ 41469, 43226, 23700, 41510, 41534, 41954, 41552, 41589, 41627, 41664, 41680, 41728, 33730, 41766, 41799,
  /* 13860 */ 41834, 41877, 41903, 41919, 22100, 41941, 31674, 39081, 22100, 41970, 41988, 26455, 22100, 22100, 47187,
  /* 13875 */ 22100, 32524, 31557, 43849, 42004, 42027, 29241, 36699, 42060, 42096, 26044, 28759, 42130, 37827, 38065,
  /* 13890 */ 27047, 26027, 22100, 42199, 22100, 20452, 22100, 42221, 42258, 23611, 41536, 22100, 42277, 42323, 26969,
  /* 13905 */ 42342, 27273, 36643, 48080, 29241, 42365, 42410, 29241, 45366, 42430, 28759, 42465, 42500, 28759, 45148,
  /* 13920 */ 48457, 42517, 42555, 22100, 42577, 42595, 22100, 22100, 22100, 22100, 41712, 35007, 27273, 28619, 50973,
  /* 13935 */ 27273, 32525, 28030, 29241, 40102, 46731, 29241, 29242, 41073, 28759, 32619, 42758, 28759, 28760, 48456,
  /* 13950 */ 22100, 22100, 30128, 22100, 25576, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 42616, 29241, 29241,
  /* 13965 */ 29241, 29241, 49465, 42655, 28759, 28759, 28759, 28759, 42676, 46116, 47324, 42700, 22100, 22100, 44144,
  /* 13980 */ 42718, 45231, 27273, 32526, 42736, 32958, 29241, 29241, 42754, 38083, 28759, 28759, 48600, 25568, 22100,
  /* 13995 */ 22100, 22100, 46370, 30224, 27273, 46647, 48781, 29241, 27053, 43951, 28759, 27438, 42774, 22100, 22100,
  /* 14010 */ 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 31227, 27158, 23250, 27273, 42793, 22865,
  /* 14025 */ 27732, 37933, 31387, 33844, 38176, 42827, 49105, 32307, 42843, 42869, 42899, 21280, 33748, 40930, 28366,
  /* 14040 */ 30048, 33767, 28366, 30049, 40930, 27081, 33769, 42925, 47542, 22985, 41206, 22100, 22100, 22100, 22100,
  /* 14055 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 14070 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 51270,
  /* 14085 */ 45211, 22100, 22100, 42955, 31782, 42977, 49383, 22100, 25884, 43008, 43022, 43038, 43054, 43070, 18268,
  /* 14100 */ 22100, 41489, 21738, 22099, 22100, 22100, 47291, 26124, 22100, 22100, 43108, 41494, 22100, 48636, 42289,
  /* 14115 */ 43130, 43167, 46435, 31654, 26022, 28442, 43193, 22100, 29077, 22100, 26771, 43213, 22100, 43242, 22100,
  /* 14130 */ 28444, 22100, 28290, 43262, 43281, 45311, 43315, 36445, 47454, 43367, 48382, 43416, 43449, 47570, 37703,
  /* 14145 */ 33576, 43473, 43495, 22100, 33291, 21231, 22100, 21695, 22361, 22100, 22100, 22100, 22100, 21278, 27273,
  /* 14160 */ 27273, 38602, 27273, 27273, 46401, 29241, 29241, 47776, 29241, 29241, 22599, 28759, 28759, 29269, 28759,
  /* 14175 */ 28761, 42684, 43525, 46347, 24853, 22100, 22100, 37469, 22100, 43553, 40036, 22100, 35007, 27273, 43577,
  /* 14190 */ 27273, 27273, 32525, 43605, 29241, 43624, 29241, 29241, 29242, 43651, 28759, 43670, 28759, 28759, 28760,
  /* 14205 */ 48456, 22100, 41518, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27608, 27273, 34707, 29241,
  /* 14220 */ 29241, 35191, 29241, 29242, 43714, 28759, 28759, 37390, 28759, 48449, 46116, 22100, 22100, 22100, 22100,
  /* 14235 */ 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100,
  /* 14250 */ 42183, 22100, 22100, 43735, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 32691, 22100, 22100,
  /* 14265 */ 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842,
  /* 14280 */ 30755, 28759, 37933, 43755, 43799, 34144, 29488, 43834, 35103, 27275, 30756, 22747, 21280, 33748, 40930,
  /* 14295 */ 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100,
  /* 14310 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 14325 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100,
  /* 14340 */ 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224,
  /* 14355 */ 18268, 22100, 22100, 21738, 22099, 22100, 22100, 43873, 22100, 29551, 47969, 47972, 47212, 43891, 47220,
  /* 14370 */ 32902, 43394, 46017, 34555, 31654, 43911, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100,
  /* 14385 */ 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759,
  /* 14400 */ 28759, 22602, 27047, 26027, 22100, 22100, 35322, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278,
  /* 14415 */ 27273, 27273, 27273, 27273, 27273, 49459, 29241, 29241, 29241, 29241, 29241, 43948, 28759, 28759, 28759,
  /* 14430 */ 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273,
  /* 14445 */ 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759,
  /* 14460 */ 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769,
  /* 14475 */ 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100,
  /* 14490 */ 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938,
  /* 14505 */ 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100,
  /* 14520 */ 22100, 22100, 21277, 31537, 27273, 30841, 43967, 30757, 44821, 28759, 27437, 22100, 27158, 21281, 27273,
  /* 14535 */ 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748,
  /* 14550 */ 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100,
  /* 14565 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 14580 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100,
  /* 14595 */ 22100, 41602, 30432, 22100, 22100, 41482, 22100, 39384, 43987, 50350, 44025, 44038, 44045, 44061, 44124,
  /* 14610 */ 44076, 18268, 34536, 25154, 21738, 18334, 44000, 44229, 32072, 44140, 44160, 44180, 44216, 44252, 49834,
  /* 14625 */ 30949, 44286, 44323, 44363, 47532, 44379, 44395, 22100, 22100, 22100, 23783, 44422, 44444, 35971, 28905,
  /* 14640 */ 22100, 22100, 22075, 44493, 44518, 23011, 27273, 44535, 44570, 29241, 44619, 34860, 33417, 44638, 29752,
  /* 14655 */ 28759, 33659, 48864, 32215, 26027, 22100, 22100, 22100, 44664, 47655, 22100, 33057, 22100, 44671, 49160,
  /* 14670 */ 21278, 44691, 46163, 27273, 44693, 44709, 44744, 29241, 40358, 29241, 47488, 47729, 44774, 28759, 44818,
  /* 14685 */ 28759, 27740, 42143, 48457, 22100, 22100, 22100, 44837, 24571, 44859, 44893, 46349, 44911, 44923, 27790,
  /* 14700 */ 27273, 36368, 44939, 44975, 29713, 44996, 29241, 40393, 45030, 45060, 38757, 45080, 28759, 46046, 45120,
  /* 14715 */ 45171, 30606, 48456, 41453, 22100, 22100, 37491, 45191, 43561, 38102, 44191, 32020, 27273, 45227, 27273,
  /* 14730 */ 22769, 43608, 45796, 37625, 29241, 29242, 41071, 32988, 35396, 28759, 28759, 38658, 45247, 39867, 32843,
  /* 14745 */ 22100, 22100, 22100, 37299, 27273, 27273, 39236, 29459, 29241, 29241, 47085, 45270, 28759, 28759, 49262,
  /* 14760 */ 34938, 22100, 44477, 22100, 22100, 40523, 27273, 27273, 41777, 29241, 43971, 27115, 28759, 30777, 27438,
  /* 14775 */ 22100, 48104, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281,
  /* 14790 */ 27273, 30842, 30755, 28759, 37933, 27150, 29579, 33104, 34169, 45296, 32307, 27275, 30756, 22747, 45332,
  /* 14805 */ 38951, 46555, 33007, 30048, 33767, 28366, 30049, 40930, 38381, 45390, 45406, 28260, 41196, 41206, 22100,
  /* 14820 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 14835 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973, 22100,
  /* 14850 */ 22100, 22100, 23471, 45211, 45481, 36673, 47041, 45467, 45499, 45542, 47051, 45558, 45572, 45588, 45604,
  /* 14865 */ 45620, 45636, 45672, 18564, 22100, 36890, 22099, 22100, 22310, 22100, 29201, 22100, 45705, 45723, 28742,
  /* 14880 */ 45730, 45746, 45781, 45817, 44347, 45850, 31654, 26022, 45876, 45899, 37119, 29077, 45917, 22100, 22100,
  /* 14895 */ 22100, 34079, 39278, 45945, 29357, 39122, 45965, 45983, 27273, 27616, 46005, 37329, 29241, 29241, 46033,
  /* 14910 */ 46062, 44648, 28759, 22602, 27047, 26027, 21645, 22100, 32441, 35561, 46085, 22100, 22100, 22100, 22100,
  /* 14925 */ 31496, 21278, 48360, 34360, 27273, 27273, 29429, 46401, 41003, 33450, 29241, 29241, 45801, 22599, 42479,
  /* 14940 */ 22702, 28759, 28759, 44802, 46108, 22100, 22100, 34685, 22100, 46135, 36546, 34575, 46769, 40739, 22100,
  /* 14955 */ 46155, 27273, 27273, 23146, 27975, 46179, 46229, 29241, 29241, 38355, 41812, 46251, 46285, 28759, 28759,
  /* 14970 */ 46602, 41395, 46307, 27392, 46343, 26448, 22100, 49129, 22100, 22100, 40552, 46365, 27273, 27273, 46386,
  /* 14985 */ 27273, 22769, 29241, 29241, 36748, 46726, 29242, 41071, 28759, 28759, 46423, 28759, 48449, 46116, 22100,
  /* 15000 */ 25079, 22100, 46451, 22100, 27273, 50494, 48657, 30279, 29241, 33443, 33805, 29241, 46471, 45451, 38676,
  /* 15015 */ 28759, 34938, 22100, 22100, 26706, 29944, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759,
  /* 15030 */ 35824, 50240, 22100, 46489, 46514, 27273, 42011, 30841, 29241, 46549, 28759, 48049, 28660, 46571, 37106,
  /* 15045 */ 40208, 27273, 31300, 30755, 46594, 50936, 46618, 21281, 46642, 46663, 35263, 32307, 27275, 30756, 22747,
  /* 15060 */ 46213, 31923, 44595, 28366, 44099, 42630, 46686, 46711, 30821, 34195, 33769, 27299, 47542, 41196, 41206,
  /* 15075 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15090 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 25973,
  /* 15105 */ 22100, 22100, 22100, 23270, 45211, 22100, 22100, 33948, 22100, 46747, 36326, 36339, 46785, 46801, 46817,
  /* 15120 */ 46833, 46849, 46865, 46909, 23757, 22100, 46932, 35713, 26306, 46879, 28155, 25710, 46954, 46970, 46995,
  /* 15135 */ 46986, 46498, 46893, 47011, 47067, 47101, 47117, 47143, 47180, 50119, 44469, 47203, 20137, 22100, 22100,
  /* 15150 */ 22368, 47236, 47277, 39789, 47313, 47348, 47364, 43811, 47403, 47426, 47376, 47448, 47470, 47504, 29241,
  /* 15165 */ 47520, 47558, 45280, 45432, 42660, 27047, 47586, 27475, 47602, 50126, 32504, 47620, 22100, 22100, 47648,
  /* 15180 */ 25068, 47671, 23625, 45346, 49652, 23128, 27273, 47699, 46401, 47721, 47745, 47769, 29241, 47792, 47811,
  /* 15195 */ 42883, 42939, 47827, 29533, 29669, 47847, 22100, 38842, 22100, 47874, 26564, 22100, 47894, 47910, 22100,
  /* 15210 */ 47933, 35007, 50481, 23635, 27273, 22846, 47949, 47988, 40346, 31310, 29241, 50261, 48007, 48046, 45420,
  /* 15225 */ 38055, 28759, 45175, 48065, 48456, 45656, 29388, 22100, 47332, 48096, 22100, 24579, 48120, 22929, 23029,
  /* 15240 */ 48149, 40265, 22769, 48185, 34727, 48220, 48236, 48252, 43084, 48291, 35237, 44785, 45443, 48449, 32333,
  /* 15255 */ 48311, 49137, 22100, 48329, 50389, 44728, 48354, 27273, 28311, 43151, 48376, 48398, 30505, 48417, 48473,
  /* 15270 */ 38517, 46473, 34938, 22100, 29037, 50435, 22100, 39227, 44546, 48497, 38347, 43635, 22788, 49500, 43690,
  /* 15285 */ 48579, 48596, 48616, 22100, 22100, 39112, 48652, 48673, 40231, 46235, 48708, 36776, 37359, 27437, 48730,
  /* 15300 */ 46626, 30883, 48760, 26998, 38780, 48432, 36223, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756,
  /* 15315 */ 22747, 21280, 33748, 32610, 45092, 48797, 39616, 39592, 33319, 48847, 48880, 33769, 27299, 47542, 33036,
  /* 15330 */ 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15345 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15360 */ 25973, 22100, 22100, 22100, 22100, 48919, 22100, 22100, 48947, 22100, 39763, 37237, 37245, 48967, 37245,
  /* 15375 */ 37252, 48983, 49034, 48998, 18268, 22100, 22100, 21738, 49050, 26887, 22100, 22100, 22100, 22100, 20882,
  /* 15390 */ 22100, 49070, 22100, 28575, 33613, 36190, 49090, 40850, 35873, 49153, 49176, 22100, 22100, 29077, 22100,
  /* 15405 */ 22100, 46092, 18986, 22100, 22100, 22100, 18987, 32884, 27273, 27273, 27273, 36589, 49196, 29241, 29241,
  /* 15420 */ 29241, 49220, 49258, 28759, 28759, 33196, 49278, 49314, 49350, 31840, 49368, 22100, 22100, 22100, 26084,
  /* 15435 */ 49405, 22619, 34666, 21278, 27273, 49425, 49444, 34839, 50773, 46401, 34630, 27706, 48204, 37617, 49481,
  /* 15450 */ 22599, 34321, 43719, 32627, 45134, 48441, 48457, 22100, 22100, 49516, 35892, 22100, 22100, 22100, 28172,
  /* 15465 */ 22100, 22100, 35007, 28681, 27273, 27273, 27273, 32525, 49540, 45014, 29241, 29241, 29241, 29242, 49559,
  /* 15480 */ 34918, 28759, 28759, 28759, 28760, 48456, 26169, 22100, 49579, 22100, 22100, 22100, 22100, 49602, 49620,
  /* 15495 */ 27273, 27273, 27273, 22769, 38189, 29241, 29241, 29241, 29242, 41382, 28759, 28759, 28759, 28759, 48449,
  /* 15510 */ 48535, 22100, 22100, 41925, 22100, 22100, 49638, 27273, 27273, 32526, 48812, 29241, 29241, 42804, 49679,
  /* 15525 */ 28759, 28759, 48481, 34938, 48313, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932,
  /* 15540 */ 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437,
  /* 15555 */ 22100, 27158, 21281, 49695, 23081, 30755, 50282, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275,
  /* 15570 */ 30756, 22747, 21280, 33748, 40930, 28366, 40715, 33478, 50190, 30049, 40930, 34195, 33769, 45104, 49715,
  /* 15585 */ 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15600 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15615 */ 22100, 25973, 22100, 22100, 22100, 22100, 49758, 49789, 46762, 41705, 22100, 39701, 22100, 41693, 49786,
  /* 15630 */ 24354, 23508, 49805, 49863, 49820, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100,
  /* 15645 */ 22100, 22100, 22100, 22100, 22042, 27274, 42108, 35421, 22747, 31654, 26022, 22100, 26735, 37126, 29077,
  /* 15660 */ 22100, 22100, 22100, 22100, 22100, 49879, 22100, 22100, 34595, 27273, 27273, 46322, 27616, 39044, 29241,
  /* 15675 */ 28033, 29241, 26044, 39843, 28759, 38822, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100, 46205,
  /* 15690 */ 22100, 22100, 29395, 22100, 21278, 27273, 27273, 49897, 27273, 27273, 46401, 29241, 35302, 29241, 29241,
  /* 15705 */ 29241, 22599, 28759, 35844, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15720 */ 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242,
  /* 15735 */ 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278,
  /* 15750 */ 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759,
  /* 15765 */ 48449, 46116, 22100, 40016, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241,
  /* 15780 */ 41074, 28759, 28759, 28759, 34938, 22100, 51276, 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241,
  /* 15795 */ 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759,
  /* 15810 */ 27437, 50754, 49916, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307,
  /* 15825 */ 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299,
  /* 15840 */ 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15855 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15870 */ 22100, 22100, 25973, 22100, 22100, 22100, 22100, 49939, 22100, 18351, 22100, 18410, 49967, 50005, 22100,
  /* 15885 */ 50029, 50043, 50057, 50073, 50089, 50105, 18268, 22100, 22100, 21738, 22099, 22100, 22100, 22100, 22100,
  /* 15900 */ 22100, 22100, 22100, 22100, 22100, 21279, 50501, 29241, 50142, 32715, 50175, 50215, 22100, 22100, 22100,
  /* 15915 */ 29077, 22100, 22100, 22100, 22100, 50238, 22100, 22100, 22100, 32524, 27273, 27273, 27273, 27616, 29241,
  /* 15930 */ 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100, 22100, 22100, 22100,
  /* 15945 */ 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241, 29241,
  /* 15960 */ 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 15975 */ 50594, 22100, 22100, 22100, 39646, 27273, 27273, 27273, 27273, 32525, 50256, 29241, 29241, 29241, 29241,
  /* 15990 */ 29242, 50277, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 20460, 22100, 22100, 22100, 22100,
  /* 16005 */ 21278, 27273, 44959, 27273, 40966, 22769, 29241, 29241, 50298, 29241, 47026, 41071, 28759, 33487, 28759,
  /* 16020 */ 42484, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241, 29241,
  /* 16035 */ 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840, 29241,
  /* 16050 */ 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757, 28759,
  /* 16065 */ 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758, 28760,
  /* 16080 */ 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195, 33769,
  /* 16095 */ 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16110 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16125 */ 22100, 22100, 22100, 26208, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519, 22100,
  /* 16140 */ 22100, 22100, 22100, 40493, 50315, 50366, 50330, 18268, 22100, 22100, 21738, 50382, 22100, 50405, 22100,
  /* 16155 */ 22100, 29635, 26213, 22100, 44009, 50428, 50451, 27274, 45008, 36470, 22747, 31654, 26022, 22100, 22100,
  /* 16170 */ 28594, 29077, 32420, 34223, 49327, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 34833, 32922, 27616,
  /* 16185 */ 29241, 33121, 29241, 36741, 26044, 28759, 27414, 28759, 50517, 27047, 50546, 22100, 22100, 22100, 22100,
  /* 16200 */ 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401, 29241, 29241,
  /* 16215 */ 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100, 22100, 22100,
  /* 16230 */ 22100, 37866, 22100, 22100, 22100, 35007, 27273, 45967, 27273, 27273, 33074, 28030, 29241, 30644, 29241,
  /* 16245 */ 29241, 35461, 41073, 28759, 38898, 28759, 28759, 28760, 48456, 30008, 22100, 22100, 22100, 22100, 22100,
  /* 16260 */ 22100, 21278, 48692, 27273, 27273, 27273, 22769, 38879, 29241, 29241, 29241, 29242, 41071, 43681, 28759,
  /* 16275 */ 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526, 29241, 29241,
  /* 16290 */ 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 30840,
  /* 16305 */ 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841, 29241, 30757,
  /* 16320 */ 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050, 30758,
  /* 16335 */ 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930, 34195,
  /* 16350 */ 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16365 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16380 */ 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100, 37519,
  /* 16395 */ 22100, 22100, 22100, 22100, 25273, 25994, 32293, 23224, 50576, 22100, 22100, 21738, 22099, 22100, 25681,
  /* 16410 */ 22100, 22100, 22100, 22100, 50610, 22100, 22100, 44090, 45989, 29241, 50628, 43932, 50661, 50677, 22100,
  /* 16425 */ 27560, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50700, 32524, 27273, 27273, 35362,
  /* 16440 */ 27616, 29241, 29241, 29241, 41011, 26044, 28759, 28759, 28759, 50723, 27047, 26027, 34803, 22100, 22100,
  /* 16455 */ 22100, 22100, 22100, 22100, 22100, 50752, 22100, 21278, 28193, 27273, 27273, 50770, 27273, 46401, 31931,
  /* 16470 */ 29241, 35379, 29241, 29241, 22599, 39972, 28759, 37045, 28759, 28761, 48457, 22100, 22100, 25502, 22100,
  /* 16485 */ 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 50789, 27273, 27273, 32525, 50809, 29241, 50833,
  /* 16500 */ 29241, 29241, 29242, 50852, 28759, 50885, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100, 22100,
  /* 16515 */ 22100, 50905, 21278, 27273, 27273, 36637, 27273, 35034, 29241, 29241, 43400, 29241, 44622, 41071, 28759,
  /* 16530 */ 28759, 50932, 28759, 38478, 46116, 22100, 22100, 26714, 22100, 22100, 27273, 27273, 27273, 32526, 29241,
  /* 16545 */ 29241, 29241, 29241, 41074, 28759, 28759, 28759, 29773, 22100, 22100, 49352, 22100, 50199, 27273, 27273,
  /* 16560 */ 49298, 29241, 29241, 43479, 28759, 28759, 27438, 22100, 22100, 50952, 21277, 27273, 50970, 30841, 38414,
  /* 16575 */ 30757, 28759, 47158, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281, 30050,
  /* 16590 */ 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049, 40930,
  /* 16605 */ 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16620 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16635 */ 22100, 22100, 22100, 22100, 22100, 25973, 22100, 22100, 22100, 22100, 45211, 22100, 22100, 22100, 22100,
  /* 16650 */ 37519, 49982, 22100, 22100, 22100, 25273, 25994, 32293, 23224, 18268, 22100, 22100, 21738, 22099, 22100,
  /* 16665 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241, 42387, 22747, 31654, 26022,
  /* 16680 */ 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 32524, 27273, 27273,
  /* 16695 */ 27273, 27616, 29241, 29241, 29241, 29241, 26044, 28759, 28759, 28759, 22602, 27047, 26027, 22100, 22100,
  /* 16710 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 27273, 46401,
  /* 16725 */ 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761, 48457, 22100, 22100, 22100,
  /* 16740 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273, 27273, 32525, 28030, 29241,
  /* 16755 */ 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456, 22100, 22100, 22100, 22100,
  /* 16770 */ 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241, 29241, 29241, 29242, 41071,
  /* 16785 */ 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100, 27273, 27273, 27273, 32526,
  /* 16800 */ 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100, 22100, 22100, 35007, 27273,
  /* 16815 */ 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100, 21277, 27273, 27273, 30841,
  /* 16830 */ 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755, 28759, 37933, 46119, 21281,
  /* 16845 */ 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366, 30048, 33767, 28366, 30049,
  /* 16860 */ 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16875 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 16890 */ 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 30157, 50996, 50994, 22422,
  /* 16905 */ 50989, 51012, 42598, 42600, 30169, 28868, 32470, 32483, 51049, 51064, 18268, 22100, 22100, 21738, 22099,
  /* 16920 */ 22100, 51343, 51080, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175, 51098, 19959, 20845, 20598,
  /* 16935 */ 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683, 20245,
  /* 16950 */ 18426, 18484, 19630, 20563, 20913, 18514, 20796, 20023, 20568, 20918, 18519, 20801, 18535, 18563, 22100,
  /* 16965 */ 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174, 19622,
  /* 16980 */ 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100, 35132,
  /* 16995 */ 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971, 19003,
  /* 17010 */ 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194, 46194,
  /* 17025 */ 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415, 19452,
  /* 17040 */ 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594, 19646,
  /* 17055 */ 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902, 19921,
  /* 17070 */ 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169, 20217,
  /* 17085 */ 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428, 20476,
  /* 17100 */ 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707, 18712,
  /* 17115 */ 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17130 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17145 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815, 22100, 22100,
  /* 17160 */ 34070, 22100, 37519, 35602, 35610, 51130, 51144, 51151, 22100, 51115, 51167, 18268, 22100, 22100, 21738,
  /* 17175 */ 22099, 22100, 51343, 22100, 22100, 22100, 21704, 22100, 22100, 21701, 50912, 24175, 51099, 20838, 19119,
  /* 17190 */ 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718, 20683,
  /* 17205 */ 20245, 18426, 18484, 19993, 20563, 20913, 18514, 20796, 20552, 20568, 20918, 18519, 20801, 18535, 18563,
  /* 17220 */ 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355, 24174,
  /* 17235 */ 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178, 22100,
  /* 17250 */ 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439, 18971,
  /* 17265 */ 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386, 19194,
  /* 17280 */ 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429, 25415,
  /* 17295 */ 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167, 19594,
  /* 17310 */ 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879, 19902,
  /* 17325 */ 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153, 20169,
  /* 17340 */ 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374, 20428,
  /* 17355 */ 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701, 20707,
  /* 17370 */ 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17385 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17400 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 23691, 22100,
  /* 17415 */ 22100, 22100, 22100, 34484, 32803, 51183, 51187, 32819, 32826, 22100, 32812, 51203, 18268, 22100, 22100,
  /* 17430 */ 21738, 22099, 22100, 51343, 51219, 22100, 44406, 22100, 22100, 22100, 44401, 50912, 24175, 51099, 20838,
  /* 17445 */ 20845, 20598, 19802, 18286, 31727, 18306, 18325, 22100, 22100, 18350, 22100, 18367, 18389, 43770, 31718,
  /* 17460 */ 20683, 20245, 18426, 18484, 19026, 20563, 20913, 18514, 20796, 20948, 20568, 20918, 18519, 20801, 18535,
  /* 17475 */ 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174, 18686, 20355,
  /* 17490 */ 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099, 18750, 19178,
  /* 17505 */ 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900, 18942, 18439,
  /* 17520 */ 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135, 19177, 26386,
  /* 17535 */ 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383, 19406, 19429,
  /* 17550 */ 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777, 19555, 24167,
  /* 17565 */ 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818, 19841, 19879,
  /* 17580 */ 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100, 20116, 20153,
  /* 17595 */ 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 20327, 20343, 19935, 20371, 20390, 20374,
  /* 17610 */ 20428, 20476, 20506, 18913, 20537, 18926, 20584, 24176, 51099, 20412, 20614, 19949, 20641, 20670, 18701,
  /* 17625 */ 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100, 22100, 22100,
  /* 17640 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17655 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21011, 22100, 22100, 22100, 22100, 26815,
  /* 17670 */ 22100, 22100, 22100, 22100, 37519, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 51242, 18268, 22100,
  /* 17685 */ 22100, 21738, 22099, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21279, 27274, 29241,
  /* 17700 */ 42387, 22747, 31654, 22538, 22100, 22100, 22100, 29077, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17715 */ 22100, 32524, 27273, 27273, 27273, 37889, 29241, 29241, 29241, 29241, 46264, 28759, 28759, 28759, 22602,
  /* 17730 */ 27047, 26027, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273,
  /* 17745 */ 27273, 27273, 27273, 46401, 29241, 29241, 29241, 29241, 29241, 22599, 28759, 28759, 28759, 28759, 28761,
  /* 17760 */ 48457, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 35007, 27273, 27273, 27273,
  /* 17775 */ 27273, 32525, 28030, 29241, 29241, 29241, 29241, 29242, 41073, 28759, 28759, 28759, 28759, 28760, 48456,
  /* 17790 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 21278, 27273, 27273, 27273, 27273, 22769, 29241, 29241,
  /* 17805 */ 29241, 29241, 29242, 41071, 28759, 28759, 28759, 28759, 48449, 46116, 22100, 22100, 22100, 22100, 22100,
  /* 17820 */ 27273, 27273, 27273, 32526, 29241, 29241, 29241, 29241, 41074, 28759, 28759, 28759, 34938, 22100, 22100,
  /* 17835 */ 22100, 22100, 35007, 27273, 27273, 30840, 29241, 29241, 40932, 28759, 28759, 27438, 22100, 22100, 22100,
  /* 17850 */ 21277, 27273, 27273, 30841, 29241, 30757, 28759, 28759, 27437, 22100, 27158, 21281, 27273, 30842, 30755,
  /* 17865 */ 28759, 37933, 46119, 21281, 30050, 30758, 28760, 32307, 27275, 30756, 22747, 21280, 33748, 40930, 28366,
  /* 17880 */ 30048, 33767, 28366, 30049, 40930, 34195, 33769, 27299, 47542, 41196, 41206, 22100, 22100, 22100, 22100,
  /* 17895 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17910 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 17925 */ 22100, 22100, 22100, 47297, 22100, 22100, 43783, 51292, 51296, 51296, 51320, 22100, 51312, 51336, 22100,
  /* 17940 */ 22100, 22100, 22100, 22100, 22100, 51343, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 50912, 24175,
  /* 17955 */ 51099, 20838, 20845, 20598, 19802, 18286, 31727, 18306, 51359, 22100, 22100, 18350, 22100, 18367, 18389,
  /* 17970 */ 43770, 31718, 20683, 20245, 18426, 18484, 19630, 20563, 20913, 18514, 20796, 20023, 20568, 20918, 18519,
  /* 17985 */ 20801, 18535, 18563, 22100, 18580, 22100, 22100, 22100, 18605, 35666, 22100, 18640, 44843, 18656, 24174,
  /* 18000 */ 18686, 20355, 24174, 19622, 20828, 20651, 18728, 20734, 51099, 18747, 19112, 20654, 18731, 20737, 51099,
  /* 18015 */ 18750, 19178, 22100, 35132, 18766, 51226, 18820, 18858, 44459, 22100, 35921, 29694, 50916, 19018, 18900,
  /* 18030 */ 18942, 18439, 18971, 19003, 20960, 19042, 19070, 19351, 19098, 19003, 20960, 19042, 19070, 19351, 19135,
  /* 18045 */ 19177, 26386, 19194, 46194, 19230, 44428, 19246, 19267, 19302, 20231, 18498, 19329, 18670, 19367, 19383,
  /* 18060 */ 19406, 19429, 25415, 19452, 19376, 19399, 19422, 25408, 19445, 19468, 19480, 19501, 19538, 43510, 42777,
  /* 18075 */ 19555, 24167, 19594, 19646, 19693, 19725, 19743, 19761, 19779, 19723, 19741, 19759, 19777, 19795, 19818,
  /* 18090 */ 19841, 19879, 19902, 19921, 19984, 19609, 19661, 19677, 20068, 20009, 19676, 20067, 20084, 49989, 20100,
  /* 18105 */ 20116, 20153, 20169, 20217, 20045, 20261, 20035, 20051, 20267, 20283, 20311, 51377, 20343, 19935, 20371,
  /* 18120 */ 20390, 20374, 20428, 20442, 20506, 18913, 20537, 18926, 51393, 24176, 51099, 20412, 20614, 19949, 20641,
  /* 18135 */ 20670, 18701, 20707, 18712, 20753, 20769, 20817, 20861, 20898, 20934, 20976, 20989, 22100, 22100, 22100,
  /* 18150 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100,
  /* 18165 */ 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 22100, 1, 12290, 3, 0, 0, 0, 0, 0,
  /* 18184 */ 0, 0, 90411, 90411, 90411, 90411, 0, 94508, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 90411, 94508, 301, 302,
  /* 18205 */ 0, 2134016, 94508, 94508, 90411, 90411, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508,
  /* 18220 */ 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508,
  /* 18235 */ 94508, 94508, 0, 94508, 90411, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 367, 94508,
  /* 18251 */ 90411, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 69632, 73728, 94508, 94508, 94508, 94508, 94508,
  /* 18266 */ 65536, 94508, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 311, 2437120, 0, 0, 2461696, 0, 0,
  /* 18292 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 305, 0, 2912256, 2916352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18321 */ 0, 0, 2200249, 2200249, 3125248, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
  /* 18348 */ 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 2879488, 0, 0, 2428928, 0, 0, 0, 0,
  /* 18377 */ 0, 0, 0, 0, 0, 0, 305, 305, 0, 0, 0, 0, 0, 0, 2629632, 0, 2703360, 2719744, 0, 0, 2777088, 2809856,
  /* 18399 */ 2834432, 0, 2871296, 2928640, 0, 0, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 363,
  /* 18426 */ 2179072, 2736128, 2777088, 2179072, 2179072, 2179072, 2809856, 2179072, 2834432, 2179072, 2179072,
  /* 18437 */ 2179072, 2871296, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18448 */ 3047424, 2179072, 3072000, 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2126729, 2126729, 2126729,
  /* 18460 */ 2413449, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 979, 2126804, 2126804, 2126804, 2126804,
  /* 18472 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 0, 2506752,
  /* 18484 */ 2179072, 2928640, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18495 */ 2179072, 2179072, 3125248, 2179072, 2179072, 2179072, 2179072, 2179072, 2609152, 2179072, 2633728,
  /* 18506 */ 2179072, 2179072, 2654208, 2179072, 2179072, 2179072, 2711552, 2179072, 2809856, 2125824, 2834432,
  /* 18517 */ 2125824, 2125824, 2125824, 2871296, 2125824, 2125824, 2125824, 2125824, 2928640, 2125824, 2125824,
  /* 18528 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2461696, 2179072, 2179072,
  /* 18539 */ 2179072, 2179072, 2461696, 2125824, 2125824, 2125824, 2125824, 2461696, 2125824, 2125824, 2125824,
  /* 18550 */ 2125824, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 306, 2428928, 2183168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18578 */ 0, 666, 0, 0, 2621440, 0, 0, 0, 0, 0, 2793472, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 155648, 0, 0, 0,
  /* 18604 */ 0, 0, 0, 0, 0, 2805760, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 1095, 1096, 0, 0, 0, 0, 0, 0, 0, 658, 0,
  /* 18633 */ 658, 0, 0, 0, 0, 818, 0, 0, 0, 0, 0, 2412544, 0, 0, 2588672, 0, 0, 0, 0, 2846720, 0, 0, 2846720, 2396160,
  /* 18657 */ 2416640, 0, 0, 2846720, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2412544, 2179072, 2179072, 2179072,
  /* 18673 */ 2179072, 2179072, 3043328, 2179072, 2179072, 3080192, 2179072, 2179072, 3129344, 2179072, 2179072,
  /* 18684 */ 3149824, 2179072, 2179072, 2588672, 2179072, 2179072, 2179072, 2179072, 2179072, 2621440, 2179072,
  /* 18695 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2666496, 2179072, 2179072, 2179072, 2596864, 2179072,
  /* 18706 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18717 */ 2125824, 2125824, 2453504, 0, 2539520, 3039232, 0, 0, 0, 2179072, 2453504, 2125824, 2125824, 2125824,
  /* 18731 */ 2125824, 2621440, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2666496, 2125824, 2125824,
  /* 18742 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3133440, 2125824,
  /* 18753 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18764 */ 2179072, 2125824, 0, 0, 0, 0, 2605056, 0, 0, 2772992, 2781184, 2785280, 0, 2826240, 0, 0, 2891776, 0, 0,
  /* 18783 */ 0, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 1098, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 69632,
  /* 18812 */ 73728, 0, 421, 421, 0, 0, 65536, 421, 3194880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2801664, 0, 0, 0, 0, 0, 0,
  /* 18839 */ 0, 135168, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0, 0, 135168,
  /* 18858 */ 0, 0, 0, 0, 2859008, 2875392, 0, 0, 2891776, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18884 */ 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 0, 0, 0, 0, 0, 0, 0, 2605056,
  /* 18901 */ 2179072, 2179072, 2179072, 2179072, 2646016, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18912 */ 2723840, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3145728, 2125824,
  /* 18923 */ 2125824, 2502656, 2125824, 2125824, 2125824, 2560000, 2568192, 2125824, 2125824, 2125824, 2125824,
  /* 18934 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3145728, 2949120, 2179072, 2179072, 2772992,
  /* 18945 */ 2781184, 2785280, 2801664, 2826240, 2179072, 2179072, 2179072, 2891776, 2179072, 2920448, 2179072,
  /* 18956 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3145728, 2126729, 2126729, 2503561,
  /* 18967 */ 2126729, 2126729, 2126729, 2560905, 3108864, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072,
  /* 18978 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3215360, 2179072, 0, 0, 0, 0, 0, 1191, 0, 0, 0, 0,
  /* 18996 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19014 */ 2125824, 2125824, 2125824, 2465792, 2469888, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19025 */ 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 905, 2125824, 2125824,
  /* 19038 */ 2125824, 2125824, 2125824, 2428928, 2125824, 2125824, 2125824, 2125824, 2646016, 2125824, 2125824,
  /* 19049 */ 2125824, 2125824, 2125824, 2125824, 2723840, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 1074, 1078,
  /* 19064 */ 0, 0, 1082, 1086, 0, 2428928, 2125824, 2772992, 2781184, 2785280, 2801664, 2826240, 2125824, 2125824,
  /* 19078 */ 2125824, 2891776, 2125824, 2920448, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 301, 0, 0, 0, 305, 0, 0,
  /* 19096 */ 0, 2428928, 3108864, 2125824, 2125824, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19108 */ 2125824, 2125824, 2125824, 3215360, 2125824, 0, 0, 2125824, 2125824, 2125824, 2412544, 2125824, 2125824,
  /* 19121 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19132 */ 2125824, 0, 1150976, 3108864, 2125824, 2125824, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19144 */ 2125824, 2125824, 2125824, 2125824, 3215360, 2125824, 2179072, 2179072, 2179072, 2596864, 2179072,
  /* 19155 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 19166 */ 2126729, 2126729, 3138441, 2126729, 2126729, 3163017, 3175305, 3183497, 2401236, 2405332, 2126804,
  /* 19177 */ 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19188 */ 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2609152, 0, 0, 0, 0, 2895872, 0, 2932736, 0, 0, 0, 0, 0,
  /* 19211 */ 0, 0, 2742, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 0, 0, 0, 3080192, 2654208, 0, 0, 2813952, 0, 0, 0, 0,
  /* 19239 */ 0, 0, 0, 0, 0, 0, 3096576, 0, 3198976, 0, 0, 2580480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 204800,
  /* 19264 */ 204800, 205108, 0, 2392064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3129344, 3149824, 0, 0, 0, 0, 0, 0, 0, 155648,
  /* 19288 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 155648, 0, 2932736, 0, 2686976, 0, 0, 0, 0, 0, 0, 3121152,
  /* 19312 */ 2392064, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 906, 2126729, 2126729,
  /* 19325 */ 2126729, 2126729, 2126729, 2429833, 2740224, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19336 */ 2179072, 2895872, 2179072, 2179072, 2932736, 2179072, 2179072, 2179072, 2179072, 2125824, 1808, 2125824,
  /* 19348 */ 2125824, 2125824, 2412544, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19359 */ 3047424, 2125824, 3072000, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072, 3178496,
  /* 19370 */ 2179072, 2179072, 3198976, 3203072, 2179072, 0, 0, 0, 0, 0, 0, 2392064, 2125824, 2125824, 2125824,
  /* 19385 */ 2424832, 2125824, 2125824, 2125824, 2125824, 2125824, 2457600, 2125824, 2478080, 2486272, 2125824,
  /* 19396 */ 2125824, 2125824, 2125824, 2125824, 2478080, 2486272, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19407 */ 2125824, 2535424, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2609152, 2125824,
  /* 19418 */ 2633728, 2125824, 2125824, 2654208, 2125824, 2609152, 2125824, 2633728, 2125824, 2125824, 2654208,
  /* 19429 */ 2125824, 2125824, 2125824, 2711552, 2125824, 2740224, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19440 */ 2125824, 2125824, 2125824, 2895872, 2125824, 2125824, 2125824, 3043328, 2125824, 2125824, 3080192,
  /* 19451 */ 2125824, 2125824, 2125824, 3129344, 2125824, 2125824, 3149824, 2125824, 2125824, 2125824, 3178496,
  /* 19462 */ 2125824, 2125824, 3198976, 3203072, 2125824, 0, 3178496, 2125824, 2125824, 3198976, 3203072, 2125824,
  /* 19474 */ 2179072, 2125824, 2125824, 2179072, 2179072, 3121152, 3227648, 2125824, 2125824, 3121152, 3227648, 0, 0,
  /* 19487 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 389, 0, 0, 2822144, 2854912, 0, 2924544, 0, 0, 3010560, 0, 0,
  /* 19512 */ 3031040, 0, 0, 3153920, 0, 0, 0, 0, 0, 1213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1171, 0, 0, 0, 0, 0, 3211264,
  /* 19539 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 699, 0, 0, 0, 2641920, 0, 0, 0, 0, 2625536, 0, 3190784,
  /* 19566 */ 2908160, 0, 2969600, 0, 0, 0, 0, 0, 0, 1214, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 417, 417, 0, 0, 0, 0, 0, 417,
  /* 19593 */ 0, 2179072, 2179072, 2555904, 2179072, 2179072, 2179072, 2179072, 2179072, 2641920, 2179072, 2179072,
  /* 19605 */ 2179072, 2179072, 2732032, 2756608, 2179072, 2179072, 2179072, 2936832, 2179072, 2179072, 2179072,
  /* 19616 */ 3006464, 2179072, 2179072, 2179072, 2179072, 3067904, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19627 */ 2179072, 2179072, 3133440, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 0,
  /* 19640 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2428928, 2179072, 2179072, 2850816, 2854912, 2179072,
  /* 19651 */ 2904064, 2924544, 2179072, 2179072, 2953216, 2179072, 2179072, 3002368, 2179072, 3010560, 2179072,
  /* 19662 */ 2179072, 2179072, 3186688, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19673 */ 2498560, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824, 2547712, 2551808, 2125824, 2125824,
  /* 19684 */ 2600960, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 3031040,
  /* 19695 */ 2179072, 3076096, 3092480, 3104768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19706 */ 3231744, 0, 0, 0, 0, 0, 0, 1226, 0, 0, 0, 0, 0, 0, 0, 0, 1231, 0, 0, 2125824, 2125824, 2420736, 2125824,
  /* 19729 */ 2125824, 2125824, 2449408, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19740 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2555904, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19751 */ 2641920, 2125824, 2125824, 2125824, 2125824, 2732032, 2756608, 2125824, 2756608, 2125824, 2125824,
  /* 19762 */ 2125824, 2125824, 2850816, 2854912, 2125824, 2904064, 2924544, 2125824, 2125824, 2953216, 2125824,
  /* 19773 */ 2125824, 3002368, 2125824, 3010560, 2125824, 3010560, 2125824, 2125824, 3031040, 2125824, 3076096,
  /* 19784 */ 3092480, 2125824, 3104768, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3231744,
  /* 19795 */ 2125824, 3231744, 2179072, 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0,
  /* 19808 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428928, 0, 2514944, 2519040, 0, 0, 2551808, 2600960, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19833 */ 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3186688, 2674688, 0, 2748416, 0, 0, 0, 0, 0, 2936832, 0, 0, 0, 0, 0,
  /* 19860 */ 0, 1579, 1580, 0, 0, 0, 0, 0, 0, 0, 0, 2025, 0, 0, 0, 0, 0, 0, 0, 0, 3067904, 0, 2547712, 2670592, 0,
  /* 19885 */ 2637824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 400, 0, 0, 0, 326, 0, 0, 0, 2965504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19914 */ 0, 0, 0, 0, 0, 2200250, 151552, 0, 3219456, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19932 */ 2179072, 2179072, 2498560, 2179072, 2179072, 2179072, 2179072, 2658304, 2682880, 2764800, 2768896,
  /* 19943 */ 2863104, 2977792, 2179072, 3014656, 2179072, 3026944, 2179072, 2179072, 2179072, 2179072, 3018752,
  /* 19954 */ 2179072, 2179072, 2125824, 2125824, 2506752, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 19966 */ 2125824, 2126805, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19977 */ 2125824, 2125824, 2125824, 2125824, 2125824, 245760, 0, 2519040, 2179072, 2179072, 2179072, 2547712,
  /* 19989 */ 2551808, 2179072, 2179072, 2600960, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20000 */ 2179072, 0, 906, 2125824, 2125824, 2125824, 2125824, 2125824, 2428928, 2125824, 2125824, 2125824, 2125824,
  /* 20013 */ 3186688, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2498560, 2125824,
  /* 20024 */ 2125824, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2428928, 2437120, 2125824, 2125824,
  /* 20037 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3137536, 2125824, 2125824, 3162112, 3174400, 3182592,
  /* 20048 */ 2400256, 2404352, 2125824, 2125824, 2445312, 2125824, 2473984, 2125824, 2125824, 2125824, 2523136,
  /* 20059 */ 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2617344, 2650112, 2125824, 2125824, 2125824,
  /* 20070 */ 2125824, 2936832, 2125824, 2125824, 2125824, 3006464, 2125824, 2125824, 2125824, 2125824, 3067904,
  /* 20081 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3186688, 2179072, 2125824,
  /* 20092 */ 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2445312, 2699264, 3182592, 2650112,
  /* 20103 */ 2617344, 2707456, 0, 0, 0, 0, 2985984, 0, 0, 3055616, 3137536, 0, 2990080, 2400256, 0, 3162112, 0, 0, 0,
  /* 20122 */ 2744320, 0, 0, 0, 0, 0, 2797568, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0,
  /* 20150 */ 1143, 0, 0, 0, 0, 2473984, 2510848, 2760704, 0, 0, 2584576, 0, 0, 0, 2400256, 2404352, 2179072, 2179072,
  /* 20168 */ 2445312, 2179072, 2473984, 2179072, 2179072, 2179072, 2523136, 2179072, 2179072, 2179072, 2179072,
  /* 20179 */ 2592768, 2179072, 2617344, 2650112, 2179072, 2179072, 2179072, 2179072, 3018752, 2179072, 2179072,
  /* 20190 */ 2126729, 2126729, 2507657, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 3126153,
  /* 20201 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 3048329, 2126729, 3072905,
  /* 20212 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2699264, 2760704, 2179072, 2179072, 2179072, 2940928,
  /* 20223 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3137536, 2179072, 2179072, 2179072,
  /* 20234 */ 2457600, 2179072, 2478080, 2486272, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2535424,
  /* 20245 */ 2179072, 2179072, 2179072, 2179072, 2629632, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20256 */ 2703360, 2179072, 2719744, 2179072, 2727936, 2125824, 2125824, 2592768, 2125824, 2617344, 2650112,
  /* 20267 */ 2125824, 2125824, 2699264, 2760704, 2125824, 2125824, 2125824, 2125824, 2940928, 2125824, 2125824,
  /* 20278 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3137536, 2125824, 2125824, 3162112, 3174400,
  /* 20289 */ 3182592, 2510848, 2510848, 2510848, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0, 180224, 0,
  /* 20303 */ 0, 0, 0, 0, 0, 0, 0, 2428928, 0, 2490368, 0, 0, 0, 0, 0, 2682880, 2863104, 3014656, 0, 3117056, 3207168,
  /* 20324 */ 0, 0, 3051520, 0, 3158016, 2945024, 0, 2764800, 3142, 0, 0, 0, 0, 2961408, 0, 0, 2830336, 3166208,
  /* 20342 */ 2433024, 0, 3026944, 2768896, 2576384, 0, 0, 3059712, 2179072, 2433024, 2441216, 2179072, 2490368,
  /* 20355 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2805760,
  /* 20366 */ 2818048, 2179072, 2838528, 2846720, 2179072, 2179072, 3158016, 2125824, 2433024, 2441216, 2125824,
  /* 20377 */ 2490368, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2658304, 2682880,
  /* 20388 */ 2764800, 2768896, 2682880, 2764800, 2768896, 2789376, 2863104, 2977792, 2125824, 3014656, 2125824,
  /* 20399 */ 3026944, 2125824, 2125824, 2125824, 2125824, 3158016, 2125824, 0, 1904, 2125824, 2125824, 2125824,
  /* 20411 */ 2412544, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20422 */ 2125824, 2125824, 2125824, 2125824, 0, 2506752, 2789376, 2863104, 2977792, 2125824, 3014656, 2125824,
  /* 20434 */ 3026944, 2125824, 2125824, 2125824, 2125824, 3158016, 2179072, 3059712, 2125824, 3059712, 0, 2494464,
  /* 20446 */ 2502656, 0, 0, 0, 0, 2883584, 0, 0, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 2433, 0, 0, 0, 0, 0, 0,
  /* 20475 */ 0, 2125824, 3059712, 0, 2494464, 2502656, 0, 0, 0, 0, 2883584, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 0, 1624, 0,
  /* 20498 */ 0, 0, 0, 0, 1630, 0, 0, 1633, 2842624, 0, 3235840, 2572288, 2568192, 0, 2949120, 2179072, 2179072,
  /* 20515 */ 2502656, 2179072, 2179072, 2179072, 2560000, 2568192, 2179072, 2179072, 2179072, 3186688, 2126729,
  /* 20526 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2499465, 2126729, 2126729, 2519945,
  /* 20537 */ 2568192, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20548 */ 3145728, 2125824, 2125824, 2502656, 2125824, 2125824, 0, 0, 981, 2125824, 2125824, 2125824, 2125824,
  /* 20561 */ 2125824, 2428928, 2437120, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20572 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2629632, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20583 */ 2125824, 2949120, 2949120, 0, 0, 0, 0, 0, 2752512, 2887680, 0, 3142, 0, 0, 0, 0, 2179072, 2125824,
  /* 20601 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 20613 */ 2125824, 0, 0, 3018752, 0, 0, 0, 0, 2998272, 2179072, 2179072, 2506752, 2179072, 2179072, 2179072,
  /* 20628 */ 2179072, 2179072, 2179072, 2179072, 2179072, 0, 1350, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20640 */ 2428928, 2125824, 2125824, 2125824, 3018752, 2125824, 2125824, 2125824, 2125824, 2125824, 2506752,
  /* 20651 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20662 */ 2125824, 2125824, 2125824, 2588672, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20673 */ 3018752, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2428928,
  /* 20689 */ 2437120, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20700 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2126729, 2126729, 2596864, 2125824, 2125824, 2125824,
  /* 20711 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2596864,
  /* 20722 */ 2125824, 2125824, 0, 0, 1443, 2125824, 2125824, 2125824, 2125824, 2125824, 2428928, 2437120, 2125824,
  /* 20735 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2805760, 2818048, 2125824, 2838528, 2846720,
  /* 20746 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2539520, 2179072, 2613248,
  /* 20757 */ 2179072, 2867200, 2179072, 2179072, 2179072, 3039232, 2125824, 2453504, 2125824, 2539520, 2125824,
  /* 20768 */ 2613248, 2125824, 2867200, 2125824, 2125824, 2125824, 3039232, 2125824, 2125824, 2453504, 2125824,
  /* 20779 */ 2539520, 2125824, 2613248, 2125824, 2867200, 2125824, 2125824, 0, 24576, 981, 2125824, 2125824, 2125824,
  /* 20792 */ 2125824, 2125824, 2428928, 2437120, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20803 */ 3125248, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 20815 */ 2179072, 2125824, 2125824, 2125824, 3039232, 2125824, 2531328, 0, 0, 0, 2179072, 2531328, 2179072,
  /* 20828 */ 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2125824, 2125824, 2125824, 2412544, 2125824, 2125824,
  /* 20840 */ 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20852 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 2531328, 2125824, 2125824, 2125824,
  /* 20865 */ 2125824, 2125824, 3100672, 2125824, 2531328, 2125824, 2125824, 2125824, 2125824, 2125824, 3100672, 0, 0,
  /* 20878 */ 0, 0, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 0, 0, 0, 0, 0, 0, 2408448, 2179072, 2179072, 2179072,
  /* 20904 */ 2179072, 3035136, 2408448, 2125824, 2125824, 2125824, 2125824, 3035136, 2408448, 2125824, 2125824,
  /* 20915 */ 2125824, 2125824, 2125824, 2703360, 2125824, 2719744, 2125824, 2727936, 2125824, 2736128, 2777088,
  /* 20926 */ 2125824, 2125824, 2125824, 2809856, 2125824, 2834432, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20937 */ 3035136, 2543616, 0, 2957312, 2179072, 2662400, 2981888, 2179072, 2125824, 2662400, 2981888, 2125824,
  /* 20949 */ 2125824, 0, 0, 980, 2125824, 2125824, 2125824, 2125824, 2125824, 2428928, 2437120, 2125824, 2125824,
  /* 20962 */ 2125824, 2125824, 2125824, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20973 */ 2125824, 2125824, 2605056, 2662400, 2981888, 2125824, 2715648, 2564096, 2179072, 2564096, 2125824,
  /* 20984 */ 2564096, 2125824, 2179072, 2125824, 2125824, 2179072, 2125824, 2125824, 2994176, 2994176, 2994176, 0, 0,
  /* 20997 */ 0, 0, 0, 0, 0, 0, 0, 0, 306, 306, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
  /* 21029 */ 0, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047,
  /* 21043 */ 111047, 111047, 111047, 0, 0, 0, 0, 0, 0, 0, 111047, 111047, 111047, 455, 455, 111047, 455, 455, 455, 455,
  /* 21063 */ 455, 455, 455, 455, 455, 455, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 455, 111047, 111047,
  /* 21079 */ 111047, 455, 111047, 0, 0, 0, 0, 0, 0, 0, 0, 111047, 111047, 111047, 111047, 111047, 111047, 111047,
  /* 21097 */ 111047, 111047, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1, 12290, 3, 0, 0, 0, 0,
  /* 21121 */ 0, 0, 0, 0, 0, 0, 0, 118784, 301, 0, 305, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
  /* 21150 */ 305, 305, 305, 305, 305, 305, 305, 305, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 305, 119200, 73728, 0, 0, 0, 0, 0,
  /* 21176 */ 65536, 0, 305, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 33400, 302, 0, 2134016, 49788, 306, 0, 0, 0, 0,
  /* 21200 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 310, 2105634, 12290, 3, 0, 0, 296, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0,
  /* 21229 */ 0, 1706, 0, 0, 0, 0, 0, 0, 0, 0, 1610, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 0, 122880, 122880, 122880,
  /* 21253 */ 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 122880, 0, 0,
  /* 21268 */ 122880, 122880, 122880, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538,
  /* 21293 */ 538, 538, 538, 538, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 122880, 122880,
  /* 21311 */ 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0,
  /* 21335 */ 0, 0, 0, 308, 309, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 384, 386, 0,
  /* 21364 */ 0, 0, 0, 2105634, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 367, 0, 0, 0, 147456, 0,
  /* 21388 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 3162, 538, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21419 */ 789, 0, 0, 0, 131072, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0,
  /* 21447 */ 0, 0, 0, 0, 2119, 2120, 0, 0, 2122, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072,
  /* 21473 */ 0, 0, 0, 131072, 0, 0, 0, 0, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 0, 0,
  /* 21493 */ 0, 0, 131072, 0, 0, 0, 131072, 0, 131072, 131072, 131072, 131072, 131072, 1, 12290, 3, 0, 0, 2183168, 0,
  /* 21513 */ 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 326, 0,
  /* 21540 */ 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 339, 0, 0, 0, 0, 135168, 1, 12290, 3, 0, 0,
  /* 21568 */ 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 633, 634, 0,
  /* 21593 */ 2134016, 637, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21623 */ 0, 0, 0, 139264, 302, 0, 305, 0, 306, 0, 0, 0, 2478080, 2482176, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
  /* 21650 */ 0, 0, 0, 1581, 1582, 0, 0, 0, 0, 0, 0, 0, 306, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 342,
  /* 21679 */ 343, 0, 0, 306, 0, 0, 0, 306, 69632, 139684, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1639, 0, 0, 0, 0, 0, 0,
  /* 21707 */ 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 306, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 33403,
  /* 21734 */ 0, 2134016, 305, 49791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 61440, 0, 0, 0, 0, 0,
  /* 21763 */ 0, 0, 0, 0, 0, 0, 0, 306, 306, 306, 306, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 303, 0, 0,
  /* 21793 */ 303, 303, 143663, 303, 303, 303, 303, 303, 303, 303, 303, 303, 368, 303, 0, 143663, 303, 303, 303, 303,
  /* 21813 */ 303, 303, 143663, 373, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
  /* 21833 */ 143663, 303, 303, 143663, 303, 303, 303, 143733, 303, 303, 303, 143733, 69632, 73728, 303, 303, 143663,
  /* 21850 */ 303, 303, 65536, 303, 303, 303, 303, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 303, 143663,
  /* 21866 */ 143663, 303, 143663, 303, 143663, 143663, 143663, 143663, 143663, 143663, 303, 0, 303, 0, 303, 303, 303,
  /* 21883 */ 303, 303, 303, 303, 303, 143663, 303, 143663, 143663, 143663, 143663, 303, 143663, 143663, 143663, 143663,
  /* 21899 */ 303, 303, 143663, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 143733, 303, 303, 303, 303,
  /* 21918 */ 143663, 143663, 303, 303, 303, 303, 143663, 143663, 303, 143663, 143663, 143663, 143663, 143663, 143663,
  /* 21933 */ 143733, 143733, 143733, 143733, 143733, 143733, 143733, 143733, 143663, 143663, 143663, 143663, 143663,
  /* 21946 */ 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 1, 12290,
  /* 21960 */ 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 3125248, 0, 0, 0, 0, 0, 0, 0, 2200249, 2200249, 0,
  /* 21984 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1160, 0, 0, 0, 155648, 155648, 0, 155648, 155648, 155648,
  /* 22008 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 22021 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0,
  /* 22040 */ 0, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 854, 538, 155648, 0, 12290, 3, 0, 0, 2183168,
  /* 22065 */ 126976, 0, 0, 0, 0, 301, 302, 0, 2134016, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
  /* 22091 */ 3125248, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 159744, 159744,
  /* 22119 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 22132 */ 159744, 163840, 159744, 159744, 159744, 163840, 159744, 159744, 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0,
  /* 22151 */ 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 22165 */ 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 225737, 225737, 225737, 225737, 225737, 225737,
  /* 22183 */ 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 0, 0, 0, 0, 0, 0, 0,
  /* 22200 */ 159744, 0, 25159, 159744, 0, 0, 0, 0, 159744, 159744, 0, 0, 0, 25159, 25159, 25159, 1, 12290, 3, 0, 0,
  /* 22221 */ 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 159744, 25159, 25159, 25159, 25159, 25159, 25159, 25159,
  /* 22239 */ 25159, 25159, 159744, 159744, 159744, 159744, 159744, 25159, 167936, 167936, 167936, 167936, 167936,
  /* 22252 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0,
  /* 22269 */ 0, 167936, 167936, 167936, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936,
  /* 22289 */ 167936, 167936, 167936, 167936, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 2138112,
  /* 22309 */ 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22339 */ 172032, 0, 0, 0, 0, 0, 0, 172032, 172032, 0, 172032, 0, 0, 172032, 172032, 0, 172032, 0, 0, 0, 0, 172032,
  /* 22361 */ 0, 0, 0, 0, 0, 1654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 1189, 0, 0, 0, 0, 0, 172032, 172032, 172032, 0,
  /* 22388 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22401 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0,
  /* 22416 */ 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 1142784, 0, 0, 1142784, 0, 0, 0, 0, 172032, 1, 12290, 3, 0,
  /* 22443 */ 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1, 291, 3, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
  /* 22471 */ 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 22488 */ 176128, 176128, 176128, 176128, 176128, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 0, 0, 176128, 0, 0,
  /* 22508 */ 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 1, 0, 3, 78117,
  /* 22527 */ 78117, 295, 0, 631, 0, 0, 0, 301, 302, 0, 2134016, 584, 584, 584, 584, 78117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22552 */ 0, 0, 538, 538, 3161, 538, 538, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 560, 560,
  /* 22581 */ 560, 1389, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1412, 560, 560, 560, 26018, 0,
  /* 22602 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 538, 584, 2033, 0, 0, 0, 0, 0, 0, 0,
  /* 22626 */ 0, 0, 0, 0, 0, 0, 0, 0, 1597, 0, 0, 0, 560, 560, 560, 560, 560, 560, 560, 2230, 560, 560, 560, 560, 560,
  /* 22651 */ 560, 2579, 560, 2581, 560, 560, 560, 560, 560, 560, 560, 560, 3304, 560, 560, 560, 560, 560, 560, 584,
  /* 22671 */ 560, 560, 560, 2267, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1850, 560, 560, 0,
  /* 22692 */ 0, 0, 584, 584, 584, 584, 584, 584, 584, 2317, 584, 584, 584, 584, 584, 584, 1943, 584, 584, 584, 584,
  /* 22713 */ 584, 584, 584, 584, 584, 3326, 584, 584, 538, 538, 560, 560, 584, 584, 584, 2354, 584, 584, 584, 584, 584,
  /* 22734 */ 584, 584, 584, 584, 584, 584, 584, 1051, 584, 0, 0, 584, 2649, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 22755 */ 584, 584, 584, 584, 584, 584, 0, 0, 538, 2812, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 22777 */ 0, 0, 0, 0, 0, 0, 560, 560, 560, 560, 2860, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 22800 */ 560, 560, 560, 3065, 0, 0, 0, 0, 2935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 3160, 538, 538, 538, 2969, 0,
  /* 22827 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 538, 538, 538, 3000, 538, 538, 538, 538, 538, 538, 538,
  /* 22853 */ 538, 538, 538, 538, 538, 538, 2201, 538, 538, 560, 560, 3040, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 22874 */ 560, 560, 560, 560, 560, 560, 3309, 584, 584, 584, 3082, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 22895 */ 584, 584, 1052, 584, 0, 0, 3121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 3163, 538, 538, 538,
  /* 22922 */ 538, 538, 538, 538, 538, 538, 3171, 538, 538, 538, 538, 538, 538, 538, 2506, 538, 538, 538, 538, 538, 538,
  /* 22943 */ 538, 538, 1765, 538, 538, 538, 538, 538, 538, 538, 560, 560, 3198, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 22964 */ 560, 560, 560, 560, 560, 560, 1414, 560, 584, 584, 3219, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 22984 */ 3227, 584, 584, 584, 0, 538, 538, 560, 560, 584, 584, 538, 560, 584, 3617, 3618, 3619, 538, 538, 538, 538,
  /* 23005 */ 3282, 538, 538, 538, 3283, 3284, 538, 538, 538, 538, 538, 538, 538, 1293, 1295, 538, 538, 538, 538, 538,
  /* 23025 */ 538, 538, 538, 2805, 538, 538, 538, 538, 538, 538, 538, 538, 2521, 538, 538, 538, 2524, 538, 538, 2526,
  /* 23045 */ 560, 560, 560, 560, 3301, 3302, 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 3483, 584, 3484, 584,
  /* 23065 */ 584, 584, 3488, 584, 584, 3320, 3321, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 538, 560, 560,
  /* 23085 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3299, 560, 538, 538, 538, 538, 3355, 538, 538, 538, 538,
  /* 23106 */ 560, 560, 560, 560, 560, 560, 3364, 584, 584, 3380, 584, 584, 584, 584, 584, 584, 3386, 584, 584, 584,
  /* 23126 */ 3390, 584, 538, 538, 538, 538, 538, 1761, 538, 538, 538, 1766, 538, 538, 538, 538, 538, 538, 538, 2182,
  /* 23146 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 2184, 2185, 538, 538, 538, 538, 538, 538, 538, 3507, 538,
  /* 23166 */ 538, 538, 538, 538, 538, 538, 538, 560, 560, 560, 560, 3519, 0, 184929, 184929, 184929, 184929, 184929,
  /* 23184 */ 184929, 184929, 184929, 0, 0, 0, 0, 0, 0, 184929, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302,
  /* 23207 */ 0, 2134016, 188416, 538, 584, 560, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 0, 584, 1, 12290, 3,
  /* 23228 */ 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2088, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0,
  /* 23257 */ 3272, 538, 538, 538, 538, 538, 538, 538, 3277, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 357,
  /* 23284 */ 358, 359, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968,
  /* 23298 */ 192968, 192968, 192968, 192968, 0, 0, 0, 0, 0, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 0,
  /* 23315 */ 192968, 192968, 192968, 0, 0, 192968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 2499, 2500, 538, 0, 1,
  /* 23339 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 304, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 409,
  /* 23366 */ 409, 409, 409, 409, 409, 409, 409, 0, 0, 0, 0, 0, 0, 409, 409, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0,
  /* 23391 */ 0, 301, 302, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 737, 538, 584, 560, 538, 538, 538,
  /* 23419 */ 538, 538, 560, 560, 560, 560, 560, 0, 584, 1, 12290, 3, 78117, 78453, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0,
  /* 23443 */ 0, 0, 0, 0, 2117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 0, 0, 0, 0, 737, 1178, 0, 0, 0, 0, 1182, 0, 0, 0,
  /* 23474 */ 0, 0, 0, 0, 0, 0, 353, 354, 355, 0, 0, 0, 0, 1073, 1550, 0, 0, 0, 1556, 0, 0, 0, 1562, 0, 0, 0, 1568, 0,
  /* 23502 */ 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 557, 580, 557, 580, 557, 557, 580, 0, 0, 0, 1556, 2017, 0,
  /* 23530 */ 0, 0, 0, 1562, 2019, 0, 0, 0, 0, 1568, 2017, 0, 2019, 0, 2021, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23559 */ 0, 1712, 2625, 0, 0, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2321, 2625, 0, 584,
  /* 23582 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1482, 584, 0, 309, 0, 309, 0, 0, 0, 0, 0,
  /* 23606 */ 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 1685, 0, 0, 0, 0, 0, 0, 1715, 0, 1717, 1691,
  /* 23635 */ 538, 538, 538, 538, 538, 538, 538, 2171, 538, 538, 2174, 538, 538, 538, 538, 538, 0, 0, 0, 204800, 204800,
  /* 23656 */ 0, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 205109, 204800,
  /* 23670 */ 204800, 204800, 205109, 204800, 204800, 205108, 204800, 205108, 204800, 205108, 204800, 204800, 0, 0, 0,
  /* 23685 */ 0, 0, 0, 0, 0, 2134753, 0, 0, 0, 0, 0, 0, 0, 0, 1167360, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
  /* 23715 */ 0, 204800, 1, 12290, 3, 0, 0, 2183798, 0, 0, 0, 0, 0, 301, 302, 151552, 2134016, 305, 306, 0, 212992, 0,
  /* 23737 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 2200250, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23768 */ 662, 0, 0, 665, 0, 3125248, 0, 0, 0, 0, 0, 0, 0, 0, 2200250, 0, 0, 0, 0, 0, 0, 0, 1139, 367, 367, 0, 0,
  /* 23795 */ 1142, 0, 0, 0, 2438025, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 23809 */ 2126729, 2126729, 2126729, 2126729, 2630537, 2126729, 2126729, 2126729, 2548617, 2552713, 2126729,
  /* 23820 */ 2126729, 2601865, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2806665,
  /* 23831 */ 2818953, 2126729, 2839433, 2847625, 2126729, 2126729, 2126729, 2126729, 2810761, 2126729, 2835337,
  /* 23842 */ 2126729, 2126729, 2126729, 2872201, 2126729, 2126729, 2126729, 2126729, 2929545, 2126729, 2126729,
  /* 23853 */ 2126729, 2126729, 2126729, 2126729, 2528137, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 23864 */ 2126729, 2126729, 2605961, 2704340, 2126804, 2720724, 2126804, 2728916, 2126804, 2737108, 2778068,
  /* 23875 */ 2126804, 2126804, 2126804, 2810836, 2126804, 2835412, 2126804, 2126804, 2560980, 2569172, 2126804,
  /* 23886 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 3146708, 2949120,
  /* 23897 */ 2126804, 2872276, 2126804, 2126804, 2126804, 2126804, 2929620, 2126804, 2126804, 2126804, 2126804,
  /* 23908 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804,
  /* 23919 */ 2126804, 0, 0, 2126729, 2461696, 2179072, 2179072, 2179072, 2179072, 2462601, 2126729, 2126729, 2126729,
  /* 23932 */ 2126729, 2462676, 2126804, 2126804, 2126804, 2126804, 2556884, 2126804, 2126804, 2126804, 2126804,
  /* 23943 */ 2126804, 2642900, 2126804, 2126804, 2126804, 2126804, 2733012, 2126804, 3134420, 2126804, 2126804,
  /* 23954 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2179072,
  /* 23965 */ 2126804, 2126729, 2179072, 2179072, 2179072, 2179072, 2126729, 2126729, 2126729, 2126729, 2126804,
  /* 23976 */ 2126804, 2126804, 2126804, 0, 0, 0, 0, 0, 0, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 23991 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2466697, 2470793, 2126729, 2773897, 2782089, 2786185,
  /* 24002 */ 2802569, 2827145, 2126729, 2126729, 2126729, 2892681, 2126729, 2921353, 2126729, 2126729, 2126729,
  /* 24013 */ 2126729, 2646921, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2724745, 2126729, 2126729,
  /* 24024 */ 2126729, 2126729, 2622345, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2667401, 2126729,
  /* 24035 */ 2126729, 2126729, 2126729, 2126729, 2704265, 2126729, 2720649, 2126729, 2728841, 2126729, 2737033,
  /* 24046 */ 2777993, 2126729, 2126729, 2126729, 3109769, 2126729, 2126729, 3142537, 2126729, 2126729, 2126729,
  /* 24057 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 3216265, 2126729, 0, 0, 2126804, 2126804, 2126804,
  /* 24070 */ 2413524, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804,
  /* 24081 */ 2126804, 2589652, 2126804, 2126804, 2126804, 2126804, 0, 0, 0, 2126804, 2126804, 2126804, 2126804,
  /* 24094 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2466772, 2470868, 2126804, 2773972,
  /* 24105 */ 2782164, 2786260, 2802644, 2827220, 2126804, 2126804, 2126804, 2892756, 2126804, 2921428, 2126804,
  /* 24116 */ 2126804, 2126804, 2126804, 2646996, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2724820,
  /* 24127 */ 2126804, 2126804, 2126804, 2126804, 2806740, 2819028, 2126804, 2839508, 2847700, 2126804, 2126804,
  /* 24138 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 3048404, 2126804, 3072980, 2126804, 2126804,
  /* 24149 */ 2126804, 2126804, 2126804, 3109844, 2126804, 2126804, 3142612, 2126804, 2126804, 2126804, 2126804,
  /* 24160 */ 2126804, 2126804, 2126804, 2126804, 2126804, 3216340, 2126804, 2179072, 2179072, 2420736, 2179072,
  /* 24171 */ 2179072, 2179072, 2449408, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 24182 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2179072,
  /* 24193 */ 2179072, 3178496, 2179072, 2179072, 3198976, 3203072, 2179072, 0, 0, 0, 0, 0, 0, 2392969, 2126729,
  /* 24208 */ 2126729, 2126729, 2712457, 2126729, 2741129, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 24219 */ 2126729, 2126729, 2896777, 2126729, 2126729, 2126729, 2851721, 2855817, 2126729, 2904969, 2925449,
  /* 24230 */ 2126729, 2126729, 2954121, 2126729, 2126729, 3003273, 2126729, 3011465, 2126729, 2126729, 2425737,
  /* 24241 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2458505, 2126729, 2478985, 2487177, 2126729, 2126729,
  /* 24252 */ 2126729, 2126729, 3134345, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 24263 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126804, 2126804, 2126729,
  /* 24274 */ 2126729, 2536329, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2610057, 2126729,
  /* 24285 */ 2634633, 2126729, 2126729, 2655113, 2126729, 2933641, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 24296 */ 2126729, 2126729, 2126729, 2126729, 3044233, 2126729, 2126729, 3081097, 2126729, 2126729, 2126729,
  /* 24307 */ 2937737, 2126729, 2126729, 2126729, 3007369, 2126729, 2126729, 2126729, 2126729, 3068809, 2126729,
  /* 24318 */ 2126729, 2126729, 2126729, 3187593, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804,
  /* 24329 */ 2126804, 2499540, 2126804, 2126804, 2126729, 2126729, 3130249, 2126729, 2126729, 3150729, 2126729,
  /* 24340 */ 2126729, 2126729, 3179401, 2126729, 2126729, 3199881, 3203977, 2126729, 0, 0, 0, 0, 0, 1676, 0, 0, 0, 0,
  /* 24358 */ 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 3179476, 2126804, 2126804, 3199956, 3204052, 2126804, 2179072,
  /* 24377 */ 2126804, 2126729, 2179072, 2179072, 3121152, 3227648, 2126729, 2126729, 3122057, 3228553, 2126804,
  /* 24388 */ 2126804, 3122132, 3228628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 694, 695, 0, 367, 367, 2126729, 2126729,
  /* 24409 */ 2556809, 2126729, 2126729, 2126729, 2126729, 2126729, 2642825, 2126729, 2126729, 2126729, 2126729,
  /* 24420 */ 2732937, 2757513, 2126729, 2126729, 2126729, 3019657, 2126729, 2126729, 2126729, 2126804, 2126804,
  /* 24431 */ 2507732, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 3044308, 2126804, 2126804, 3081172,
  /* 24442 */ 2126804, 2126804, 2126804, 3130324, 2126804, 2126804, 3150804, 2126804, 2126804, 2126804, 3036116,
  /* 24453 */ 2543616, 0, 2957312, 2179072, 2662400, 2981888, 2179072, 2126729, 2663305, 2982793, 2126729, 2126804,
  /* 24465 */ 2126729, 2126729, 3031945, 2126729, 3077001, 3093385, 2126729, 3105673, 2126729, 2126729, 2126729,
  /* 24476 */ 2126729, 2126729, 2126729, 2126729, 3232649, 0, 0, 2126804, 2126804, 2421716, 2126804, 2126804, 2126804,
  /* 24489 */ 2450388, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2896852, 2126804, 2126804,
  /* 24500 */ 2933716, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2453504, 0, 2539520, 3039232, 0,
  /* 24513 */ 0, 0, 2179072, 2453504, 2757588, 2126804, 2126804, 2126804, 2126804, 2851796, 2855892, 2126804, 2905044,
  /* 24526 */ 2925524, 2126804, 2126804, 2954196, 2126804, 2126804, 3003348, 2126804, 3011540, 2126804, 2126804,
  /* 24537 */ 3032020, 2126804, 3077076, 3093460, 2126804, 3105748, 2126804, 2126804, 2126804, 2126804, 2126804,
  /* 24548 */ 2126804, 3187668, 2179072, 2126804, 2126729, 2179072, 2179072, 2126729, 2126729, 2126804, 2126804,
  /* 24559 */ 2445312, 2126804, 3232724, 2179072, 2126804, 2126729, 2179072, 2179072, 2126729, 2126729, 2126804,
  /* 24570 */ 2126804, 0, 0, 0, 0, 0, 0, 0, 2062, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 0, 0, 0, 2520020, 2126804,
  /* 24597 */ 2126804, 2126804, 2548692, 2552788, 2126804, 2126804, 2601940, 2126804, 2126804, 2126804, 2126804,
  /* 24608 */ 2126804, 2126804, 2126804, 2937812, 2126804, 2126804, 2126804, 3007444, 2126804, 2126804, 2126804,
  /* 24619 */ 2126804, 3068884, 2126804, 2126804, 3162112, 3174400, 3182592, 2401161, 2405257, 2126729, 2126729,
  /* 24630 */ 2446217, 2126729, 2474889, 2126729, 2126729, 2126729, 2524041, 2126729, 2126729, 0, 0, 981, 2126804,
  /* 24643 */ 2126804, 2126804, 2126804, 2126804, 2429908, 2438100, 2126804, 2126804, 2126804, 2126804, 0, 0, 0, 0, 0,
  /* 24658 */ 0, 0, 0, 0, 0, 0, 2428928, 2126729, 2126729, 2593673, 2126729, 2618249, 2651017, 2126729, 2126729,
  /* 24673 */ 2700169, 2761609, 2126729, 2126729, 2126729, 2126729, 2941833, 2126729, 2126729, 2421641, 2126729,
  /* 24684 */ 2126729, 2126729, 2450313, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 24695 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2589577, 2126729, 2126804, 3138516, 2126804,
  /* 24706 */ 2126804, 3163092, 3175380, 3183572, 2510848, 2511828, 2511753, 2179072, 2179072, 2126729, 2126729,
  /* 24717 */ 2126804, 2126804, 2700244, 2761684, 2126804, 2126804, 2126804, 2126804, 2941908, 2126804, 2126804,
  /* 24728 */ 2126804, 2126804, 2126804, 2126804, 2126804, 3040212, 2126804, 2531328, 0, 0, 0, 2179072, 2531328,
  /* 24741 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2126729, 2179072, 3158016, 2126729, 2433929, 2442121,
  /* 24752 */ 2126729, 2491273, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2659209,
  /* 24763 */ 2683785, 2765705, 2769801, 2790281, 2864009, 2978697, 2126729, 3015561, 2126729, 3027849, 2126729,
  /* 24774 */ 2126729, 2126729, 2126729, 3158921, 2126804, 2126804, 3126228, 2126804, 2126804, 2126804, 2126804,
  /* 24785 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 0, 2179072, 2126804, 2126729, 2179072, 2179072,
  /* 24797 */ 2179072, 2179072, 2179072, 2126729, 2126729, 2126729, 2126729, 2126729, 0, 2126804, 2434004, 2442196,
  /* 24809 */ 2126804, 2491348, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2659284,
  /* 24820 */ 2683860, 2765780, 2769876, 2790356, 2864084, 2978772, 2126804, 3015636, 2126804, 3027924, 2126804,
  /* 24831 */ 2126804, 2126804, 2126804, 3158996, 2179072, 3059712, 2126729, 3060617, 2126804, 3060692, 0, 2494464,
  /* 24843 */ 2502656, 0, 0, 0, 0, 2883584, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 0, 2038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0,
  /* 24872 */ 0, 0, 0, 733, 2569097, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729,
  /* 24886 */ 2126729, 3146633, 2126804, 2126804, 2503636, 2126804, 2446292, 2126804, 2474964, 2126804, 2126804,
  /* 24897 */ 2126804, 2524116, 2126804, 2126804, 2126804, 2126804, 2593748, 2126804, 2618324, 2651092, 2950025,
  /* 24908 */ 2950100, 0, 0, 0, 0, 0, 2752512, 2887680, 0, 3142, 0, 0, 0, 0, 2179072, 2125824, 2125824, 2179072,
  /* 24926 */ 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 1054, 2125824, 2597769,
  /* 24938 */ 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126729, 2126804, 2126804, 2126804,
  /* 24949 */ 2126804, 2126804, 2597844, 2126804, 2479060, 2487252, 2126804, 2126804, 2126804, 2126804, 2126804,
  /* 24960 */ 2126804, 2536404, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2528212, 2126804, 2126804,
  /* 24971 */ 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2606036, 2179072, 2539520, 2179072, 2613248,
  /* 24982 */ 2179072, 2867200, 2179072, 2179072, 2179072, 3039232, 2126729, 2454409, 2126729, 2540425, 2126729,
  /* 24993 */ 2614153, 2126729, 2868105, 2126729, 2126729, 2126729, 3040137, 2126729, 2126804, 2454484, 2126804,
  /* 25004 */ 2540500, 2126804, 2614228, 2126804, 2868180, 2126804, 2610132, 2126804, 2634708, 2126804, 2126804,
  /* 25015 */ 2655188, 2126804, 2126804, 2126804, 2712532, 2126804, 2741204, 2126804, 2126804, 2126804, 3019732,
  /* 25026 */ 2126804, 2126804, 2126804, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2532233, 2126729, 2126729, 2126729,
  /* 25042 */ 2126729, 2126729, 3101577, 2126804, 2532308, 2126804, 2126804, 2126804, 2126804, 2126804, 3101652, 0, 0,
  /* 25055 */ 0, 0, 0, 1677, 0, 1679, 0, 0, 0, 0, 0, 0, 1686, 0, 0, 0, 0, 0, 1691, 1692, 0, 0, 0, 1695, 0, 0, 0, 0, 0,
  /* 25084 */ 0, 0, 2727, 0, 0, 0, 0, 2732, 0, 0, 0, 0, 0, 2408448, 2179072, 2179072, 2179072, 2179072, 3035136,
  /* 25103 */ 2409353, 2126729, 2126729, 2126729, 2126729, 3036041, 2409428, 2126804, 2622420, 2126804, 2126804,
  /* 25114 */ 2126804, 2126804, 2126804, 2126804, 2667476, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804,
  /* 25125 */ 2126804, 2126804, 2126804, 2630612, 2126804, 2126804, 2126804, 2126804, 2126804, 2126804, 2663380,
  /* 25136 */ 2982868, 2126804, 2715648, 2564096, 2179072, 2565001, 2126729, 2565076, 2126804, 2179072, 2126729,
  /* 25147 */ 2126804, 2179072, 2126729, 2126804, 2994176, 2995081, 2995156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 678, 0,
  /* 25167 */ 0, 0, 0, 0, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 0, 0, 221184, 221184, 221184, 0, 0,
  /* 25191 */ 0, 0, 0, 0, 221184, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0,
  /* 25210 */ 0, 0, 0, 0, 221184, 0, 221184, 0, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 25228 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 1, 12290, 3, 0, 0, 2183168, 0, 0,
  /* 25245 */ 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 0, 0, 2805760, 0, 0, 0, 0, 2142208, 0, 0, 0, 98304, 0, 0, 0, 0, 0, 0,
  /* 25272 */ 2049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 560, 538, 560, 538, 538, 560, 0, 53248, 0, 0, 0, 0, 0, 2666496, 0,
  /* 25298 */ 2818048, 0, 0, 0, 0, 2379776, 0, 0, 0, 0, 0, 2023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 375, 0, 0, 0,
  /* 25327 */ 301, 0, 302, 0, 0, 0, 302, 0, 305, 0, 0, 0, 305, 0, 306, 306, 306, 306, 306, 306, 306, 306, 0, 0, 0, 0, 0,
  /* 25354 */ 0, 306, 0, 0, 0, 2465792, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2179072,
  /* 25379 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 301, 0,
  /* 25392 */ 0, 2179072, 2179072, 3178496, 2179072, 2179072, 3198976, 3203072, 2179072, 906, 0, 0, 0, 906, 0, 2392064,
  /* 25408 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2895872, 2125824, 2125824, 2932736, 2125824, 2125824,
  /* 25419 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3043328, 2125824, 2125824, 3080192,
  /* 25430 */ 2125824, 2125824, 2125824, 3129344, 2125824, 2125824, 3149824, 2125824, 2125824, 2125824, 3178496,
  /* 25441 */ 2125824, 2125824, 3198976, 3203072, 2125824, 981, 0, 2125824, 2125824, 2420736, 2125824, 2125824, 2125824,
  /* 25454 */ 2449408, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25465 */ 2125824, 2125824, 2125824, 2125824, 1054, 0, 0, 0, 0, 981, 0, 2392064, 2125824, 2125824, 2125824, 2424832,
  /* 25481 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2457600, 2179072, 3031040, 2179072, 3076096, 3092480,
  /* 25492 */ 3104768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3231744, 906, 0, 0, 0, 0, 0, 2037,
  /* 25508 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 225737, 225887, 225887, 225887, 225887, 225887,
  /* 25531 */ 225887, 225887, 225887, 225737, 225737, 225737, 225737, 225737, 225737, 225903, 1, 12290, 3, 0, 0,
  /* 25546 */ 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1, 12290, 3, 0, 0, 0, 0, 249856, 0, 0, 0, 249856, 0, 0, 0,
  /* 25571 */ 0, 0, 0, 0, 2936, 0, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 0, 0, 0, 250314, 250314, 250314, 250314,
  /* 25596 */ 250314, 250314, 250314, 250314, 250314, 250314, 250314, 250314, 250314, 250314, 250314, 250314, 0, 0, 0,
  /* 25611 */ 0, 0, 0, 0, 249856, 249856, 249856, 250314, 250314, 250314, 250314, 250314, 250314, 250314, 250314,
  /* 25626 */ 249856, 250314, 250314, 250314, 249856, 249856, 250314, 249856, 249856, 249856, 249856, 249856, 249856,
  /* 25639 */ 249856, 249856, 249856, 249856, 250314, 0, 0, 0, 0, 0, 0, 0, 0, 250314, 250314, 250314, 250314, 250314,
  /* 25657 */ 250314, 250314, 250314, 250314, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 305, 306,
  /* 25678 */ 0, 0, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 258048, 0, 0,
  /* 25708 */ 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 641, 0, 0, 0, 258507, 258507, 258507, 258507, 258507,
  /* 25731 */ 258507, 258507, 258507, 258507, 258507, 258507, 258507, 258507, 258507, 258507, 258507, 0, 0, 0, 0, 0, 0,
  /* 25748 */ 0, 258507, 0, 0, 0, 0, 0, 0, 0, 0, 258507, 258507, 258507, 258507, 258507, 258507, 258507, 258507, 258507,
  /* 25767 */ 1, 12290, 0, 0, 0, 2183168, 0, 0, 274432, 0, 0, 301, 302, 0, 2134016, 305, 306, 200704, 0, 0, 0, 0, 0, 0,
  /* 25791 */ 0, 0, 0, 0, 0, 0, 0, 388, 340, 0, 2949120, 2949120, 0, 0, 0, 0, 0, 2752512, 2887680, 0, 20480, 0, 0, 0, 0,
  /* 25816 */ 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824,
  /* 25827 */ 2125824, 2125824, 237568, 2125824, 1, 12290, 2113828, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 298, 0, 0, 0, 0, 0,
  /* 25850 */ 0, 2061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 155648, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25879 */ 270336, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 519, 519, 0, 270336, 270336, 270336,
  /* 25904 */ 270336, 270336, 270336, 270336, 270336, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 1,
  /* 25928 */ 12290, 2113828, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 278528, 278528, 278528, 278528,
  /* 25947 */ 278528, 278528, 278528, 278528, 0, 0, 0, 0, 0, 0, 278528, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301,
  /* 25970 */ 302, 0, 2134016, 1, 12290, 3, 78117, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 538, 538, 584,
  /* 25997 */ 560, 560, 560, 560, 560, 560, 538, 560, 560, 560, 584, 584, 584, 584, 0, 0, 0, 0, 2704, 0, 0, 0, 2708, 0,
  /* 26021 */ 0, 584, 584, 584, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1588, 560, 560, 26018,
  /* 26047 */ 1349, 981, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1512, 584, 584, 584, 584, 0, 0, 0, 0,
  /* 26069 */ 2017, 0, 0, 0, 0, 0, 2019, 0, 0, 0, 0, 0, 0, 0, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0,
  /* 26100 */ 0, 0, 2464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 2099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26133 */ 0, 0, 772, 0, 0, 0, 0, 538, 538, 585, 561, 561, 561, 561, 561, 561, 538, 561, 561, 561, 585, 585, 585, 1,
  /* 26157 */ 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26185 */ 2026, 0, 0, 0, 0, 0, 0, 538, 585, 585, 585, 585, 585, 585, 585, 585, 585, 561, 561, 538, 561, 561, 585, 1,
  /* 26209 */ 12290, 3, 78118, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 286720, 286720, 286720, 286720,
  /* 26233 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 0,
  /* 26248 */ 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 286720, 286720, 286720,
  /* 26267 */ 0, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 286720, 1, 12290, 3, 0, 0, 2183168, 0, 0,
  /* 26295 */ 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 2400256,
  /* 26323 */ 0, 3162112, 3142, 0, 0, 2744320, 0, 0, 0, 0, 0, 2797568, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 0, 0, 0, 0,
  /* 26350 */ 0, 290816, 290816, 290816, 0, 0, 0, 0, 290816, 290816, 0, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 26367 */ 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 26380 */ 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 2478080, 2482176, 0, 0, 0, 0, 0,
  /* 26401 */ 0, 290816, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 3158016, 2945024, 0,
  /* 26422 */ 2764800, 3262, 0, 0, 0, 0, 2961408, 0, 0, 2830336, 3166208, 2433024, 2125824, 3059712, 0, 2494464,
  /* 26438 */ 2502656, 0, 0, 0, 0, 2883584, 0, 0, 0, 3339, 0, 0, 0, 0, 0, 0, 2419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0,
  /* 26466 */ 0, 0, 0, 0, 0, 2949120, 2949120, 0, 0, 0, 0, 0, 2752512, 2887680, 0, 3339, 0, 0, 0, 0, 2179072, 2125824,
  /* 26488 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 241664,
  /* 26500 */ 2125824, 0, 0, 0, 311, 0, 0, 0, 0, 0, 310, 0, 310, 311, 0, 310, 310, 0, 0, 0, 310, 310, 311, 311, 0, 0, 0,
  /* 26527 */ 0, 0, 0, 310, 410, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2082, 0, 0, 0, 311, 415, 0, 0, 69632,
  /* 26557 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2060, 0, 0, 0, 0, 2065, 2066, 0, 0, 2068, 2069, 460, 460, 460,
  /* 26583 */ 486, 486, 460, 486, 486, 486, 486, 486, 486, 486, 511, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
  /* 26604 */ 486, 529, 486, 486, 486, 529, 486, 486, 486, 486, 486, 486, 486, 486, 486, 539, 562, 539, 562, 539, 539,
  /* 26625 */ 562, 539, 539, 586, 562, 562, 562, 562, 562, 562, 539, 562, 562, 562, 586, 586, 586, 1, 12290, 3, 78117,
  /* 26646 */ 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0,
  /* 26676 */ 0, 389, 539, 586, 586, 586, 586, 586, 586, 586, 586, 586, 562, 562, 539, 562, 562, 586, 305, 306, 0, 0, 0,
  /* 26699 */ 0, 0, 642, 0, 0, 645, 646, 0, 0, 0, 0, 0, 0, 0, 2960, 0, 0, 0, 0, 0, 0, 0, 0, 2743, 0, 0, 0, 0, 0, 0, 0,
  /* 26730 */ 0, 0, 0, 0, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 367, 0, 0, 701, 0, 0, 0, 0, 0, 0, 0,
  /* 26762 */ 708, 0, 0, 0, 0, 0, 0, 0, 3136, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
  /* 26794 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1128, 0, 0, 1131, 1132, 744, 0, 0, 0, 0, 0, 642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26824 */ 367, 0, 0, 0, 0, 0, 0, 0, 759, 0, 0, 0, 0, 765, 0, 0, 769, 0, 0, 0, 0, 776, 0, 0, 0, 0, 0, 2100, 0, 0, 0,
  /* 26855 */ 0, 0, 2106, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 427, 65536, 0, 0, 0, 0, 780, 0, 0, 0, 0, 0, 0,
  /* 26884 */ 0, 0, 784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 0, 784, 0, 0, 0, 0, 645, 0, 0, 0, 0, 0, 0,
  /* 26916 */ 808, 0, 0, 0, 0, 0, 0, 2457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 561, 538, 561, 538, 538, 561, 645, 0, 0, 0,
  /* 26944 */ 0, 0, 825, 780, 0, 0, 0, 0, 0, 829, 830, 780, 0, 0, 0, 780, 780, 0, 733, 780, 0, 538, 538, 840, 844, 538,
  /* 26970 */ 538, 538, 538, 538, 538, 1747, 538, 538, 538, 538, 538, 538, 538, 538, 1754, 538, 538, 538, 870, 874, 876,
  /* 26991 */ 538, 883, 538, 886, 538, 538, 900, 538, 538, 560, 560, 560, 560, 560, 3292, 560, 560, 560, 3296, 560, 560,
  /* 27012 */ 560, 560, 560, 1860, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2584, 560, 560, 560, 560, 560,
  /* 27033 */ 560, 914, 918, 560, 560, 560, 560, 560, 560, 944, 948, 950, 560, 957, 560, 538, 538, 538, 538, 538, 560,
  /* 27054 */ 560, 560, 560, 560, 584, 584, 584, 584, 584, 584, 584, 3077, 584, 584, 584, 960, 560, 560, 974, 560, 560,
  /* 27075 */ 0, 584, 584, 584, 989, 993, 584, 584, 584, 584, 0, 3568, 0, 3570, 538, 538, 538, 538, 538, 538, 538, 560,
  /* 27097 */ 560, 560, 560, 560, 560, 560, 3191, 3192, 560, 560, 560, 560, 560, 560, 3303, 560, 560, 560, 560, 560,
  /* 27117 */ 560, 560, 560, 584, 3071, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3224, 584, 584, 584, 584, 584, 584,
  /* 27138 */ 584, 584, 1019, 1023, 1025, 584, 1032, 584, 1035, 584, 584, 1049, 584, 584, 0, 0, 0, 0, 0, 3334, 0, 0, 0,
  /* 27161 */ 0, 0, 3142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 844, 993, 918, 840, 1059, 886, 538, 538,
  /* 27189 */ 914, 1064, 960, 560, 560, 0, 989, 1069, 1035, 584, 584, 78117, 1073, 0, 0, 1075, 1079, 0, 0, 1083, 1087,
  /* 27210 */ 0, 0, 0, 0, 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 122880, 122880, 0, 0, 0, 1146, 0, 0, 0, 0,
  /* 27239 */ 1151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 131072, 131072, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27268 */ 0, 0, 0, 1208, 1219, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 560,
  /* 27290 */ 560, 0, 0, 1713, 0, 0, 1714, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 560, 584,
  /* 27314 */ 584, 560, 1822, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1835, 560, 560, 560, 560, 560, 560, 3424,
  /* 27334 */ 560, 3426, 3427, 560, 3429, 560, 3431, 584, 584, 560, 560, 560, 1890, 560, 560, 560, 560, 560, 1895, 560,
  /* 27354 */ 560, 560, 560, 560, 560, 560, 2568, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2610, 560, 560, 560, 560,
  /* 27375 */ 560, 560, 560, 26018, 1905, 584, 584, 584, 584, 584, 1912, 584, 584, 584, 584, 584, 1918, 584, 560, 538,
  /* 27395 */ 538, 2396, 2397, 560, 560, 2400, 2401, 584, 584, 2404, 2405, 0, 1554, 584, 584, 1970, 584, 584, 1973, 584,
  /* 27415 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1493, 584, 584, 584, 584, 584, 1986, 584, 584, 584, 584, 584,
  /* 27436 */ 1991, 584, 584, 584, 584, 584, 584, 584, 538, 584, 560, 538, 538, 560, 560, 584, 584, 0, 560, 2003, 538,
  /* 27457 */ 538, 538, 2007, 560, 560, 560, 2011, 584, 584, 584, 0, 2015, 0, 0, 0, 0, 0, 2116, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27483 */ 0, 0, 1583, 1584, 0, 0, 0, 0, 2021, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2027, 0, 0, 0, 0, 0, 0, 0, 2420, 0, 0, 0,
  /* 27513 */ 0, 0, 0, 0, 0, 1153, 0, 0, 0, 0, 1158, 0, 0, 2083, 0, 2085, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0,
  /* 27543 */ 0, 0, 3145, 0, 0, 0, 0, 0, 0, 0, 3152, 0, 0, 2120, 0, 0, 2127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
  /* 27573 */ 0, 0, 0, 0, 0, 0, 0, 2119, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3286, 538, 538,
  /* 27596 */ 538, 2149, 538, 538, 2152, 538, 538, 538, 538, 538, 538, 2160, 538, 538, 538, 538, 538, 538, 538, 2533,
  /* 27616 */ 538, 538, 538, 538, 538, 538, 538, 538, 1349, 906, 560, 560, 560, 560, 560, 560, 2179, 538, 538, 538, 538,
  /* 27637 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1315, 538, 538, 538, 2193, 538, 538, 538, 538, 538,
  /* 27658 */ 538, 538, 538, 538, 538, 538, 538, 538, 2539, 538, 538, 560, 560, 2237, 560, 560, 560, 560, 560, 560,
  /* 27678 */ 2245, 560, 560, 560, 560, 560, 560, 560, 2592, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3215, 560,
  /* 27698 */ 560, 560, 584, 584, 584, 560, 560, 2279, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 27719 */ 560, 1851, 560, 584, 584, 2324, 584, 584, 584, 584, 584, 584, 2332, 584, 584, 584, 584, 584, 584, 584,
  /* 27739 */ 3314, 584, 584, 584, 584, 584, 584, 584, 584, 1976, 584, 584, 584, 1981, 584, 584, 584, 584, 584, 2366,
  /* 27759 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 1535, 1536, 2392, 2393, 538, 538, 538,
  /* 27780 */ 538, 560, 560, 560, 560, 584, 584, 584, 584, 2015, 0, 0, 0, 0, 0, 2139, 538, 538, 538, 538, 538, 538,
  /* 27802 */ 2146, 538, 538, 538, 538, 538, 538, 2532, 538, 538, 538, 538, 2536, 538, 538, 538, 2541, 2017, 0, 2019, 0,
  /* 27823 */ 2021, 0, 0, 2407, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2968, 0, 2415,
  /* 27854 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 2428, 0, 0, 0, 0, 0, 2432, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27887 */ 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 2465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2474,
  /* 27918 */ 0, 0, 0, 0, 0, 0, 2714, 0, 0, 0, 0, 0, 2718, 0, 0, 0, 0, 0, 0, 336, 0, 0, 336, 0, 0, 0, 336, 0, 0, 538,
  /* 27948 */ 538, 2504, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2512, 538, 538, 538, 538, 538, 2195,
  /* 27968 */ 538, 538, 538, 538, 538, 538, 2200, 538, 538, 538, 538, 538, 538, 2196, 538, 538, 538, 538, 538, 538, 538,
  /* 27989 */ 538, 538, 889, 538, 538, 538, 538, 538, 560, 538, 538, 538, 538, 2546, 538, 538, 538, 538, 538, 538, 538,
  /* 28010 */ 538, 538, 538, 538, 1312, 538, 538, 538, 538, 538, 2555, 538, 538, 538, 538, 538, 538, 0, 2559, 0, 0, 0,
  /* 28032 */ 0, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1417, 560, 560, 560, 560, 2576,
  /* 28053 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1882, 560, 560, 2625, 0, 0, 0, 0, 584,
  /* 28075 */ 584, 584, 584, 584, 584, 584, 584, 584, 2634, 584, 560, 2394, 538, 538, 538, 2398, 560, 560, 560, 2402,
  /* 28095 */ 584, 584, 584, 0, 0, 0, 0, 0, 330, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 584, 2677, 584, 584, 584,
  /* 28119 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2687, 0, 0, 0, 0, 2713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28146 */ 1172, 0, 0, 0, 0, 0, 0, 0, 2723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 2736, 0, 0, 0, 0, 0, 0,
  /* 28178 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2110, 538, 538, 538, 538, 2803, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 28202 */ 538, 538, 1736, 538, 538, 538, 538, 2625, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2879,
  /* 28223 */ 584, 584, 584, 584, 584, 2382, 584, 2384, 584, 584, 584, 584, 584, 584, 584, 538, 584, 560, 538, 2695,
  /* 28243 */ 538, 538, 560, 2697, 560, 2883, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2892, 584, 584, 584,
  /* 28263 */ 584, 0, 3604, 0, 538, 538, 538, 538, 560, 560, 560, 560, 584, 560, 584, 3391, 0, 3393, 0, 0, 0, 0, 0,
  /* 28286 */ 3142, 3397, 0, 3399, 0, 538, 538, 538, 1263, 538, 538, 538, 538, 538, 538, 538, 538, 1276, 538, 538, 538,
  /* 28307 */ 538, 538, 538, 3002, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2818, 538, 538, 538, 0, 0, 3402,
  /* 28328 */ 538, 3404, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 560, 3417, 560, 3419, 560, 560, 560,
  /* 28348 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 3433, 584, 3435, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 28369 */ 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 3275, 538, 538, 0, 3450, 0, 0, 0,
  /* 28394 */ 3453, 0, 0, 538, 538, 538, 538, 3458, 538, 538, 538, 538, 538, 538, 1794, 538, 538, 538, 538, 538, 1799,
  /* 28415 */ 538, 538, 538, 538, 538, 538, 1777, 1778, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2159, 538, 538,
  /* 28435 */ 538, 538, 2164, 538, 312, 313, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101, 0, 0, 0, 0, 0, 0, 423, 0,
  /* 28464 */ 0, 0, 0, 446, 0, 0, 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 446, 446, 423, 446, 446, 446,
  /* 28493 */ 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 534, 446, 534, 534, 534, 534, 534, 534, 534, 534,
  /* 28514 */ 446, 540, 563, 540, 563, 540, 540, 563, 540, 540, 587, 563, 563, 563, 563, 563, 563, 540, 563, 563, 563,
  /* 28535 */ 587, 587, 587, 540, 587, 587, 587, 587, 587, 587, 587, 587, 587, 563, 563, 613, 618, 618, 587, 624, 1,
  /* 28556 */ 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28584 */ 538, 538, 538, 538, 538, 538, 859, 0, 0, 1667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1130, 0, 0, 538,
  /* 28611 */ 538, 1789, 538, 538, 538, 538, 538, 1795, 538, 538, 538, 538, 538, 538, 538, 538, 2172, 538, 538, 538,
  /* 28631 */ 538, 538, 538, 538, 538, 2183, 538, 538, 538, 538, 538, 538, 538, 538, 2211, 538, 538, 2214, 2215, 538,
  /* 28651 */ 538, 0, 584, 584, 1987, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 584, 560, 538, 3246,
  /* 28672 */ 560, 3248, 584, 3250, 538, 538, 538, 538, 2505, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 28692 */ 2161, 538, 538, 538, 538, 538, 538, 538, 2556, 538, 538, 538, 538, 0, 2559, 0, 0, 0, 0, 560, 560, 560,
  /* 28714 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 2234, 2625, 0, 0, 0, 0, 584, 584, 584, 584, 584, 584, 2631,
  /* 28736 */ 584, 584, 584, 584, 293, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 774, 0, 2635, 584, 584, 584,
  /* 28762 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 584, 584, 2688, 584, 584, 584, 584,
  /* 28783 */ 538, 584, 560, 538, 538, 538, 538, 560, 560, 560, 560, 584, 584, 584, 584, 2015, 0, 3462, 538, 3464, 538,
  /* 28804 */ 538, 3466, 538, 560, 560, 560, 560, 560, 560, 560, 560, 3475, 560, 3477, 560, 560, 3479, 560, 560, 584,
  /* 28824 */ 584, 584, 584, 584, 584, 584, 584, 3489, 584, 3491, 584, 584, 3493, 584, 584, 0, 0, 0, 0, 0, 0, 0, 538,
  /* 28847 */ 538, 538, 538, 538, 538, 3349, 538, 538, 0, 0, 0, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 0, 0,
  /* 28870 */ 0, 0, 0, 0, 0, 1142784, 0, 0, 0, 1142784, 0, 0, 0, 1142784, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28899 */ 0, 756, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1206, 1207, 0, 425, 433, 424, 433, 0, 315,
  /* 28927 */ 433, 447, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 482,
  /* 28948 */ 487, 487, 498, 487, 487, 487, 487, 487, 487, 487, 487, 513, 513, 526, 526, 527, 527, 527, 527, 527, 527,
  /* 28969 */ 527, 527, 513, 527, 527, 527, 513, 527, 527, 527, 527, 527, 527, 527, 527, 527, 541, 564, 541, 564, 541,
  /* 28990 */ 541, 564, 541, 541, 588, 564, 564, 564, 564, 564, 564, 541, 564, 564, 564, 588, 588, 588, 610, 588, 588,
  /* 29011 */ 588, 588, 588, 588, 588, 588, 611, 612, 612, 610, 612, 612, 611, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0,
  /* 29033 */ 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2949, 0, 0, 2951, 0, 0, 0, 0, 0, 0, 0, 1594, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29063 */ 2103, 0, 0, 0, 0, 0, 0, 0, 683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 367,
  /* 29094 */ 699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29127 */ 0, 0, 1245, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2997,
  /* 29152 */ 961, 560, 560, 560, 560, 560, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3317, 584, 584, 584,
  /* 29173 */ 584, 584, 584, 1036, 584, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29200 */ 1225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 774, 0, 0, 0, 1283, 538, 538, 1287, 538, 538, 1290, 538, 538,
  /* 29226 */ 538, 538, 538, 538, 538, 538, 538, 538, 2213, 538, 538, 538, 538, 0, 1383, 560, 560, 560, 560, 560, 560,
  /* 29247 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 0, 560, 560, 26018, 1349, 981, 584, 584, 1446, 584, 584,
  /* 29268 */ 1450, 584, 584, 584, 584, 584, 584, 1958, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2386, 584, 584,
  /* 29288 */ 584, 584, 584, 2391, 584, 584, 584, 1464, 584, 1469, 584, 584, 1473, 584, 584, 1476, 584, 584, 584, 584,
  /* 29308 */ 584, 584, 2888, 584, 584, 2891, 584, 584, 584, 584, 584, 584, 584, 3496, 3497, 0, 0, 0, 0, 0, 3503, 3504,
  /* 29330 */ 0, 0, 0, 0, 1577, 1578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1188, 1190, 0, 0, 0, 0, 0, 0, 0, 0, 1622, 0, 0, 0,
  /* 29360 */ 0, 0, 0, 0, 0, 0, 0, 0, 1227, 1257, 1258, 0, 1227, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0,
  /* 29389 */ 0, 0, 0, 0, 2418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694, 0, 0, 0, 0, 0, 0, 1742, 538, 538, 538, 538, 538,
  /* 29417 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1786, 1755, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 29438 */ 538, 538, 538, 538, 538, 538, 1803, 560, 560, 560, 1825, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 29458 */ 1837, 560, 560, 560, 560, 560, 2825, 560, 2826, 560, 560, 560, 560, 560, 560, 560, 560, 1428, 560, 560,
  /* 29478 */ 560, 560, 560, 560, 1438, 560, 560, 560, 1872, 1873, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 29498 */ 560, 560, 584, 3376, 584, 584, 1921, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1933, 584, 584, 584,
  /* 29518 */ 584, 584, 584, 1974, 584, 584, 584, 584, 584, 584, 1982, 584, 584, 1968, 1969, 584, 584, 584, 584, 584,
  /* 29538 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1984, 1985, 0, 2056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29564 */ 0, 787, 0, 2017, 0, 2019, 0, 2021, 0, 0, 0, 0, 0, 0, 2409, 0, 0, 0, 0, 0, 0, 0, 3344, 538, 538, 538, 538,
  /* 29591 */ 3348, 538, 538, 538, 0, 0, 0, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 0, 0, 0, 0, 2542, 538, 538,
  /* 29619 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2189, 0, 2737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29644 */ 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 2766, 0, 0, 2769, 0, 0, 0, 0, 0, 0, 0, 2773, 584, 2896, 584, 584, 584,
  /* 29672 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2000, 2001, 2933, 0, 0, 0, 0, 0, 0, 0, 2937, 0, 0,
  /* 29696 */ 0, 0, 0, 0, 0, 0, 3022848, 3215360, 0, 2695168, 0, 0, 3223552, 0, 538, 3012, 3013, 538, 538, 538, 538,
  /* 29717 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2216, 0, 3052, 560, 3054, 560, 560, 560, 560, 560, 560,
  /* 29738 */ 560, 560, 560, 560, 560, 560, 560, 560, 1901, 560, 584, 3094, 584, 3096, 584, 584, 584, 584, 584, 584,
  /* 29758 */ 584, 584, 584, 584, 584, 584, 1479, 1481, 584, 584, 584, 584, 3243, 584, 584, 584, 584, 538, 584, 560,
  /* 29778 */ 538, 538, 560, 560, 584, 584, 0, 2929, 0, 0, 0, 3449, 0, 0, 0, 0, 0, 0, 0, 538, 3456, 538, 3457, 538, 538,
  /* 29803 */ 538, 3461, 584, 584, 3610, 0, 538, 538, 560, 560, 584, 584, 538, 560, 584, 538, 560, 584, 0, 0, 0, 0, 0,
  /* 29826 */ 0, 0, 0, 3142, 0, 0, 0, 0, 3401, 326, 326, 376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1586, 0, 0, 0, 0,
  /* 29856 */ 376, 0, 435, 441, 0, 448, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 29878 */ 462, 462, 462, 488, 488, 499, 488, 488, 488, 488, 488, 488, 488, 488, 514, 514, 514, 514, 514, 514, 514,
  /* 29899 */ 514, 514, 514, 514, 514, 514, 514, 514, 514, 542, 565, 542, 565, 542, 542, 565, 542, 542, 589, 565, 565,
  /* 29920 */ 565, 565, 565, 565, 542, 565, 565, 565, 589, 589, 589, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301,
  /* 29943 */ 302, 0, 0, 0, 0, 0, 0, 2974, 2975, 0, 0, 0, 0, 2980, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29973 */ 367, 0, 258048, 0, 0, 0, 0, 542, 589, 589, 589, 589, 589, 589, 589, 589, 589, 565, 565, 542, 565, 565,
  /* 29995 */ 589, 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2413, 0, 0, 791,
  /* 30027 */ 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2148, 538, 538, 863, 538, 538, 538, 538,
  /* 30050 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 560, 560, 1012, 584, 584, 584, 584,
  /* 30071 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 3543, 0, 538, 538, 0, 0, 0, 1107, 0, 0, 0, 0,
  /* 30097 */ 0, 0, 0, 0, 0, 1116, 0, 1118, 1119, 0, 0, 0, 1121, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 0,
  /* 30126 */ 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2438, 1232, 0, 1188, 0, 1107, 0, 1238, 0, 0, 0, 0,
  /* 30155 */ 0, 1122, 0, 0, 0, 0, 0, 0, 0, 1142784, 0, 367, 0, 0, 0, 1142784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30185 */ 225711, 0, 0, 0, 1221, 0, 0, 0, 1253, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30215 */ 0, 0, 0, 0, 2055, 538, 538, 538, 1288, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 30237 */ 3008, 538, 538, 538, 1301, 538, 538, 538, 538, 538, 538, 538, 538, 1311, 538, 538, 1313, 538, 538, 538,
  /* 30257 */ 538, 538, 538, 3016, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3005, 538, 538, 538, 538, 538, 538,
  /* 30278 */ 1317, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 0, 2221, 538, 538, 1341, 538,
  /* 30299 */ 538, 538, 538, 538, 1349, 906, 560, 560, 1354, 560, 560, 560, 560, 560, 1874, 560, 560, 1877, 560, 560,
  /* 30319 */ 560, 560, 560, 560, 560, 560, 2852, 560, 560, 560, 560, 560, 560, 560, 560, 2863, 560, 560, 2866, 560,
  /* 30339 */ 560, 2869, 560, 560, 560, 26018, 1349, 981, 584, 584, 1447, 584, 584, 584, 584, 584, 584, 584, 584, 1038,
  /* 30359 */ 584, 584, 584, 584, 584, 0, 0, 584, 584, 1499, 584, 584, 584, 1503, 584, 584, 584, 584, 584, 584, 584,
  /* 30380 */ 584, 584, 584, 3327, 584, 538, 538, 560, 560, 1618, 1619, 1620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30405 */ 1631, 0, 0, 1787, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2217, 2021,
  /* 30426 */ 0, 0, 0, 0, 0, 2024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 350, 538, 538, 2151, 538, 538, 538,
  /* 30454 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2559, 0, 538, 538, 2167, 538, 538, 538, 538, 538,
  /* 30475 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 3173, 538, 0, 0, 0, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 30497 */ 560, 2232, 560, 560, 560, 560, 560, 1891, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 30517 */ 2867, 560, 560, 560, 560, 2236, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 30538 */ 2276, 560, 2252, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2304, 0, 0, 0,
  /* 30560 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2319, 584, 584, 584, 0, 538, 538, 560, 560, 584, 584, 3614,
  /* 30581 */ 3615, 3616, 538, 560, 584, 584, 2323, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 30601 */ 584, 2362, 584, 584, 2339, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2390,
  /* 30621 */ 538, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 560, 2563, 560, 2564, 560, 560, 560, 560,
  /* 30648 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 2262, 560, 560, 560, 560, 560, 2604, 560, 560, 560, 560, 560,
  /* 30669 */ 560, 560, 560, 560, 560, 560, 560, 560, 2288, 2289, 2290, 2625, 0, 0, 0, 0, 584, 584, 584, 2629, 584,
  /* 30690 */ 2630, 584, 584, 584, 584, 584, 584, 2329, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3087, 584,
  /* 30710 */ 584, 584, 584, 584, 538, 538, 538, 2791, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 30731 */ 3415, 560, 560, 560, 560, 560, 2838, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 30751 */ 2571, 560, 560, 2858, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 584,
  /* 30772 */ 584, 584, 584, 584, 2907, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3105, 584,
  /* 30793 */ 584, 584, 584, 3244, 584, 584, 584, 538, 584, 560, 538, 538, 560, 560, 584, 584, 2928, 0, 0, 2931, 2932,
  /* 30814 */ 560, 560, 560, 560, 3422, 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 584, 3561, 584, 3562, 584,
  /* 30834 */ 584, 584, 584, 538, 3463, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 30855 */ 560, 560, 560, 3476, 560, 560, 560, 560, 560, 560, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3079,
  /* 30876 */ 3490, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 3274, 538, 538, 538,
  /* 30899 */ 328, 329, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1647, 0, 0, 0, 0, 0, 327, 375, 330, 374, 0, 0, 0, 0,
  /* 30929 */ 0, 0, 0, 0, 0, 367, 0, 307, 0, 0, 0, 0, 327, 0, 0, 374, 374, 404, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 799,
  /* 30958 */ 538, 538, 843, 538, 538, 538, 538, 0, 0, 0, 329, 0, 0, 0, 449, 463, 463, 463, 463, 463, 463, 463, 463,
  /* 30981 */ 476, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 489, 489, 463, 489, 489, 504, 506, 489,
  /* 31002 */ 489, 504, 489, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 530, 515, 515, 515, 530, 515, 515,
  /* 31023 */ 515, 515, 515, 515, 515, 515, 515, 543, 566, 543, 566, 543, 543, 566, 543, 543, 590, 566, 566, 566, 566,
  /* 31044 */ 566, 566, 543, 566, 566, 566, 590, 590, 590, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 31067 */ 0, 0, 0, 0, 0, 3127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 543, 590, 590, 590, 590, 590, 590,
  /* 31096 */ 590, 590, 590, 566, 566, 543, 566, 566, 590, 667, 668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 681, 682, 0,
  /* 31122 */ 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 1103, 0, 0, 715, 0, 717, 0, 0, 0, 0, 0,
  /* 31153 */ 0, 724, 0, 0, 0, 728, 0, 0, 760, 0, 0, 0, 766, 767, 0, 0, 0, 0, 0, 775, 0, 777, 0, 0, 0, 0, 0, 826, 0, 0,
  /* 31183 */ 0, 0, 0, 0, 0, 0, 827, 538, 538, 538, 538, 848, 538, 856, 0, 794, 0, 797, 0, 0, 0, 0, 794, 797, 0, 0, 0,
  /* 31210 */ 797, 797, 794, 797, 0, 704, 0, 0, 814, 0, 0, 0, 0, 0, 814, 814, 817, 0, 0, 0, 0, 0, 0, 3256, 0, 0, 0, 0,
  /* 31238 */ 0, 0, 0, 0, 0, 660, 0, 0, 663, 664, 0, 0, 0, 0, 0, 826, 0, 775, 806, 826, 0, 538, 538, 841, 538, 847, 538,
  /* 31265 */ 538, 538, 538, 538, 538, 3167, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2550, 538, 538, 538, 538,
  /* 31286 */ 538, 860, 538, 538, 871, 538, 877, 538, 538, 885, 888, 893, 538, 901, 538, 538, 560, 560, 560, 3291, 560,
  /* 31307 */ 560, 560, 3294, 560, 560, 560, 560, 560, 560, 2256, 560, 560, 2259, 560, 560, 560, 560, 560, 560, 2268,
  /* 31327 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2622, 560, 560, 560, 560, 0, 560, 560, 915, 560, 921,
  /* 31348 */ 560, 560, 934, 560, 560, 945, 560, 951, 560, 560, 959, 962, 967, 560, 975, 560, 560, 0, 584, 584, 584,
  /* 31369 */ 990, 584, 996, 584, 584, 1009, 584, 584, 1020, 584, 1026, 584, 584, 1034, 1037, 1042, 584, 1050, 584, 584,
  /* 31389 */ 0, 0, 0, 3332, 0, 0, 3335, 0, 0, 0, 0, 3142, 0, 0, 0, 538, 584, 560, 841, 538, 1060, 893, 538, 915, 560,
  /* 31414 */ 1065, 967, 560, 0, 990, 584, 1070, 1042, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1256, 0, 0, 0, 0,
  /* 31440 */ 0, 1104, 0, 0, 0, 0, 0, 0, 0, 1111, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 1136,
  /* 31471 */ 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 738, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0,
  /* 31503 */ 0, 0, 0, 0, 1582, 0, 0, 0, 0, 0, 0, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 538, 1284,
  /* 31533 */ 538, 538, 538, 1289, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3172, 538, 538, 538, 538, 538,
  /* 31554 */ 538, 538, 1304, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1298, 538, 538, 538, 538, 538,
  /* 31575 */ 538, 1319, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1335, 538, 538, 538, 538, 538, 2208, 538,
  /* 31595 */ 2210, 538, 538, 538, 538, 538, 538, 538, 0, 0, 0, 0, 0, 2456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
  /* 31623 */ 0, 0, 560, 560, 26018, 1349, 981, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1455, 584, 584, 584,
  /* 31644 */ 1521, 584, 584, 584, 584, 584, 584, 1531, 584, 584, 0, 538, 584, 560, 538, 538, 538, 538, 538, 560, 560,
  /* 31665 */ 560, 560, 560, 0, 584, 0, 1574, 0, 1576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 0, 1589, 0, 0, 0,
  /* 31694 */ 0, 0, 0, 0, 0, 1595, 0, 0, 1598, 1599, 1600, 0, 0, 0, 0, 0, 2466, 2467, 0, 0, 2470, 0, 0, 2473, 0, 0, 0,
  /* 31721 */ 0, 0, 0, 0, 2928640, 0, 0, 0, 0, 0, 0, 0, 2736128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 1602,
  /* 31751 */ 1603, 0, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 301, 0, 0, 0, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 1641,
  /* 31781 */ 1642, 0, 0, 0, 0, 0, 0, 0, 349, 0, 407, 0, 0, 0, 0, 0, 407, 0, 1651, 1652, 0, 0, 0, 0, 0, 0, 0, 0, 1658,
  /* 31810 */ 0, 0, 1660, 0, 0, 0, 0, 0, 2481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 1663,
  /* 31840 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1597, 0, 0, 0, 0, 0, 1700, 0, 0, 0, 1704, 1705, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31871 */ 0, 367, 302, 0, 0, 0, 0, 0, 0, 0, 0, 1696, 0, 0, 0, 1716, 1576, 1576, 1718, 538, 1720, 538, 1721, 1722,
  /* 31895 */ 538, 1724, 538, 538, 538, 1728, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1741, 538, 538, 538, 538,
  /* 31915 */ 1745, 538, 538, 538, 538, 1749, 538, 1751, 538, 538, 538, 538, 538, 538, 538, 3468, 560, 560, 560, 560,
  /* 31935 */ 560, 560, 560, 560, 1831, 560, 560, 560, 560, 560, 560, 560, 538, 538, 538, 538, 1759, 1760, 1762, 538,
  /* 31955 */ 538, 538, 538, 538, 538, 538, 538, 1770, 1771, 1772, 538, 538, 1775, 1776, 538, 538, 538, 538, 538, 538,
  /* 31975 */ 538, 1784, 538, 538, 538, 538, 538, 538, 3178, 538, 3180, 538, 538, 538, 538, 538, 538, 538, 538, 2507,
  /* 31995 */ 538, 538, 2510, 2511, 538, 538, 538, 538, 1788, 538, 538, 538, 538, 538, 538, 538, 1796, 538, 538, 538,
  /* 32015 */ 538, 538, 538, 538, 1328, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2508, 538, 538, 538, 538, 538,
  /* 32035 */ 2513, 538, 538, 538, 1807, 1349, 0, 1812, 560, 1814, 560, 1815, 560, 1817, 560, 1819, 560, 538, 538, 538,
  /* 32055 */ 538, 560, 560, 560, 560, 584, 584, 584, 584, 1550, 2015, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32081 */ 0, 752, 0, 0, 0, 0, 0, 560, 560, 1823, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1836, 560, 560, 560,
  /* 32104 */ 560, 560, 2241, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3430, 560, 584, 584, 560,
  /* 32124 */ 1840, 560, 560, 560, 560, 1844, 560, 1846, 560, 560, 560, 560, 560, 560, 560, 560, 3214, 560, 560, 560,
  /* 32144 */ 560, 584, 584, 584, 560, 1854, 1855, 1857, 560, 560, 560, 560, 560, 560, 560, 560, 1865, 1866, 1867, 560,
  /* 32164 */ 538, 538, 538, 2006, 560, 560, 560, 2010, 584, 584, 584, 2014, 0, 2015, 0, 0, 0, 0, 0, 2441, 0, 0, 0, 0,
  /* 32188 */ 0, 0, 0, 0, 0, 0, 2131, 0, 0, 0, 0, 0, 560, 1870, 1871, 560, 560, 560, 560, 560, 560, 560, 1879, 560, 560,
  /* 32213 */ 560, 1883, 560, 538, 1538, 538, 538, 1541, 560, 1542, 560, 560, 1545, 584, 1546, 584, 584, 1549, 1903,
  /* 32232 */ 26018, 0, 1908, 584, 1910, 584, 1911, 584, 1913, 584, 1915, 584, 584, 584, 1919, 584, 584, 584, 1940, 584,
  /* 32252 */ 1942, 584, 584, 584, 584, 584, 584, 584, 584, 1950, 1951, 1953, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 32272 */ 1961, 1962, 1963, 584, 584, 1966, 1967, 584, 584, 584, 1988, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 32292 */ 1999, 538, 584, 584, 584, 584, 584, 584, 584, 584, 584, 560, 560, 538, 560, 560, 584, 0, 0, 0, 0, 0, 0, 0,
  /* 32316 */ 0, 3142, 0, 0, 0, 0, 538, 538, 3593, 3594, 538, 538, 560, 560, 3597, 3598, 560, 560, 584, 584, 584, 584,
  /* 32338 */ 0, 0, 0, 2703, 0, 0, 2706, 2707, 0, 0, 2710, 560, 1776, 538, 2005, 538, 1871, 560, 2009, 560, 1967, 584,
  /* 32360 */ 2013, 584, 0, 2015, 0, 0, 0, 0, 0, 2493, 0, 0, 0, 0, 538, 2497, 538, 538, 538, 538, 538, 538, 879, 538,
  /* 32384 */ 538, 538, 538, 538, 538, 538, 538, 560, 3469, 560, 3470, 560, 560, 560, 3474, 560, 2021, 0, 0, 0, 0, 0, 0,
  /* 32407 */ 0, 0, 0, 0, 2028, 0, 0, 2031, 2032, 0, 0, 0, 2036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 0, 0, 0, 0,
  /* 32437 */ 0, 0, 0, 2059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 2098, 0, 0, 0, 0, 0, 0, 2105,
  /* 32468 */ 0, 2107, 0, 0, 0, 0, 0, 0, 0, 1142784, 1142784, 0, 0, 1142784, 0, 0, 1142784, 0, 0, 1142784, 1142784, 0,
  /* 32490 */ 0, 0, 0, 0, 0, 1143392, 1143392, 1143392, 1143392, 0, 0, 2032, 0, 2126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32515 */ 1629, 0, 0, 0, 0, 0, 0, 2137, 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 32539 */ 538, 0, 0, 538, 538, 538, 538, 2153, 538, 2155, 538, 538, 538, 538, 538, 538, 2163, 538, 2165, 2190, 2191,
  /* 32560 */ 538, 538, 538, 538, 538, 538, 2198, 538, 538, 538, 538, 538, 538, 538, 538, 2217, 2559, 0, 0, 0, 0, 560,
  /* 32582 */ 560, 560, 560, 560, 2238, 560, 2240, 560, 560, 560, 560, 560, 560, 2248, 560, 2250, 560, 560, 560, 560,
  /* 32602 */ 1404, 560, 560, 1406, 560, 560, 560, 1410, 560, 560, 560, 560, 560, 560, 3481, 584, 584, 584, 584, 584,
  /* 32622 */ 584, 584, 584, 584, 2344, 584, 584, 584, 584, 584, 584, 584, 584, 1960, 584, 584, 584, 584, 584, 584, 584,
  /* 32643 */ 2277, 560, 560, 560, 560, 560, 560, 2284, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2843, 560, 560,
  /* 32663 */ 560, 560, 560, 560, 584, 584, 584, 2325, 584, 2327, 584, 584, 584, 584, 584, 584, 2335, 584, 2337, 584,
  /* 32683 */ 584, 584, 584, 2381, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 584, 560, 3115, 538, 3117,
  /* 32703 */ 560, 3119, 584, 0, 2364, 584, 584, 584, 584, 584, 584, 2371, 584, 584, 584, 584, 584, 584, 584, 584, 1041,
  /* 32724 */ 584, 584, 584, 584, 584, 0, 0, 2327, 2240, 538, 2395, 538, 538, 560, 2399, 560, 560, 584, 2403, 584, 584,
  /* 32745 */ 2015, 0, 0, 0, 0, 0, 2767, 2768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 341, 295, 0, 0, 0, 0, 0, 0, 0, 0, 2431,
  /* 32774 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 2440, 0, 0, 0, 0, 0, 2445, 0, 2447, 2448, 0,
  /* 32804 */ 0, 0, 0, 0, 0, 0, 1167360, 0, 1167360, 0, 0, 0, 0, 1167360, 0, 1167360, 1167360, 1167360, 1167360,
  /* 32823 */ 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360,
  /* 32834 */ 1167360, 0, 0, 0, 0, 0, 0, 0, 2463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2735, 0, 0, 2478, 0, 0,
  /* 32864 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2489, 2447, 0, 0, 0, 0, 0, 2494, 0, 0, 0, 538, 538, 538, 538, 538, 538, 538,
  /* 32892 */ 538, 1268, 538, 538, 538, 1277, 538, 538, 538, 2503, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 32912 */ 538, 538, 538, 538, 904, 560, 538, 2515, 538, 2517, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 32933 */ 538, 1334, 538, 538, 538, 560, 2601, 560, 560, 560, 2606, 560, 560, 560, 560, 560, 560, 560, 2613, 560,
  /* 32953 */ 560, 560, 560, 560, 2851, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2846, 560, 560, 560,
  /* 32974 */ 2625, 0, 0, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 2633, 584, 584, 584, 584, 584, 2638, 584, 584,
  /* 32996 */ 584, 584, 584, 2643, 584, 584, 584, 584, 584, 1028, 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0,
  /* 33019 */ 3501, 0, 538, 538, 584, 584, 584, 2663, 584, 584, 584, 584, 2667, 584, 584, 584, 2672, 584, 584, 584, 0,
  /* 33040 */ 538, 3611, 560, 3612, 584, 3613, 538, 560, 584, 538, 560, 584, 0, 0, 0, 0, 2740, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33065 */ 0, 0, 0, 1668, 0, 0, 0, 0, 2789, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 33088 */ 538, 2218, 538, 2802, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2808, 538, 538, 538, 538,
  /* 33108 */ 538, 538, 3357, 538, 538, 3359, 560, 560, 560, 560, 3363, 560, 2836, 560, 560, 560, 560, 560, 560, 560,
  /* 33128 */ 560, 560, 560, 560, 560, 560, 560, 560, 1400, 560, 2849, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 33149 */ 560, 560, 2856, 560, 560, 560, 560, 1424, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 33170 */ 3308, 560, 584, 584, 584, 2885, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 33190 */ 3448, 0, 584, 584, 584, 2898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1534, 0, 1277,
  /* 33211 */ 1463, 2905, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1517, 0, 2946, 0,
  /* 33232 */ 0, 0, 0, 0, 0, 0, 0, 0, 2953, 2954, 0, 2955, 0, 0, 0, 0, 0, 2973, 0, 0, 0, 0, 2978, 2979, 0, 2981, 0, 0,
  /* 33260 */ 0, 0, 0, 0, 114688, 0, 241664, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 0, 0, 0, 2079, 0, 0, 0, 2957, 0,
  /* 33287 */ 0, 0, 0, 2959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1596, 0, 0, 0, 0, 0, 2984, 0, 0, 0, 2987, 538, 538, 538, 538,
  /* 33316 */ 538, 538, 2994, 538, 538, 538, 538, 538, 538, 538, 3550, 3551, 538, 560, 560, 560, 560, 560, 560, 2567,
  /* 33336 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2611, 560, 560, 560, 560, 560, 538, 2998, 538, 538, 538,
  /* 33357 */ 538, 538, 538, 538, 3004, 538, 538, 538, 538, 538, 3010, 538, 3026, 3027, 538, 560, 560, 560, 560, 560,
  /* 33377 */ 560, 3034, 560, 560, 560, 560, 560, 560, 2607, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2300,
  /* 33397 */ 560, 560, 560, 560, 0, 3038, 560, 560, 560, 560, 560, 560, 560, 3044, 560, 560, 560, 560, 560, 3050, 560,
  /* 33418 */ 560, 560, 560, 1425, 560, 560, 560, 560, 560, 560, 560, 560, 1436, 1437, 560, 560, 560, 560, 1826, 1827,
  /* 33438 */ 560, 560, 560, 560, 1834, 560, 560, 560, 560, 560, 560, 2841, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 33459 */ 1847, 560, 560, 560, 560, 560, 560, 560, 3053, 560, 560, 560, 560, 560, 560, 560, 560, 3060, 3062, 560,
  /* 33479 */ 560, 560, 560, 560, 560, 3525, 560, 560, 584, 584, 584, 584, 584, 584, 584, 2653, 584, 584, 584, 584, 584,
  /* 33500 */ 584, 584, 584, 2666, 584, 584, 584, 584, 584, 584, 2674, 584, 3066, 560, 3068, 3069, 560, 584, 584, 584,
  /* 33520 */ 584, 584, 584, 3076, 584, 584, 584, 584, 584, 584, 3083, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 33541 */ 3101, 584, 3103, 584, 584, 584, 584, 3080, 584, 584, 584, 584, 584, 584, 584, 3086, 584, 584, 584, 584,
  /* 33561 */ 584, 3092, 584, 584, 3095, 584, 584, 584, 584, 584, 584, 584, 584, 3102, 3104, 584, 584, 584, 584, 584,
  /* 33581 */ 1524, 584, 584, 584, 584, 584, 584, 584, 0, 1276, 1462, 584, 3108, 584, 3110, 3111, 584, 538, 584, 560,
  /* 33601 */ 538, 3116, 560, 3118, 584, 3120, 0, 0, 0, 0, 0, 2988, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 33623 */ 896, 538, 538, 538, 538, 560, 538, 538, 538, 538, 3177, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 33644 */ 538, 2186, 538, 538, 538, 538, 3218, 584, 584, 584, 584, 584, 584, 584, 3223, 584, 584, 584, 584, 584,
  /* 33664 */ 584, 584, 1504, 584, 584, 584, 584, 584, 584, 584, 1518, 3242, 584, 584, 584, 584, 584, 584, 538, 584,
  /* 33684 */ 560, 538, 538, 560, 560, 584, 584, 584, 584, 0, 0, 2702, 0, 0, 0, 0, 0, 0, 0, 0, 1693, 0, 0, 1696, 0, 0,
  /* 33710 */ 0, 0, 0, 0, 0, 3261, 0, 3142, 3263, 0, 0, 3266, 0, 0, 0, 0, 0, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 689,
  /* 33739 */ 538, 538, 842, 846, 849, 538, 857, 3351, 538, 538, 538, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560,
  /* 33760 */ 560, 560, 560, 560, 560, 560, 3366, 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 584, 584, 584, 584,
  /* 33781 */ 584, 584, 584, 0, 3505, 538, 538, 538, 3508, 538, 3510, 538, 538, 538, 538, 3515, 3516, 3517, 560, 560,
  /* 33801 */ 560, 560, 560, 3041, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2855, 560, 560, 560, 560,
  /* 33822 */ 3520, 560, 3522, 560, 560, 560, 560, 3527, 3528, 3529, 3530, 584, 584, 584, 3533, 584, 3535, 584, 584,
  /* 33841 */ 584, 584, 3540, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 3346, 538, 538, 538, 538, 3350, 560, 3578, 560, 560,
  /* 33864 */ 560, 3582, 560, 584, 584, 3584, 584, 584, 584, 3588, 584, 0, 0, 0, 0, 0, 3126, 0, 0, 3129, 0, 0, 0, 0, 0,
  /* 33889 */ 0, 0, 380, 0, 383, 0, 0, 0, 383, 0, 0, 0, 0, 0, 331, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 0, 0,
  /* 33920 */ 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 371, 0, 0, 0, 379, 381, 0, 0, 0, 0,
  /* 33952 */ 0, 0, 0, 399, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 414, 0, 0, 0, 414, 69632, 73728, 0, 371, 371, 0, 426, 65536,
  /* 33979 */ 371, 0, 0, 371, 426, 496, 500, 496, 496, 505, 496, 496, 496, 505, 496, 426, 426, 332, 426, 0, 0, 426, 426,
  /* 34002 */ 0, 0, 0, 0, 0, 0, 0, 0, 1178, 1178, 0, 0, 0, 1182, 1660, 0, 426, 426, 426, 426, 426, 426, 426, 426, 426,
  /* 34027 */ 426, 426, 426, 426, 426, 426, 426, 544, 567, 544, 567, 544, 544, 567, 544, 544, 591, 567, 567, 567, 567,
  /* 34048 */ 567, 567, 544, 567, 567, 567, 591, 591, 591, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 34071 */ 0, 0, 0, 0, 0, 1155072, 0, 1155072, 0, 0, 0, 0, 0, 0, 0, 1092, 1215, 0, 0, 0, 0, 0, 0, 1222, 544, 591,
  /* 34097 */ 591, 591, 591, 591, 591, 591, 591, 591, 567, 567, 544, 567, 567, 591, 773, 0, 0, 0, 0, 0, 0, 0, 0, 538,
  /* 34121 */ 834, 538, 538, 538, 538, 538, 538, 538, 2548, 538, 538, 538, 538, 538, 538, 538, 2553, 538, 864, 538, 538,
  /* 34142 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 560, 3360, 560, 560, 3362, 560, 560, 560, 907, 560,
  /* 34163 */ 560, 560, 560, 560, 560, 938, 560, 560, 560, 560, 560, 560, 560, 560, 3372, 560, 560, 560, 3375, 584, 584,
  /* 34184 */ 584, 1013, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 538, 538, 538,
  /* 34206 */ 538, 538, 538, 538, 560, 560, 560, 560, 3471, 560, 560, 560, 560, 0, 0, 0, 1235, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34231 */ 0, 0, 0, 0, 1173, 0, 0, 0, 560, 560, 1360, 560, 560, 560, 560, 560, 1372, 560, 560, 560, 560, 560, 560,
  /* 34254 */ 560, 1366, 1373, 560, 560, 560, 560, 560, 560, 560, 1367, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 34274 */ 3045, 560, 560, 560, 560, 560, 560, 560, 560, 26018, 1349, 981, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 34294 */ 1453, 584, 584, 584, 584, 584, 2887, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1946, 584, 584,
  /* 34314 */ 584, 584, 584, 584, 584, 584, 1465, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1934, 584,
  /* 34335 */ 584, 584, 0, 0, 1701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1697, 0, 0, 538, 538, 538, 2545, 538, 538,
  /* 34362 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1752, 538, 538, 538, 2676, 584, 584, 584, 584, 584, 584,
  /* 34383 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2351, 427, 427, 0, 427, 436, 0, 427, 427, 464, 464, 464, 464,
  /* 34405 */ 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 490, 490, 464, 490, 490, 490,
  /* 34426 */ 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
  /* 34447 */ 490, 545, 568, 545, 568, 545, 545, 568, 545, 545, 592, 568, 568, 568, 568, 568, 568, 545, 568, 568, 568,
  /* 34468 */ 592, 592, 592, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 1167360, 419,
  /* 34492 */ 419, 0, 0, 0, 0, 0, 419, 0, 545, 592, 592, 592, 592, 592, 592, 592, 592, 592, 568, 568, 545, 568, 568,
  /* 34515 */ 592, 584, 584, 584, 584, 78117, 1073, 0, 0, 1076, 1080, 0, 0, 1084, 1088, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0,
  /* 34540 */ 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 560, 26018, 1906, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 34565 */ 584, 584, 584, 1053, 0, 0, 0, 0, 0, 2093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 2136, 0,
  /* 34594 */ 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1282, 538, 2180, 538, 538,
  /* 34615 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1314, 538, 2265, 560, 560, 560, 560, 560, 560,
  /* 34636 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 1838, 2352, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 34657 */ 584, 584, 584, 584, 584, 2363, 0, 0, 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1710, 0, 0, 0, 0, 2738,
  /* 34685 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2041, 0, 2042, 538, 538, 2813, 538, 538, 538, 538, 538, 538, 538,
  /* 34711 */ 538, 538, 538, 538, 0, 0, 2221, 0, 0, 0, 560, 560, 560, 560, 560, 2861, 560, 560, 560, 560, 560, 560, 560,
  /* 34734 */ 560, 560, 560, 560, 560, 560, 2585, 560, 560, 0, 0, 0, 2948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1219, 0,
  /* 34761 */ 0, 0, 0, 0, 2958, 0, 0, 0, 0, 0, 2961, 0, 2963, 0, 0, 2966, 0, 0, 0, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34792 */ 0, 1612, 0, 0, 1615, 0, 1617, 0, 0, 0, 2971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1585, 0, 0, 0, 538, 538,
  /* 34821 */ 538, 538, 3014, 538, 538, 538, 538, 538, 538, 538, 538, 3022, 538, 538, 538, 538, 538, 1307, 538, 538,
  /* 34841 */ 538, 538, 538, 538, 538, 538, 538, 538, 1781, 538, 538, 538, 538, 538, 3025, 538, 538, 538, 3028, 560,
  /* 34861 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1411, 560, 560, 560, 560, 560, 560, 560, 3055, 560,
  /* 34882 */ 560, 560, 560, 560, 560, 560, 560, 560, 3064, 560, 560, 560, 560, 1859, 560, 560, 560, 560, 560, 560, 560,
  /* 34903 */ 560, 560, 560, 560, 560, 1434, 560, 560, 560, 560, 3067, 560, 560, 560, 3070, 584, 584, 584, 584, 584,
  /* 34923 */ 584, 584, 584, 584, 584, 2333, 584, 584, 584, 584, 584, 584, 584, 3109, 584, 584, 584, 538, 584, 560, 538,
  /* 34944 */ 538, 560, 560, 584, 584, 0, 0, 0, 0, 0, 560, 3208, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 34967 */ 584, 584, 3217, 3229, 584, 584, 584, 584, 584, 584, 584, 584, 3235, 584, 3237, 584, 584, 584, 584, 584,
  /* 34987 */ 584, 3084, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1507, 584, 584, 584, 584, 584, 584, 3269, 0, 0, 0,
  /* 35009 */ 0, 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3279, 538, 538, 538, 538, 538, 538,
  /* 35031 */ 538, 538, 3285, 538, 538, 538, 538, 538, 538, 538, 2558, 0, 0, 0, 0, 0, 0, 560, 560, 560, 560, 560, 560,
  /* 35054 */ 560, 560, 560, 560, 2233, 560, 560, 584, 584, 584, 3322, 584, 584, 584, 584, 584, 584, 584, 584, 538, 538,
  /* 35075 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3298, 560, 560, 3601, 3602, 584, 584, 0, 0, 0, 538,
  /* 35097 */ 538, 538, 538, 560, 560, 560, 560, 584, 0, 0, 0, 0, 0, 0, 0, 0, 3142, 0, 3398, 0, 3400, 538, 305, 306, 0,
  /* 35122 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 647, 0, 0, 0, 0, 0, 0, 0, 2465792, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 309, 0, 0,
  /* 35153 */ 0, 0, 0, 0, 0, 0, 0, 687, 688, 0, 0, 0, 0, 693, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
  /* 35184 */ 0, 0, 712, 560, 560, 560, 919, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2598, 560,
  /* 35206 */ 560, 0, 845, 994, 919, 538, 538, 538, 538, 902, 560, 560, 560, 560, 976, 0, 584, 584, 584, 584, 2637, 584,
  /* 35228 */ 584, 2640, 2641, 584, 584, 584, 584, 584, 2646, 584, 584, 584, 584, 2651, 584, 584, 584, 2654, 584, 584,
  /* 35248 */ 2656, 584, 2657, 584, 584, 584, 584, 2368, 584, 584, 584, 584, 584, 584, 2373, 584, 584, 584, 584, 584,
  /* 35268 */ 584, 3383, 584, 3385, 584, 584, 584, 584, 584, 584, 538, 584, 584, 584, 1051, 78117, 1073, 0, 0, 0, 0, 0,
  /* 35290 */ 0, 0, 0, 0, 0, 2039, 0, 2040, 0, 0, 0, 1419, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 35314 */ 560, 560, 560, 1852, 0, 0, 0, 1690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 0, 538, 538, 1806,
  /* 35341 */ 538, 1349, 0, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3307, 560, 560, 584, 538, 2150,
  /* 35362 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1336, 538, 2235, 560, 560, 560, 560,
  /* 35383 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1868, 2322, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 35404 */ 584, 584, 584, 584, 584, 584, 584, 2659, 560, 2616, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 35425 */ 560, 560, 0, 584, 584, 584, 584, 584, 584, 1003, 584, 584, 0, 0, 0, 0, 3270, 0, 0, 538, 538, 538, 538,
  /* 35448 */ 538, 538, 538, 538, 538, 538, 538, 538, 1275, 538, 538, 3289, 538, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 35469 */ 560, 560, 560, 560, 560, 560, 560, 2305, 465, 465, 483, 491, 491, 483, 491, 491, 491, 491, 491, 491, 491,
  /* 35490 */ 491, 516, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 531, 524, 524, 524, 531, 524, 524, 524,
  /* 35511 */ 524, 524, 524, 524, 524, 524, 546, 569, 546, 569, 546, 546, 569, 546, 546, 593, 569, 569, 569, 569, 569,
  /* 35532 */ 569, 546, 569, 569, 569, 593, 593, 593, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0,
  /* 35556 */ 0, 0, 333, 334, 335, 0, 0, 0, 0, 0, 0, 0, 0, 1626, 0, 1628, 0, 0, 0, 1632, 0, 546, 593, 593, 593, 593,
  /* 35582 */ 593, 593, 593, 593, 593, 569, 569, 546, 569, 569, 593, 0, 0, 761, 0, 0, 764, 0, 0, 768, 0, 0, 0, 0, 0, 0,
  /* 35608 */ 0, 454, 1155544, 1155544, 1155544, 1155544, 1155544, 1155544, 1155544, 1155544, 1155544, 1155544, 1155544,
  /* 35621 */ 1155544, 1155544, 1155544, 1155544, 1155544, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 809, 0,
  /* 35644 */ 0, 0, 0, 0, 809, 809, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 827, 782, 0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
  /* 35673 */ 2666496, 0, 2818048, 0, 0, 0, 0, 2379776, 0, 584, 584, 1071, 1052, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35697 */ 0, 2077, 0, 0, 0, 0, 0, 0, 1133, 1134, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
  /* 35727 */ 0, 0, 538, 1339, 538, 538, 538, 1346, 538, 538, 1349, 906, 560, 560, 560, 560, 560, 560, 560, 3560, 584,
  /* 35748 */ 584, 584, 584, 584, 584, 584, 584, 1931, 584, 584, 584, 584, 584, 584, 584, 1384, 560, 560, 560, 560, 560,
  /* 35769 */ 560, 560, 1392, 560, 560, 560, 560, 560, 560, 560, 1368, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 35789 */ 3059, 560, 3061, 560, 560, 560, 560, 560, 560, 1422, 560, 560, 1426, 560, 560, 560, 560, 560, 1432, 560,
  /* 35809 */ 560, 560, 1439, 584, 1458, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1477, 584, 584, 584, 584, 584,
  /* 35829 */ 584, 3112, 3113, 3114, 538, 538, 560, 560, 584, 584, 0, 584, 584, 584, 1485, 584, 584, 584, 584, 584, 584,
  /* 35850 */ 584, 584, 584, 584, 584, 584, 1948, 584, 584, 584, 1519, 584, 584, 584, 584, 584, 1525, 584, 584, 584,
  /* 35870 */ 1532, 584, 584, 0, 538, 584, 560, 538, 538, 538, 896, 538, 560, 560, 560, 970, 560, 0, 584, 0, 0, 1604, 0,
  /* 35893 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2053, 0, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1646, 0, 0, 0, 0,
  /* 35925 */ 0, 0, 0, 2920448, 0, 3215360, 2469888, 0, 0, 2723840, 0, 0, 1671, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35950 */ 0, 0, 1687, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 2147, 538, 538, 0, 1689, 0, 0, 0, 0, 0,
  /* 35976 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 0, 0, 1703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2964, 0, 0, 0, 0,
  /* 36008 */ 538, 538, 538, 1774, 538, 538, 538, 538, 538, 538, 538, 538, 1783, 538, 538, 538, 538, 538, 538, 2156,
  /* 36028 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2797, 2798, 538, 538, 538, 538, 538, 538, 538, 1791,
  /* 36048 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 1800, 1802, 538, 538, 538, 538, 538, 2519, 538, 538, 538,
  /* 36068 */ 538, 538, 538, 538, 538, 538, 538, 538, 3006, 538, 538, 538, 538, 1869, 560, 560, 560, 560, 560, 560, 560,
  /* 36089 */ 560, 1878, 560, 560, 560, 560, 560, 560, 560, 3583, 584, 584, 584, 584, 584, 584, 584, 0, 1886, 560, 560,
  /* 36110 */ 560, 560, 560, 560, 560, 560, 560, 1896, 1898, 560, 560, 560, 560, 560, 560, 3559, 584, 584, 584, 584,
  /* 36130 */ 584, 584, 584, 584, 584, 1977, 584, 584, 584, 584, 584, 584, 0, 0, 0, 2073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36156 */ 2081, 0, 0, 0, 0, 0, 3134, 3135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 845, 538, 538, 538, 0, 0, 0,
  /* 36183 */ 560, 560, 560, 560, 560, 560, 2229, 560, 560, 560, 560, 560, 560, 933, 560, 560, 560, 560, 560, 560, 560,
  /* 36204 */ 560, 560, 2285, 560, 560, 560, 560, 560, 560, 0, 0, 0, 584, 584, 584, 584, 584, 584, 2316, 584, 584, 584,
  /* 36226 */ 584, 584, 584, 584, 3324, 584, 584, 584, 584, 538, 538, 560, 560, 2328, 2241, 538, 538, 538, 538, 560,
  /* 36246 */ 560, 560, 560, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2709, 0, 2427, 0, 2429, 0, 0, 0, 0, 0, 0, 0,
  /* 36274 */ 0, 2434, 0, 0, 2437, 0, 0, 0, 0, 0, 3142, 0, 0, 3265, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36304 */ 1201, 0, 0, 0, 0, 0, 0, 0, 0, 2452, 0, 0, 0, 0, 0, 0, 0, 2460, 0, 0, 0, 2462, 0, 0, 0, 0, 0, 358, 0, 0,
  /* 36334 */ 470, 470, 470, 470, 470, 470, 470, 470, 475, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 475,
  /* 36355 */ 538, 538, 2544, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2551, 538, 538, 538, 538, 538, 538, 2170,
  /* 36375 */ 538, 538, 538, 538, 538, 538, 2176, 538, 2178, 2554, 538, 538, 538, 538, 538, 538, 538, 0, 0, 0, 0, 0, 0,
  /* 36398 */ 560, 2561, 560, 560, 2589, 560, 560, 560, 560, 560, 560, 560, 2595, 560, 560, 560, 560, 560, 560, 2619,
  /* 36418 */ 560, 560, 560, 560, 560, 560, 560, 560, 0, 584, 584, 584, 584, 584, 584, 1000, 584, 584, 560, 2602, 560,
  /* 36439 */ 560, 560, 560, 560, 560, 2609, 560, 560, 560, 560, 560, 560, 560, 1369, 560, 560, 560, 560, 1379, 560,
  /* 36459 */ 560, 560, 560, 560, 560, 2617, 560, 560, 560, 2620, 560, 560, 560, 560, 560, 560, 560, 0, 584, 584, 584,
  /* 36480 */ 584, 584, 584, 1004, 584, 584, 584, 584, 2650, 584, 584, 584, 584, 584, 584, 2655, 584, 584, 584, 584,
  /* 36500 */ 584, 584, 584, 3384, 584, 584, 584, 584, 584, 584, 584, 538, 584, 2661, 584, 584, 584, 584, 584, 584,
  /* 36520 */ 2668, 584, 584, 584, 584, 584, 584, 2675, 0, 2712, 0, 0, 0, 0, 0, 0, 0, 2716, 0, 0, 0, 0, 0, 0, 0, 1184,
  /* 36546 */ 0, 0, 0, 0, 0, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 0, 2763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36578 */ 2944, 538, 538, 538, 2776, 538, 538, 538, 538, 538, 2781, 538, 538, 538, 538, 538, 538, 538, 1348, 1349,
  /* 36598 */ 906, 560, 560, 560, 560, 560, 560, 1365, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2844, 2845,
  /* 36618 */ 560, 560, 560, 560, 2801, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2806, 538, 538, 538, 2809, 538,
  /* 36638 */ 538, 538, 538, 538, 2531, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1797, 538, 538, 538, 538, 538,
  /* 36659 */ 2811, 538, 538, 538, 538, 538, 538, 2815, 538, 538, 538, 538, 538, 538, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
  /* 36683 */ 370, 0, 387, 0, 353, 0, 560, 560, 560, 2823, 560, 560, 560, 560, 560, 2828, 560, 560, 560, 560, 560, 560,
  /* 36705 */ 1391, 560, 560, 560, 560, 560, 560, 560, 1398, 560, 2848, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 36725 */ 560, 2854, 560, 560, 560, 2857, 560, 2859, 560, 560, 560, 560, 560, 560, 560, 2864, 560, 560, 560, 560,
  /* 36745 */ 560, 560, 1427, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2594, 560, 560, 560, 560, 560, 560, 0, 0,
  /* 36766 */ 584, 584, 584, 2872, 584, 584, 584, 584, 584, 2877, 584, 584, 584, 584, 584, 584, 3222, 584, 584, 584,
  /* 36786 */ 584, 584, 584, 584, 584, 584, 1992, 1994, 584, 584, 584, 584, 584, 538, 584, 584, 584, 2897, 584, 584,
  /* 36806 */ 584, 584, 584, 584, 584, 584, 584, 584, 2903, 584, 584, 584, 584, 584, 2910, 584, 584, 584, 584, 584, 584,
  /* 36827 */ 584, 584, 584, 584, 1978, 584, 584, 584, 584, 584, 584, 2906, 584, 2908, 584, 584, 584, 584, 584, 584,
  /* 36847 */ 584, 2913, 584, 584, 584, 584, 584, 584, 3233, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1932, 584,
  /* 36867 */ 584, 584, 584, 1936, 584, 0, 0, 0, 0, 2972, 0, 0, 0, 0, 2977, 0, 0, 0, 0, 0, 0, 0, 1200, 0, 0, 0, 0, 0, 0,
  /* 36896 */ 0, 0, 691, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 3254, 0, 0, 0, 0, 0, 3257, 0, 0, 0, 0, 0, 0, 0, 2483, 0,
  /* 36926 */ 0, 0, 0, 0, 0, 0, 0, 1680, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 3548, 538, 3549, 538, 538, 538, 560,
  /* 36952 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3195, 3555, 560, 3556, 560, 560, 560, 560, 584,
  /* 36972 */ 584, 584, 584, 584, 584, 3563, 584, 3564, 547, 547, 594, 570, 570, 570, 570, 570, 570, 547, 570, 570, 570,
  /* 36993 */ 594, 594, 594, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 388, 0, 69632,
  /* 37017 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 547, 594, 594, 594, 594, 594, 594, 594, 594, 594, 570, 570, 547, 570, 570,
  /* 37040 */ 594, 584, 584, 584, 1500, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1964, 584, 584, 584,
  /* 37061 */ 0, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2320, 584, 584, 584, 584, 584, 3097, 584, 584,
  /* 37083 */ 584, 584, 584, 584, 584, 584, 584, 3106, 405, 0, 0, 0, 0, 383, 0, 69632, 73728, 0, 0, 0, 0, 428, 65536, 0,
  /* 37107 */ 0, 0, 0, 0, 3142, 0, 3264, 0, 0, 0, 0, 3268, 0, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1126, 0,
  /* 37137 */ 0, 0, 0, 0, 0, 428, 428, 0, 428, 0, 442, 428, 428, 466, 466, 466, 473, 466, 466, 466, 466, 466, 466, 466,
  /* 37161 */ 466, 473, 466, 466, 466, 466, 466, 466, 466, 466, 480, 466, 492, 492, 466, 492, 492, 492, 492, 492, 492,
  /* 37182 */ 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 535, 548, 571,
  /* 37203 */ 548, 571, 548, 548, 571, 548, 548, 595, 571, 571, 571, 571, 571, 571, 548, 571, 571, 571, 595, 595, 595,
  /* 37224 */ 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 444, 0, 0, 471, 471, 471, 471,
  /* 37249 */ 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 556, 579, 556, 579, 556, 556, 579, 548, 595,
  /* 37270 */ 595, 595, 595, 595, 595, 595, 595, 595, 571, 571, 548, 571, 571, 595, 739, 658, 0, 0, 726, 0, 0, 0, 0,
  /* 37293 */ 538, 835, 538, 538, 538, 850, 538, 538, 538, 538, 538, 2778, 538, 2779, 538, 538, 538, 538, 538, 538, 538,
  /* 37314 */ 538, 1349, 906, 560, 560, 1353, 560, 560, 1357, 560, 908, 560, 560, 560, 924, 560, 560, 560, 560, 560,
  /* 37334 */ 560, 560, 560, 560, 560, 560, 1395, 560, 560, 560, 1399, 963, 560, 560, 560, 560, 560, 0, 584, 584, 983,
  /* 37355 */ 584, 584, 584, 999, 584, 584, 584, 584, 584, 3232, 584, 584, 584, 584, 584, 584, 3238, 584, 3240, 584, 0,
  /* 37376 */ 538, 584, 560, 538, 538, 889, 538, 538, 560, 560, 963, 560, 560, 0, 584, 584, 584, 584, 2664, 584, 584,
  /* 37397 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1997, 584, 584, 538, 584, 584, 1038, 584, 584, 293, 1073, 0,
  /* 37418 */ 0, 1076, 1080, 0, 0, 1084, 1088, 0, 0, 0, 0, 0, 538, 538, 538, 538, 2992, 538, 538, 538, 538, 2996, 538,
  /* 37441 */ 0, 0, 0, 1135, 0, 1137, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 704, 705, 0, 0, 0, 0, 0, 711, 0, 0, 0, 1179, 0,
  /* 37470 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 0, 0, 0, 1096, 1095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37501 */ 2446, 0, 0, 2449, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0,
  /* 37530 */ 0, 0, 0, 65536, 0, 1248, 1249, 0, 0, 1095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3130, 0, 0, 0, 0, 0, 538,
  /* 37558 */ 1260, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1273, 1280, 538, 538, 538, 538, 538, 3015, 538,
  /* 37578 */ 538, 3017, 538, 538, 538, 538, 538, 538, 538, 538, 2780, 538, 538, 538, 538, 538, 538, 2788, 538, 538,
  /* 37598 */ 538, 1342, 538, 538, 538, 538, 1349, 906, 560, 1352, 560, 560, 560, 560, 560, 925, 560, 560, 939, 560,
  /* 37618 */ 560, 560, 560, 560, 560, 560, 1876, 560, 560, 560, 560, 560, 560, 560, 560, 2593, 560, 560, 560, 560, 560,
  /* 37639 */ 560, 560, 560, 560, 1387, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2275, 560,
  /* 37660 */ 560, 1421, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1435, 560, 560, 560, 560, 560, 3042,
  /* 37680 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1394, 560, 560, 560, 560, 560, 560, 26018, 1349,
  /* 37700 */ 981, 584, 1445, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1508, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 37721 */ 1459, 1466, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1480, 584, 584, 584, 584, 584, 3312, 584, 584,
  /* 37741 */ 584, 584, 584, 584, 584, 584, 584, 584, 2387, 584, 584, 584, 584, 2156, 1366, 538, 538, 1328, 538, 538,
  /* 37761 */ 560, 560, 1421, 560, 560, 584, 584, 1514, 584, 584, 584, 584, 584, 3323, 584, 584, 584, 584, 584, 584,
  /* 37781 */ 538, 538, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3297, 560, 560, 560, 538, 1805, 538, 538,
  /* 37801 */ 1349, 1810, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1863, 560, 560, 560, 560, 584, 1922,
  /* 37821 */ 1923, 584, 584, 584, 584, 1930, 584, 584, 584, 584, 584, 584, 584, 584, 1506, 584, 584, 1513, 584, 584,
  /* 37841 */ 584, 584, 584, 584, 584, 1971, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1980, 584, 584,
  /* 37862 */ 584, 0, 0, 2097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2092, 0, 0, 538, 538, 2205, 538, 538, 538, 538,
  /* 37889 */ 538, 538, 538, 538, 538, 538, 538, 538, 0, 906, 560, 560, 560, 560, 560, 560, 560, 560, 2292, 560, 560,
  /* 37910 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 0, 584, 584, 982, 584, 584, 584, 584, 584, 584, 584,
  /* 37931 */ 584, 2379, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 538, 560, 560, 0, 0, 2416, 0,
  /* 37953 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2108, 0, 0, 2514, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 37979 */ 538, 538, 538, 538, 538, 2800, 0, 0, 2722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2436, 0, 0, 2749, 0, 0,
  /* 38007 */ 0, 0, 2754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2471, 0, 0, 0, 0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38039 */ 0, 0, 0, 1225, 0, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 2876, 584, 584, 584, 584, 584, 584, 2343,
  /* 38062 */ 584, 584, 2346, 584, 584, 584, 584, 584, 584, 1526, 584, 584, 584, 584, 584, 584, 0, 538, 584, 584, 2884,
  /* 38083 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2895, 584, 0, 0, 2947, 0, 0, 0, 0,
  /* 38106 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2487, 0, 0, 0, 2970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1230, 0, 560,
  /* 38137 */ 560, 3521, 560, 3523, 560, 560, 560, 560, 584, 584, 584, 584, 584, 584, 584, 1527, 584, 584, 584, 584,
  /* 38157 */ 584, 0, 538, 584, 3534, 584, 3536, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 3545, 538, 538, 538, 538, 538,
  /* 38181 */ 3356, 538, 538, 538, 560, 560, 560, 3361, 560, 560, 560, 560, 560, 2566, 560, 560, 560, 560, 560, 560,
  /* 38201 */ 560, 560, 560, 560, 1833, 560, 560, 560, 560, 560, 467, 467, 467, 450, 450, 467, 450, 450, 450, 450, 450,
  /* 38222 */ 450, 450, 450, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 549, 572,
  /* 38243 */ 549, 572, 549, 549, 572, 549, 549, 596, 572, 572, 572, 572, 572, 572, 549, 572, 572, 572, 596, 596, 596,
  /* 38264 */ 1, 12290, 3, 78117, 78453, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 538, 538, 538, 2142, 2143, 538,
  /* 38288 */ 538, 538, 538, 538, 538, 538, 1731, 1732, 538, 538, 538, 538, 1739, 538, 538, 549, 596, 596, 596, 596,
  /* 38308 */ 596, 596, 596, 596, 596, 572, 572, 549, 572, 572, 596, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38335 */ 155648, 538, 865, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 560, 560, 560, 3031,
  /* 38355 */ 560, 560, 560, 560, 560, 560, 560, 560, 2270, 2271, 560, 560, 560, 560, 560, 560, 1014, 584, 584, 584,
  /* 38375 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 538, 538, 538, 538, 538, 3575, 538, 560,
  /* 38397 */ 560, 560, 560, 1423, 560, 560, 560, 560, 560, 1430, 560, 560, 560, 560, 560, 560, 1828, 560, 560, 560,
  /* 38417 */ 560, 560, 560, 560, 560, 560, 560, 3202, 560, 560, 560, 560, 560, 584, 584, 1460, 584, 584, 584, 584, 584,
  /* 38438 */ 584, 584, 584, 584, 584, 584, 584, 584, 1197, 538, 584, 1498, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 38459 */ 584, 584, 584, 584, 1516, 584, 584, 584, 584, 2679, 584, 584, 584, 584, 584, 584, 584, 584, 2685, 584,
  /* 38479 */ 584, 584, 584, 584, 2690, 538, 584, 560, 538, 538, 538, 538, 560, 560, 560, 560, 584, 584, 584, 584, 0,
  /* 38500 */ 2015, 0, 1367, 538, 538, 538, 1540, 538, 560, 560, 560, 1544, 560, 584, 584, 584, 1548, 584, 584, 584,
  /* 38520 */ 584, 2899, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2902, 584, 584, 584, 584, 1073, 0, 1552,
  /* 38541 */ 0, 0, 0, 1558, 0, 0, 0, 1564, 0, 0, 0, 1570, 0, 0, 0, 0, 0, 3144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0,
  /* 38572 */ 0, 0, 0, 0, 0, 0, 581632, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 547, 570, 547, 570, 547, 547, 570, 538,
  /* 38599 */ 538, 538, 1744, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1767, 538, 538, 538, 1839,
  /* 38619 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1884, 584, 584, 584, 1924, 584,
  /* 38640 */ 584, 584, 584, 584, 584, 584, 584, 584, 1935, 584, 584, 584, 584, 584, 3382, 584, 584, 584, 584, 584, 584,
  /* 38661 */ 584, 584, 584, 538, 584, 560, 2694, 538, 538, 538, 2696, 560, 560, 584, 1955, 584, 584, 584, 584, 584,
  /* 38681 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2904, 584, 0, 2034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38708 */ 1246, 0, 0, 0, 0, 2086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 0, 538, 538, 2192, 538, 538, 538,
  /* 38736 */ 538, 2197, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2796, 538, 538, 538, 538, 538, 538, 2219, 0, 0,
  /* 38757 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2303, 0, 560, 2278, 560, 560, 560,
  /* 38778 */ 560, 2283, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3305, 560, 560, 560, 560, 584, 2306, 0, 0,
  /* 38799 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1515, 584, 584, 584, 2365, 584, 584, 584,
  /* 38820 */ 584, 2370, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1510, 584, 584, 584, 584, 584, 584, 0, 0, 0, 2934,
  /* 38842 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2029, 2030, 0, 0, 538, 538, 2999, 538, 538, 538, 538, 538, 538, 538,
  /* 38868 */ 538, 538, 538, 538, 538, 538, 538, 3185, 538, 560, 3039, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 38889 */ 560, 560, 560, 560, 560, 2573, 584, 584, 3081, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 38910 */ 584, 2349, 584, 584, 560, 584, 0, 0, 0, 3394, 0, 0, 0, 0, 3142, 0, 0, 0, 0, 538, 538, 1261, 538, 1264,
  /* 38934 */ 538, 538, 538, 538, 538, 538, 538, 538, 1278, 538, 538, 538, 538, 3405, 538, 538, 538, 538, 538, 538, 538,
  /* 38955 */ 538, 538, 538, 560, 560, 560, 560, 560, 3472, 560, 560, 560, 560, 560, 3420, 560, 560, 560, 560, 560, 560,
  /* 38976 */ 560, 560, 560, 560, 560, 584, 584, 3072, 584, 584, 584, 584, 584, 584, 584, 584, 1959, 584, 584, 584, 584,
  /* 38997 */ 1965, 584, 584, 584, 584, 3436, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 538,
  /* 39019 */ 538, 538, 3573, 3574, 538, 538, 560, 584, 584, 584, 3567, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 538,
  /* 39041 */ 560, 560, 3030, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1375, 560, 560, 560, 560, 560, 560, 390, 392,
  /* 39062 */ 342, 0, 0, 0, 0, 0, 0, 341, 0, 0, 342, 0, 0, 0, 0, 0, 0, 309, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367,
  /* 39091 */ 1140, 0, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 3155, 3156,
  /* 39119 */ 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 1266, 538, 538, 538, 1270, 538, 538, 1281, 538, 0, 0, 341, 0, 0,
  /* 39143 */ 443, 0, 0, 468, 468, 468, 468, 468, 468, 468, 468, 468, 550, 573, 550, 573, 550, 550, 573, 474, 468, 468,
  /* 39165 */ 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 478, 478, 468, 468, 479, 468, 468, 479, 468, 468, 468,
  /* 39186 */ 497, 474, 497, 497, 497, 497, 497, 497, 497, 497, 468, 468, 550, 550, 597, 573, 573, 573, 573, 573, 573,
  /* 39207 */ 550, 573, 573, 573, 597, 597, 597, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0,
  /* 39232 */ 538, 538, 538, 2991, 538, 538, 538, 538, 538, 538, 538, 538, 2816, 538, 538, 538, 538, 538, 0, 0, 550,
  /* 39253 */ 597, 597, 597, 597, 597, 597, 597, 597, 597, 573, 573, 550, 573, 573, 597, 0, 714, 0, 0, 0, 0, 0, 0, 0,
  /* 39277 */ 722, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 0, 0, 0, 0, 2496, 0, 538, 538, 538, 538, 538, 538, 0, 0, 0, 0,
  /* 39306 */ 747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3139, 0, 0, 0, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39339 */ 3149, 0, 0, 0, 0, 660, 0, 779, 0, 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0,
  /* 39368 */ 348, 347, 65536, 346, 792, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 703, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0,
  /* 39395 */ 0, 352, 350, 65536, 0, 0, 0, 803, 0, 800, 783, 0, 0, 805, 0, 664, 0, 779, 0, 0, 0, 0, 0, 0, 310, 445, 460,
  /* 39422 */ 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 0, 0, 660, 822, 0, 779, 0, 0,
  /* 39445 */ 0, 0, 0, 828, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 376, 0, 65536, 0, 783, 660, 832, 0, 0, 0, 0, 0,
  /* 39473 */ 0, 538, 836, 538, 538, 538, 852, 538, 538, 538, 538, 538, 3407, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 39494 */ 560, 560, 560, 560, 560, 560, 3473, 560, 560, 538, 866, 538, 538, 538, 538, 880, 538, 538, 538, 538, 898,
  /* 39515 */ 538, 538, 538, 560, 560, 560, 3189, 560, 560, 560, 560, 560, 560, 560, 3194, 560, 560, 909, 560, 560, 560,
  /* 39536 */ 926, 560, 560, 940, 560, 560, 560, 560, 954, 560, 560, 560, 560, 560, 3056, 560, 560, 3058, 560, 560, 560,
  /* 39557 */ 560, 560, 560, 560, 2269, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2853, 560, 560, 560, 560, 560, 560,
  /* 39578 */ 560, 560, 972, 560, 560, 560, 0, 584, 584, 984, 584, 584, 584, 1001, 584, 584, 584, 584, 584, 3539, 584,
  /* 39599 */ 0, 0, 0, 0, 3542, 0, 3544, 538, 538, 538, 538, 538, 1345, 538, 538, 1349, 906, 560, 560, 560, 560, 560,
  /* 39621 */ 560, 560, 3526, 560, 584, 584, 584, 3531, 584, 584, 584, 1015, 584, 584, 584, 584, 1029, 584, 584, 584,
  /* 39641 */ 584, 1047, 584, 584, 584, 0, 0, 0, 0, 0, 538, 2140, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1733,
  /* 39663 */ 538, 538, 538, 538, 538, 538, 0, 0, 0, 1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 0, 0, 0, 0, 0,
  /* 39692 */ 0, 1100, 0, 0, 0, 0, 0, 0, 1204, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 372, 372, 0, 0, 65536, 372, 1209,
  /* 39718 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 1223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39750 */ 176128, 0, 1233, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 422, 422, 0, 0,
  /* 39777 */ 65536, 422, 0, 0, 0, 0, 1223, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 0, 1228, 0, 0, 0, 0, 0, 0, 0, 0, 2976,
  /* 39806 */ 0, 0, 0, 0, 0, 0, 2983, 584, 584, 1461, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1483,
  /* 39829 */ 1537, 538, 538, 1539, 538, 538, 560, 560, 1543, 560, 560, 584, 584, 1547, 584, 584, 584, 584, 1468, 584,
  /* 39849 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3088, 584, 584, 584, 584, 0, 0, 1575, 0, 0, 0, 0, 0, 0,
  /* 39873 */ 0, 0, 0, 0, 0, 0, 0, 2719, 0, 2720, 538, 538, 538, 1726, 538, 538, 538, 538, 538, 538, 538, 538, 1737,
  /* 39896 */ 538, 538, 538, 538, 538, 538, 2520, 538, 538, 538, 538, 538, 538, 2525, 538, 538, 1821, 560, 560, 560,
  /* 39916 */ 560, 560, 560, 560, 560, 1832, 560, 560, 560, 560, 560, 560, 1875, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 39937 */ 560, 560, 3046, 560, 560, 560, 560, 560, 560, 26018, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 39958 */ 1917, 584, 584, 584, 584, 1501, 584, 584, 584, 584, 584, 584, 584, 1514, 584, 584, 584, 584, 584, 1927,
  /* 39978 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2683, 584, 584, 584, 2686, 584, 584, 584, 1956, 584,
  /* 39998 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2375, 2376, 2377, 0, 2071, 2072, 0, 0, 0, 0,
  /* 40020 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2733, 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2121, 0, 0, 0,
  /* 40052 */ 0, 2125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1587, 0, 538, 538, 538, 538, 2207, 538, 538, 538, 538,
  /* 40079 */ 538, 538, 538, 538, 538, 538, 0, 2559, 0, 0, 0, 0, 560, 560, 0, 0, 0, 560, 560, 560, 2226, 560, 2228, 560,
  /* 40103 */ 560, 560, 560, 560, 560, 560, 2257, 560, 560, 560, 560, 560, 560, 560, 560, 1407, 560, 560, 560, 560, 560,
  /* 40124 */ 560, 560, 0, 0, 0, 584, 584, 584, 2313, 584, 2315, 584, 584, 584, 584, 584, 584, 584, 1929, 584, 584, 584,
  /* 40146 */ 584, 584, 584, 584, 584, 1490, 584, 584, 584, 584, 584, 584, 584, 2414, 0, 0, 2417, 0, 0, 0, 0, 0, 0,
  /* 40169 */ 2422, 0, 0, 0, 2425, 2426, 2451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1648, 0, 0, 0, 0, 2479, 0,
  /* 40198 */ 0, 0, 0, 0, 2485, 0, 0, 0, 0, 2488, 0, 0, 0, 0, 0, 3271, 0, 538, 538, 538, 3273, 538, 538, 538, 3276, 538,
  /* 40224 */ 538, 538, 538, 538, 3509, 538, 3511, 538, 538, 538, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3193,
  /* 40244 */ 560, 560, 560, 538, 538, 2516, 538, 2518, 538, 538, 538, 538, 2522, 538, 538, 538, 538, 538, 538, 538,
  /* 40264 */ 1764, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2549, 538, 538, 538, 538, 538, 538, 538, 538, 2528,
  /* 40284 */ 538, 538, 538, 538, 538, 538, 538, 2535, 538, 538, 538, 538, 538, 538, 538, 2804, 538, 538, 538, 538, 538,
  /* 40305 */ 538, 538, 2810, 538, 2543, 538, 538, 538, 538, 2547, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 40325 */ 3019, 3021, 538, 538, 538, 3024, 2574, 2575, 560, 560, 560, 560, 560, 2580, 560, 2582, 560, 560, 560, 560,
  /* 40345 */ 2586, 560, 560, 560, 560, 2239, 560, 560, 2243, 560, 560, 560, 2247, 560, 560, 560, 560, 560, 1843, 560,
  /* 40365 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2830, 560, 560, 2834, 560, 2600, 560, 560, 560, 560,
  /* 40385 */ 560, 560, 2608, 560, 560, 560, 560, 2612, 560, 560, 560, 560, 560, 2255, 560, 560, 560, 560, 560, 560,
  /* 40405 */ 2261, 560, 2263, 560, 2648, 584, 584, 584, 584, 2652, 584, 584, 584, 584, 584, 584, 584, 584, 2658, 584,
  /* 40425 */ 584, 584, 584, 2909, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3446, 584, 0, 0, 584,
  /* 40446 */ 584, 584, 2678, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1998, 584, 538, 584, 560, 584,
  /* 40467 */ 2699, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 2724, 2725, 2726, 0, 0,
  /* 40495 */ 0, 0, 0, 0, 0, 0, 0, 559, 582, 559, 582, 559, 559, 582, 0, 0, 0, 2739, 0, 0, 0, 0, 0, 0, 0, 2745, 0, 2747,
  /* 40523 */ 0, 0, 0, 0, 0, 538, 2989, 538, 538, 538, 538, 538, 538, 538, 538, 538, 887, 538, 538, 538, 538, 538, 560,
  /* 40546 */ 0, 2750, 0, 0, 2753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2486, 0, 0, 0, 0, 0, 0, 0, 2765, 0, 0, 0, 0, 0, 0,
  /* 40577 */ 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 2774, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 40601 */ 538, 538, 3186, 538, 538, 538, 538, 2792, 538, 538, 2795, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 40621 */ 3018, 538, 3020, 538, 538, 538, 538, 2821, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 40641 */ 560, 560, 560, 1902, 0, 0, 2870, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2645,
  /* 40662 */ 584, 2647, 2918, 584, 2919, 2920, 2921, 538, 538, 560, 560, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3338,
  /* 40686 */ 3142, 0, 0, 2945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 2985, 0, 0, 538, 538, 2990,
  /* 40715 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 3513, 538, 560, 560, 560, 560, 560, 0, 3122, 0, 3124, 0, 0,
  /* 40737 */ 0, 3128, 0, 0, 0, 0, 0, 0, 0, 0, 2118, 0, 0, 0, 0, 0, 0, 0, 3153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538,
  /* 40768 */ 538, 538, 538, 2501, 538, 538, 3164, 3165, 538, 538, 538, 538, 3169, 3170, 538, 538, 538, 538, 538, 3174,
  /* 40788 */ 3196, 3197, 560, 560, 560, 560, 560, 3201, 560, 560, 560, 560, 560, 560, 560, 560, 937, 560, 560, 560,
  /* 40808 */ 560, 560, 560, 560, 3207, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 584, 584, 584,
  /* 40829 */ 3532, 584, 584, 584, 3230, 584, 584, 584, 584, 584, 584, 584, 584, 3236, 584, 584, 584, 584, 584, 584,
  /* 40849 */ 2355, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1045, 584, 584, 584, 584, 0, 0, 0, 0, 3252, 0, 0, 0, 0,
  /* 40873 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528, 278528, 278528, 538, 538, 3280, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 40896 */ 538, 538, 538, 538, 538, 538, 3416, 560, 538, 538, 3353, 538, 538, 538, 538, 538, 538, 560, 560, 560, 560,
  /* 40917 */ 560, 560, 560, 560, 560, 560, 3037, 560, 560, 560, 560, 560, 3368, 560, 560, 560, 560, 560, 560, 560, 584,
  /* 40938 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 560, 584, 0, 3392, 0, 0, 3395, 0, 0, 0, 3142, 0, 0, 0,
  /* 40962 */ 0, 538, 538, 1262, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2552, 538, 538, 538,
  /* 40983 */ 3403, 538, 538, 538, 538, 3408, 538, 538, 538, 538, 3413, 538, 538, 560, 560, 560, 560, 560, 560, 3293,
  /* 41003 */ 560, 560, 560, 560, 560, 560, 560, 1829, 560, 560, 560, 560, 560, 560, 560, 560, 1429, 560, 560, 560, 560,
  /* 41024 */ 560, 560, 560, 3418, 560, 560, 560, 560, 3423, 560, 560, 560, 560, 3428, 560, 560, 560, 584, 584, 584,
  /* 41044 */ 584, 1523, 584, 584, 584, 584, 584, 584, 584, 584, 0, 1274, 1460, 3434, 584, 584, 584, 584, 3439, 584,
  /* 41064 */ 584, 584, 584, 3444, 584, 584, 584, 0, 0, 0, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41087 */ 584, 584, 584, 0, 0, 0, 3451, 0, 0, 0, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1269, 538, 538,
  /* 41110 */ 538, 538, 538, 538, 538, 538, 3465, 538, 538, 3467, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1408,
  /* 41130 */ 560, 560, 560, 560, 560, 560, 560, 560, 3478, 560, 560, 3480, 560, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41151 */ 584, 2372, 584, 584, 584, 584, 584, 584, 584, 584, 3492, 584, 584, 3494, 584, 0, 0, 0, 0, 0, 0, 0, 538,
  /* 41174 */ 538, 538, 538, 538, 538, 2145, 538, 538, 538, 538, 560, 560, 3579, 3580, 560, 560, 560, 584, 584, 584,
  /* 41194 */ 3585, 3586, 584, 584, 584, 0, 538, 538, 560, 560, 584, 584, 538, 560, 584, 538, 560, 584, 0, 0, 0, 0, 0,
  /* 41217 */ 0, 0, 0, 0, 0, 409, 0, 0, 0, 0, 0, 3620, 3621, 3622, 538, 560, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2717, 0,
  /* 41246 */ 0, 0, 0, 0, 344, 345, 346, 347, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2730, 2731, 0, 0, 0, 0, 0, 0, 0,
  /* 41275 */ 393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2132, 0, 0, 0, 347, 347, 348, 347, 0, 346, 347, 451, 469, 469,
  /* 41302 */ 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 484, 493, 493, 501, 493,
  /* 41323 */ 503, 493, 493, 503, 503, 493, 503, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518,
  /* 41344 */ 518, 518, 551, 574, 551, 574, 551, 551, 574, 551, 551, 598, 574, 574, 574, 574, 574, 574, 551, 574, 574,
  /* 41365 */ 574, 598, 598, 598, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 584, 584, 584,
  /* 41390 */ 584, 584, 584, 584, 2632, 584, 584, 584, 584, 584, 2369, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41411 */ 2670, 584, 584, 584, 584, 584, 551, 598, 598, 598, 598, 598, 598, 598, 598, 598, 574, 574, 551, 574, 574,
  /* 41432 */ 598, 305, 306, 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 0, 648, 649, 650, 651, 652, 653, 654, 0, 0, 0, 0, 0, 0, 0,
  /* 41460 */ 0, 0, 0, 0, 0, 2410, 2411, 0, 0, 0, 0, 669, 670, 0, 672, 673, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 350,
  /* 41489 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 716, 0, 718, 0, 720, 0, 0, 0,
  /* 41521 */ 0, 0, 0, 0, 0, 2421, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1698, 0, 758,
  /* 41553 */ 0, 0, 0, 0, 0, 0, 0, 0, 770, 771, 0, 0, 0, 758, 0, 0, 0, 0, 0, 3343, 0, 538, 538, 538, 538, 538, 538, 538,
  /* 41581 */ 538, 538, 538, 538, 1272, 538, 538, 538, 0, 778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0, 0, 0, 0, 350,
  /* 41609 */ 351, 352, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 796, 0, 0, 689, 0, 0, 669, 0, 689,
  /* 41638 */ 0, 801, 672, 720, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1103, 689, 802, 0,
  /* 41667 */ 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 751, 811, 812, 0, 0, 0, 0, 0, 0, 751, 0, 0, 816, 696, 0, 0, 0, 0, 0,
  /* 41698 */ 0, 377, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2130, 0, 0, 0, 0, 0, 0, 821, 0,
  /* 41730 */ 0, 0, 823, 0, 0, 0, 689, 696, 0, 0, 689, 821, 821, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41758 */ 0, 0, 0, 0, 0, 0, 0, 1176, 538, 538, 538, 872, 875, 878, 538, 538, 538, 890, 894, 538, 538, 538, 538, 560,
  /* 41782 */ 3029, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3047, 560, 3049, 560, 560, 560, 560, 916,
  /* 41802 */ 920, 923, 560, 931, 560, 560, 560, 946, 949, 952, 560, 560, 560, 560, 560, 2282, 560, 560, 560, 560, 560,
  /* 41823 */ 560, 560, 560, 560, 560, 560, 3306, 560, 560, 560, 584, 964, 968, 560, 560, 560, 560, 0, 584, 584, 584,
  /* 41844 */ 991, 995, 998, 584, 1006, 584, 584, 584, 584, 3220, 3221, 584, 584, 584, 584, 3225, 3226, 584, 584, 584,
  /* 41864 */ 584, 584, 584, 3440, 584, 3442, 3443, 584, 3445, 584, 3447, 0, 0, 584, 584, 1021, 1024, 1027, 584, 584,
  /* 41884 */ 584, 1039, 1043, 584, 584, 584, 584, 0, 0, 0, 0, 538, 538, 3572, 538, 538, 538, 3576, 560, 0, 1055, 1056,
  /* 41906 */ 1057, 842, 538, 890, 894, 1062, 916, 560, 964, 968, 1067, 0, 991, 584, 1039, 1043, 1072, 78117, 1073, 0,
  /* 41926 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1108, 0, 0, 0, 0, 1112, 0, 0, 1115, 0, 0, 0,
  /* 41957 */ 0, 0, 0, 643, 749, 750, 751, 0, 0, 0, 0, 0, 757, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1711,
  /* 41987 */ 0, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1193, 538, 538, 538, 1320, 538, 538, 1327, 538, 538,
  /* 42013 */ 538, 538, 538, 538, 538, 538, 538, 538, 3182, 538, 538, 538, 538, 538, 538, 1340, 538, 538, 538, 538, 538,
  /* 42034 */ 538, 1349, 906, 560, 560, 560, 560, 560, 560, 1892, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 42054 */ 2583, 560, 560, 560, 560, 560, 560, 1402, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1413,
  /* 42074 */ 560, 560, 560, 560, 560, 3212, 560, 560, 560, 560, 560, 560, 560, 584, 584, 584, 584, 584, 584, 3487, 584,
  /* 42095 */ 584, 1420, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1433, 560, 560, 560, 560, 560, 928, 560, 560,
  /* 42116 */ 560, 560, 560, 560, 560, 560, 560, 560, 1848, 560, 560, 560, 560, 560, 584, 1484, 584, 584, 584, 584, 584,
  /* 42137 */ 584, 584, 1491, 584, 584, 1495, 584, 584, 584, 584, 584, 1990, 584, 584, 584, 584, 1996, 584, 584, 584,
  /* 42157 */ 538, 584, 560, 538, 2923, 560, 2925, 584, 2927, 0, 0, 0, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
  /* 42184 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2956, 0, 0, 0, 0, 1591, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42215 */ 2759, 2760, 0, 0, 0, 0, 1650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 1659, 0, 0, 0, 0, 0, 0, 657, 658, 0, 0,
  /* 42244 */ 0, 0, 0, 0, 0, 0, 1707, 0, 0, 0, 0, 0, 0, 0, 1661, 0, 745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42276 */ 2748, 0, 0, 0, 1592, 0, 0, 0, 0, 0, 0, 538, 1719, 538, 538, 538, 538, 538, 538, 881, 538, 538, 538, 538,
  /* 42300 */ 899, 538, 538, 538, 560, 560, 3188, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3204, 560,
  /* 42321 */ 560, 560, 538, 538, 1725, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 902, 538, 560,
  /* 42342 */ 538, 538, 538, 1758, 538, 538, 1763, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3552, 560, 560,
  /* 42362 */ 560, 560, 560, 560, 560, 560, 1842, 560, 560, 560, 560, 560, 560, 560, 560, 1849, 560, 560, 560, 560, 560,
  /* 42383 */ 2295, 560, 2297, 560, 560, 560, 560, 560, 560, 560, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 42404 */ 2912, 584, 584, 2915, 584, 584, 1853, 560, 560, 1858, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 42424 */ 560, 560, 560, 2868, 560, 560, 560, 26018, 0, 584, 1909, 584, 584, 584, 584, 584, 584, 584, 1916, 584,
  /* 42444 */ 584, 584, 584, 584, 2328, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2359, 584, 584, 584, 584, 584,
  /* 42465 */ 1938, 584, 584, 584, 584, 584, 584, 584, 584, 1945, 584, 584, 584, 1949, 584, 584, 584, 584, 1925, 584,
  /* 42485 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2684, 584, 584, 584, 584, 1954, 584, 584, 584, 584, 584,
  /* 42506 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2917, 2016, 0, 1076, 0, 0, 0, 2018, 0, 1080, 0, 0, 0,
  /* 42529 */ 2020, 0, 1084, 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032,
  /* 42552 */ 172032, 172032, 172032, 0, 0, 2022, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2939, 2940, 0, 0, 0, 0,
  /* 42577 */ 2043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2054, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42609 */ 0, 0, 1142784, 0, 0, 0, 0, 538, 538, 538, 538, 2557, 538, 538, 538, 0, 0, 0, 2560, 0, 1810, 560, 560, 560,
  /* 42633 */ 560, 560, 3524, 560, 560, 560, 584, 584, 584, 584, 584, 584, 584, 1975, 584, 584, 584, 1979, 584, 584,
  /* 42653 */ 584, 584, 0, 0, 2626, 0, 1906, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1533, 584, 0, 538,
  /* 42675 */ 584, 584, 584, 2689, 584, 584, 584, 538, 584, 560, 538, 538, 538, 538, 560, 560, 560, 560, 584, 584, 584,
  /* 42696 */ 584, 0, 0, 1554, 0, 2721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2093, 0, 538, 2775, 538, 538, 538,
  /* 42723 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1768, 538, 560, 2822, 560, 560, 560, 560, 560, 560,
  /* 42744 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 2847, 0, 0, 584, 2871, 584, 584, 584, 584, 584, 584, 584,
  /* 42765 */ 584, 584, 584, 584, 584, 2360, 584, 584, 584, 0, 0, 3123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2449408,
  /* 42791 */ 0, 2850816, 538, 538, 3290, 560, 560, 560, 560, 560, 560, 560, 3295, 560, 560, 560, 560, 560, 560, 2862,
  /* 42811 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 2299, 560, 560, 560, 560, 560, 0, 560, 3365, 560, 560, 560,
  /* 42832 */ 560, 560, 3371, 560, 560, 560, 560, 584, 584, 584, 3377, 538, 538, 538, 538, 3406, 538, 538, 538, 3410,
  /* 42852 */ 538, 538, 538, 538, 538, 560, 560, 560, 560, 3032, 560, 560, 560, 560, 3036, 560, 560, 560, 560, 560,
  /* 42872 */ 3421, 560, 560, 560, 3425, 560, 560, 560, 560, 560, 560, 584, 584, 584, 584, 1926, 584, 584, 584, 584,
  /* 42892 */ 584, 584, 584, 584, 584, 584, 1937, 584, 584, 584, 3437, 584, 584, 584, 3441, 584, 584, 584, 584, 584,
  /* 42912 */ 584, 0, 0, 0, 0, 3571, 538, 538, 538, 538, 538, 538, 3577, 3590, 0, 538, 538, 538, 538, 538, 538, 560,
  /* 42934 */ 560, 560, 560, 560, 560, 584, 584, 584, 584, 1941, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1952,
  /* 42955 */ 391, 0, 0, 0, 395, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3138, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 349, 0, 69632,
  /* 42985 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2393044, 2126804, 2126804, 2126804, 2425812, 2126804, 2126804,
  /* 43004 */ 2126804, 2126804, 2126804, 2458580, 519, 519, 519, 519, 0, 0, 0, 0, 0, 0, 0, 519, 0, 0, 519, 519, 519,
  /* 43025 */ 519, 519, 519, 519, 519, 519, 552, 575, 552, 575, 552, 552, 575, 552, 552, 599, 575, 575, 575, 575, 575,
  /* 43046 */ 575, 552, 575, 575, 575, 599, 599, 599, 552, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 575, 614,
  /* 43067 */ 619, 619, 599, 625, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 584, 584,
  /* 43091 */ 2628, 584, 584, 584, 584, 584, 584, 584, 584, 2682, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 676, 748,
  /* 43113 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 131072, 560, 910, 560, 560, 560, 560, 560, 560, 560,
  /* 43139 */ 560, 560, 560, 560, 955, 560, 560, 560, 560, 922, 560, 930, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 43160 */ 560, 2829, 560, 2832, 560, 560, 560, 560, 560, 973, 560, 560, 560, 0, 584, 584, 985, 584, 584, 584, 584,
  /* 43181 */ 584, 584, 1487, 584, 584, 584, 584, 584, 584, 584, 584, 1497, 0, 0, 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43207 */ 0, 0, 2423, 2424, 0, 0, 0, 0, 0, 1180, 0, 0, 0, 1185, 0, 0, 0, 0, 1101, 0, 0, 0, 0, 0, 0, 689, 0, 0, 0, 0,
  /* 43237 */ 0, 0, 696, 367, 367, 0, 0, 0, 1211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2435, 0, 0, 0, 538, 538, 1286,
  /* 43265 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 903, 538, 560, 1300, 538, 538, 538, 538,
  /* 43286 */ 538, 538, 538, 538, 1310, 538, 538, 538, 538, 538, 538, 538, 2157, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 43307 */ 538, 1780, 538, 538, 538, 538, 538, 538, 1338, 538, 538, 538, 538, 538, 538, 538, 1349, 906, 560, 560,
  /* 43327 */ 560, 1355, 560, 560, 560, 560, 976, 560, 0, 584, 584, 584, 584, 994, 584, 584, 584, 584, 584, 584, 3098,
  /* 43348 */ 584, 584, 3100, 584, 584, 584, 584, 584, 584, 1470, 584, 584, 584, 1475, 584, 584, 584, 584, 584, 560,
  /* 43368 */ 560, 560, 1403, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1415, 560, 560, 560, 560, 2281, 560,
  /* 43388 */ 560, 560, 560, 560, 560, 2286, 560, 560, 560, 560, 560, 927, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 43409 */ 560, 560, 2596, 560, 560, 560, 560, 560, 560, 26018, 1349, 981, 584, 584, 584, 1448, 584, 584, 584, 584,
  /* 43429 */ 584, 584, 584, 1944, 584, 584, 584, 584, 584, 584, 584, 584, 1528, 584, 584, 584, 584, 0, 1273, 1459, 584,
  /* 43450 */ 584, 1462, 584, 584, 584, 584, 1472, 584, 584, 584, 584, 584, 584, 584, 584, 2331, 584, 584, 584, 584,
  /* 43470 */ 2336, 584, 584, 1369, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 584, 584, 584, 584, 584, 3075,
  /* 43490 */ 584, 584, 584, 584, 584, 1073, 0, 1553, 0, 0, 0, 1559, 0, 0, 0, 1565, 0, 0, 0, 1571, 0, 0, 0, 0, 0,
  /* 43515 */ 2732032, 0, 0, 0, 3092480, 0, 0, 0, 0, 3076096, 0, 0, 0, 0, 0, 1560, 0, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0,
  /* 43542 */ 0, 0, 69632, 73728, 0, 135168, 135168, 0, 0, 65536, 135168, 0, 2096, 0, 0, 0, 0, 0, 2102, 0, 0, 0, 0, 0,
  /* 43566 */ 0, 0, 0, 2469, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 2169, 538, 538, 538, 538, 2173, 538, 2175, 538,
  /* 43590 */ 538, 538, 538, 538, 538, 1291, 538, 538, 538, 538, 538, 538, 538, 1299, 538, 2220, 0, 0, 560, 560, 560,
  /* 43611 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2572, 560, 560, 560, 560, 2254, 560, 560, 560, 560,
  /* 43632 */ 2258, 560, 2260, 560, 560, 560, 560, 560, 560, 3043, 560, 560, 560, 560, 560, 560, 560, 560, 3051, 2307,
  /* 43652 */ 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2673, 584, 584, 584, 584, 584,
  /* 43673 */ 2341, 584, 584, 584, 584, 2345, 584, 2347, 584, 584, 584, 584, 584, 584, 2639, 584, 584, 584, 584, 584,
  /* 43693 */ 584, 584, 584, 584, 3085, 584, 584, 584, 584, 584, 584, 584, 584, 3325, 584, 584, 584, 538, 538, 560, 560,
  /* 43714 */ 0, 2308, 0, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1947, 584, 584, 584, 584, 0, 0,
  /* 43737 */ 0, 2986, 0, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1274, 538, 538, 584, 584, 3331, 0,
  /* 43759 */ 0, 0, 3333, 0, 0, 0, 0, 0, 0, 3142, 3340, 0, 0, 0, 0, 0, 2809856, 2928640, 0, 0, 0, 0, 0, 2928640, 0, 0,
  /* 43785 */ 0, 0, 0, 0, 0, 106496, 0, 106496, 0, 0, 0, 0, 106496, 0, 0, 3342, 0, 0, 0, 0, 0, 538, 3345, 538, 538,
  /* 43810 */ 3347, 538, 538, 538, 538, 538, 538, 1292, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1296, 538, 538,
  /* 43830 */ 538, 538, 538, 538, 3378, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 538,
  /* 43851 */ 538, 538, 1305, 538, 538, 1309, 538, 538, 538, 538, 538, 538, 538, 538, 1329, 538, 538, 1333, 538, 538,
  /* 43871 */ 538, 538, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2412, 0, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43903 */ 0, 0, 0, 0, 2746, 0, 0, 0, 584, 584, 584, 584, 78117, 1073, 0, 0, 1077, 1081, 0, 0, 1085, 1089, 0, 0, 0,
  /* 43928 */ 0, 0, 584, 2627, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1046, 584, 584, 584, 584, 0, 0, 560, 26018,
  /* 43950 */ 1907, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3090, 584, 584, 560, 560, 560,
  /* 43970 */ 3199, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3063, 560, 560, 350, 350, 352, 350,
  /* 43991 */ 0, 0, 350, 350, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 719, 0, 721, 0, 0, 0, 0, 0, 0, 0, 732, 0, 788, 0, 0, 0,
  /* 44022 */ 0, 0, 0, 0, 0, 0, 350, 350, 352, 350, 350, 350, 350, 350, 350, 510, 350, 350, 350, 350, 350, 350, 350,
  /* 44045 */ 350, 350, 350, 350, 350, 350, 350, 350, 350, 553, 576, 553, 576, 553, 553, 576, 553, 553, 600, 576, 576,
  /* 44066 */ 576, 576, 576, 576, 553, 576, 576, 576, 600, 600, 600, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301,
  /* 44089 */ 302, 0, 0, 0, 0, 0, 644, 0, 0, 740, 538, 538, 538, 538, 538, 538, 538, 538, 3512, 538, 538, 560, 560, 560,
  /* 44113 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3300, 553, 600, 600, 600, 600, 600, 600, 600, 600, 600,
  /* 44134 */ 576, 576, 553, 576, 576, 600, 0, 0, 0, 762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2771, 0, 0, 0, 0, 0, 677,
  /* 44163 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2941, 0, 0, 0, 0, 0, 0, 0, 798, 799, 0, 0, 0, 0, 799, 0, 0, 0, 0,
  /* 44195 */ 0, 0, 0, 2495, 0, 0, 538, 538, 538, 538, 538, 538, 538, 1267, 538, 538, 538, 538, 538, 1279, 538, 799, 0,
  /* 44218 */ 0, 798, 0, 0, 0, 0, 0, 752, 0, 0, 807, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
  /* 44250 */ 367, 367, 0, 0, 0, 0, 813, 0, 807, 0, 661, 0, 0, 0, 0, 0, 0, 0, 737, 409, 0, 0, 0, 0, 0, 0, 0, 0, 2134016,
  /* 44279 */ 0, 0, 0, 0, 0, 0, 57344, 861, 538, 538, 538, 538, 538, 882, 884, 538, 538, 895, 538, 538, 538, 538, 560,
  /* 44302 */ 3187, 560, 560, 560, 3190, 560, 560, 560, 560, 560, 560, 560, 560, 2827, 560, 560, 560, 560, 560, 560,
  /* 44322 */ 2835, 560, 911, 917, 560, 560, 560, 560, 935, 560, 560, 560, 560, 560, 956, 958, 560, 560, 560, 560, 2294,
  /* 44343 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 0, 584, 584, 987, 584, 584, 584, 584, 584, 584, 560,
  /* 44364 */ 969, 560, 560, 560, 560, 0, 584, 584, 986, 992, 584, 584, 584, 584, 1010, 0, 538, 584, 560, 843, 884, 538,
  /* 44386 */ 895, 538, 917, 958, 560, 969, 560, 0, 992, 1033, 584, 1044, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44410 */ 0, 1163264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1145, 0, 1147, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44438 */ 2691072, 2740224, 0, 0, 2535424, 2711552, 0, 0, 1163, 0, 1165, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 1175, 0, 0,
  /* 44461 */ 0, 0, 0, 3063808, 0, 0, 0, 3141632, 0, 0, 0, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 0, 0, 0, 2950, 0, 0, 0, 0,
  /* 44490 */ 0, 0, 0, 0, 0, 0, 1251, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 0, 777, 0, 789, 0, 806, 0, 0, 0, 0, 1175, 538,
  /* 44520 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3288, 538, 538, 1318, 538, 538, 538,
  /* 44541 */ 538, 538, 538, 538, 1332, 538, 538, 538, 538, 538, 538, 538, 3003, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 44562 */ 1779, 538, 538, 1782, 538, 538, 538, 538, 538, 538, 538, 1343, 1344, 538, 538, 538, 1349, 906, 560, 560,
  /* 44582 */ 560, 560, 1356, 560, 560, 560, 560, 2565, 560, 560, 560, 560, 2569, 560, 560, 560, 560, 560, 560, 560,
  /* 44602 */ 3482, 584, 584, 584, 584, 584, 584, 584, 584, 2385, 584, 584, 2388, 2389, 584, 584, 2155, 560, 1386, 1388,
  /* 44622 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2624, 0, 560, 560, 26018, 1349, 981,
  /* 44643 */ 584, 584, 584, 584, 1449, 584, 584, 584, 584, 584, 584, 1488, 584, 584, 584, 1492, 584, 584, 584, 584,
  /* 44663 */ 584, 0, 0, 0, 1621, 0, 0, 0, 0, 0, 1627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2965, 0, 0, 0, 1723, 538,
  /* 44693 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1785, 538, 538, 538, 1790, 538, 538,
  /* 44714 */ 538, 538, 538, 538, 538, 538, 1798, 538, 538, 538, 538, 538, 538, 1326, 538, 538, 538, 538, 538, 538, 538,
  /* 44735 */ 538, 538, 538, 2782, 538, 2785, 538, 538, 538, 1804, 538, 538, 538, 1349, 0, 560, 560, 560, 560, 560, 560,
  /* 44756 */ 560, 1818, 560, 560, 560, 560, 977, 560, 0, 584, 584, 584, 584, 584, 997, 584, 1005, 584, 560, 26018, 0,
  /* 44777 */ 584, 584, 584, 584, 584, 584, 584, 1914, 584, 584, 584, 584, 584, 584, 2665, 584, 584, 2669, 584, 584,
  /* 44797 */ 584, 584, 584, 584, 1928, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1995, 584, 584, 584, 584, 1734,
  /* 44817 */ 1925, 584, 584, 1939, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3228, 584, 584, 0,
  /* 44838 */ 2044, 2045, 0, 2047, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2899968, 0, 0, 0, 0, 0, 2070, 0, 0, 0, 0, 0,
  /* 44865 */ 2074, 0, 0, 2076, 0, 0, 0, 0, 0, 0, 0, 1239, 0, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 0, 0, 0, 0, 0, 2084,
  /* 44895 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2450, 0, 2111, 2112, 2113, 0, 2115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44925 */ 0, 2123, 0, 0, 2128, 2129, 0, 0, 0, 0, 0, 2133, 0, 0, 538, 2181, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 44949 */ 538, 538, 538, 538, 2188, 538, 538, 538, 538, 1321, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 44970 */ 2523, 538, 538, 538, 538, 538, 538, 538, 538, 2194, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 44991 */ 2783, 538, 538, 2787, 538, 0, 0, 0, 2223, 560, 560, 560, 560, 560, 560, 560, 2231, 560, 560, 560, 560,
  /* 45012 */ 560, 929, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2246, 560, 560, 560, 560, 560, 2266, 560, 560,
  /* 45033 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2274, 560, 560, 560, 560, 1362, 560, 560, 560, 560, 560,
  /* 45054 */ 560, 1377, 560, 560, 560, 1382, 560, 560, 560, 2280, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 45074 */ 560, 560, 560, 3205, 560, 560, 0, 0, 0, 2310, 584, 584, 584, 584, 584, 584, 584, 2318, 584, 584, 584, 584,
  /* 45096 */ 584, 584, 3495, 0, 0, 3498, 3499, 0, 0, 0, 538, 538, 538, 538, 3595, 538, 560, 560, 560, 560, 3599, 560,
  /* 45118 */ 584, 584, 2353, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2361, 584, 584, 584, 584,
  /* 45138 */ 1972, 584, 584, 584, 584, 584, 584, 584, 584, 1983, 584, 584, 584, 584, 1989, 584, 584, 584, 584, 584,
  /* 45158 */ 584, 584, 584, 584, 538, 584, 560, 3245, 538, 3247, 560, 3249, 584, 584, 584, 584, 2367, 584, 584, 584,
  /* 45178 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2374, 584, 584, 584, 0, 0, 2453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45203 */ 2461, 0, 0, 0, 0, 0, 0, 815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 0, 538, 538, 538, 2529, 538,
  /* 45232 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2799, 538, 538, 538, 560, 2698, 584, 584, 584,
  /* 45252 */ 2700, 2701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 739, 0, 0, 0, 584, 584, 584, 584, 584, 2874, 584,
  /* 45279 */ 2875, 584, 584, 584, 584, 584, 584, 1489, 584, 584, 584, 584, 1494, 584, 584, 584, 584, 584, 3379, 584,
  /* 45299 */ 584, 584, 584, 584, 584, 584, 584, 584, 3388, 584, 584, 584, 538, 538, 538, 538, 1322, 538, 538, 538, 538,
  /* 45320 */ 538, 538, 538, 538, 538, 538, 538, 2537, 538, 538, 538, 538, 0, 0, 0, 0, 3452, 0, 3454, 0, 538, 538, 538,
  /* 45343 */ 538, 538, 3459, 538, 538, 538, 538, 538, 1729, 538, 538, 538, 538, 1735, 538, 538, 538, 538, 538, 538,
  /* 45363 */ 538, 3358, 538, 560, 560, 560, 560, 560, 560, 560, 1893, 560, 560, 560, 560, 560, 560, 560, 560, 1371,
  /* 45383 */ 560, 1376, 560, 560, 1380, 560, 560, 560, 560, 560, 560, 3581, 560, 560, 584, 584, 584, 584, 584, 3587,
  /* 45403 */ 584, 584, 3589, 0, 3591, 538, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 560, 584, 584, 584, 584,
  /* 45424 */ 2326, 584, 584, 2330, 584, 584, 584, 2334, 584, 584, 584, 584, 584, 1502, 584, 584, 584, 1509, 1511, 584,
  /* 45444 */ 584, 584, 584, 584, 584, 2680, 2681, 584, 584, 584, 584, 584, 584, 584, 584, 2890, 584, 584, 584, 584,
  /* 45464 */ 584, 584, 584, 403, 0, 0, 0, 0, 0, 370, 378, 406, 0, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45494 */ 0, 0, 0, 2475, 2476, 411, 413, 0, 0, 370, 378, 0, 69632, 73728, 0, 0, 0, 0, 429, 65536, 0, 0, 0, 0, 0,
  /* 45519 */ 3063808, 0, 0, 0, 3141632, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 2756, 0, 0, 0, 0, 2761, 0, 0, 0, 429, 429, 0,
  /* 45545 */ 429, 0, 413, 429, 452, 0, 0, 0, 0, 0, 0, 0, 370, 0, 411, 0, 494, 494, 0, 494, 494, 494, 494, 494, 494,
  /* 45570 */ 494, 494, 520, 520, 520, 520, 452, 452, 452, 452, 528, 452, 452, 532, 533, 452, 520, 532, 520, 520, 520,
  /* 45591 */ 520, 520, 520, 520, 520, 536, 554, 577, 554, 577, 554, 554, 577, 554, 554, 601, 577, 577, 577, 577, 577,
  /* 45612 */ 577, 554, 577, 577, 577, 601, 601, 601, 554, 601, 601, 601, 601, 601, 601, 601, 601, 601, 577, 577, 615,
  /* 45633 */ 620, 620, 601, 626, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 734, 0, 0, 0,
  /* 45659 */ 0, 0, 0, 0, 0, 0, 0, 2408, 0, 0, 0, 0, 0, 305, 306, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0,
  /* 45691 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2472, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2734, 0, 0,
  /* 45724 */ 0, 793, 0, 0, 774, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0, 774, 0, 793, 0, 0, 0, 0, 0, 0,
  /* 45755 */ 538, 838, 538, 538, 538, 538, 538, 538, 538, 3168, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2212, 538,
  /* 45776 */ 538, 538, 538, 538, 0, 538, 867, 869, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 560,
  /* 45797 */ 560, 560, 560, 2577, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1899, 560, 560, 560, 560,
  /* 45818 */ 912, 560, 560, 560, 560, 560, 560, 941, 943, 560, 560, 560, 560, 560, 560, 2242, 560, 560, 560, 560, 560,
  /* 45839 */ 560, 560, 560, 560, 560, 2272, 560, 560, 560, 560, 560, 1016, 1018, 584, 584, 584, 584, 584, 584, 584,
  /* 45859 */ 584, 584, 584, 584, 584, 0, 0, 0, 538, 538, 538, 3606, 560, 560, 560, 3608, 584, 0, 1090, 0, 0, 1092, 0,
  /* 45882 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097, 1098, 1099, 1100, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45912 */ 0, 0, 0, 2762, 0, 0, 0, 0, 1148, 0, 0, 0, 0, 0, 1154, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 318,
  /* 45939 */ 319, 319, 424, 425, 65536, 432, 0, 0, 1227, 1236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0,
  /* 45964 */ 0, 538, 1285, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2177, 538, 538, 1302,
  /* 45985 */ 538, 538, 538, 1306, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 897, 538, 538, 538, 538, 560, 560,
  /* 46006 */ 1359, 560, 560, 560, 1363, 560, 560, 1374, 560, 560, 1378, 560, 560, 560, 560, 560, 978, 0, 584, 584, 584,
  /* 46027 */ 584, 584, 584, 1002, 584, 584, 560, 560, 26018, 1349, 981, 584, 584, 584, 584, 584, 584, 584, 1452, 584,
  /* 46047 */ 584, 584, 584, 584, 2342, 584, 584, 584, 584, 584, 584, 2348, 584, 2350, 584, 1456, 584, 584, 1467, 584,
  /* 46067 */ 584, 1471, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3316, 584, 584, 584, 584, 584, 584, 0, 0, 1636, 0,
  /* 46089 */ 0, 0, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 1191, 0, 0, 1829, 538, 538, 538, 538, 560, 560, 560,
  /* 46116 */ 560, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0, 0, 0,
  /* 46146 */ 0, 0, 0, 0, 0, 163840, 0, 0, 0, 2135, 0, 0, 2138, 0, 538, 538, 2141, 538, 538, 538, 538, 538, 538, 538,
  /* 46170 */ 538, 1748, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2206, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 46191 */ 538, 538, 538, 0, 0, 0, 0, 0, 3170304, 3178496, 0, 0, 3227648, 3043328, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 0,
  /* 46215 */ 0, 0, 0, 0, 0, 0, 3455, 538, 538, 538, 538, 538, 538, 538, 0, 0, 0, 560, 560, 2225, 560, 560, 560, 560,
  /* 46239 */ 560, 560, 560, 560, 560, 560, 560, 3203, 560, 560, 560, 560, 560, 560, 560, 2293, 560, 560, 560, 560, 560,
  /* 46260 */ 560, 560, 560, 560, 560, 560, 0, 0, 981, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3389,
  /* 46282 */ 584, 584, 538, 0, 0, 0, 584, 584, 2312, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2642, 584, 584,
  /* 46304 */ 584, 584, 584, 584, 584, 584, 2380, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 538, 538, 538,
  /* 46325 */ 538, 1324, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2819, 538, 538, 0, 0, 0, 1560, 0, 1566,
  /* 46347 */ 0, 1572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109, 0, 0, 0, 0, 0, 2492, 0, 0, 0, 0, 0, 538, 538,
  /* 46377 */ 538, 538, 538, 538, 538, 2995, 538, 538, 538, 538, 538, 538, 538, 2530, 538, 538, 538, 538, 538, 538, 538,
  /* 46398 */ 538, 538, 2540, 538, 538, 538, 538, 1349, 0, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 46419 */ 2597, 560, 560, 560, 2660, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2671, 584, 584, 584, 584,
  /* 46439 */ 584, 1030, 584, 584, 584, 584, 1048, 584, 584, 584, 0, 0, 0, 0, 0, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46466 */ 0, 167936, 0, 0, 0, 0, 2308, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2916,
  /* 46488 */ 584, 0, 0, 0, 0, 3143, 0, 0, 0, 3146, 0, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 781, 0, 3154, 0, 0,
  /* 46518 */ 0, 0, 0, 0, 3157, 0, 3159, 538, 538, 538, 538, 538, 538, 538, 3179, 538, 538, 538, 538, 538, 538, 538,
  /* 46540 */ 538, 1294, 538, 538, 538, 538, 538, 538, 538, 560, 560, 560, 3210, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 46561 */ 560, 584, 584, 584, 584, 584, 3486, 584, 584, 584, 3251, 0, 0, 0, 0, 3255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46587 */ 1216, 0, 0, 0, 0, 1221, 0, 584, 584, 3310, 584, 584, 584, 3313, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 46609 */ 584, 2357, 2358, 584, 584, 584, 584, 584, 584, 3330, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3142, 0, 0, 0,
  /* 46635 */ 0, 0, 3267, 0, 0, 0, 0, 538, 3352, 538, 3354, 538, 538, 538, 538, 538, 560, 560, 560, 560, 560, 560, 560,
  /* 46658 */ 3035, 560, 560, 560, 560, 560, 560, 560, 3367, 560, 3369, 560, 560, 560, 560, 560, 560, 584, 584, 584,
  /* 46678 */ 584, 3074, 584, 584, 584, 584, 3078, 584, 584, 584, 584, 3537, 584, 584, 584, 0, 3541, 0, 0, 0, 0, 0, 538,
  /* 46701 */ 538, 538, 538, 538, 2144, 538, 538, 538, 538, 538, 3546, 538, 3547, 538, 538, 538, 538, 538, 538, 538,
  /* 46721 */ 560, 560, 3553, 560, 3554, 560, 560, 560, 560, 2605, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 46741 */ 560, 560, 2273, 560, 560, 560, 412, 358, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0,
  /* 46766 */ 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0, 0, 470, 481, 470, 0, 0, 470, 0, 0, 0, 0, 0, 0,
  /* 46797 */ 0, 0, 521, 521, 525, 525, 525, 525, 470, 470, 470, 470, 470, 470, 470, 521, 475, 470, 525, 521, 525, 525,
  /* 46819 */ 525, 525, 525, 525, 525, 525, 537, 555, 578, 555, 578, 555, 555, 578, 555, 555, 602, 578, 578, 578, 578,
  /* 46840 */ 578, 578, 555, 578, 578, 578, 602, 602, 602, 555, 602, 602, 602, 602, 602, 602, 602, 602, 602, 578, 578,
  /* 46861 */ 616, 621, 621, 602, 627, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 735, 0,
  /* 46886 */ 0, 0, 641, 735, 0, 741, 742, 641, 0, 0, 781, 781, 0, 795, 833, 0, 538, 839, 538, 538, 538, 538, 858, 305,
  /* 46910 */ 306, 0, 0, 0, 0, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1241, 0, 0, 0, 0, 0, 0, 0, 684, 685, 0, 0, 0, 0, 0, 0, 0,
  /* 46942 */ 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 1144, 1102, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 795,
  /* 46972 */ 0, 0, 0, 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 795, 0, 0, 0, 662, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 641, 0, 0, 0,
  /* 47004 */ 790, 0, 795, 0, 781, 0, 810, 862, 868, 538, 873, 538, 538, 538, 538, 538, 891, 538, 538, 538, 538, 538,
  /* 47026 */ 560, 560, 560, 560, 2618, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 0, 0, 0, 0, 396, 397, 0, 398,
  /* 47049 */ 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 0, 353, 0, 0, 370, 0, 0, 398, 560, 913, 560, 560, 560, 560, 932, 936, 942,
  /* 47076 */ 560, 947, 560, 560, 560, 560, 560, 560, 3057, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2865, 560,
  /* 47097 */ 560, 560, 560, 560, 965, 560, 560, 560, 560, 560, 0, 584, 584, 988, 584, 584, 584, 584, 1007, 1011, 1017,
  /* 47118 */ 584, 1022, 584, 584, 584, 584, 584, 1040, 584, 584, 584, 584, 584, 0, 0, 0, 3605, 538, 538, 538, 3607,
  /* 47139 */ 560, 560, 560, 3609, 0, 538, 584, 560, 538, 538, 891, 538, 538, 560, 560, 965, 560, 560, 0, 584, 584, 584,
  /* 47161 */ 584, 3231, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2901, 584, 584, 584, 584, 584, 584,
  /* 47181 */ 1040, 584, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
  /* 47210 */ 1124, 1125, 0, 0, 0, 0, 0, 0, 0, 787, 0, 787, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 853, 538,
  /* 47236 */ 1194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1205, 0, 0, 0, 0, 0, 0, 1138, 0, 367, 367, 0, 1141, 0, 0, 0, 0, 0,
  /* 47266 */ 0, 0, 69632, 73728, 0, 0, 0, 423, 0, 65536, 0, 0, 0, 0, 0, 1212, 0, 0, 1093, 0, 0, 0, 1218, 0, 1220, 0, 0,
  /* 47293 */ 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 1234, 0, 1237, 1194, 0, 1218,
  /* 47321 */ 1240, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 2715, 0, 0, 0, 0, 0, 0, 0, 0, 2444, 0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
  /* 47351 */ 0, 0, 1252, 0, 0, 0, 0, 0, 1252, 0, 0, 1143, 1252, 0, 1259, 538, 538, 538, 538, 1265, 538, 538, 538, 538,
  /* 47375 */ 1271, 538, 538, 538, 538, 538, 538, 1347, 538, 1349, 906, 1351, 560, 560, 560, 560, 560, 560, 3200, 560,
  /* 47395 */ 560, 560, 560, 560, 560, 560, 560, 3206, 538, 1303, 538, 538, 538, 538, 1308, 538, 538, 538, 538, 538,
  /* 47415 */ 538, 538, 538, 538, 1330, 538, 538, 538, 538, 538, 1337, 1316, 538, 538, 538, 1323, 1325, 538, 538, 538,
  /* 47435 */ 538, 538, 538, 538, 538, 538, 538, 1297, 538, 538, 538, 538, 538, 1358, 560, 560, 560, 560, 1364, 560,
  /* 47455 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 1393, 560, 560, 560, 560, 560, 1385, 560, 560, 560, 560, 560,
  /* 47476 */ 560, 560, 560, 560, 560, 1396, 560, 560, 560, 560, 560, 1405, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 47497 */ 560, 560, 1880, 560, 560, 560, 1885, 1401, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1409, 560, 560,
  /* 47517 */ 560, 1416, 1418, 1440, 560, 26018, 1349, 981, 1444, 584, 584, 584, 584, 584, 1451, 584, 584, 584, 584,
  /* 47536 */ 584, 1031, 1033, 584, 584, 1044, 584, 584, 584, 584, 0, 0, 0, 538, 538, 538, 538, 560, 560, 560, 560, 584,
  /* 47558 */ 1457, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1478, 584, 584, 584, 584, 584, 1486, 584, 584,
  /* 47578 */ 584, 584, 584, 584, 584, 584, 1496, 584, 1073, 0, 0, 1554, 0, 0, 0, 1560, 0, 0, 0, 1566, 0, 0, 0, 1572, 0,
  /* 47603 */ 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2772, 0, 0, 0, 0, 1637, 1638, 0, 0, 0, 0, 0, 0, 1645, 0,
  /* 47633 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47662 */ 0, 0, 1643, 0, 0, 0, 0, 0, 0, 1699, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 0, 1699, 0, 0, 0, 0, 0, 0, 0, 69632,
  /* 47691 */ 73728, 167936, 0, 0, 0, 0, 65536, 0, 538, 538, 538, 538, 1792, 1793, 538, 538, 538, 538, 538, 538, 538,
  /* 47712 */ 538, 538, 538, 1331, 538, 538, 538, 538, 538, 560, 560, 1824, 560, 560, 560, 560, 1830, 560, 560, 560,
  /* 47732 */ 560, 560, 560, 560, 560, 1894, 560, 560, 560, 560, 1900, 560, 560, 560, 560, 1841, 560, 560, 560, 560,
  /* 47752 */ 1845, 560, 560, 560, 560, 560, 560, 560, 560, 2244, 560, 560, 560, 560, 2249, 560, 560, 560, 560, 1856,
  /* 47772 */ 560, 560, 560, 1861, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1862, 560, 560, 560, 560, 560, 560, 560,
  /* 47793 */ 1888, 1889, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3432, 584, 560, 26018,
  /* 47813 */ 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1920, 584, 584, 584, 1957, 584, 584, 584,
  /* 47834 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2644, 584, 584, 584, 2002, 538, 2004, 538, 538, 560, 2008,
  /* 47854 */ 560, 560, 584, 2012, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 3336, 3337, 0, 3142, 0, 3341, 0, 0, 0, 2046, 0, 0,
  /* 47880 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184728, 184929, 184929, 184929, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 0, 2091, 0, 0,
  /* 47907 */ 0, 0, 2094, 2095, 0, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1681, 1682, 1683, 1684, 0, 0, 0, 2124,
  /* 47934 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134, 538, 2204, 538, 538, 538, 538, 2209, 538, 538, 538, 538,
  /* 47960 */ 538, 538, 538, 538, 0, 0, 0, 0, 434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 2221,
  /* 47990 */ 0, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 584, 3216, 584, 560, 2291, 560, 560,
  /* 48011 */ 560, 560, 2296, 560, 560, 560, 560, 560, 560, 560, 560, 0, 0, 0, 0, 437, 0, 0, 334, 465, 465, 465, 465,
  /* 48034 */ 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 0, 2308, 0, 584, 584, 584, 584, 584, 584, 584,
  /* 48056 */ 584, 584, 584, 584, 584, 584, 3239, 584, 584, 584, 2378, 584, 584, 584, 584, 2383, 584, 584, 584, 584,
  /* 48076 */ 584, 584, 584, 584, 538, 538, 538, 538, 1349, 0, 560, 1813, 560, 560, 560, 560, 560, 560, 560, 1820, 0, 0,
  /* 48098 */ 0, 2454, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 0, 0, 0, 3137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2491, 0, 0, 0, 0, 0,
  /* 48129 */ 0, 538, 538, 2498, 538, 538, 538, 538, 538, 538, 2814, 538, 538, 2817, 538, 538, 2820, 538, 0, 0, 538,
  /* 48150 */ 2527, 538, 538, 538, 538, 538, 538, 538, 2534, 538, 538, 2538, 538, 538, 538, 538, 538, 538, 3001, 538,
  /* 48170 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 2199, 538, 538, 538, 538, 538, 2562, 560, 560, 560, 560, 560,
  /* 48191 */ 560, 560, 560, 560, 560, 560, 2570, 560, 560, 560, 560, 560, 2578, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 48212 */ 560, 560, 560, 1864, 560, 560, 560, 560, 560, 2588, 560, 560, 2590, 560, 2591, 560, 560, 560, 560, 560,
  /* 48232 */ 560, 560, 560, 2599, 560, 560, 2603, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2614,
  /* 48252 */ 2615, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 0, 0, 0, 0, 438, 0, 0, 450,
  /* 48275 */ 467, 467, 467, 467, 467, 467, 467, 467, 467, 477, 467, 467, 467, 467, 467, 467, 584, 584, 584, 2636, 584,
  /* 48296 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2893, 2894, 584, 584, 2711, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48320 */ 0, 0, 0, 0, 0, 0, 0, 2943, 0, 0, 0, 2751, 0, 0, 0, 2755, 0, 2757, 0, 0, 0, 0, 0, 0, 0, 804, 0, 0, 0, 0, 0,
  /* 48351 */ 0, 809, 0, 538, 2790, 538, 538, 538, 2793, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1734, 538,
  /* 48372 */ 538, 538, 538, 538, 560, 2837, 560, 560, 560, 2840, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 48392 */ 1431, 560, 560, 560, 560, 560, 560, 560, 2850, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 48413 */ 560, 953, 560, 560, 0, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2878, 584, 2881, 584, 584,
  /* 48434 */ 584, 584, 3311, 584, 584, 584, 3315, 584, 584, 584, 584, 584, 584, 584, 1993, 584, 584, 584, 584, 584,
  /* 48454 */ 584, 538, 584, 560, 538, 538, 538, 538, 560, 560, 560, 560, 584, 584, 584, 584, 0, 0, 0, 584, 584, 584,
  /* 48476 */ 2886, 584, 584, 584, 2889, 584, 584, 584, 584, 584, 584, 584, 584, 2911, 584, 584, 584, 584, 584, 584,
  /* 48496 */ 584, 3011, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3023, 538, 538, 538, 538,
  /* 48516 */ 1349, 1809, 560, 560, 560, 560, 560, 1816, 560, 560, 560, 560, 560, 560, 3370, 560, 560, 560, 3374, 560,
  /* 48536 */ 584, 584, 584, 584, 0, 0, 0, 0, 0, 2705, 0, 0, 0, 0, 0, 0, 0, 2050, 2051, 0, 0, 0, 0, 0, 0, 0, 659, 0,
  /* 48564 */ 659, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 851, 538, 3093, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 48588 */ 584, 584, 584, 584, 584, 584, 584, 3241, 3107, 584, 584, 584, 584, 584, 538, 584, 560, 538, 538, 560, 560,
  /* 48609 */ 584, 584, 0, 0, 2930, 0, 0, 0, 0, 0, 0, 3125, 0, 0, 0, 0, 0, 0, 0, 3131, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0,
  /* 48639 */ 0, 0, 0, 0, 0, 0, 538, 837, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3166, 538, 538, 538, 538, 538,
  /* 48662 */ 538, 538, 538, 538, 538, 538, 2807, 538, 538, 538, 538, 538, 538, 538, 3176, 538, 538, 538, 538, 538,
  /* 48682 */ 3181, 538, 3183, 538, 538, 538, 538, 538, 538, 1730, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 48702 */ 2509, 538, 538, 538, 538, 538, 560, 560, 3209, 560, 3211, 560, 560, 560, 560, 560, 560, 560, 560, 584,
  /* 48722 */ 584, 584, 584, 3485, 584, 584, 584, 584, 0, 0, 0, 3253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3258, 0, 0, 0, 0, 0,
  /* 48749 */ 755, 0, 0, 0, 0, 0, 755, 755, 0, 0, 820, 3278, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 48773 */ 538, 3287, 538, 538, 538, 538, 1349, 1810, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 48793 */ 3048, 560, 560, 560, 538, 3506, 538, 538, 538, 538, 538, 538, 538, 538, 3514, 560, 560, 560, 3518, 560,
  /* 48813 */ 560, 560, 560, 2824, 560, 560, 560, 560, 560, 560, 2831, 560, 2833, 560, 560, 560, 560, 1390, 560, 560,
  /* 48833 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1881, 560, 560, 560, 560, 560, 560, 3557, 3558, 560,
  /* 48853 */ 560, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2356, 584, 584, 584, 584, 584, 584, 584, 584, 1529,
  /* 48873 */ 1530, 584, 584, 584, 0, 538, 584, 3565, 3566, 584, 584, 0, 0, 3569, 0, 538, 538, 538, 538, 538, 538, 538,
  /* 48895 */ 560, 560, 560, 560, 2839, 560, 560, 2842, 560, 560, 560, 560, 560, 560, 560, 560, 560, 3373, 560, 560,
  /* 48915 */ 584, 584, 584, 584, 360, 361, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 172032,
  /* 48941 */ 0, 0, 0, 0, 65536, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 471, 471, 485, 0,
  /* 48971 */ 0, 485, 361, 361, 361, 507, 361, 361, 361, 361, 471, 471, 556, 556, 603, 579, 579, 579, 579, 579, 579,
  /* 48992 */ 556, 579, 579, 579, 603, 603, 603, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0,
  /* 49017 */ 773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 0, 556, 603, 603, 603, 603, 603, 603, 603, 603, 603,
  /* 49044 */ 579, 579, 556, 579, 579, 603, 367, 0, 700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225887, 225887, 225887,
  /* 49069 */ 225887, 0, 0, 0, 700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 0, 0, 560, 970, 560, 560, 560, 560,
  /* 49096 */ 0, 584, 584, 584, 584, 584, 584, 584, 1008, 584, 584, 584, 584, 3381, 584, 584, 584, 584, 584, 3387, 584,
  /* 49117 */ 584, 584, 584, 538, 584, 560, 2922, 538, 2924, 560, 2926, 584, 0, 0, 0, 0, 0, 0, 0, 2443, 0, 0, 0, 0, 0,
  /* 49142 */ 0, 0, 0, 2728, 0, 0, 0, 0, 0, 0, 0, 584, 584, 1045, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1708,
  /* 49170 */ 0, 0, 0, 0, 0, 0, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 560, 560, 560, 1361,
  /* 49200 */ 560, 560, 560, 1370, 560, 560, 560, 560, 560, 560, 560, 560, 2298, 560, 560, 2301, 2302, 560, 560, 0, 560,
  /* 49221 */ 1441, 26018, 1349, 981, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1454, 584, 584, 584, 584, 3438, 584,
  /* 49241 */ 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 0, 3500, 0, 3502, 538, 538, 584, 584, 1463, 584, 584,
  /* 49263 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2914, 584, 584, 584, 1370, 538, 538, 538, 538, 538,
  /* 49284 */ 560, 560, 560, 560, 560, 584, 584, 584, 584, 584, 584, 2691, 2692, 2693, 538, 538, 538, 538, 560, 560,
  /* 49304 */ 560, 560, 560, 3033, 560, 560, 560, 560, 560, 560, 1073, 0, 0, 0, 1555, 0, 0, 0, 1561, 0, 0, 0, 1567, 0,
  /* 49328 */ 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3147, 0, 0, 0, 3150, 3151, 0, 1573, 0, 0, 0, 0, 0, 0, 0,
  /* 49358 */ 0, 0, 0, 0, 0, 0, 0, 0, 2967, 0, 0, 0, 0, 1605, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 0, 0, 439, 0,
  /* 49389 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3148, 0, 0, 0, 0, 0, 0, 1672, 0, 1674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49421 */ 270336, 270336, 270336, 270336, 538, 538, 1743, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 49439 */ 538, 538, 1738, 538, 538, 538, 1756, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1769,
  /* 49459 */ 538, 538, 538, 538, 1349, 1811, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 2623, 560, 560,
  /* 49479 */ 560, 0, 1887, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1897, 560, 560, 560, 560, 560, 560, 3213, 560,
  /* 49500 */ 560, 560, 560, 560, 560, 584, 584, 584, 3073, 584, 584, 584, 584, 584, 584, 584, 0, 0, 2035, 0, 0, 0, 0,
  /* 49523 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 2222,
  /* 49543 */ 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 1381, 560, 560, 0, 0, 2309, 584, 584,
  /* 49564 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3089, 584, 3091, 584, 0, 0, 0, 2430, 0, 0, 0, 0, 0,
  /* 49588 */ 0, 0, 0, 0, 0, 0, 0, 2064, 0, 0, 0, 2067, 0, 0, 0, 2490, 0, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538,
  /* 49617 */ 538, 3460, 538, 2502, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2202,
  /* 49637 */ 2203, 538, 538, 538, 538, 2777, 538, 538, 538, 538, 538, 538, 2784, 538, 2786, 538, 538, 538, 538, 538,
  /* 49657 */ 1746, 538, 538, 538, 538, 1750, 538, 538, 538, 538, 538, 538, 538, 3409, 538, 3411, 3412, 538, 3414, 538,
  /* 49677 */ 560, 560, 0, 0, 584, 584, 584, 584, 2873, 584, 584, 584, 584, 584, 584, 2880, 584, 2882, 538, 538, 538,
  /* 49698 */ 3281, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 3007, 538, 3009, 538, 584, 584, 3603,
  /* 49718 */ 584, 0, 0, 0, 538, 538, 538, 538, 560, 560, 560, 560, 584, 0, 0, 0, 0, 0, 0, 0, 3396, 3142, 0, 0, 0, 0,
  /* 49744 */ 538, 3592, 538, 538, 538, 538, 560, 3596, 560, 560, 560, 560, 584, 3600, 0, 0, 362, 0, 0, 0, 0, 0, 0, 367,
  /* 49768 */ 0, 295, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 0, 0, 372, 0, 0, 372, 0, 0, 0, 0,
  /* 49796 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 557, 557, 604, 580, 580, 580, 580, 580, 580, 557, 580, 580, 580, 604, 604, 604,
  /* 49821 */ 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 799, 0, 0,
  /* 49849 */ 0, 0, 0, 0, 779, 805, 0, 805, 800, 0, 0, 0, 819, 0, 557, 604, 604, 604, 604, 604, 604, 604, 604, 604, 580,
  /* 49874 */ 580, 557, 580, 580, 604, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2982, 0, 538, 538, 1757, 538,
  /* 49901 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 1753, 538, 538, 3260, 0, 0, 0, 0, 3142, 0, 0,
  /* 49924 */ 0, 0, 0, 0, 0, 0, 0, 0, 2729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 364, 365, 366, 0, 0, 367, 0, 295, 0, 0, 0,
  /* 49954 */ 0, 0, 0, 0, 69632, 73728, 270336, 0, 0, 0, 0, 65536, 0, 0, 364, 0, 363, 0, 0, 0, 69632, 73728, 0, 0, 0, 0,
  /* 49980 */ 430, 65536, 0, 0, 0, 0, 440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940928, 2973696, 0, 0, 3084288, 0, 0, 430,
  /* 50006 */ 430, 0, 430, 0, 364, 430, 453, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880,
  /* 50028 */ 122880, 0, 0, 0, 495, 495, 0, 502, 502, 502, 502, 508, 509, 502, 502, 522, 522, 522, 522, 453, 453, 453,
  /* 50050 */ 453, 453, 453, 453, 522, 453, 453, 522, 522, 522, 522, 522, 522, 522, 522, 522, 558, 581, 558, 581, 558,
  /* 50071 */ 558, 581, 558, 558, 605, 581, 581, 581, 581, 581, 581, 558, 581, 581, 581, 605, 605, 605, 558, 605, 605,
  /* 50092 */ 605, 605, 605, 605, 605, 605, 605, 581, 581, 617, 622, 622, 605, 628, 1, 12290, 3, 78117, 78117, 295, 0,
  /* 50113 */ 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 1093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 0, 0, 0, 966, 560,
  /* 50144 */ 560, 560, 560, 560, 0, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2900, 584, 584, 584, 584, 584, 584,
  /* 50165 */ 584, 584, 1036, 584, 584, 584, 584, 584, 0, 0, 0, 538, 584, 560, 538, 538, 892, 538, 538, 560, 560, 966,
  /* 50187 */ 560, 560, 0, 584, 584, 584, 584, 3538, 584, 584, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 2993, 538,
  /* 50211 */ 538, 538, 538, 538, 584, 1041, 584, 584, 78117, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2758, 0, 0, 0, 0, 0,
  /* 50237 */ 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3132, 3133, 0, 0, 0, 560, 2224, 560, 560, 560, 560,
  /* 50265 */ 560, 560, 560, 560, 560, 560, 560, 560, 2287, 560, 560, 560, 0, 0, 0, 584, 2311, 584, 584, 584, 584, 584,
  /* 50287 */ 584, 584, 584, 584, 584, 584, 3318, 584, 584, 584, 584, 2587, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 50308 */ 560, 560, 560, 560, 560, 560, 2264, 559, 559, 606, 582, 582, 582, 582, 582, 582, 559, 582, 582, 582, 606,
  /* 50329 */ 606, 606, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
  /* 50356 */ 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 559, 606, 606, 606, 606, 606, 606, 606, 606, 606, 582, 582, 559, 582, 582,
  /* 50381 */ 606, 367, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
  /* 50413 */ 0, 0, 0, 0, 0, 0, 0, 0, 2938, 0, 0, 0, 2942, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2962,
  /* 50445 */ 0, 0, 0, 0, 0, 0, 0, 831, 0, 0, 0, 0, 0, 0, 0, 538, 538, 538, 538, 538, 855, 538, 538, 538, 538, 1727,
  /* 50471 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 1740, 538, 538, 538, 538, 538, 2154, 538, 538, 2158, 538,
  /* 50491 */ 538, 538, 2162, 538, 538, 538, 538, 538, 538, 2794, 538, 538, 538, 538, 538, 538, 538, 538, 538, 892, 538,
  /* 50512 */ 538, 538, 538, 538, 560, 584, 1520, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 538, 584,
  /* 50533 */ 560, 538, 538, 538, 1061, 903, 560, 560, 560, 1066, 977, 0, 584, 1073, 1551, 0, 0, 0, 1557, 0, 0, 0, 1563,
  /* 50556 */ 0, 0, 0, 1569, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 0, 1159, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 644,
  /* 50586 */ 0, 0, 0, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 0, 2090, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50619 */ 0, 0, 0, 0, 0, 0, 0, 3140, 0, 560, 971, 560, 560, 560, 560, 0, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 50643 */ 584, 3099, 584, 584, 584, 584, 584, 584, 584, 584, 1505, 584, 584, 584, 584, 584, 584, 584, 0, 538, 584,
  /* 50664 */ 560, 1058, 538, 538, 897, 538, 1063, 560, 560, 971, 560, 0, 1068, 584, 584, 1046, 584, 78117, 1073, 0, 0,
  /* 50685 */ 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 538, 538, 538, 538, 538, 0, 0, 1250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50715 */ 0, 253952, 266240, 0, 0, 0, 0, 0, 584, 584, 584, 1522, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0,
  /* 50737 */ 538, 584, 560, 538, 538, 887, 538, 538, 560, 560, 961, 560, 560, 0, 584, 1688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50762 */ 0, 0, 0, 0, 0, 0, 3259, 0, 538, 538, 1773, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 50785 */ 538, 1801, 538, 538, 538, 2166, 538, 2168, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
  /* 50805 */ 3184, 538, 538, 538, 0, 0, 0, 560, 560, 560, 560, 2227, 560, 560, 560, 560, 560, 560, 560, 560, 2621, 560,
  /* 50827 */ 560, 560, 560, 560, 560, 0, 2251, 560, 2253, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
  /* 50848 */ 560, 1397, 560, 560, 0, 0, 0, 584, 584, 584, 584, 2314, 584, 584, 584, 584, 584, 584, 584, 584, 3234, 584,
  /* 50870 */ 584, 584, 584, 584, 584, 584, 584, 1474, 584, 584, 584, 584, 584, 584, 584, 2338, 584, 2340, 584, 584,
  /* 50890 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3319, 584, 584, 584, 0, 0, 0, 0, 2480, 0, 0, 0, 0,
  /* 50914 */ 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 50930 */ 2179072, 2465792, 584, 584, 2662, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3328,
  /* 50949 */ 538, 3329, 560, 0, 3141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192968, 192968, 538, 538, 3175, 538,
  /* 50974 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 2187, 538, 538, 0, 0, 0, 0, 1142784, 0, 0, 0,
  /* 50997 */ 0, 0, 0, 1142784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1142784, 1142784, 0, 1142784, 0, 0, 0, 1142784, 1143202,
  /* 51020 */ 1143202, 0, 0, 0, 0, 0, 1143202, 0, 0, 0, 0, 655, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1217, 0, 0, 0, 0, 0,
  /* 51049 */ 1142784, 1143392, 1143392, 1143392, 1143392, 1143392, 1143392, 1143392, 1143392, 0, 1142784, 1142784,
  /* 51061 */ 1142784, 1142784, 1142784, 1143392, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0,
  /* 51081 */ 1146880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 2126730, 2125824, 2125824, 2125824, 2125824,
  /* 51103 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 51114 */ 2125824, 1155544, 0, 0, 0, 454, 0, 0, 0, 0, 1155544, 1155544, 1155544, 1155595, 1155595, 1155595, 1155544,
  /* 51131 */ 1155544, 1155544, 454, 454, 1155544, 454, 454, 454, 454, 454, 454, 454, 454, 1155595, 1155595, 1155595,
  /* 51147 */ 1155595, 1155595, 1155595, 1155595, 1155595, 1155595, 1155595, 1155595, 1155595, 1155595, 1155595,
  /* 51158 */ 1155595, 1155595, 0, 0, 0, 0, 0, 0, 0, 1155595, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 51182 */ 2134016, 0, 1167360, 1167360, 0, 1167360, 1167360, 0, 1167360, 1167360, 0, 1167360, 1167360, 1167360,
  /* 51196 */ 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1167360, 1, 12290, 3, 0, 0, 2183168, 0, 0,
  /* 51212 */ 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 1171456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 3108864,
  /* 51237 */ 3112960, 0, 0, 0, 0, 0, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 1166, 0,
  /* 51263 */ 0, 0, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2952, 0, 0, 0, 0, 0, 106496,
  /* 51293 */ 106496, 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 51307 */ 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 106496, 0, 106496, 106496, 106496, 106496,
  /* 51324 */ 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 2183168, 0, 0, 0, 0,
  /* 51347 */ 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 3125248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0,
  /* 51377 */ 0, 3158016, 2945024, 0, 2764800, 0, 0, 0, 0, 0, 2961408, 0, 0, 2830336, 3166208, 2433024, 2949120,
  /* 51394 */ 2949120, 0, 0, 0, 0, 0, 2752512, 2887680, 0, 0, 0, 0, 0, 0, 2179072, 2125824, 2125824, 2179072, 2179072,
  /* 51413 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 245760, 2125824
];

XQueryParser.EXPECTED =
[
  /*    0 */ 1019, 1027, 1028, 1026, 1022, 1032, 1036, 1040, 1044, 1048, 1972, 1460, 1174, 1061, 2899, 1972, 1668, 2427,
  /*   18 */ 1067, 1071, 1972, 2900, 1972, 1075, 1972, 1972, 1082, 1083, 1088, 1089, 1094, 1129, 1152, 1106, 1110, 1972,
  /*   36 */ 2157, 1116, 1972, 2530, 1083, 1083, 1122, 1089, 1089, 1128, 1129, 1130, 1135, 1139, 1972, 2737, 1144, 1951,
  /*   54 */ 1083, 1083, 2427, 1089, 1089, 1150, 1129, 1129, 1186, 1156, 1972, 1740, 1878, 1083, 1083, 1088, 1089, 1090,
  /*   72 */ 1129, 1129, 1131, 1161, 2092, 1972, 1083, 1084, 1089, 1089, 1129, 1129, 1166, 2116, 1951, 1083, 1122, 1124,
  /*   90 */ 1129, 1172, 2117, 2417, 2532, 1123, 1129, 1178, 1100, 2419, 1150, 1097, 1102, 1184, 1190, 1194, 2426, 1198,
  /*  108 */ 2533, 1200, 1204, 1208, 1212, 1216, 1220, 1221, 1225, 1228, 1232, 1236, 1240, 1244, 1248, 1972, 3016, 1972,
  /*  126 */ 1722, 1252, 1972, 1972, 1972, 1972, 1259, 1972, 1972, 1972, 1491, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
  /*  144 */ 1972, 1972, 1268, 1972, 1972, 1972, 1264, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
  /*  162 */ 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
  /*  180 */ 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
  /*  198 */ 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972,
  /*  216 */ 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 2749, 1273, 1972, 1280, 3069, 1284, 1288, 1292,
  /*  234 */ 1296, 1300, 1307, 1972, 1972, 1314, 1303, 1318, 1322, 1326, 1855, 1330, 1334, 1972, 1972, 1738, 1351, 2406,
  /*  252 */ 1355, 1972, 1639, 1359, 1972, 1364, 1972, 1621, 1370, 1972, 1972, 1739, 1377, 2844, 1387, 1972, 3091, 2405,
  /*  270 */ 1972, 1939, 1972, 1972, 1972, 1180, 1972, 1972, 1392, 1396, 1401, 1972, 1573, 1407, 1972, 1573, 1407, 1972,
  /*  288 */ 1972, 2612, 1972, 2680, 1695, 1414, 1972, 1996, 1421, 1972, 1118, 1972, 1972, 1063, 1972, 2054, 2507, 1972,
  /*  306 */ 2507, 1972, 2437, 1972, 2382, 1972, 1427, 1625, 1403, 1972, 1625, 1973, 2036, 1434, 1269, 1437, 1624, 2461,
  /*  324 */ 1956, 1445, 1442, 2064, 2561, 1449, 2066, 1453, 1457, 2563, 1473, 1471, 1477, 1486, 1262, 1972, 2820, 1490,
  /*  342 */ 2163, 1495, 1499, 1503, 1507, 1510, 1514, 1482, 1972, 1410, 1525, 1529, 1533, 1537, 1541, 1551, 2231, 1397,
  /*  360 */ 1555, 1409, 1646, 1560, 1564, 1568, 1572, 1972, 1480, 1972, 2202, 1972, 1579, 2820, 1490, 1577, 1583, 1604,
  /*  378 */ 1608, 1614, 1972, 1972, 1544, 1972, 1972, 1618, 1972, 1600, 2771, 1629, 1598, 1634, 1643, 1310, 1650, 1972,
  /*  396 */ 2341, 1655, 1972, 2341, 1655, 1972, 1660, 1667, 1672, 1679, 1683, 1687, 1972, 2784, 1972, 1972, 1692, 1972,
  /*  414 */ 1792, 1703, 1712, 1716, 1720, 1360, 1720, 1309, 1726, 1932, 1732, 1744, 1748, 1145, 1752, 2815, 1556, 1758,
  /*  432 */ 1765, 1770, 1769, 2030, 1688, 1774, 1778, 1783, 1779, 1663, 1789, 1796, 1803, 1805, 1800, 1809, 1822, 1826,
  /*  450 */ 1830, 1834, 1838, 1972, 1844, 2147, 1850, 1859, 1863, 1866, 1870, 1873, 1972, 1877, 1051, 1467, 1882, 1889,
  /*  468 */ 1893, 1897, 2920, 2921, 1972, 2895, 2625, 1466, 1901, 1908, 1912, 1255, 1972, 1146, 1919, 1972, 1924, 1972,
  /*  486 */ 1972, 1930, 1463, 1980, 1637, 1936, 1972, 1943, 1972, 3085, 1949, 1972, 1162, 1955, 1972, 1972, 2602, 1960,
  /*  504 */ 1967, 1785, 1971, 1977, 1972, 1972, 1340, 1972, 1972, 1340, 1972, 1972, 2440, 1984, 1988, 1994, 2244, 1972,
  /*  522 */ 1972, 2000, 1972, 1920, 2006, 1972, 1057, 1963, 2011, 2631, 1972, 2631, 1972, 2593, 1972, 2510, 1054, 1972,
  /*  540 */ 2023, 2442, 1972, 2023, 1417, 2359, 1112, 1111, 2028, 2034, 2615, 2295, 1423, 2296, 1728, 2040, 2046, 2044,
  /*  558 */ 1761, 2052, 1812, 2050, 2058, 1815, 1818, 2062, 1972, 1945, 2168, 1610, 2070, 2074, 2078, 2082, 2086, 1972,
  /*  576 */ 1885, 3074, 2106, 2763, 1430, 2090, 2096, 2100, 2101, 1972, 1846, 1972, 2105, 1547, 2766, 2110, 1140, 2114,
  /*  594 */ 1972, 2955, 1972, 2448, 1972, 1972, 1884, 3074, 2106, 2121, 2996, 2125, 3038, 1972, 1972, 2310, 1972, 1972,
  /*  612 */ 2130, 1972, 1972, 1840, 1388, 2137, 2142, 2146, 2742, 2151, 1972, 1656, 2156, 1972, 1656, 2156, 1972, 2316,
  /*  630 */ 3006, 2174, 2161, 1630, 2167, 1972, 2019, 1972, 1972, 3061, 1972, 2335, 2172, 2178, 2018, 3063, 2018, 2185,
  /*  648 */ 1651, 2191, 2477, 2196, 2200, 2206, 2024, 2208, 2213, 2477, 2220, 2180, 2224, 2229, 3032, 2329, 2235, 2242,
  /*  666 */ 2248, 1754, 1926, 1697, 2897, 1699, 2252, 2898, 2256, 1366, 1706, 1972, 1972, 1972, 1972, 2260, 2265, 2269,
  /*  684 */ 2273, 2277, 2281, 2285, 2289, 2225, 2294, 2368, 3064, 2300, 2304, 2308, 2314, 2320, 2324, 1972, 2333, 2367,
  /*  702 */ 2017, 2339, 2827, 1972, 2394, 1972, 2346, 2345, 1972, 2350, 2356, 1972, 2365, 2372, 2290, 2376, 2380, 1972,
  /*  720 */ 2386, 1972, 1972, 2392, 1972, 1438, 1519, 2398, 1972, 2404, 2410, 3048, 2414, 1972, 1517, 1972, 1972, 2423,
  /*  738 */ 1972, 1972, 2423, 2864, 2126, 2261, 2431, 1708, 1972, 1337, 1972, 1972, 2446, 1972, 1521, 2467, 2452, 2400,
  /*  756 */ 2456, 2460, 2465, 1972, 1595, 1972, 1592, 1915, 2014, 2434, 2794, 1972, 2796, 2688, 1904, 2471, 2327, 2475,
  /*  774 */ 2798, 2724, 2481, 2485, 2489, 2495, 2501, 2514, 2518, 2524, 2520, 2537, 2527, 2543, 2547, 2539, 2551, 2555,
  /*  792 */ 2559, 1972, 2491, 2567, 2571, 2575, 2579, 2583, 2587, 2591, 1972, 2597, 2640, 2601, 2238, 2606, 2646, 2619,
  /*  810 */ 2629, 2635, 1972, 2652, 2639, 2666, 1990, 1735, 2644, 2930, 2650, 1972, 2656, 1972, 2709, 1373, 1972, 2958,
  /*  828 */ 2663, 2670, 2609, 2677, 1972, 2703, 2687, 1972, 2715, 1520, 1972, 2133, 2692, 1972, 2497, 2697, 2701, 1383,
  /*  846 */ 1972, 1630, 2707, 1972, 2930, 2713, 1972, 2930, 2719, 2723, 2728, 2732, 3013, 2736, 2989, 2741, 1972, 2948,
  /*  864 */ 1972, 1972, 2746, 2693, 2756, 2760, 1853, 2913, 1308, 2209, 2770, 2192, 2775, 2788, 2138, 1972, 2792, 2980,
  /*  882 */ 1972, 2802, 2806, 3000, 3026, 2152, 2819, 2824, 2831, 1586, 2352, 2216, 2835, 1589, 2841, 2812, 2848, 2809,
  /*  900 */ 2854, 2852, 2858, 1675, 2862, 1972, 1972, 1972, 2868, 2872, 2876, 2880, 2884, 2888, 2892, 1972, 2181, 3051,
  /*  918 */ 3080, 1347, 2904, 2908, 1157, 1168, 1276, 2912, 1972, 2917, 3054, 2925, 2837, 1972, 1972, 2622, 1972, 2002,
  /*  936 */ 2929, 1972, 2934, 1972, 2361, 2938, 2659, 2942, 2946, 1972, 1972, 2952, 1972, 1972, 2504, 1972, 1972, 2962,
  /*  954 */ 1972, 2007, 2966, 2970, 2974, 1972, 1972, 2187, 1972, 1972, 2187, 1972, 1972, 2187, 2978, 2673, 1343, 2984,
  /*  972 */ 2988, 1972, 2993, 1972, 1972, 3004, 1972, 2186, 3010, 3020, 1345, 3024, 1972, 3030, 1972, 3036, 1972, 3042,
  /*  990 */ 2683, 3058, 3068, 3045, 1972, 3073, 2778, 1380, 3078, 2029, 3084, 3089, 2781, 1078, 1972, 2752, 2998, 2388,
  /* 1008 */ 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 1141, 3095, 4312, 3112, 3124, 3129, 3124, 3132,
  /* 1026 */ 3123, 3124, 3124, 3124, 3124, 3119, 3115, 3136, 3125, 3140, 3160, 3163, 3144, 3147, 3149, 3153, 3157, 3167,
  /* 1044 */ 3171, 3175, 3179, 3183, 3187, 4303, 3301, 4364, 3098, 5220, 3991, 3712, 4251, 4364, 3197, 4364, 5680, 3196,
  /* 1062 */ 4597, 4364, 4364, 3106, 4364, 4268, 3278, 3278, 3204, 3209, 3214, 3218, 3226, 3237, 3241, 5784, 4364, 3336,
  /* 1080 */ 5794, 5826, 4263, 4264, 4264, 4264, 4264, 4265, 4264, 3286, 3286, 3286, 3286, 3287, 3286, 3286, 3253, 3278,
  /* 1098 */ 3255, 3345, 5783, 4364, 4260, 4264, 4264, 3285, 3250, 3289, 3259, 3264, 3245, 4364, 4364, 4364, 3232, 3473,
  /* 1116 */ 3270, 5783, 4364, 4364, 3221, 3685, 4266, 3286, 3286, 3286, 3288, 3278, 3277, 3278, 3278, 3278, 3278, 3279,
  /* 1134 */ 3283, 3283, 3296, 3260, 3264, 3266, 4364, 4364, 4364, 3302, 4598, 4364, 4364, 4364, 3339, 4206, 3286, 3287,
  /* 1152 */ 3278, 3278, 3278, 3292, 3299, 4364, 4364, 4364, 3487, 3353, 4364, 4364, 4364, 3566, 3310, 3314, 4364, 4364,
  /* 1170 */ 3543, 4364, 3279, 3312, 4364, 4364, 3591, 3191, 3306, 3322, 4364, 4364, 3654, 4364, 3286, 3329, 3278, 3306,
  /* 1188 */ 3210, 3330, 3334, 4599, 4264, 4265, 3286, 3328, 3278, 3204, 3287, 3278, 3291, 5741, 4264, 4267, 3287, 3278,
  /* 1206 */ 3344, 4290, 3287, 3291, 4289, 3328, 3205, 3350, 3325, 3360, 3361, 3905, 3365, 3369, 3373, 3394, 3394, 3394,
  /* 1224 */ 3395, 3377, 3381, 3385, 3394, 3394, 3389, 3393, 3399, 3403, 3407, 3411, 3415, 3419, 3421, 3425, 3427, 3431,
  /* 1242 */ 3435, 3439, 3443, 3447, 3451, 3455, 3459, 3242, 4598, 3463, 4364, 5711, 3657, 4364, 3340, 4207, 5390, 4089,
  /* 1260 */ 4364, 4445, 3243, 3244, 4364, 4364, 3808, 4364, 3986, 4364, 4364, 4364, 3604, 4364, 5386, 3656, 4364, 3546,
  /* 1278 */ 4364, 5651, 4364, 5677, 3468, 5728, 3472, 3478, 3484, 3491, 3495, 3498, 3497, 3502, 3506, 3510, 3514, 3518,
  /* 1296 */ 3522, 3525, 3528, 3532, 3536, 3540, 5792, 4364, 3550, 4936, 4558, 5010, 3586, 4364, 4364, 4364, 3670, 3928,
  /* 1314 */ 4432, 4952, 4985, 4978, 4364, 5703, 3556, 5703, 4364, 5376, 4364, 3563, 3571, 3575, 4364, 5321, 4364, 5028,
  /* 1332 */ 3580, 3581, 4364, 5009, 3585, 4364, 3558, 4886, 4364, 3566, 4232, 4364, 3659, 4364, 5690, 4075, 5784, 5612,
  /* 1350 */ 4364, 3775, 4364, 3595, 3602, 3657, 3610, 3616, 3620, 3619, 4364, 4364, 4364, 3671, 3612, 3632, 4364, 4364,
  /* 1368 */ 3695, 5039, 4364, 4760, 3656, 4364, 3752, 4030, 3590, 4144, 3636, 3603, 4364, 3763, 3800, 3889, 4014, 5363,
  /* 1386 */ 5334, 5306, 4364, 4364, 4364, 3772, 5738, 4364, 4364, 4005, 3841, 4364, 4364, 4364, 3830, 3664, 3628, 4364,
  /* 1404 */ 4364, 3706, 4364, 3222, 3676, 4364, 4364, 3756, 4364, 4364, 4179, 3680, 3687, 4364, 3763, 4364, 3318, 3650,
  /* 1422 */ 3657, 4364, 4364, 3757, 3338, 5738, 4364, 5076, 4364, 3801, 4436, 4440, 4364, 4792, 3604, 3702, 4364, 4364,
  /* 1440 */ 4364, 3863, 3710, 4364, 4364, 5529, 4364, 4364, 4202, 5111, 4364, 4364, 5109, 4364, 5108, 4364, 5108, 4364,
  /* 1458 */ 5780, 5107, 4364, 3852, 4625, 4364, 3316, 5220, 3991, 4364, 4148, 4176, 4456, 5111, 4364, 4868, 5108, 5110,
  /* 1476 */ 5781, 5106, 4364, 5112, 4364, 3856, 4364, 4364, 3831, 3836, 3243, 4526, 4526, 3242, 3918, 4364, 4364, 4364,
  /* 1494 */ 3987, 5496, 4364, 4364, 4916, 4740, 3991, 3988, 4587, 3716, 3720, 3721, 3725, 3727, 3731, 3735, 3735, 3738,
  /* 1512 */ 3740, 3740, 3744, 3747, 3750, 4364, 3863, 4891, 3862, 4364, 4364, 4364, 4940, 3963, 4364, 4364, 3761, 3769,
  /* 1530 */ 5708, 3781, 5098, 4364, 5801, 3796, 3787, 3793, 3805, 3812, 5795, 3819, 4235, 3825, 4364, 3883, 3894, 4364,
  /* 1548 */ 3890, 4364, 4501, 4058, 4364, 4364, 4058, 3835, 4364, 4364, 4364, 4047, 3246, 3840, 4935, 5773, 5100, 4364,
  /* 1566 */ 3815, 3845, 3474, 4364, 4364, 4057, 3857, 4364, 4364, 4364, 4144, 4364, 5803, 4364, 4364, 3868, 4364, 3963,
  /* 1584 */ 4364, 4364, 3762, 4364, 5391, 5470, 4364, 5493, 4364, 3911, 4886, 4364, 3912, 4887, 4364, 3922, 4364, 4364,
  /* 1602 */ 3909, 4364, 3840, 4935, 3473, 5101, 3598, 3874, 4364, 4364, 3870, 4286, 4364, 5359, 3899, 3620, 5358, 3898,
  /* 1620 */ 3903, 4364, 3935, 5734, 4364, 3701, 3657, 4364, 4364, 3916, 4364, 4364, 4364, 4153, 4628, 4364, 4578, 5488,
  /* 1638 */ 4253, 4364, 4364, 4179, 3625, 4959, 5783, 3597, 4364, 3963, 4364, 3637, 3932, 4364, 4364, 4364, 4196, 3953,
  /* 1656 */ 4364, 4364, 4364, 4197, 3959, 4364, 4364, 5226, 3851, 5066, 5756, 5230, 4364, 4364, 4364, 4263, 3923, 4364,
  /* 1674 */ 4627, 4364, 3998, 3464, 5515, 4579, 3576, 4960, 3103, 5781, 4364, 4364, 3672, 3949, 3923, 4364, 4364, 4043,
  /* 1692 */ 3670, 3972, 3976, 4364, 4006, 4014, 4364, 5040, 4364, 5040, 4364, 3983, 4364, 5263, 4364, 4013, 4364, 4364,
  /* 1710 */ 4519, 4929, 4626, 4364, 4069, 5708, 3996, 4004, 4364, 3671, 4023, 4011, 4364, 4364, 3955, 4364, 4022, 4010,
  /* 1728 */ 4364, 4364, 3979, 4364, 3831, 4741, 5801, 4364, 4015, 5262, 4364, 4016, 4364, 4364, 3997, 4364, 3961, 3346,
  /* 1746 */ 3576, 3480, 4826, 4468, 4021, 4027, 4034, 4010, 4364, 4364, 3988, 3964, 4766, 3245, 5801, 4364, 4016, 4364,
  /* 1764 */ 4867, 3346, 4931, 3101, 4004, 4364, 5647, 4039, 4364, 4364, 4766, 3245, 4364, 3271, 4309, 5477, 4063, 4364,
  /* 1782 */ 4364, 4364, 5757, 4056, 4364, 4257, 4450, 4055, 5755, 4054, 4364, 4047, 4364, 3830, 4062, 4364, 4682, 5338,
  /* 1800 */ 4082, 4683, 4056, 4683, 4056, 4968, 4364, 4067, 4967, 4056, 4789, 5436, 3604, 4364, 5779, 5775, 5778, 5776,
  /* 1818 */ 5739, 3940, 5739, 3944, 4081, 3605, 4082, 4789, 4106, 3621, 4108, 3606, 5804, 4841, 4087, 4087, 4791, 4357,
  /* 1836 */ 4358, 4356, 5075, 4093, 4364, 4364, 3999, 4362, 4364, 4835, 4364, 4364, 3999, 4496, 5254, 4961, 5433, 4364,
  /* 1854 */ 4074, 4364, 4364, 5321, 4364, 4103, 4919, 4012, 3356, 4113, 4117, 4121, 4121, 4124, 4128, 4131, 4134, 4131,
  /* 1872 */ 4138, 4139, 4139, 4139, 4143, 4492, 4364, 4364, 4364, 4289, 5487, 4252, 4364, 4364, 4000, 4497, 4364, 3697,
  /* 1890 */ 4625, 4443, 4158, 4164, 5811, 4168, 4174, 5736, 4183, 4083, 4189, 4457, 4364, 4253, 4364, 4095, 4152, 3192,
  /* 1908 */ 4364, 4622, 4364, 4594, 4201, 4364, 4854, 4364, 4097, 4364, 3192, 5389, 4364, 4364, 4364, 4316, 4211, 4219,
  /* 1926 */ 4364, 4364, 4015, 4364, 4364, 4786, 4364, 4364, 4045, 4364, 4259, 5269, 4273, 4364, 4144, 3647, 5305, 3567,
  /* 1944 */ 4240, 4364, 4364, 4185, 4362, 4230, 4234, 4364, 4364, 4261, 4264, 4239, 4364, 4364, 4364, 4357, 4364, 5678,
  /* 1962 */ 5615, 4244, 5596, 4758, 4253, 4364, 5598, 5731, 4250, 4272, 4364, 4364, 4364, 4364, 3105, 4364, 5523, 4279,
  /* 1980 */ 4364, 4148, 5352, 4223, 5679, 4283, 4364, 5597, 4294, 4251, 4364, 4364, 4341, 4364, 3776, 5605, 4364, 4364,
  /* 1998 */ 4364, 5634, 3552, 4300, 4364, 4364, 4364, 5667, 4320, 4364, 4364, 4364, 4469, 4364, 5784, 4596, 4364, 4153,
  /* 2016 */ 4976, 4673, 4364, 4364, 4364, 4905, 4633, 3233, 4364, 4364, 4364, 4528, 3473, 4364, 4364, 4364, 4548, 4038,
  /* 2034 */ 3231, 4346, 4364, 4364, 4364, 5738, 4364, 5777, 4364, 5776, 5779, 3604, 4364, 4016, 4364, 3988, 4364, 5739,
  /* 2052 */ 4364, 5740, 3604, 4364, 4364, 3694, 5779, 5738, 4364, 5740, 3942, 4352, 4364, 4364, 4364, 5778, 4364, 5112,
  /* 2070 */ 5595, 4364, 4742, 4369, 4373, 4379, 4383, 4390, 4386, 4394, 4398, 4400, 4404, 4408, 4410, 4417, 4414, 4422,
  /* 2088 */ 4421, 4426, 4449, 4455, 4364, 4364, 4364, 5782, 4461, 4467, 4473, 4109, 4483, 4364, 4639, 4489, 4364, 5442,
  /* 2106 */ 4430, 4364, 4069, 4364, 4517, 4364, 5297, 4523, 4532, 3668, 4364, 4364, 4364, 5784, 4364, 3877, 4364, 4501,
  /* 2124 */ 3985, 5298, 4364, 4364, 4364, 4549, 4364, 5502, 4564, 4364, 4153, 5325, 5329, 4994, 4364, 4364, 3659, 4169,
  /* 2142 */ 4075, 4614, 3807, 4608, 4547, 4364, 4364, 4364, 4638, 4569, 4364, 4364, 4364, 4675, 4573, 4364, 4364, 4364,
  /* 2160 */ 4694, 4844, 4758, 4364, 4364, 4364, 5800, 4591, 4364, 4364, 4364, 4741, 3988, 4364, 4364, 3889, 4076, 4615,
  /* 2178 */ 4613, 4619, 4609, 4364, 4364, 4468, 5657, 4633, 4364, 4364, 4364, 4772, 5745, 4632, 4364, 4364, 4364, 4798,
  /* 2196 */ 3992, 4364, 4548, 4076, 4615, 4846, 4364, 4364, 4463, 3861, 4364, 5472, 4558, 4364, 4364, 4364, 4799, 4364,
  /* 2214 */ 5472, 5476, 4364, 4153, 5484, 4073, 3990, 4548, 4076, 4503, 4903, 4364, 4364, 4364, 4809, 4468, 5475, 4364,
  /* 2232 */ 4364, 4476, 4364, 3660, 4637, 4758, 4364, 4160, 4364, 5702, 4901, 4364, 4364, 4548, 4318, 3669, 4606, 4364,
  /* 2250 */ 4364, 4643, 4364, 5039, 4364, 4012, 4013, 4364, 3696, 5039, 3848, 4945, 4364, 4364, 4154, 5802, 4364, 4364,
  /* 2268 */ 4246, 4647, 4651, 5364, 4659, 4671, 4680, 4687, 4691, 4698, 4699, 4703, 4707, 4711, 4717, 4721, 4713, 4725,
  /* 2286 */ 4725, 4725, 4725, 4729, 4364, 4364, 4364, 4813, 4875, 4364, 4364, 4364, 4828, 4364, 5516, 4364, 4364, 3762,
  /* 2304 */ 4752, 4364, 4756, 4764, 4770, 4776, 4364, 4364, 4553, 4557, 4364, 4783, 4364, 4364, 4583, 4364, 4796, 4364,
  /* 2322 */ 4364, 4796, 4364, 4803, 4804, 4364, 4191, 4364, 4364, 5058, 3990, 4808, 4874, 4364, 4364, 4585, 4364, 4813,
  /* 2340 */ 3198, 4364, 4364, 4667, 3948, 4852, 4364, 4364, 4364, 4924, 3863, 4858, 4364, 4364, 4676, 4364, 3924, 5608,
  /* 2358 */ 4865, 4364, 4251, 4364, 4364, 4364, 5684, 4872, 3657, 4364, 4364, 4737, 4364, 3589, 4364, 4737, 4364, 4673,
  /* 2376 */ 3199, 4364, 4364, 4733, 4879, 4152, 4364, 4364, 4759, 3107, 3864, 4892, 4364, 4364, 4899, 4364, 4883, 4887,
  /* 2394 */ 4364, 4364, 4925, 4853, 5607, 4896, 4364, 4364, 4949, 3587, 4479, 3620, 4364, 4364, 4364, 3789, 4364, 4909,
  /* 2412 */ 4364, 4673, 4364, 4732, 4913, 4364, 4262, 4264, 4264, 4267, 3286, 4364, 4923, 4885, 4364, 4264, 4290, 3286,
  /* 2430 */ 3286, 3197, 3588, 4364, 4560, 4364, 4190, 4364, 4274, 3642, 4364, 3764, 4364, 4364, 4330, 4364, 3559, 4887,
  /* 2448 */ 4364, 4364, 4987, 4540, 4099, 4364, 4364, 4944, 4364, 4958, 4364, 4365, 4965, 4364, 4364, 4364, 4954, 4364,
  /* 2466 */ 4972, 5319, 4364, 4364, 4150, 4364, 5002, 4673, 3783, 4364, 5006, 4364, 4364, 5058, 4364, 4364, 5341, 5033,
  /* 2484 */ 3989, 4451, 4348, 4364, 5019, 4364, 5024, 4364, 4364, 5091, 4363, 4364, 5026, 4364, 4364, 5092, 4814, 5087,
  /* 2502 */ 3657, 5032, 4153, 5695, 5515, 4364, 4275, 3643, 4364, 3763, 4364, 4326, 4354, 5037, 5020, 4741, 4364, 4655,
  /* 2520 */ 4364, 5103, 4364, 5103, 3879, 5269, 5044, 4653, 4364, 4653, 4364, 4289, 4264, 4264, 3284, 3286, 3290, 4364,
  /* 2538 */ 5050, 5102, 4364, 4654, 4357, 5057, 4654, 4364, 5105, 5102, 4364, 5057, 5104, 5062, 3984, 5073, 5465, 5466,
  /* 2556 */ 5463, 5070, 5080, 5083, 5086, 4364, 4364, 5112, 4364, 5112, 4364, 4364, 5096, 4364, 5710, 4815, 4848, 5116,
  /* 2574 */ 5675, 5123, 5120, 5721, 5510, 5129, 5136, 5132, 5140, 5144, 5148, 5151, 5155, 5158, 5162, 5168, 5171, 5164,
  /* 2592 */ 5175, 4364, 4364, 5192, 4364, 4364, 5240, 4741, 3690, 5185, 4364, 3335, 4364, 4364, 5189, 5197, 3826, 4364,
  /* 2610 */ 4342, 5039, 4364, 4364, 5641, 4364, 3763, 3992, 4866, 5211, 4364, 5217, 4364, 4364, 5668, 4364, 4364, 5679,
  /* 2628 */ 5220, 4364, 5224, 4364, 4364, 5193, 4364, 5224, 4364, 5234, 5235, 5253, 4151, 3199, 3821, 5181, 4050, 5267,
  /* 2646 */ 4364, 4364, 5203, 5207, 5274, 5278, 4364, 4364, 5239, 5245, 4364, 5282, 5277, 4364, 4364, 5690, 5339, 4151,
  /* 2664 */ 3199, 3821, 5439, 5258, 4364, 3765, 5294, 4364, 3336, 4364, 4364, 5749, 5659, 5364, 4364, 5336, 4364, 4364,
  /* 2682 */ 5775, 4364, 3763, 4306, 3658, 5330, 4364, 4364, 4364, 4991, 4364, 5334, 5347, 4364, 4364, 5342, 3798, 5716,
  /* 2700 */ 5398, 5356, 3336, 4364, 4364, 5247, 5302, 5369, 5373, 4364, 4364, 5286, 5290, 5312, 5383, 4364, 4364, 5310,
  /* 2718 */ 5316, 5312, 5383, 4364, 4049, 4226, 4364, 4364, 4364, 5014, 4364, 5422, 5253, 5605, 3200, 5397, 4638, 3337,
  /* 2736 */ 5335, 4364, 4364, 4364, 5064, 5402, 4364, 4364, 4364, 5213, 4364, 5410, 5414, 4364, 4364, 5792, 5794, 4364,
  /* 2754 */ 4364, 3658, 5421, 4364, 3798, 4838, 4665, 3338, 4364, 3889, 4152, 4296, 4652, 4364, 4509, 4513, 4215, 4364,
  /* 2772 */ 4364, 4364, 5226, 4214, 4364, 4998, 4364, 4364, 5815, 4364, 4364, 5820, 4364, 4468, 3968, 3886, 5046, 4625,
  /* 2790 */ 3199, 4662, 5426, 3657, 4364, 4364, 5337, 4982, 4364, 4364, 5015, 4364, 4748, 5456, 4996, 3762, 5046, 4625,
  /* 2808 */ 5447, 5676, 3777, 5515, 3777, 4364, 5053, 4364, 4468, 4021, 4027, 5456, 4364, 4364, 4364, 5228, 5391, 5455,
  /* 2826 */ 4071, 4074, 4819, 4823, 4832, 5460, 5627, 4364, 5793, 5270, 4364, 4364, 4153, 4364, 5663, 5053, 3657, 5500,
  /* 2844 */ 4364, 4485, 4375, 3641, 5053, 5507, 4364, 5052, 5514, 3108, 5674, 4364, 4333, 4364, 4339, 3108, 5515, 4336,
  /* 2862 */ 5785, 5783, 4364, 4364, 5341, 5343, 5686, 4322, 3938, 4866, 4017, 5110, 5379, 5520, 5779, 5527, 5533, 5537,
  /* 2880 */ 5541, 5545, 5552, 5548, 5556, 5560, 5567, 5571, 5563, 5575, 5579, 5582, 5586, 5590, 5594, 4364, 4491, 4364,
  /* 2898 */ 4364, 4012, 4364, 4364, 4364, 3230, 5125, 4364, 5619, 5177, 5631, 5638, 4364, 5645, 5652, 4364, 4364, 4364,
  /* 2916 */ 5249, 5656, 3199, 5740, 4364, 4505, 4195, 4364, 4364, 4069, 3964, 5784, 4176, 5701, 4364, 4364, 4364, 5391,
  /* 2934 */ 5365, 5672, 4931, 3273, 5625, 5740, 4364, 5794, 3964, 3997, 4177, 4450, 5489, 4170, 4364, 4364, 5393, 5406,
  /* 2952 */ 4364, 4779, 5700, 4364, 4536, 3667, 4364, 4153, 5241, 3689, 4778, 5699, 3272, 5707, 5658, 5777, 4364, 3889,
  /* 2970 */ 4364, 4681, 5339, 4076, 5715, 4178, 5720, 5725, 4931, 4933, 4364, 4364, 5430, 3586, 5340, 4077, 4364, 5269,
  /* 2988 */ 5753, 4364, 4364, 4364, 5392, 4364, 5391, 5761, 4364, 4544, 4364, 4364, 4364, 5793, 4577, 4364, 5226, 5766,
  /* 3006 */ 4364, 4364, 5443, 4364, 5762, 3272, 5707, 4364, 4548, 5040, 4364, 4364, 5786, 5350, 4364, 5199, 5770, 4548,
  /* 3024 */ 4364, 5790, 4364, 4364, 5451, 3657, 4364, 5480, 4364, 4364, 5474, 4364, 4364, 5479, 4364, 4364, 5503, 4565,
  /* 3042 */ 4364, 5478, 5799, 4364, 4548, 5816, 4364, 4559, 5709, 3799, 5740, 4364, 5794, 4364, 4364, 5691, 4364, 4757,
  /* 3060 */ 4077, 4364, 4603, 4575, 4364, 4364, 4364, 4746, 5057, 4364, 4364, 4364, 5417, 5808, 4364, 4364, 4364, 5442,
  /* 3078 */ 4757, 4861, 4364, 4364, 5602, 5338, 5822, 4364, 4364, 4364, 5522, 4364, 5821, 4364, 4364, 5622, 3681, 5952,
  /* 3096 */ 5830, 6488, 6497, 5831, 5882, 6497, 5831, 5997, 6497, 6497, 6487, 5844, 6497, 6497, 6497, 6000, 5840, 5853,
  /* 3114 */ 5857, 5995, 5841, 5995, 5891, 6263, 6175, 5856, 5842, 5843, 5995, 5995, 5995, 5995, 6579, 6372, 5859, 5842,
  /* 3132 */ 5995, 5890, 5995, 5995, 5893, 5995, 5995, 5900, 5905, 5907, 5908, 5911, 5910, 5921, 5923, 5922, 5922, 5922,
  /* 3150 */ 5922, 5914, 5910, 5913, 5921, 5913, 5917, 5916, 5920, 5919, 5910, 5906, 5913, 5910, 5910, 5913, 5914, 5924,
  /* 3168 */ 5926, 5928, 5930, 5932, 5934, 5935, 5937, 5931, 5937, 5939, 5940, 5942, 5940, 5940, 5944, 5946, 5949, 5948,
  /* 3186 */ 5950, 5951, 6507, 6324, 6488, 6786, 6497, 6497, 6124, 5835, 5959, 6155, 6497, 6497, 6497, 5874, 6497, 6497,
  /* 3204 */ 6330, 6330, 6330, 6497, 6410, 5990, 6269, 5991, 5991, 6267, 6411, 6267, 6267, 6329, 6330, 6330, 6134, 6348,
  /* 3222 */ 6413, 6337, 6418, 5993, 6332, 6367, 5895, 5885, 6318, 6497, 6497, 6497, 5882, 6137, 5831, 5966, 6497, 6497,
  /* 3240 */ 6158, 6320, 6497, 6497, 6497, 5885, 6497, 6497, 6497, 5887, 6008, 5991, 5991, 6267, 6003, 6330, 6330, 5991,
  /* 3258 */ 6267, 6135, 6332, 6332, 6332, 6332, 6367, 5895, 5895, 5895, 5885, 6497, 6320, 5897, 6497, 6497, 5972, 6497,
  /* 3276 */ 6410, 6002, 6330, 6330, 6330, 6330, 6419, 6008, 5991, 6411, 6267, 6267, 6267, 6267, 6268, 6330, 6330, 6330,
  /* 3294 */ 6004, 6419, 6268, 6330, 6331, 6332, 5895, 5895, 6497, 6497, 6497, 5861, 6330, 6330, 6330, 6420, 6330, 6419,
  /* 3312 */ 6008, 6411, 6268, 6004, 6497, 6497, 5831, 6517, 6126, 5956, 6269, 5991, 6267, 6330, 6004, 5991, 6267, 6267,
  /* 3330 */ 6267, 6330, 6330, 6332, 6268, 6497, 6497, 6497, 5902, 6497, 6497, 6497, 5952, 6544, 6330, 6330, 6497, 6497,
  /* 3348 */ 6497, 5897, 5991, 6411, 6267, 6268, 6330, 6004, 6497, 5837, 6313, 5837, 6330, 6411, 6420, 6268, 6497, 6713,
  /* 3366 */ 6641, 6024, 6144, 6029, 6144, 6092, 6031, 6034, 6049, 6144, 6144, 6039, 6147, 5872, 6145, 6146, 6041, 6043,
  /* 3384 */ 6046, 6035, 6048, 6144, 6144, 6148, 6144, 6051, 6053, 6044, 6144, 6144, 6144, 6144, 6087, 5998, 6055, 6144,
  /* 3402 */ 6144, 5999, 6144, 6504, 6057, 6060, 6144, 6059, 6032, 6037, 6036, 6062, 6066, 6068, 6068, 6067, 6064, 6065,
  /* 3420 */ 6070, 6064, 6064, 6064, 6064, 6072, 6074, 6073, 6073, 6076, 6076, 6077, 6082, 6082, 6082, 6083, 6082, 6079,
  /* 3438 */ 6081, 6085, 6089, 6089, 6086, 5997, 5871, 6144, 6091, 5866, 6144, 6149, 6097, 6150, 6099, 6101, 6104, 6106,
  /* 3456 */ 6102, 6108, 6109, 6070, 6082, 6111, 6113, 6257, 6126, 6497, 6497, 5997, 6497, 6501, 6256, 6256, 6323, 5831,
  /* 3474 */ 6497, 6497, 6497, 5961, 6180, 6300, 6497, 6639, 6497, 6491, 6190, 6497, 5957, 6497, 5847, 5849, 6126, 6193,
  /* 3492 */ 6497, 5954, 6593, 6196, 6199, 6202, 6202, 6202, 6202, 6201, 6202, 6202, 6202, 6203, 6207, 6204, 6204, 6204,
  /* 3510 */ 6205, 6204, 6209, 6211, 6213, 6213, 6213, 6214, 6213, 6217, 6216, 6216, 6219, 6216, 6221, 6224, 6223, 6222,
  /* 3528 */ 6226, 6226, 6224, 6226, 6228, 6233, 6232, 6234, 6233, 6233, 6229, 6230, 6236, 6237, 6239, 6497, 5848, 5850,
  /* 3546 */ 6497, 5848, 5850, 6682, 6242, 6250, 6497, 6497, 5865, 6270, 6407, 6255, 6497, 6497, 5865, 6717, 6576, 5832,
  /* 3564 */ 6286, 6289, 6497, 5865, 6001, 6136, 6129, 6663, 6497, 6497, 6292, 6496, 6497, 6497, 6497, 5972, 6692, 6497,
  /* 3582 */ 6691, 6497, 6497, 6604, 6095, 6497, 6497, 6497, 5964, 6497, 6497, 6497, 5965, 6295, 6650, 6497, 6497, 5867,
  /* 3600 */ 6371, 6497, 6497, 6643, 6497, 6497, 6497, 5976, 6368, 6247, 6297, 6497, 6348, 6458, 6337, 6018, 6130, 6370,
  /* 3618 */ 5994, 6833, 6489, 6497, 6497, 6497, 5977, 6302, 6424, 6370, 5994, 6011, 6173, 6489, 5993, 6259, 6834, 5956,
  /* 3636 */ 6280, 6497, 6497, 6497, 5982, 6414, 5969, 5992, 5994, 6188, 6497, 6413, 6159, 6417, 5992, 5994, 6312, 6361,
  /* 3654 */ 6487, 6308, 6246, 5956, 6497, 6497, 6497, 5953, 6497, 6141, 6784, 6413, 5969, 5992, 6119, 6021, 6497, 6497,
  /* 3672 */ 6497, 6448, 6270, 6350, 6259, 6012, 6361, 5956, 6601, 6418, 5993, 6259, 6360, 5993, 6259, 6525, 6489, 6497,
  /* 3690 */ 6497, 5882, 6497, 6497, 6280, 6497, 6783, 6497, 6497, 6497, 6006, 5976, 6310, 5992, 6355, 5956, 6413, 6418,
  /* 3708 */ 6371, 6188, 6258, 5956, 6497, 6497, 5885, 6508, 5886, 5983, 6381, 6383, 5888, 6386, 6386, 6386, 6386, 6385,
  /* 3726 */ 6386, 6386, 6386, 6388, 6390, 6389, 6389, 6389, 6389, 6392, 6392, 6392, 6392, 6393, 6394, 6394, 6394, 6394,
  /* 3744 */ 6394, 6396, 6394, 6394, 6395, 6398, 6398, 6399, 6497, 6497, 5962, 5964, 6184, 6497, 6497, 6497, 6127, 5981,
  /* 3762 */ 6351, 6497, 6497, 6497, 6155, 6497, 6497, 5886, 6351, 6406, 6497, 5885, 6155, 5954, 6491, 6497, 6497, 6498,
  /* 3780 */ 6000, 6375, 6493, 6497, 6497, 5970, 6497, 6653, 6493, 6497, 6497, 5973, 6638, 6497, 6787, 6409, 6497, 5898,
  /* 3798 */ 6497, 6497, 5973, 6497, 6497, 6497, 6583, 6492, 6492, 6497, 6497, 5975, 6497, 6497, 6497, 6430, 6493, 6497,
  /* 3816 */ 5898, 6592, 5956, 5961, 6492, 6497, 6497, 5976, 6421, 6434, 6497, 6497, 6497, 6191, 6497, 6402, 6511, 6412,
  /* 3834 */ 5987, 5987, 6187, 6605, 6497, 6497, 6642, 6141, 6497, 6497, 6013, 6497, 6497, 6787, 6497, 5952, 6270, 5977,
  /* 3852 */ 6497, 6497, 6497, 6318, 6314, 6316, 6170, 6685, 6497, 6684, 6154, 6497, 6497, 6497, 6265, 5878, 6437, 6015,
  /* 3870 */ 6497, 6497, 6016, 6155, 6497, 6497, 6581, 6497, 5953, 6497, 6164, 6416, 6497, 6439, 6128, 5968, 6168, 6598,
  /* 3888 */ 6842, 6497, 5953, 6497, 6497, 6338, 6597, 6187, 6842, 5956, 5967, 6337, 6157, 6598, 6841, 6841, 6489, 6497,
  /* 3906 */ 6497, 6020, 6641, 6442, 6443, 6497, 6497, 6025, 6321, 6576, 6001, 5977, 6303, 6525, 5956, 6497, 6497, 6641,
  /* 3924 */ 6497, 6497, 6497, 6278, 6731, 5986, 6335, 6168, 6598, 6841, 6641, 6497, 5955, 5845, 6497, 5874, 5996, 6497,
  /* 3942 */ 5879, 6497, 5879, 6497, 6578, 6497, 6128, 5978, 6337, 6169, 6703, 6187, 6842, 6497, 6497, 6123, 6497, 6352,
  /* 3960 */ 6353, 6497, 6497, 6124, 6497, 6497, 6497, 6141, 6449, 6349, 5986, 6335, 6270, 6350, 5978, 6337, 6169, 6703,
  /* 3978 */ 6641, 6497, 5956, 6497, 6578, 5987, 6599, 6497, 6497, 6596, 6497, 6497, 6497, 5954, 6497, 6497, 6497, 5956,
  /* 3996 */ 5831, 6497, 6491, 6497, 6497, 5997, 6270, 6575, 6371, 6497, 6497, 6497, 6306, 6141, 6598, 6183, 6497, 6497,
  /* 4014 */ 6497, 6313, 6497, 6497, 6497, 5879, 5996, 6507, 6270, 5977, 6335, 6168, 6598, 6169, 6304, 6641, 6497, 5963,
  /* 4032 */ 6497, 5962, 6516, 6349, 5978, 6156, 6366, 5977, 6425, 6462, 6641, 5997, 6144, 6497, 6497, 6144, 6491, 6497,
  /* 4050 */ 6497, 6132, 5964, 6497, 6017, 6426, 6247, 6497, 6497, 6497, 6314, 6433, 6507, 5977, 6425, 6197, 6497, 6515,
  /* 4068 */ 5977, 6497, 5897, 6497, 6497, 6132, 6132, 6497, 6497, 6497, 6523, 6497, 5997, 6368, 6197, 6497, 6497, 6497,
  /* 4086 */ 6340, 6497, 6468, 6497, 6497, 6163, 5870, 6328, 6328, 6497, 6497, 6164, 6164, 6164, 6497, 6164, 6497, 6497,
  /* 4104 */ 6599, 5885, 6497, 5977, 6466, 6497, 6497, 6497, 6344, 6497, 6764, 6534, 6763, 6161, 6160, 5860, 6161, 6472,
  /* 4122 */ 6472, 6472, 6472, 6474, 6480, 6479, 6476, 6479, 6478, 6482, 6482, 6482, 6482, 6483, 6482, 6483, 6485, 6520,
  /* 4140 */ 6520, 6520, 6520, 6486, 6497, 6497, 6497, 6348, 6261, 6515, 6497, 6497, 6164, 6497, 6497, 6497, 6498, 6319,
  /* 4158 */ 6497, 6522, 6497, 6497, 6248, 6497, 6527, 6497, 6497, 6287, 6529, 6497, 6497, 6497, 6351, 5831, 6497, 6531,
  /* 4176 */ 6497, 6497, 6256, 6497, 6497, 6497, 6349, 5903, 6533, 6497, 6497, 6266, 6349, 6342, 6497, 6497, 6497, 6356,
  /* 4194 */ 6497, 6343, 6497, 6497, 6497, 6364, 6143, 6284, 6497, 6497, 6497, 6368, 6544, 6539, 5971, 6010, 6603, 6500,
  /* 4212 */ 6543, 6785, 6138, 5993, 6095, 6497, 6497, 6009, 6317, 6427, 6283, 6497, 6713, 6497, 6132, 5964, 6132, 5964,
  /* 4230 */ 6270, 6128, 6138, 6243, 6245, 6497, 6497, 6497, 6432, 6129, 6139, 6244, 6021, 6497, 6641, 5956, 6497, 6497,
  /* 4248 */ 6271, 6497, 6523, 6497, 6497, 6578, 6247, 6497, 6497, 6497, 6497, 6547, 6497, 6497, 6497, 6410, 5991, 5991,
  /* 4266 */ 5991, 5991, 6267, 6267, 6267, 6003, 6497, 6417, 6497, 6497, 6497, 6413, 5969, 6137, 6139, 6244, 6021, 6348,
  /* 4284 */ 6422, 6776, 5954, 6699, 6470, 6497, 5991, 5991, 5991, 6411, 6497, 6767, 6497, 6523, 6497, 6460, 6137, 6139,
  /* 4302 */ 6245, 6497, 5994, 6332, 5973, 6497, 5879, 6497, 5831, 6487, 6497, 5834, 6140, 6174, 6497, 6505, 6266, 6136,
  /* 4320 */ 6138, 6281, 6021, 6497, 6578, 6497, 5831, 6517, 6642, 6488, 6497, 6450, 6138, 6497, 5997, 6512, 6497, 5997,
  /* 4338 */ 6837, 6497, 6000, 6497, 6497, 6505, 5980, 6497, 6137, 5831, 6497, 6497, 6279, 5831, 5879, 6578, 6497, 6497,
  /* 4356 */ 6279, 6497, 6279, 6497, 6497, 5897, 6327, 6244, 6497, 6497, 6497, 6497, 5868, 6497, 6497, 6770, 5897, 6770,
  /* 4374 */ 6699, 6497, 6497, 6297, 6349, 6506, 6164, 6505, 6416, 6167, 6802, 6736, 6553, 6553, 6554, 6550, 6549, 6553,
  /* 4392 */ 6553, 6552, 6553, 6554, 6553, 6555, 6557, 6559, 6558, 6558, 6561, 6562, 6562, 6562, 6564, 6563, 6562, 6563,
  /* 4410 */ 6562, 6562, 6562, 6566, 6572, 6572, 6572, 6573, 6573, 6568, 6567, 6572, 6572, 6572, 6572, 6568, 6572, 6568,
  /* 4428 */ 6572, 6569, 6696, 6247, 6497, 6497, 6299, 6497, 6585, 6497, 6497, 6587, 6497, 6589, 6714, 6497, 6005, 6497,
  /* 4446 */ 6497, 6177, 6497, 6591, 6497, 6497, 6497, 6499, 5902, 6404, 6497, 6497, 6021, 6497, 6649, 5875, 6577, 6497,
  /* 4464 */ 6497, 6315, 6597, 5880, 6497, 6497, 6497, 6500, 5863, 5881, 6497, 6595, 6497, 6014, 6437, 6497, 5952, 5977,
  /* 4482 */ 6624, 6607, 6609, 6497, 6497, 6334, 6497, 6608, 6610, 6497, 6497, 6335, 6313, 6497, 6575, 6469, 6599, 6497,
  /* 4500 */ 6497, 6523, 6497, 6497, 6133, 6497, 6497, 6339, 6341, 6497, 6497, 6518, 5869, 6258, 6021, 6497, 6681, 6614,
  /* 4518 */ 6178, 6497, 6497, 6347, 6497, 6274, 6497, 6274, 6497, 6016, 6497, 6497, 5952, 6622, 6001, 6810, 6116, 5992,
  /* 4536 */ 5861, 6001, 6346, 6116, 6115, 6418, 6118, 6173, 6365, 5996, 6680, 6142, 6497, 6497, 6497, 6505, 5977, 6503,
  /* 4554 */ 5883, 5896, 6417, 6118, 6013, 6497, 6497, 6497, 5970, 5972, 5884, 6415, 6117, 6119, 6497, 6266, 6367, 6311,
  /* 4572 */ 6683, 5883, 6368, 6317, 6013, 6497, 6497, 6351, 6497, 6642, 6141, 6497, 6497, 6914, 6599, 6497, 6497, 6363,
  /* 4590 */ 6374, 5952, 6620, 6683, 6497, 6021, 6499, 6497, 6497, 6497, 6491, 6497, 6410, 6497, 6498, 5952, 6622, 6013,
  /* 4608 */ 6497, 6497, 6365, 6497, 6497, 6523, 6497, 6497, 6132, 5831, 6497, 5831, 6497, 6596, 6497, 6024, 6358, 5846,
  /* 4626 */ 6497, 6497, 6497, 5870, 6497, 6497, 6507, 5974, 6683, 6497, 6497, 6497, 6639, 6497, 6497, 6497, 6345, 6497,
  /* 4644 */ 6497, 6507, 6454, 6497, 6497, 6627, 6630, 6602, 6641, 6497, 6497, 6596, 6599, 6497, 6497, 6497, 6523, 6696,
  /* 4662 */ 6497, 6026, 6247, 5868, 6639, 6497, 6497, 6500, 6452, 6497, 6696, 6497, 6696, 6497, 6497, 6402, 6000, 5851,
  /* 4680 */ 6523, 6497, 6497, 6497, 6515, 5977, 6464, 6632, 5976, 6633, 6632, 6636, 6634, 5983, 5983, 6497, 6596, 6158,
  /* 4698 */ 6648, 5983, 5983, 5983, 6648, 5984, 5985, 6652, 6655, 6661, 6657, 6660, 6658, 6665, 6670, 6670, 6670, 6671,
  /* 4716 */ 6672, 6667, 6667, 6668, 6669, 6674, 6670, 6670, 6670, 6672, 6672, 6672, 6672, 6676, 6677, 6679, 6497, 6114,
  /* 4734 */ 6497, 6497, 6508, 6498, 6264, 5897, 5902, 6599, 6497, 6497, 6497, 6094, 6497, 6690, 6497, 6497, 6402, 6093,
  /* 4752 */ 6500, 6514, 6497, 5965, 6698, 6497, 6508, 6497, 6497, 6497, 6487, 6308, 6662, 6701, 6497, 6497, 6402, 6457,
  /* 4770 */ 6779, 6487, 6497, 6497, 6402, 6516, 6022, 6338, 6497, 6497, 6402, 6730, 5878, 6513, 6706, 6708, 6497, 6124,
  /* 4788 */ 5902, 6497, 5977, 6642, 6497, 6279, 6497, 6313, 6705, 6707, 6497, 6497, 6402, 6818, 6138, 6781, 6497, 6497,
  /* 4806 */ 6782, 6497, 6497, 6500, 6687, 6349, 5978, 6369, 6497, 6497, 6497, 6517, 5874, 6497, 6459, 6497, 6508, 6712,
  /* 4824 */ 6512, 6780, 6487, 5996, 6497, 6497, 6137, 6497, 6497, 6600, 6338, 6497, 6124, 6540, 6497, 5976, 6094, 6497,
  /* 4842 */ 5976, 6328, 6497, 5975, 6497, 6500, 6508, 6497, 6497, 6733, 6719, 6708, 6497, 6497, 6497, 6536, 5878, 6913,
  /* 4860 */ 6720, 6497, 6141, 6497, 6491, 6278, 6497, 6497, 6497, 6578, 6497, 6497, 6500, 6716, 5978, 6625, 5956, 6497,
  /* 4878 */ 6497, 5868, 6783, 6497, 6126, 6513, 5873, 6717, 6576, 6245, 6153, 6497, 6497, 5878, 6718, 6612, 6246, 6154,
  /* 4896 */ 6277, 6497, 6277, 6497, 6141, 6497, 6497, 6507, 6013, 6497, 6497, 6364, 6507, 6497, 6722, 6628, 6155, 5868,
  /* 4914 */ 6783, 6423, 6497, 6155, 5870, 6497, 5882, 6688, 6313, 6497, 6497, 6513, 5873, 6912, 6719, 6840, 6423, 6497,
  /* 4932 */ 6497, 6410, 6497, 6410, 6497, 6497, 6497, 6253, 6505, 6025, 6718, 6612, 5976, 6624, 6489, 6497, 6497, 6722,
  /* 4950 */ 5897, 5902, 6497, 6190, 6497, 6497, 5844, 6497, 5970, 5972, 6497, 6497, 6639, 6497, 6270, 6541, 6338, 6497,
  /* 4968 */ 6497, 6457, 6368, 6197, 5997, 6026, 6322, 6612, 6319, 6155, 6497, 6497, 6490, 6497, 6724, 6304, 5956, 6497,
  /* 4986 */ 6193, 6497, 6497, 5862, 5883, 6321, 6612, 6095, 6497, 6197, 6497, 6497, 6351, 6351, 6351, 6497, 6497, 6497,
  /* 5004 */ 6722, 6155, 6124, 6612, 5956, 6497, 6256, 6134, 6263, 6604, 6497, 6497, 6724, 6428, 6497, 6356, 6497, 6497,
  /* 5022 */ 6497, 6596, 6497, 6497, 6611, 6428, 6497, 6497, 6494, 6495, 6338, 6338, 6338, 6497, 6497, 6783, 6338, 6497,
  /* 5040 */ 6497, 6497, 6783, 6497, 6279, 6313, 6497, 6497, 6497, 6825, 6497, 6726, 6497, 6497, 6497, 6831, 6837, 6279,
  /* 5058 */ 6497, 6497, 6497, 6599, 6260, 6497, 6497, 6596, 5897, 6497, 6410, 5831, 6596, 6599, 6596, 6599, 6497, 6279,
  /* 5076 */ 6497, 6497, 6328, 6783, 6702, 6702, 6702, 6186, 6186, 6186, 6186, 6497, 6497, 6497, 6612, 6497, 6729, 6327,
  /* 5094 */ 6259, 5846, 6497, 6517, 6497, 6497, 6497, 6832, 6497, 6497, 6497, 6260, 6497, 6497, 6497, 6262, 6497, 6497,
  /* 5112 */ 6497, 6016, 5996, 6497, 6773, 6497, 6497, 6773, 6517, 6738, 6497, 6735, 6378, 6497, 6497, 6497, 6898, 5988,
  /* 5130 */ 6120, 6120, 6120, 6121, 6120, 6172, 6171, 6120, 6710, 6120, 6710, 6455, 6644, 6646, 6645, 6645, 6645, 6645,
  /* 5148 */ 6742, 6744, 6744, 6748, 6747, 6749, 6751, 6745, 6744, 6744, 6744, 6753, 6756, 6756, 6755, 6754, 6760, 6760,
  /* 5166 */ 6760, 6758, 6760, 6756, 6760, 6760, 6755, 6760, 6760, 6759, 6762, 6497, 6497, 6497, 6902, 6247, 6497, 6512,
  /* 5184 */ 6377, 6497, 6497, 6640, 6131, 6497, 6497, 6769, 6497, 6266, 6137, 6166, 6497, 6497, 6772, 6497, 6497, 6497,
  /* 5202 */ 6920, 6240, 6775, 6497, 6298, 6194, 6497, 6251, 6778, 6400, 6789, 6497, 6497, 6498, 6448, 6497, 6791, 6794,
  /* 5220 */ 6497, 6271, 6422, 6776, 6498, 6793, 6497, 6497, 6498, 6507, 6001, 5977, 6303, 6021, 6796, 6497, 6570, 6797,
  /* 5238 */ 6497, 6497, 6498, 6766, 6307, 6317, 6497, 6317, 6599, 6497, 6497, 6498, 6817, 6159, 6139, 6497, 6497, 6517,
  /* 5256 */ 6497, 6313, 5831, 6497, 6776, 6131, 6513, 6497, 6497, 6497, 6641, 6497, 6799, 6497, 6497, 6499, 6497, 6512,
  /* 5274 */ 6809, 6321, 6801, 6804, 6806, 6154, 6497, 6497, 6402, 6809, 6321, 6813, 6497, 6498, 6808, 6545, 6812, 5994,
  /* 5292 */ 6282, 6153, 5831, 6497, 6776, 6497, 6272, 6577, 6497, 6497, 6270, 6321, 6820, 5994, 6359, 6361, 5956, 6497,
  /* 5310 */ 6497, 6402, 5876, 6545, 6335, 6165, 5979, 6823, 6355, 6246, 6154, 6497, 6497, 6446, 6293, 6817, 6270, 6321,
  /* 5328 */ 6822, 5994, 6525, 6153, 6497, 6497, 6497, 6497, 6815, 6497, 6497, 6497, 6642, 6497, 6497, 6497, 6338, 6497,
  /* 5346 */ 6338, 6815, 6497, 6815, 6497, 6273, 6497, 6497, 5837, 6497, 5831, 6776, 6497, 6497, 6500, 6440, 5967, 6497,
  /* 5364 */ 6501, 6497, 6497, 6497, 6510, 6817, 6270, 6321, 6337, 6139, 6355, 6153, 6497, 6276, 6255, 6497, 5864, 6497,
  /* 5382 */ 5964, 5993, 6355, 6153, 6497, 6323, 6371, 6603, 6282, 6497, 6497, 6497, 6402, 5876, 6159, 6733, 6094, 6497,
  /* 5400 */ 5868, 6016, 6159, 6165, 6524, 6095, 6165, 5993, 6537, 5956, 6498, 6817, 6618, 6337, 6134, 6524, 6095, 6497,
  /* 5418 */ 6325, 6497, 5836, 6497, 6497, 6729, 6914, 6497, 6497, 6498, 6403, 6094, 6497, 6498, 6403, 6422, 6727, 5956,
  /* 5436 */ 6497, 5977, 6464, 6247, 6497, 6512, 6016, 6497, 5902, 5956, 6497, 5973, 6497, 6497, 6827, 6497, 6498, 5865,
  /* 5454 */ 6829, 6000, 6182, 5956, 6497, 6497, 6497, 6497, 6722, 6497, 6328, 6596, 6599, 6497, 6596, 6599, 6000, 5956,
  /* 5472 */ 6497, 6497, 6500, 6507, 6454, 6497, 6497, 6497, 6507, 5877, 6922, 6497, 5865, 6837, 5956, 6132, 6141, 6497,
  /* 5490 */ 6497, 6497, 6290, 6498, 6000, 5851, 6497, 6336, 6185, 6489, 6499, 5868, 6497, 6497, 6502, 6617, 6367, 6497,
  /* 5508 */ 6497, 6836, 6497, 6336, 6740, 6615, 6000, 6126, 6497, 6497, 6497, 6695, 6580, 6578, 6497, 6497, 6505, 6000,
  /* 5526 */ 6270, 6016, 6578, 6497, 6016, 6418, 5844, 5901, 5894, 6497, 6844, 6845, 6848, 6642, 6847, 6320, 6642, 5854,
  /* 5544 */ 6027, 6850, 6852, 6853, 6851, 6857, 6856, 6859, 6850, 6851, 6856, 6855, 6857, 6861, 6862, 6864, 6865, 6867,
  /* 5562 */ 6864, 6869, 6869, 6869, 6870, 6869, 6869, 6876, 6877, 6876, 6879, 6876, 6870, 6871, 6873, 6872, 6874, 6873,
  /* 5580 */ 6872, 6881, 6872, 6872, 6887, 6887, 6886, 6887, 6883, 6888, 6889, 6885, 6891, 6892, 6894, 6497, 6497, 6497,
  /* 5598 */ 6702, 5885, 6508, 6497, 6596, 6247, 6515, 6497, 6338, 6497, 6497, 6277, 6497, 6497, 6497, 6497, 6896, 6497,
  /* 5616 */ 6348, 6642, 6126, 6497, 6497, 6900, 6497, 6349, 6414, 6337, 5972, 5973, 6497, 5868, 6497, 6497, 6497, 6693,
  /* 5634 */ 6497, 6349, 6601, 6417, 6497, 6904, 6906, 6497, 6371, 6246, 5956, 6435, 6013, 6497, 6497, 6505, 6366, 6445,
  /* 5652 */ 6497, 6444, 6497, 6497, 6500, 5863, 5987, 6357, 6497, 5874, 5976, 6908, 6497, 6132, 6639, 6497, 6509, 6910,
  /* 5670 */ 6637, 6181, 6911, 6916, 6126, 6497, 6512, 6497, 6497, 6497, 6639, 5882, 6497, 6422, 6497, 6497, 6839, 6367,
  /* 5688 */ 6337, 6258, 6497, 6497, 6515, 6497, 6497, 6507, 6453, 6026, 6322, 5878, 6321, 6181, 6497, 6497, 6497, 6709,
  /* 5706 */ 6497, 5972, 6497, 5972, 6497, 6497, 6497, 6164, 6152, 5997, 6497, 6497, 6497, 6733, 6498, 6497, 6497, 6497,
  /* 5724 */ 6740, 6290, 6497, 6351, 5831, 6326, 6426, 6497, 5837, 6713, 6497, 5846, 6497, 6682, 6497, 6497, 5879, 6497,
  /* 5742 */ 6497, 6497, 5991, 6333, 6026, 6322, 6126, 6497, 6497, 6839, 6918, 6279, 6132, 6497, 6497, 6505, 6457, 6017,
  /* 5760 */ 6426, 6516, 6333, 6026, 6125, 6497, 6270, 5878, 6321, 6126, 6338, 5874, 5976, 6497, 6376, 6497, 6497, 5976,
  /* 5778 */ 6497, 6497, 6497, 5996, 6497, 6497, 6497, 5997, 6497, 6497, 5997, 5831, 6279, 6351, 6497, 6497, 6505, 6497,
  /* 5796 */ 6497, 6497, 5960, 6922, 6497, 6497, 6497, 6776, 6497, 6497, 6497, 6026, 6507, 5877, 5879, 6497, 6379, 6497,
  /* 5814 */ 5838, 6505, 6516, 5878, 6497, 6497, 6497, 6505, 6516, 5874, 6497, 6497, 6497, 6523, 6497, 6491, 8, 262144,
  /* 5832 */ 0, -1979711488, 1075838976, 2097152, 0x80000000, 65536, 0, 11, 4194560, 4196352, -2143289344, -2143289344,
  /* 5844 */ 4194304, 0x80000000, 16777216, 0, 13, 960, 77824, 1048576, 0x80000000, 270532608, 2097152, 16400,
  /* 5856 */ 541065216, 541065216, -2143289344, 37748736, 541065216, 0, 31, 32, 128, 4, 16, 80, 0, 32, 8192, 0, 48, 16,
  /* 5874 */ 256, 0, 56, 64, 256, 512, 0, 58, 0, 64, 384, 2048, 0, 65, 1024, -1744550912, 4198144, 4196352, 276901888,
  /* 5893 */ 8540160, 4194304, 2048, 2048, 4096, 0, 81, 8425488, 4194304, 16384, 0, 82, 742391808, 239075328,
  /* 5907 */ -1405091840, 742391808, 742391808, 775946240, 775946240, -1405091840, -1371537408, 775946240, -1371537408,
  /* 5916 */ 775946240, 239075328, 171966464, 239075328, 239075328, 775946240, 171966464, 171966464, 775946240, 4718592,
  /* 5926 */ 64, 4718592, 2097216, 4720640, 541589504, 4194368, 4718848, 541589504, 4194400, 4194368, 541065280,
  /* 5937 */ -2143289280, 4194368, -2143285440, -2143285408, -2143285408, 776470528, -2143285408, -2109730976,
  /* 5945 */ -2143285408, -2109730976, 775946336, 776470528, 775946304, 775946304, -1908404384, 2, 4, 0, 0x80000000,
  /* 5956 */ 0x80000000, 0, -2147483646, 8392704, 0, 1040, 0, 1152, 33554432, 0, 1536, 1024, 10240, 16384, 131072,
  /* 5971 */ 262144, 524288, 0, 256, 8388608, 0, 512, 2048, 8192, 49152, 0, 520, 1024, 1024, 1026, 1024, 2048, 16384,
  /* 5989 */ 49156, 1536, 524288, 524288, 1048576, 2097152, 4194304, 4194304, 0, 16, 28, 16, 32, 64, 32, 96, 0, 18,
  /* 6007 */ 8912896, 64, 524288, 2097152, 8388608, 33554432, 201326592, 0, 2014, 0, 2048, 196608, 786432, 2048,
  /* 6021 */ 268435456, 0, 3328, 2, 16, 512, 4096, 402722816, 2, 1073807360, 80, 528, 528, 524304, 1048592, 2097168, 16,
  /* 6038 */ 528, 16, 1073807360, 24, 560, 48, 2097680, 1048592, 3145744, 1048592, 2097168, 2097168, 268435472, 20, 560,
  /* 6053 */ 48, 3146256, 2097552, 3146256, 2, 2098064, 163577856, 17, 21, 1049104, 2228784, -161429676, -161429676,
  /* 6066 */ -161430188, -161429680, -161430188, -161430188, -161429676, -160905388, -161429675, -698219984, -698219984,
  /* 6075 */ -161429675, -698218640, -698218640, -161347728, -161298576, -697169996, -161298576, -161298572, -161298572,
  /* 6084 */ -697170000, -160774288, -161298572, 16, 262160, -160774284, -161298572, 84, 20, 48, 4096, 536870912,
  /* 6096 */ 0x80000000, 112, 628, 146804757, 146812949, 146862101, 146863389, 146863389, -161429676, 146863421,
  /* 6106 */ 148960541, 146863389, 148960541, 148960541, -161429740, -160774284, -18860267, -18729163, 0, 6144, 40960,
  /* 6117 */ 131072, 1048576, 29360128, 201326592, 201326592, 201326600, 159383552, 0, 8192, 1048576, 0, 768, 1024,
  /* 6130 */ 16384, 196608, 0, 1024, 262144, 1048576, 128, 768, 16384, 262144, 2097152, 2097152, 0, 12, 16, 16, 17, 20,
  /* 6148 */ 16, 20, 21, 53, 100663296, 536870912, -1073741824, 0, 16384, 458752, 8388608, 4096, 16384, 2098176,
  /* 6162 */ 2098176, 142606336, 0, 32768, 262144, 67108864, 32768, 458752, 50331648, 201326592, 201326656, 201326592,
  /* 6174 */ 268435456, 4194432, 3145728, 243269632, 0, 40960, 2, 65536, 1048576, 536870912, 1073741824, 18432,
  /* 6186 */ 67108864, 67108864, 134217728, 0x80000000, 328192, 0, 49158, 5242880, 0, 49220, 16, 33554432, 536870912,
  /* 6199 */ -2147418112, -1842937664, 201330723, 201330721, 201330721, -2111369023, -2111369023, -2111360575,
  /* 6207 */ -2111369023, 206573601, -2111369023, -1977151295, -1977151293, -1910042431, -1910042399, -1910042399,
  /* 6215 */ -2111368509, -1893265183, -1893265183, -2111368509, -1893265183, -1893265181, -1910042399, -553689472,
  /* 6223 */ -553689472, -553656704, -553689472, -553656704, -553656704, -553656670, -553656662, -553656671, -553656671,
  /* 6232 */ -553689439, -553656662, -553656662, -553656598, -536912159, -536879391, -553656661, -536879381, 0, 50180,
  /* 6242 */ 458880, 2097152, 16777216, 67108864, 268435456, 536870912, 0, 49156, -1845493760, 0, 50244, 1, 4096,
  /* 6255 */ -2113929216, 0, 65536, 524288, 4194304, 8388608, 67108864, 2048, 4194304, 16777216, 6, 16, 64, 64, 96, 64,
  /* 6271 */ 128, 0, 24, 0, 26, 471424, 0, 98304, 0, 131072, 2097152, 67108864, 402653184, 0, 163840, -1912602624, 0,
  /* 6288 */ 164864, 463488, 0, 196608, 1007232, 15728640, -570425344, 128, 196608, 167772160, 234881024, 0, 262656,
  /* 6301 */ 262144, 7168, 16384, 67108864, 536870912, 128, 131072, 4194304, 33554432, 3072, 131072, 8388608, 134217728,
  /* 6314 */ 0, 1998, 518144, 8388608, 16777216, 16777216, 4096, 4096, 8192, 65536, 262144, 262144, 65536, 65536,
  /* 6328 */ 131072, 0, 96, 96, 128, 128, 256, 8192, 16384, 16384, 32768, 0, 118, 280448, 11010048, 520093696, 0, 127,
  /* 6346 */ 384, 6144, 0, 128, 512, 1024, 0, 208, 208, 4194304, 134217728, 32768, 524288, 8388608, 234881024,
  /* 6361 */ 268435456, 1073741824, 1, 1, 2, 8, 128, 2048, 131072, 786432, 1048576, 4194304, 4194432, 18952, 1024,
  /* 6376 */ 278528, 0, 264192, 0, 278528, 18952, 268436480, 2101248, 524288, 1082130448, 8388624, 8388624, 8388689,
  /* 6389 */ -1739308032, -1739308032, 8407641, -1736162288, -1736162288, -7868466, -7868466, -7868450, -7868466,
  /* 6398 */ -7868450, -7868450, 0, 312324, 1, 4, 48, 565248, 2101248, 0, 462976, 8407040, 0, 524288, 64, 512, 3072,
  /* 6415 */ 4096, 32768, 32768, 131072, 524288, 96, 524288, 4096, 1048576, 32768, 196608, 262144, 33554432, 67108864,
  /* 6429 */ 0x80000000, 1040, 8667136, 1998, 59238400, -67108864, 0, 593920, 2014, 2014, 2, 204, 768, 220, 220, 0,
  /* 6445 */ 602112, 0, 1040000, 2, 12, 64, 768, 12, 192, 256, 201326592, 1275330560, 8, 512, 7168, 0, 263168, 50331648,
  /* 6463 */ 536870912, 131072, 33554432, 131072, 536870912, 512, 131072, 16777216, 536870912, 25690130, 25690130,
  /* 6474 */ 294387730, 11011075, 11183115, 11174931, 11183115, 11174915, 11174915, 294404114, 27788306, 27788306,
  /* 6484 */ 162006098, 27788306, 531384310, 0, 1048576, 1073741824, 0x80000000, 16, 0, -1744830464, 0, -570425344,
  /* 6496 */ -570425344, 0, 0, 1, 0, 2, 0, 3, 28, 0, 4, 4, 8, 0, 5, 8, 32, 0, 6, 0, 8, 64, 0, 10, 531384310, 531384310,
  /* 6522 */ 285212672, 0, 2097152, 134217728, 268435456, 3, 11010048, 173056, 19, 18, 16777216, 150994944, 0, 2098176,
  /* 6536 */ 80, 134217728, 536870912, 1792, 16384, 134217728, 1048576, 4, 112, 128, 4096, 16, 16777216, 273162282,
  /* 6550 */ 273293354, 289939498, 340271146, 273162282, 273162282, 273162410, 273166378, 273162286, 277389360,
  /* 6559 */ 277389360, 340271150, 281583672, 281583674, 281583674, 281583802, 281583674, 281587770, 500873471,
  /* 6568 */ 500873471, 500873727, 0, 3470588, 500873727, 500873727, 500873471, 512, 65536, 12582912, 0, 4194304,
  /* 6580 */ 37748736, 0, 88, 42, 532480, 4194304, 268435456, 663552, 335544320, 20971520, 268435456, 46, 0, 5242880,
  /* 6594 */ 0x80000000, 569344, 0, 8388608, 50331648, 67108864, 0, 3072, 16384, 16777216, 33554432, 268435456,
  /* 6606 */ 0x80000000, 128, 702464, 30408704, 469762048, 0, 12582912, 67108864, 14, 0, 16973824, 28, 64, 4096, 8,
  /* 6621 */ 8388608, 8, 256, 8192, 2097152, 1073741824, 16777217, 6, 4096, 2, 4096, 8192, 1073743872, 1073743872,
  /* 6635 */ 1073744128, 917504, 512, 12288, 0, 262144, 1073741824, 0, 4096, 201326592, 49158, 49158, 201326593,
  /* 6648 */ -2147482624, 1024, 2097152, 301989888, 1030, 1024, 5521408, 1536, 1073749248, 1073749256, 1073749288,
  /* 6659 */ 1073749288, 1073749256, 1073749256, 9728, 0, 18874368, 1207966984, 1074797864, 1073745152, 1073745152,
  /* 6669 */ 1073745154, 1073777920, 1073777920, -188661994, -188661994, 1073745152, 1073745158, -188629226, -188629226,
  /* 6678 */ -188661994, -188629226, 0, 20971520, 0, 16777216, 201326592, 805306368, -1073741824, 4, 64, 8200, 917504,
  /* 6691 */ 0, 32505856, 0, 234496, 2304, 0, 33554432, 7424, 0, 33570816, 7456, 0, 67108864, 805306368, 6, 16144,
  /* 6707 */ 79757312, -268435456, 0, 201326592, 738201600, 9216, 0, 268435456, 536576, 4, 512, 14336, 65536, 79691776,
  /* 6721 */ -268435456, 1, 16777216, 8192, 12582912, 131072, 134217728, 1073741824, 1, 8, 192, 768, 512, 524288, 64,
  /* 6736 */ 32768, 8421392, 1074003968, 16973824, 1, 16384, 100713476, 100713476, 234931204, 234931204, 100713540,
  /* 6747 */ 201375812, 201375748, 201375748, 100713540, 738250756, 201375748, 1308935172, -60493571, -60493571,
  /* 6756 */ -59444995, -60493571, -26938115, -25889539, -59444995, -59444995, -25889539, 0, 268697600, 268697600, 8,
  /* 6767 */ 65536, 268435456, 738197504, 0, 536870912, 1275068416, 0, 536875008, 100663296, 0, 1073741824, 53252, 0,
  /* 6780 */ 1207959552, 0, 79790080, 0, 134217728, 128, 1792, 0, 601, 1308622848, 0, 1, 2420988, 3469564, -62914560, 0,
  /* 6796 */ 2422012, -29360128, 0, 311296, 0, 311296, 2097152, 1074004992, 4194304, 67108864, 402653184, 536870912, 4,
  /* 6809 */ 120, 128, 6144, 8192, 1359872, 2097152, 1024, 33554432, 4, 56, 4096, 49152, 262144, 49152, 1310720,
  /* 6824 */ 2097152, 1, 65536, 512, 536870912, 32, 536870912, 1, 16, 8388608, 503316480, 1073741824, 1, 32, 1048576, 2,
  /* 6840 */ 32, 134217728, 805306368, 1073741824, 272629760, 549453824, 0, 549453824, 264, 264, 100663297, 369098753,
  /* 6852 */ 100663297, 100663297, 104857601, 100663809, 369098753, 369098753, 373293057, 369098881, 369098753,
  /* 6861 */ 100663561, 402886656, 100663561, 402887712, 402887712, 402887713, 403149856, 403412000, 503910401,
  /* 6870 */ 503910401, 508104705, 1127373, 1127373, 5321677, 1127373, 503386113, 503386113, 507580417, 503386241,
  /* 6880 */ 508104705, 5321677, 5321677, 156316621, 290534349, 374420429, 374420429, 22098893, 22098893, 290534349,
  /* 6890 */ 370226125, 509162445, 509162445, 391197645, 525939661, 0, 69632, 134217728, 1, 67108864, 9, 0, 233472, 0,
  /* 6904 */ 33, 496640, 758784, 0, 229376, 0, 8, 448, 512, 15360, 65536, 16777216, 12288, 65536, 128, 16384, 2, 16384,
  /* 6922 */ 512, 1048576
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

// End
