// This file was generated on Sun Dec 4, 2016 21:21 (UTC+01) by REx v5.41 which is Copyright (c) 1979-2016 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 275:                       // 'xquery'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64275                 // 'xquery' 'encoding'
     || lk == 135443)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    switch (l1)
    {
    case 183:                       // 'module'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 94903:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(275);                   // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(264);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        consume(125);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(183);                   // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(213);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 153:                     // 'import'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 42604               // 'declare' 'base-uri'
       && lk != 43628               // 'declare' 'boundary-space'
       && lk != 50284               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 72300               // 'declare' 'ft-option'
       && lk != 93849               // 'import' 'module'
       && lk != 94828               // 'declare' 'namespace'
       && lk != 104556              // 'declare' 'ordering'
       && lk != 114284              // 'declare' 'revalidation'
       && lk != 115865)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(178);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 94828:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 153:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 72300:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 48748               // 'declare' 'collection'
       && lk != 51820               // 'declare' 'context'
       && lk != 74348               // 'declare' 'function'
       && lk != 79468               // 'declare' 'index'
       && lk != 82540               // 'declare' 'integrity'
       && lk != 102508              // 'declare' 'option'
       && lk != 132204              // 'declare' 'updating'
       && lk != 134764)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(175);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51820:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 102508:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(172);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 104556:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 114284:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(85);                    // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 215:                       // 'preserve'
      consume(215);                 // 'preserve'
      break;
    default:
      consume(242);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(94);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(94);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(83);                    // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 242:                       // 'strip'
      consume(242);                 // 'strip'
      break;
    default:
      consume(215);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    consume(204);                   // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    default:
      consume(257);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consume(202);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      consume(147);                 // 'greatest'
      break;
    default:
      consume(173);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consumeT(202);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      consumeT(147);                // 'greatest'
      break;
    default:
      consumeT(173);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(104);                   // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 215:                       // 'preserve'
      consume(215);                 // 'preserve'
      break;
    default:
      consume(191);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 157:                       // 'inherit'
      consume(157);                 // 'inherit'
      break;
    default:
      consume(190);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(106);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(180);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      consume(107);                 // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      consume(149);                 // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      consume(156);                 // 'infinity'
      break;
    case 180:                       // 'minus-sign'
      consume(180);                 // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      consume(67);                  // 'NaN'
      break;
    case 210:                       // 'percent'
      consume(210);                 // 'percent'
      break;
    case 209:                       // 'per-mille'
      consume(209);                 // 'per-mille'
      break;
    case 276:                       // 'zero-digit'
      consume(276);                 // 'zero-digit'
      break;
    case 116:                       // 'digit'
      consume(116);                 // 'digit'
      break;
    default:
      consume(208);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 153:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 115865:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(153);                   // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    consume(226);                   // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(121);                 // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      consume(185);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(153);                   // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    consume(183);                   // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 185)                  // 'namespace'
    {
      consume(185);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    default:
      consume(145);                 // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    default:
      consumeT(145);                // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consumeT(185);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(141);                   // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(108);                   // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 258)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 258:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 263:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 145:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 95:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 155:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(258);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(263);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(165);                   // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    consume(200);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 174:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 174:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      parse_InitialClause();
      break;
    case 267:                       // 'where'
      parse_WhereClause();
      break;
    case 148:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      try_InitialClause();
      break;
    case 267:                       // 'where'
      try_WhereClause();
      break;
    case 148:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(137);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 229)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 229)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(72);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(72);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(81);                    // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(81);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(229);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(229);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(174);                   // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(174);                  // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(137);                   // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 252:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 252:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(252);                   // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(270);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 199)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(252);                  // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(270);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 199)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(235);                   // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(270);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(235);                  // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(270);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(238);                   // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(266);                   // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(238);                  // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(266);                  // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 199)                  // 'only'
    {
      consume(199);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(126);                   // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(266);                   // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 199)                  // 'only'
    {
      consumeT(199);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(126);                  // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(266);                  // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 216)                  // 'previous'
    {
      consume(216);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 188)                  // 'next'
    {
      consume(188);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 216)                  // 'previous'
    {
      consumeT(216);                // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 188)                  // 'next'
    {
      consumeT(188);                // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(105);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(105);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(267);                   // 'where'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(267);                  // 'where'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(148);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(87);                    // 'by'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(148);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(87);                   // 'by'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 35871                 // '$' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 140831)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(182);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 52              // ':='
           || l1 == 79)             // 'as'
          {
            if (l1 == 79)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            consumeT(52);           // ':='
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
          }
          if (l1 == 94)             // 'collation'
          {
            consumeT(94);           // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(182);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 52                  // ':='
       || l1 == 79)                 // 'as'
      {
        if (l1 == 79)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      if (l1 == 94)                 // 'collation'
      {
        consume(94);                // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 35871                 // '$' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 140831)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(182);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 52              // ':='
           || l1 == 79)             // 'as'
          {
            if (l1 == 79)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            consumeT(52);           // ':='
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
          }
          if (l1 == 94)             // 'collation'
          {
            consumeT(94);           // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(182);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 52                  // ':='
       || l1 == 79)                 // 'as'
      {
        if (l1 == 79)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        consumeT(52);               // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      if (l1 == 94)                 // 'collation'
      {
        consumeT(94);               // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consumeT(7);                // URILiteral
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 202:                       // 'order'
      consume(202);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(87);                  // 'by'
      break;
    default:
      consume(237);                 // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consume(202);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(87);                  // 'by'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(87);                 // 'by'
      break;
    default:
      consumeT(237);                // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consumeT(202);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(87);                 // 'by'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        consume(80);                // 'ascending'
        break;
      default:
        consume(113);               // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consume(123);                 // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        consume(147);               // 'greatest'
        break;
      default:
        consume(173);               // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      consume(94);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        consumeT(80);               // 'ascending'
        break;
      default:
        consumeT(113);              // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consumeT(123);                // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        consumeT(147);              // 'greatest'
        break;
      default:
        consumeT(173);              // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      consumeT(94);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    default:
      consume(129);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(225);                   // 'satisfies'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    default:
      consumeT(129);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(225);                  // 'satisfies'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(244);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(244);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(88);                  // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(88);                 // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(254);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(254);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(88);                    // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(88);                   // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consume(280);                 // '|'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consumeT(280);                // '|'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(152);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(246);                   // 'then'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(122);                   // 'else'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(152);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(246);                  // 'then'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(122);                  // 'else'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(251);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(251);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(283);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(91);                    // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(91);                   // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consume(280);                 // '|'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consumeT(280);                // '|'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 201)                // 'or'
      {
        break;
      }
      consume(201);                 // 'or'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 201)                // 'or'
      {
        break;
      }
      consumeT(201);                // 'or'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      consume(75);                  // 'and'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      consumeT(75);                 // 'and'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 187)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 187:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 187)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 187:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consume(99);                  // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consume(245);                 // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 272)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consumeT(99);                 // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consumeT(245);                // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 272)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 281)                // '||'
      {
        break;
      }
      consume(281);                 // '||'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 281)                // '||'
      {
        break;
      }
      consumeT(281);                // '||'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 249)                  // 'to'
    {
      consume(249);                 // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 249)                  // 'to'
    {
      consumeT(249);                // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 181)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 118:                     // 'div'
        consume(118);               // 'div'
        break;
      case 151:                     // 'idiv'
        consume(151);               // 'idiv'
        break;
      default:
        consume(181);               // 'mod'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 181)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 118:                     // 'div'
        consumeT(118);              // 'div'
        break;
      case 151:                     // 'idiv'
        consumeT(151);              // 'idiv'
        break;
      default:
        consumeT(181);              // 'mod'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 255                 // 'union'
       && l1 != 280)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'union'
        consume(255);               // 'union'
        break;
      default:
        consume(280);               // '|'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 255                 // 'union'
       && l1 != 280)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'union'
        consumeT(255);              // 'union'
        break;
      default:
        consumeT(280);              // '|'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        consume(162);               // 'intersect'
        break;
      default:
        consume(131);               // 'except'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        consumeT(162);              // 'intersect'
        break;
      default:
        consumeT(131);              // 'except'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      consume(160);                 // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(197);                 // 'of'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      consumeT(160);                // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(197);                // 'of'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 250)                  // 'treat'
    {
      consume(250);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 250)                  // 'treat'
    {
      consumeT(250);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      consume(90);                  // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      consumeT(90);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      consume(89);                  // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      consumeT(89);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 261:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87813:                     // 'validate' 'lax'
    case 123653:                    // 'validate' 'strict'
    case 129797:                    // 'validate' 'type'
    case 142085:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 261:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87813:                     // 'validate' 'lax'
    case 123653:                    // 'validate' 'strict'
    case 129797:                    // 'validate' 'type'
    case 142085:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 54:                        // '<'
      consume(54);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 61:                        // '>'
      consume(61);                  // '>'
      break;
    default:
      consume(62);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 54:                        // '<'
      consumeT(54);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 61:                        // '>'
      consumeT(61);                 // '>'
      break;
    default:
      consumeT(62);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    default:
      consume(146);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    default:
      consumeT(146);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(63);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(63);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(261);                   // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 277)                  // '{'
    {
      switch (l1)
      {
      case 253:                     // 'type'
        consume(253);               // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(261);                  // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 277)                  // '{'
    {
      switch (l1)
      {
      case 253:                     // 'type'
        consumeT(253);              // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    default:
      consume(241);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    default:
      consumeT(241);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_Expr();
    }
    consumeT(283);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(287);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 206:                     // 'paragraphs'
      case 233:                     // 'sentences'
      case 248:                     // 'times'
      case 274:                     // 'words'
      case 280:                     // '|'
      case 281:                     // '||'
      case 282:                     // '|}'
      case 283:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(287);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 206:                     // 'paragraphs'
      case 233:                     // 'sentences'
      case 248:                     // 'times'
      case 274:                     // 'words'
      case 280:                     // '|'
      case 281:                     // '||'
      case 282:                     // '|}'
      case 283:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 181                 // 'mod'
       && lk != 182                 // 'modify'
       && lk != 187                 // 'ne'
       && lk != 199                 // 'only'
       && lk != 201                 // 'or'
       && lk != 202                 // 'order'
       && lk != 206                 // 'paragraphs'
       && lk != 221                 // 'return'
       && lk != 225                 // 'satisfies'
       && lk != 233                 // 'sentences'
       && lk != 237                 // 'stable'
       && lk != 238                 // 'start'
       && lk != 248                 // 'times'
       && lk != 249                 // 'to'
       && lk != 250                 // 'treat'
       && lk != 255                 // 'union'
       && lk != 267                 // 'where'
       && lk != 271                 // 'with'
       && lk != 274                 // 'words'
       && lk != 280                 // '|'
       && lk != 281                 // '||'
       && lk != 282                 // '|}'
       && lk != 283                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(268);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      case 47:                      // '//'
        consume(47);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 181                 // 'mod'
       && lk != 182                 // 'modify'
       && lk != 187                 // 'ne'
       && lk != 199                 // 'only'
       && lk != 201                 // 'or'
       && lk != 202                 // 'order'
       && lk != 206                 // 'paragraphs'
       && lk != 221                 // 'return'
       && lk != 225                 // 'satisfies'
       && lk != 233                 // 'sentences'
       && lk != 237                 // 'stable'
       && lk != 238                 // 'start'
       && lk != 248                 // 'times'
       && lk != 249                 // 'to'
       && lk != 250                 // 'treat'
       && lk != 255                 // 'union'
       && lk != 267                 // 'where'
       && lk != 271                 // 'with'
       && lk != 274                 // 'words'
       && lk != 280                 // '|'
       && lk != 281                 // '||'
       && lk != 282                 // '|}'
       && lk != 283                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(268);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      case 47:                      // '//'
        consumeT(47);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(284);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 185:                       // 'namespace'
    case 217:                       // 'processing-instruction'
      lookahead2W(283);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 245:                       // 'text'
    case 257:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 230:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 186:                       // 'namespace-node'
    case 187:                       // 'ne'
    case 192:                       // 'node'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 229:                       // 'score'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36025                 // 'namespace' 'after'
     || lk == 36057                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38585                 // 'namespace' 'and'
     || lk == 38617                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40633                 // 'namespace' 'as'
     || lk == 40665                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41145                 // 'namespace' 'ascending'
     || lk == 41177                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41657                 // 'namespace' 'at'
     || lk == 41689                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43193                 // 'namespace' 'before'
     || lk == 43225                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45241                 // 'namespace' 'case'
     || lk == 45273                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45753                 // 'namespace' 'cast'
     || lk == 45785                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46265                 // 'namespace' 'castable'
     || lk == 46297                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48313                 // 'namespace' 'collation'
     || lk == 48345                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53945                 // 'namespace' 'count'
     || lk == 53977                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55993                 // 'namespace' 'default'
     || lk == 56025                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58041                 // 'namespace' 'descending'
     || lk == 58073                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60601                 // 'namespace' 'div'
     || lk == 60633                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62649                 // 'namespace' 'else'
     || lk == 62681                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63161                 // 'namespace' 'empty'
     || lk == 63193                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64697                 // 'namespace' 'end'
     || lk == 64729                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65721                 // 'namespace' 'eq'
     || lk == 65753                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67257                 // 'namespace' 'except'
     || lk == 67289                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70329                 // 'namespace' 'for'
     || lk == 70361                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74937                 // 'namespace' 'ge'
     || lk == 74969                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75961                 // 'namespace' 'group'
     || lk == 75993                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76985                 // 'namespace' 'gt'
     || lk == 77017                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77497                 // 'namespace' 'idiv'
     || lk == 77529                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82105                 // 'namespace' 'instance'
     || lk == 82137                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83129                 // 'namespace' 'intersect'
     || lk == 83161                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83641                 // 'namespace' 'into'
     || lk == 83673                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84153                 // 'namespace' 'is'
     || lk == 84185                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88249                 // 'namespace' 'le'
     || lk == 88281                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89273                 // 'namespace' 'let'
     || lk == 89305                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91321                 // 'namespace' 'lt'
     || lk == 91353                 // 'processing-instruction' 'lt'
     || lk == 92754                 // 'attribute' 'mod'
     || lk == 92793                 // 'element' 'mod'
     || lk == 92857                 // 'namespace' 'mod'
     || lk == 92889                 // 'processing-instruction' 'mod'
     || lk == 93266                 // 'attribute' 'modify'
     || lk == 93305                 // 'element' 'modify'
     || lk == 93369                 // 'namespace' 'modify'
     || lk == 93401                 // 'processing-instruction' 'modify'
     || lk == 95826                 // 'attribute' 'ne'
     || lk == 95865                 // 'element' 'ne'
     || lk == 95929                 // 'namespace' 'ne'
     || lk == 95961                 // 'processing-instruction' 'ne'
     || lk == 101970                // 'attribute' 'only'
     || lk == 102009                // 'element' 'only'
     || lk == 102073                // 'namespace' 'only'
     || lk == 102105                // 'processing-instruction' 'only'
     || lk == 102994                // 'attribute' 'or'
     || lk == 103033                // 'element' 'or'
     || lk == 103097                // 'namespace' 'or'
     || lk == 103129                // 'processing-instruction' 'or'
     || lk == 103506                // 'attribute' 'order'
     || lk == 103545                // 'element' 'order'
     || lk == 103609                // 'namespace' 'order'
     || lk == 103641                // 'processing-instruction' 'order'
     || lk == 113234                // 'attribute' 'return'
     || lk == 113273                // 'element' 'return'
     || lk == 113337                // 'namespace' 'return'
     || lk == 113369                // 'processing-instruction' 'return'
     || lk == 115282                // 'attribute' 'satisfies'
     || lk == 115321                // 'element' 'satisfies'
     || lk == 115385                // 'namespace' 'satisfies'
     || lk == 115417                // 'processing-instruction' 'satisfies'
     || lk == 121426                // 'attribute' 'stable'
     || lk == 121465                // 'element' 'stable'
     || lk == 121529                // 'namespace' 'stable'
     || lk == 121561                // 'processing-instruction' 'stable'
     || lk == 121938                // 'attribute' 'start'
     || lk == 121977                // 'element' 'start'
     || lk == 122041                // 'namespace' 'start'
     || lk == 122073                // 'processing-instruction' 'start'
     || lk == 127570                // 'attribute' 'to'
     || lk == 127609                // 'element' 'to'
     || lk == 127673                // 'namespace' 'to'
     || lk == 127705                // 'processing-instruction' 'to'
     || lk == 128082                // 'attribute' 'treat'
     || lk == 128121                // 'element' 'treat'
     || lk == 128185                // 'namespace' 'treat'
     || lk == 128217                // 'processing-instruction' 'treat'
     || lk == 130642                // 'attribute' 'union'
     || lk == 130681                // 'element' 'union'
     || lk == 130745                // 'namespace' 'union'
     || lk == 130777                // 'processing-instruction' 'union'
     || lk == 136786                // 'attribute' 'where'
     || lk == 136825                // 'element' 'where'
     || lk == 136889                // 'namespace' 'where'
     || lk == 136921                // 'processing-instruction' 'where'
     || lk == 138834                // 'attribute' 'with'
     || lk == 138873                // 'element' 'with'
     || lk == 138937                // 'namespace' 'with'
     || lk == 138969)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 64:                        // '?'
    case 68:                        // '['
    case 277:                       // '{'
    case 279:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9913:                      // 'namespace' NCName^Token
    case 9945:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15034:                     // 'namespace-node' '#'
    case 15035:                     // 'ne' '#'
    case 15040:                     // 'node' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15075:                     // 'schema-attribute' '#'
    case 15076:                     // 'schema-element' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15091:                     // 'structured-item' '#'
    case 15092:                     // 'switch' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15102:                     // 'typeswitch' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37049:                     // 'namespace' 'allowing'
    case 37081:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37561:                     // 'namespace' 'ancestor'
    case 37593:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38073:                     // 'namespace' 'ancestor-or-self'
    case 38105:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39609:                     // 'namespace' 'append'
    case 39641:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42169:                     // 'namespace' 'attribute'
    case 42201:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42681:                     // 'namespace' 'base-uri'
    case 42713:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43705:                     // 'namespace' 'boundary-space'
    case 43737:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44217:                     // 'namespace' 'break'
    case 44249:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46777:                     // 'namespace' 'catch'
    case 46809:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47801:                     // 'namespace' 'child'
    case 47833:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49337:                     // 'namespace' 'comment'
    case 49369:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49849:                     // 'namespace' 'constraint'
    case 49881:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50361:                     // 'namespace' 'construction'
    case 50393:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51897:                     // 'namespace' 'context'
    case 51929:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52409:                     // 'namespace' 'continue'
    case 52441:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52921:                     // 'namespace' 'copy'
    case 52953:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53433:                     // 'namespace' 'copy-namespaces'
    case 53465:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54457:                     // 'namespace' 'decimal-format'
    case 54489:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55481:                     // 'namespace' 'declare'
    case 55513:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56505:                     // 'namespace' 'delete'
    case 56537:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57017:                     // 'namespace' 'descendant'
    case 57049:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57529:                     // 'namespace' 'descendant-or-self'
    case 57561:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61113:                     // 'namespace' 'document'
    case 61145:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61625:                     // 'namespace' 'document-node'
    case 61657:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62137:                     // 'namespace' 'element'
    case 62169:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63673:                     // 'namespace' 'empty-sequence'
    case 63705:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64185:                     // 'namespace' 'encoding'
    case 64217:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66233:                     // 'namespace' 'every'
    case 66265:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67769:                     // 'namespace' 'exit'
    case 67801:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68281:                     // 'namespace' 'external'
    case 68313:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68793:                     // 'namespace' 'first'
    case 68825:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69305:                     // 'namespace' 'following'
    case 69337:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69817:                     // 'namespace' 'following-sibling'
    case 69849:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72377:                     // 'namespace' 'ft-option'
    case 72409:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74425:                     // 'namespace' 'function'
    case 74457:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78009:                     // 'namespace' 'if'
    case 78041:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78521:                     // 'namespace' 'import'
    case 78553:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79033:                     // 'namespace' 'in'
    case 79065:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79545:                     // 'namespace' 'index'
    case 79577:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81593:                     // 'namespace' 'insert'
    case 81625:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82617:                     // 'namespace' 'integrity'
    case 82649:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84665:                     // 'namespace' 'item'
    case 84697:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85177:                     // 'namespace' 'json'
    case 85209:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87225:                     // 'namespace' 'last'
    case 87257:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87737:                     // 'namespace' 'lax'
    case 87769:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90297:                     // 'namespace' 'loop'
    case 90329:                     // 'processing-instruction' 'loop'
    case 91730:                     // 'attribute' 'map'
    case 91769:                     // 'element' 'map'
    case 91833:                     // 'namespace' 'map'
    case 91865:                     // 'processing-instruction' 'map'
    case 93778:                     // 'attribute' 'module'
    case 93817:                     // 'element' 'module'
    case 93881:                     // 'namespace' 'module'
    case 93913:                     // 'processing-instruction' 'module'
    case 94802:                     // 'attribute' 'namespace'
    case 94841:                     // 'element' 'namespace'
    case 94905:                     // 'namespace' 'namespace'
    case 94937:                     // 'processing-instruction' 'namespace'
    case 95314:                     // 'attribute' 'namespace-node'
    case 95353:                     // 'element' 'namespace-node'
    case 95417:                     // 'namespace' 'namespace-node'
    case 95449:                     // 'processing-instruction' 'namespace-node'
    case 98386:                     // 'attribute' 'node'
    case 98425:                     // 'element' 'node'
    case 98489:                     // 'namespace' 'node'
    case 98521:                     // 'processing-instruction' 'node'
    case 98898:                     // 'attribute' 'nodes'
    case 98937:                     // 'element' 'nodes'
    case 99001:                     // 'namespace' 'nodes'
    case 99033:                     // 'processing-instruction' 'nodes'
    case 99922:                     // 'attribute' 'object'
    case 99961:                     // 'element' 'object'
    case 100025:                    // 'namespace' 'object'
    case 100057:                    // 'processing-instruction' 'object'
    case 102482:                    // 'attribute' 'option'
    case 102521:                    // 'element' 'option'
    case 102585:                    // 'namespace' 'option'
    case 102617:                    // 'processing-instruction' 'option'
    case 104018:                    // 'attribute' 'ordered'
    case 104057:                    // 'element' 'ordered'
    case 104121:                    // 'namespace' 'ordered'
    case 104153:                    // 'processing-instruction' 'ordered'
    case 104530:                    // 'attribute' 'ordering'
    case 104569:                    // 'element' 'ordering'
    case 104633:                    // 'namespace' 'ordering'
    case 104665:                    // 'processing-instruction' 'ordering'
    case 106066:                    // 'attribute' 'parent'
    case 106105:                    // 'element' 'parent'
    case 106169:                    // 'namespace' 'parent'
    case 106201:                    // 'processing-instruction' 'parent'
    case 109138:                    // 'attribute' 'preceding'
    case 109177:                    // 'element' 'preceding'
    case 109241:                    // 'namespace' 'preceding'
    case 109273:                    // 'processing-instruction' 'preceding'
    case 109650:                    // 'attribute' 'preceding-sibling'
    case 109689:                    // 'element' 'preceding-sibling'
    case 109753:                    // 'namespace' 'preceding-sibling'
    case 109785:                    // 'processing-instruction' 'preceding-sibling'
    case 111186:                    // 'attribute' 'processing-instruction'
    case 111225:                    // 'element' 'processing-instruction'
    case 111289:                    // 'namespace' 'processing-instruction'
    case 111321:                    // 'processing-instruction' 'processing-instruction'
    case 112210:                    // 'attribute' 'rename'
    case 112249:                    // 'element' 'rename'
    case 112313:                    // 'namespace' 'rename'
    case 112345:                    // 'processing-instruction' 'rename'
    case 112722:                    // 'attribute' 'replace'
    case 112761:                    // 'element' 'replace'
    case 112825:                    // 'namespace' 'replace'
    case 112857:                    // 'processing-instruction' 'replace'
    case 113746:                    // 'attribute' 'returning'
    case 113785:                    // 'element' 'returning'
    case 113849:                    // 'namespace' 'returning'
    case 113881:                    // 'processing-instruction' 'returning'
    case 114258:                    // 'attribute' 'revalidation'
    case 114297:                    // 'element' 'revalidation'
    case 114361:                    // 'namespace' 'revalidation'
    case 114393:                    // 'processing-instruction' 'revalidation'
    case 115794:                    // 'attribute' 'schema'
    case 115833:                    // 'element' 'schema'
    case 115897:                    // 'namespace' 'schema'
    case 115929:                    // 'processing-instruction' 'schema'
    case 116306:                    // 'attribute' 'schema-attribute'
    case 116345:                    // 'element' 'schema-attribute'
    case 116409:                    // 'namespace' 'schema-attribute'
    case 116441:                    // 'processing-instruction' 'schema-attribute'
    case 116818:                    // 'attribute' 'schema-element'
    case 116857:                    // 'element' 'schema-element'
    case 116921:                    // 'namespace' 'schema-element'
    case 116953:                    // 'processing-instruction' 'schema-element'
    case 117330:                    // 'attribute' 'score'
    case 117369:                    // 'element' 'score'
    case 117433:                    // 'namespace' 'score'
    case 117465:                    // 'processing-instruction' 'score'
    case 117842:                    // 'attribute' 'self'
    case 117881:                    // 'element' 'self'
    case 117945:                    // 'namespace' 'self'
    case 117977:                    // 'processing-instruction' 'self'
    case 120402:                    // 'attribute' 'sliding'
    case 120441:                    // 'element' 'sliding'
    case 120505:                    // 'namespace' 'sliding'
    case 120537:                    // 'processing-instruction' 'sliding'
    case 120914:                    // 'attribute' 'some'
    case 120953:                    // 'element' 'some'
    case 121017:                    // 'namespace' 'some'
    case 121049:                    // 'processing-instruction' 'some'
    case 123474:                    // 'attribute' 'strict'
    case 123513:                    // 'element' 'strict'
    case 123577:                    // 'namespace' 'strict'
    case 123609:                    // 'processing-instruction' 'strict'
    case 124498:                    // 'attribute' 'structured-item'
    case 124537:                    // 'element' 'structured-item'
    case 125010:                    // 'attribute' 'switch'
    case 125049:                    // 'element' 'switch'
    case 125113:                    // 'namespace' 'switch'
    case 125145:                    // 'processing-instruction' 'switch'
    case 125522:                    // 'attribute' 'text'
    case 125561:                    // 'element' 'text'
    case 125625:                    // 'namespace' 'text'
    case 125657:                    // 'processing-instruction' 'text'
    case 128594:                    // 'attribute' 'try'
    case 128633:                    // 'element' 'try'
    case 128697:                    // 'namespace' 'try'
    case 128729:                    // 'processing-instruction' 'try'
    case 129106:                    // 'attribute' 'tumbling'
    case 129145:                    // 'element' 'tumbling'
    case 129209:                    // 'namespace' 'tumbling'
    case 129241:                    // 'processing-instruction' 'tumbling'
    case 129618:                    // 'attribute' 'type'
    case 129657:                    // 'element' 'type'
    case 129721:                    // 'namespace' 'type'
    case 129753:                    // 'processing-instruction' 'type'
    case 130130:                    // 'attribute' 'typeswitch'
    case 130169:                    // 'element' 'typeswitch'
    case 130233:                    // 'namespace' 'typeswitch'
    case 130265:                    // 'processing-instruction' 'typeswitch'
    case 131666:                    // 'attribute' 'unordered'
    case 131705:                    // 'element' 'unordered'
    case 131769:                    // 'namespace' 'unordered'
    case 131801:                    // 'processing-instruction' 'unordered'
    case 132178:                    // 'attribute' 'updating'
    case 132217:                    // 'element' 'updating'
    case 132281:                    // 'namespace' 'updating'
    case 132313:                    // 'processing-instruction' 'updating'
    case 133714:                    // 'attribute' 'validate'
    case 133753:                    // 'element' 'validate'
    case 133817:                    // 'namespace' 'validate'
    case 133849:                    // 'processing-instruction' 'validate'
    case 134226:                    // 'attribute' 'value'
    case 134265:                    // 'element' 'value'
    case 134329:                    // 'namespace' 'value'
    case 134361:                    // 'processing-instruction' 'value'
    case 134738:                    // 'attribute' 'variable'
    case 134777:                    // 'element' 'variable'
    case 134841:                    // 'namespace' 'variable'
    case 134873:                    // 'processing-instruction' 'variable'
    case 135250:                    // 'attribute' 'version'
    case 135289:                    // 'element' 'version'
    case 135353:                    // 'namespace' 'version'
    case 135385:                    // 'processing-instruction' 'version'
    case 137298:                    // 'attribute' 'while'
    case 137337:                    // 'element' 'while'
    case 137401:                    // 'namespace' 'while'
    case 137433:                    // 'processing-instruction' 'while'
    case 140882:                    // 'attribute' 'xquery'
    case 140921:                    // 'element' 'xquery'
    case 140985:                    // 'namespace' 'xquery'
    case 141017:                    // 'processing-instruction' 'xquery'
    case 141906:                    // 'attribute' '{'
    case 141920:                    // 'comment' '{'
    case 141943:                    // 'document' '{'
    case 141945:                    // 'element' '{'
    case 142003:                    // 'map' '{'
    case 142009:                    // 'namespace' '{'
    case 142027:                    // 'ordered' '{'
    case 142041:                    // 'processing-instruction' '{'
    case 142069:                    // 'text' '{'
    case 142081:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(284);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 185:                       // 'namespace'
    case 217:                       // 'processing-instruction'
      lookahead2W(283);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 245:                       // 'text'
    case 257:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 230:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 186:                       // 'namespace-node'
    case 187:                       // 'ne'
    case 192:                       // 'node'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 229:                       // 'score'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36025                 // 'namespace' 'after'
     || lk == 36057                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38585                 // 'namespace' 'and'
     || lk == 38617                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40633                 // 'namespace' 'as'
     || lk == 40665                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41145                 // 'namespace' 'ascending'
     || lk == 41177                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41657                 // 'namespace' 'at'
     || lk == 41689                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43193                 // 'namespace' 'before'
     || lk == 43225                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45241                 // 'namespace' 'case'
     || lk == 45273                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45753                 // 'namespace' 'cast'
     || lk == 45785                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46265                 // 'namespace' 'castable'
     || lk == 46297                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48313                 // 'namespace' 'collation'
     || lk == 48345                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53945                 // 'namespace' 'count'
     || lk == 53977                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55993                 // 'namespace' 'default'
     || lk == 56025                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58041                 // 'namespace' 'descending'
     || lk == 58073                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60601                 // 'namespace' 'div'
     || lk == 60633                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62649                 // 'namespace' 'else'
     || lk == 62681                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63161                 // 'namespace' 'empty'
     || lk == 63193                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64697                 // 'namespace' 'end'
     || lk == 64729                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65721                 // 'namespace' 'eq'
     || lk == 65753                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67257                 // 'namespace' 'except'
     || lk == 67289                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70329                 // 'namespace' 'for'
     || lk == 70361                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74937                 // 'namespace' 'ge'
     || lk == 74969                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75961                 // 'namespace' 'group'
     || lk == 75993                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76985                 // 'namespace' 'gt'
     || lk == 77017                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77497                 // 'namespace' 'idiv'
     || lk == 77529                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82105                 // 'namespace' 'instance'
     || lk == 82137                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83129                 // 'namespace' 'intersect'
     || lk == 83161                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83641                 // 'namespace' 'into'
     || lk == 83673                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84153                 // 'namespace' 'is'
     || lk == 84185                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88249                 // 'namespace' 'le'
     || lk == 88281                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89273                 // 'namespace' 'let'
     || lk == 89305                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91321                 // 'namespace' 'lt'
     || lk == 91353                 // 'processing-instruction' 'lt'
     || lk == 92754                 // 'attribute' 'mod'
     || lk == 92793                 // 'element' 'mod'
     || lk == 92857                 // 'namespace' 'mod'
     || lk == 92889                 // 'processing-instruction' 'mod'
     || lk == 93266                 // 'attribute' 'modify'
     || lk == 93305                 // 'element' 'modify'
     || lk == 93369                 // 'namespace' 'modify'
     || lk == 93401                 // 'processing-instruction' 'modify'
     || lk == 95826                 // 'attribute' 'ne'
     || lk == 95865                 // 'element' 'ne'
     || lk == 95929                 // 'namespace' 'ne'
     || lk == 95961                 // 'processing-instruction' 'ne'
     || lk == 101970                // 'attribute' 'only'
     || lk == 102009                // 'element' 'only'
     || lk == 102073                // 'namespace' 'only'
     || lk == 102105                // 'processing-instruction' 'only'
     || lk == 102994                // 'attribute' 'or'
     || lk == 103033                // 'element' 'or'
     || lk == 103097                // 'namespace' 'or'
     || lk == 103129                // 'processing-instruction' 'or'
     || lk == 103506                // 'attribute' 'order'
     || lk == 103545                // 'element' 'order'
     || lk == 103609                // 'namespace' 'order'
     || lk == 103641                // 'processing-instruction' 'order'
     || lk == 113234                // 'attribute' 'return'
     || lk == 113273                // 'element' 'return'
     || lk == 113337                // 'namespace' 'return'
     || lk == 113369                // 'processing-instruction' 'return'
     || lk == 115282                // 'attribute' 'satisfies'
     || lk == 115321                // 'element' 'satisfies'
     || lk == 115385                // 'namespace' 'satisfies'
     || lk == 115417                // 'processing-instruction' 'satisfies'
     || lk == 121426                // 'attribute' 'stable'
     || lk == 121465                // 'element' 'stable'
     || lk == 121529                // 'namespace' 'stable'
     || lk == 121561                // 'processing-instruction' 'stable'
     || lk == 121938                // 'attribute' 'start'
     || lk == 121977                // 'element' 'start'
     || lk == 122041                // 'namespace' 'start'
     || lk == 122073                // 'processing-instruction' 'start'
     || lk == 127570                // 'attribute' 'to'
     || lk == 127609                // 'element' 'to'
     || lk == 127673                // 'namespace' 'to'
     || lk == 127705                // 'processing-instruction' 'to'
     || lk == 128082                // 'attribute' 'treat'
     || lk == 128121                // 'element' 'treat'
     || lk == 128185                // 'namespace' 'treat'
     || lk == 128217                // 'processing-instruction' 'treat'
     || lk == 130642                // 'attribute' 'union'
     || lk == 130681                // 'element' 'union'
     || lk == 130745                // 'namespace' 'union'
     || lk == 130777                // 'processing-instruction' 'union'
     || lk == 136786                // 'attribute' 'where'
     || lk == 136825                // 'element' 'where'
     || lk == 136889                // 'namespace' 'where'
     || lk == 136921                // 'processing-instruction' 'where'
     || lk == 138834                // 'attribute' 'with'
     || lk == 138873                // 'element' 'with'
     || lk == 138937                // 'namespace' 'with'
     || lk == 138969)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(4, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 64:                        // '?'
    case 68:                        // '['
    case 277:                       // '{'
    case 279:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9913:                      // 'namespace' NCName^Token
    case 9945:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15034:                     // 'namespace-node' '#'
    case 15035:                     // 'ne' '#'
    case 15040:                     // 'node' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15075:                     // 'schema-attribute' '#'
    case 15076:                     // 'schema-element' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15091:                     // 'structured-item' '#'
    case 15092:                     // 'switch' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15102:                     // 'typeswitch' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37049:                     // 'namespace' 'allowing'
    case 37081:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37561:                     // 'namespace' 'ancestor'
    case 37593:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38073:                     // 'namespace' 'ancestor-or-self'
    case 38105:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39609:                     // 'namespace' 'append'
    case 39641:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42169:                     // 'namespace' 'attribute'
    case 42201:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42681:                     // 'namespace' 'base-uri'
    case 42713:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43705:                     // 'namespace' 'boundary-space'
    case 43737:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44217:                     // 'namespace' 'break'
    case 44249:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46777:                     // 'namespace' 'catch'
    case 46809:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47801:                     // 'namespace' 'child'
    case 47833:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49337:                     // 'namespace' 'comment'
    case 49369:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49849:                     // 'namespace' 'constraint'
    case 49881:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50361:                     // 'namespace' 'construction'
    case 50393:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51897:                     // 'namespace' 'context'
    case 51929:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52409:                     // 'namespace' 'continue'
    case 52441:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52921:                     // 'namespace' 'copy'
    case 52953:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53433:                     // 'namespace' 'copy-namespaces'
    case 53465:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54457:                     // 'namespace' 'decimal-format'
    case 54489:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55481:                     // 'namespace' 'declare'
    case 55513:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56505:                     // 'namespace' 'delete'
    case 56537:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57017:                     // 'namespace' 'descendant'
    case 57049:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57529:                     // 'namespace' 'descendant-or-self'
    case 57561:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61113:                     // 'namespace' 'document'
    case 61145:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61625:                     // 'namespace' 'document-node'
    case 61657:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62137:                     // 'namespace' 'element'
    case 62169:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63673:                     // 'namespace' 'empty-sequence'
    case 63705:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64185:                     // 'namespace' 'encoding'
    case 64217:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66233:                     // 'namespace' 'every'
    case 66265:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67769:                     // 'namespace' 'exit'
    case 67801:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68281:                     // 'namespace' 'external'
    case 68313:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68793:                     // 'namespace' 'first'
    case 68825:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69305:                     // 'namespace' 'following'
    case 69337:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69817:                     // 'namespace' 'following-sibling'
    case 69849:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72377:                     // 'namespace' 'ft-option'
    case 72409:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74425:                     // 'namespace' 'function'
    case 74457:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78009:                     // 'namespace' 'if'
    case 78041:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78521:                     // 'namespace' 'import'
    case 78553:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79033:                     // 'namespace' 'in'
    case 79065:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79545:                     // 'namespace' 'index'
    case 79577:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81593:                     // 'namespace' 'insert'
    case 81625:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82617:                     // 'namespace' 'integrity'
    case 82649:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84665:                     // 'namespace' 'item'
    case 84697:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85177:                     // 'namespace' 'json'
    case 85209:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87225:                     // 'namespace' 'last'
    case 87257:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87737:                     // 'namespace' 'lax'
    case 87769:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90297:                     // 'namespace' 'loop'
    case 90329:                     // 'processing-instruction' 'loop'
    case 91730:                     // 'attribute' 'map'
    case 91769:                     // 'element' 'map'
    case 91833:                     // 'namespace' 'map'
    case 91865:                     // 'processing-instruction' 'map'
    case 93778:                     // 'attribute' 'module'
    case 93817:                     // 'element' 'module'
    case 93881:                     // 'namespace' 'module'
    case 93913:                     // 'processing-instruction' 'module'
    case 94802:                     // 'attribute' 'namespace'
    case 94841:                     // 'element' 'namespace'
    case 94905:                     // 'namespace' 'namespace'
    case 94937:                     // 'processing-instruction' 'namespace'
    case 95314:                     // 'attribute' 'namespace-node'
    case 95353:                     // 'element' 'namespace-node'
    case 95417:                     // 'namespace' 'namespace-node'
    case 95449:                     // 'processing-instruction' 'namespace-node'
    case 98386:                     // 'attribute' 'node'
    case 98425:                     // 'element' 'node'
    case 98489:                     // 'namespace' 'node'
    case 98521:                     // 'processing-instruction' 'node'
    case 98898:                     // 'attribute' 'nodes'
    case 98937:                     // 'element' 'nodes'
    case 99001:                     // 'namespace' 'nodes'
    case 99033:                     // 'processing-instruction' 'nodes'
    case 99922:                     // 'attribute' 'object'
    case 99961:                     // 'element' 'object'
    case 100025:                    // 'namespace' 'object'
    case 100057:                    // 'processing-instruction' 'object'
    case 102482:                    // 'attribute' 'option'
    case 102521:                    // 'element' 'option'
    case 102585:                    // 'namespace' 'option'
    case 102617:                    // 'processing-instruction' 'option'
    case 104018:                    // 'attribute' 'ordered'
    case 104057:                    // 'element' 'ordered'
    case 104121:                    // 'namespace' 'ordered'
    case 104153:                    // 'processing-instruction' 'ordered'
    case 104530:                    // 'attribute' 'ordering'
    case 104569:                    // 'element' 'ordering'
    case 104633:                    // 'namespace' 'ordering'
    case 104665:                    // 'processing-instruction' 'ordering'
    case 106066:                    // 'attribute' 'parent'
    case 106105:                    // 'element' 'parent'
    case 106169:                    // 'namespace' 'parent'
    case 106201:                    // 'processing-instruction' 'parent'
    case 109138:                    // 'attribute' 'preceding'
    case 109177:                    // 'element' 'preceding'
    case 109241:                    // 'namespace' 'preceding'
    case 109273:                    // 'processing-instruction' 'preceding'
    case 109650:                    // 'attribute' 'preceding-sibling'
    case 109689:                    // 'element' 'preceding-sibling'
    case 109753:                    // 'namespace' 'preceding-sibling'
    case 109785:                    // 'processing-instruction' 'preceding-sibling'
    case 111186:                    // 'attribute' 'processing-instruction'
    case 111225:                    // 'element' 'processing-instruction'
    case 111289:                    // 'namespace' 'processing-instruction'
    case 111321:                    // 'processing-instruction' 'processing-instruction'
    case 112210:                    // 'attribute' 'rename'
    case 112249:                    // 'element' 'rename'
    case 112313:                    // 'namespace' 'rename'
    case 112345:                    // 'processing-instruction' 'rename'
    case 112722:                    // 'attribute' 'replace'
    case 112761:                    // 'element' 'replace'
    case 112825:                    // 'namespace' 'replace'
    case 112857:                    // 'processing-instruction' 'replace'
    case 113746:                    // 'attribute' 'returning'
    case 113785:                    // 'element' 'returning'
    case 113849:                    // 'namespace' 'returning'
    case 113881:                    // 'processing-instruction' 'returning'
    case 114258:                    // 'attribute' 'revalidation'
    case 114297:                    // 'element' 'revalidation'
    case 114361:                    // 'namespace' 'revalidation'
    case 114393:                    // 'processing-instruction' 'revalidation'
    case 115794:                    // 'attribute' 'schema'
    case 115833:                    // 'element' 'schema'
    case 115897:                    // 'namespace' 'schema'
    case 115929:                    // 'processing-instruction' 'schema'
    case 116306:                    // 'attribute' 'schema-attribute'
    case 116345:                    // 'element' 'schema-attribute'
    case 116409:                    // 'namespace' 'schema-attribute'
    case 116441:                    // 'processing-instruction' 'schema-attribute'
    case 116818:                    // 'attribute' 'schema-element'
    case 116857:                    // 'element' 'schema-element'
    case 116921:                    // 'namespace' 'schema-element'
    case 116953:                    // 'processing-instruction' 'schema-element'
    case 117330:                    // 'attribute' 'score'
    case 117369:                    // 'element' 'score'
    case 117433:                    // 'namespace' 'score'
    case 117465:                    // 'processing-instruction' 'score'
    case 117842:                    // 'attribute' 'self'
    case 117881:                    // 'element' 'self'
    case 117945:                    // 'namespace' 'self'
    case 117977:                    // 'processing-instruction' 'self'
    case 120402:                    // 'attribute' 'sliding'
    case 120441:                    // 'element' 'sliding'
    case 120505:                    // 'namespace' 'sliding'
    case 120537:                    // 'processing-instruction' 'sliding'
    case 120914:                    // 'attribute' 'some'
    case 120953:                    // 'element' 'some'
    case 121017:                    // 'namespace' 'some'
    case 121049:                    // 'processing-instruction' 'some'
    case 123474:                    // 'attribute' 'strict'
    case 123513:                    // 'element' 'strict'
    case 123577:                    // 'namespace' 'strict'
    case 123609:                    // 'processing-instruction' 'strict'
    case 124498:                    // 'attribute' 'structured-item'
    case 124537:                    // 'element' 'structured-item'
    case 125010:                    // 'attribute' 'switch'
    case 125049:                    // 'element' 'switch'
    case 125113:                    // 'namespace' 'switch'
    case 125145:                    // 'processing-instruction' 'switch'
    case 125522:                    // 'attribute' 'text'
    case 125561:                    // 'element' 'text'
    case 125625:                    // 'namespace' 'text'
    case 125657:                    // 'processing-instruction' 'text'
    case 128594:                    // 'attribute' 'try'
    case 128633:                    // 'element' 'try'
    case 128697:                    // 'namespace' 'try'
    case 128729:                    // 'processing-instruction' 'try'
    case 129106:                    // 'attribute' 'tumbling'
    case 129145:                    // 'element' 'tumbling'
    case 129209:                    // 'namespace' 'tumbling'
    case 129241:                    // 'processing-instruction' 'tumbling'
    case 129618:                    // 'attribute' 'type'
    case 129657:                    // 'element' 'type'
    case 129721:                    // 'namespace' 'type'
    case 129753:                    // 'processing-instruction' 'type'
    case 130130:                    // 'attribute' 'typeswitch'
    case 130169:                    // 'element' 'typeswitch'
    case 130233:                    // 'namespace' 'typeswitch'
    case 130265:                    // 'processing-instruction' 'typeswitch'
    case 131666:                    // 'attribute' 'unordered'
    case 131705:                    // 'element' 'unordered'
    case 131769:                    // 'namespace' 'unordered'
    case 131801:                    // 'processing-instruction' 'unordered'
    case 132178:                    // 'attribute' 'updating'
    case 132217:                    // 'element' 'updating'
    case 132281:                    // 'namespace' 'updating'
    case 132313:                    // 'processing-instruction' 'updating'
    case 133714:                    // 'attribute' 'validate'
    case 133753:                    // 'element' 'validate'
    case 133817:                    // 'namespace' 'validate'
    case 133849:                    // 'processing-instruction' 'validate'
    case 134226:                    // 'attribute' 'value'
    case 134265:                    // 'element' 'value'
    case 134329:                    // 'namespace' 'value'
    case 134361:                    // 'processing-instruction' 'value'
    case 134738:                    // 'attribute' 'variable'
    case 134777:                    // 'element' 'variable'
    case 134841:                    // 'namespace' 'variable'
    case 134873:                    // 'processing-instruction' 'variable'
    case 135250:                    // 'attribute' 'version'
    case 135289:                    // 'element' 'version'
    case 135353:                    // 'namespace' 'version'
    case 135385:                    // 'processing-instruction' 'version'
    case 137298:                    // 'attribute' 'while'
    case 137337:                    // 'element' 'while'
    case 137401:                    // 'namespace' 'while'
    case 137433:                    // 'processing-instruction' 'while'
    case 140882:                    // 'attribute' 'xquery'
    case 140921:                    // 'element' 'xquery'
    case 140985:                    // 'namespace' 'xquery'
    case 141017:                    // 'processing-instruction' 'xquery'
    case 141906:                    // 'attribute' '{'
    case 141920:                    // 'comment' '{'
    case 141943:                    // 'document' '{'
    case 141945:                    // 'element' '{'
    case 142003:                    // 'map' '{'
    case 142009:                    // 'namespace' '{'
    case 142027:                    // 'ordered' '{'
    case 142041:                    // 'processing-instruction' '{'
    case 142069:                    // 'text' '{'
    case 142081:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26319:                     // 'parent' '::'
    case 26325:                     // 'preceding' '::'
    case 26326:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(237);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26319:                     // 'parent' '::'
    case 26325:                     // 'preceding' '::'
    case 26326:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(237);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 230:                       // 'self'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26342:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 230:                       // 'self'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26342:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 93:                        // 'child'
      consume(93);                  // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(135);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(135);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 66)                   // '@'
    {
      consume(66);                  // '@'
    }
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      consumeT(66);                 // '@'
    }
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(74);                  // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(74);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 64                  // '?'
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 64                  // '?'
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(237);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(237);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(68);                    // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(69);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(68);                   // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(69);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(64);                    // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(64);                   // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(64);                    // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(64);                   // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(203);                   // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(203);                  // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(257);                   // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(257);                  // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 64:                        // '?'
      lookahead2W(264);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19008:                     // '?' ')'
    case 21056:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 64:                        // '?'
      lookahead2W(264);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19008:                     // '?' ')'
    case 21056:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(64);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(64);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(54);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(61);                  // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consume(21);                // S
      }
      lookahead1(8);                // '>'
      consume(61);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(54);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(61);                 // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consumeT(21);               // S
      }
      lookahead1(8);                // '>'
      consumeT(61);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consume(21);                  // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        lookahead1(7);              // '='
        consume(60);                // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consumeT(21);                 // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        lookahead1(7);              // '='
        consumeT(60);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(55);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(55);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(43);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(65);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(65);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 185:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 245:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 185:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 245:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(121);                   // 'element'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(121);                  // 'element'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(283);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(185);                   // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(185);                  // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(283);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(283);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      consumeT(79);                 // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      consume(64);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      consumeT(64);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(79);                   // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consume(124);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consumeT(124);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 64:                        // '?'
      consume(64);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      consumeT(64);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 179:                       // 'map'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 245:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      parse_KindTest();
      break;
    case 17573:                     // 'item' '('
      consume(165);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17603:                     // 'object' '('
      parse_JSONTest();
      break;
    case 17587:                     // 'map' '('
      parse_MapType();
      break;
    case 17651:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 179:                       // 'map'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 245:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      try_KindTest();
      break;
    case 17573:                     // 'item' '('
      consumeT(165);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17603:                     // 'object' '('
      try_JSONTest();
      break;
    case 17587:                     // 'map' '('
      try_MapType();
      break;
    case 17651:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(179);                   // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consume(41);                  // ','
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(179);                  // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consumeT(41);                 // ','
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(179);                   // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(179);                  // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_MapConstructorEntry();
      }
    }
    consumeT(283);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 167:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 195:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 167:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 195:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(243);                   // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(243);                  // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(167);                   // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(167);                  // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(195);                   // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(195);                  // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(78);                    // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(78);                   // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 82:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 228:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 227:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 217:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 245:                       // 'text'
      parse_TextTest();
      break;
    case 186:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 82:                        // 'attribute'
      try_AttributeTest();
      break;
    case 228:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 227:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 217:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 245:                       // 'text'
      try_TextTest();
      break;
    case 186:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(192);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(192);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(120);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(120);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(245);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(245);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(96);                    // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(186);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(186);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(217);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(217);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(82);                    // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(82);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(227);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(227);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(121);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          consume(64);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(121);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          consumeT(64);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(228);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(228);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(266);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(262);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(266);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(262);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(79);                   // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    consume(223);                   // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    default:
      consume(234);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        consume(79);                // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consume(134);             // 'first'
          break;
        default:
          consume(170);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(163);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        consumeT(79);               // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consumeT(134);            // 'first'
          break;
        default:
          consumeT(170);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(163);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(159);                   // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    default:
      consume(193);                 // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(159);                  // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    default:
      consumeT(193);                // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    default:
      consume(193);                 // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    default:
      consumeT(193);                // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(220);                   // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 262)                  // 'value'
    {
      consume(262);                 // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(197);                 // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(271);                   // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(220);                  // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 262)                  // 'value'
    {
      consumeT(262);                // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(197);                // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(192);                  // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(271);                  // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(219);                   // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(79);                    // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(219);                  // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(192);                  // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(79);                   // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(103);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_TransformSpec();
    }
    consume(182);                   // 'modify'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(103);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_TransformSpec();
    }
    consumeT(182);                  // 'modify'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TransformSpec()
  {
    eventHandler.startNonterminal("TransformSpec", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformSpec", e0);
  }

  function try_TransformSpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 203                 // 'ordered'
       && lk != 224                 // 'same'
       && lk != 270                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121937)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 203                 // 'ordered'
       && lk != 224                 // 'same'
       && lk != 270                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121937)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(265);                   // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(265);                  // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      consume(144);                 // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      consumeT(144);                // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      consume(142);                 // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      consumeT(142);                // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 194)                // 'not'
      {
        break;
      }
      consume(194);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(154);                 // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 194)                // 'not'
      {
        break;
      }
      consumeT(194);                // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(154);                // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 143)                  // 'ftnot'
    {
      consume(143);                 // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 143)                  // 'ftnot'
    {
      consumeT(143);                // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 260)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 265)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 260)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 265)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 196)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 196)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 211)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 211)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(277);                   // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(277);                  // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 283)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(283);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 76:                        // 'any'
      consume(76);                  // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 273)                // 'word'
      {
        consume(273);               // 'word'
      }
      break;
    case 71:                        // 'all'
      consume(71);                  // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 274)                // 'words'
      {
        consume(274);               // 'words'
      }
      break;
    default:
      consume(211);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 76:                        // 'any'
      consumeT(76);                 // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 273)                // 'word'
      {
        consumeT(273);              // 'word'
      }
      break;
    case 71:                        // 'all'
      consumeT(71);                 // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 274)                // 'words'
      {
        consumeT(274);              // 'words'
      }
      break;
    default:
      consumeT(211);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(196);                   // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(248);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(196);                  // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(248);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consume(173);               // 'least'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(184);               // 'most'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(140);                 // 'from'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(249);                 // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consumeT(173);              // 'least'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(184);              // 'most'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(140);                // 'from'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(249);                // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 203:                       // 'ordered'
      parse_FTOrder();
      break;
    case 270:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 224:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 203:                       // 'ordered'
      try_FTOrder();
      break;
    case 270:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 224:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(203);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(203);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(270);                   // 'window'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(270);                  // 'window'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(117);                   // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(117);                  // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 274:                       // 'words'
      consume(274);                 // 'words'
      break;
    case 233:                       // 'sentences'
      consume(233);                 // 'sentences'
      break;
    default:
      consume(206);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 274:                       // 'words'
      consumeT(274);                // 'words'
      break;
    case 233:                       // 'sentences'
      consumeT(233);                // 'sentences'
      break;
    default:
      consumeT(206);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 224:                       // 'same'
      consume(224);                 // 'same'
      break;
    default:
      consume(115);                 // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 224:                       // 'same'
      consumeT(224);                // 'same'
      break;
    default:
      consumeT(115);                // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 232:                       // 'sentence'
      consume(232);                 // 'sentence'
      break;
    default:
      consume(205);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 232:                       // 'sentence'
      consumeT(232);                // 'sentence'
      break;
    default:
      consumeT(205);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 238:                     // 'start'
        consume(238);               // 'start'
        break;
      default:
        consume(126);               // 'end'
      }
      break;
    default:
      consume(127);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 238:                     // 'start'
        consumeT(238);              // 'start'
        break;
      default:
        consumeT(126);              // 'end'
      }
      break;
    default:
      consumeT(127);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(260);                 // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 260)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(260);                // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 260)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 189:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 269:                       // 'wildcards'
    case 137917:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 247:                       // 'thesaurus'
    case 126653:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 239:                       // 'stemming'
    case 122557:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 240:                       // 'stop'
    case 123069:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 200:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 189:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      try_FTLanguageOption();
      break;
    case 269:                       // 'wildcards'
    case 137917:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 247:                       // 'thesaurus'
    case 126653:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 239:                       // 'stemming'
    case 122557:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 240:                       // 'stop'
    case 123069:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 200:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 88:                        // 'case'
      consume(88);                  // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        consume(158);               // 'insensitive'
        break;
      default:
        consume(231);               // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      consume(177);                 // 'lowercase'
      break;
    default:
      consume(259);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        consumeT(158);              // 'insensitive'
        break;
      default:
        consumeT(231);              // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      consumeT(177);                // 'lowercase'
      break;
    default:
      consumeT(259);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(114);                   // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      consume(158);                 // 'insensitive'
      break;
    default:
      consume(231);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(114);                  // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      consumeT(158);                // 'insensitive'
      break;
    default:
      consumeT(231);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 239:                       // 'stemming'
      consume(239);                 // 'stemming'
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consume(239);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 239:                       // 'stemming'
      consumeT(239);                // 'stemming'
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consumeT(239);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 247:                       // 'thesaurus'
      consume(247);                 // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consume(109);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(109);             // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consume(41);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consume(247);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 247:                       // 'thesaurus'
      consumeT(247);                // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(109);            // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consumeT(41);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consumeT(247);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(81);                    // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 218)                  // 'relationship'
    {
      consume(218);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 94289)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consume(175);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(81);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 218)                  // 'relationship'
    {
      consumeT(218);                // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 94289)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consumeT(175);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consume(173);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(184);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(140);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consume(249);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consumeT(173);              // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(184);              // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(140);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consumeT(249);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 240:                       // 'stop'
      consume(240);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(274);                 // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consume(109);               // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consume(240);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(274);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 240:                       // 'stop'
      consumeT(240);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(274);                // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consumeT(240);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(274);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(34);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    default:
      consume(131);                 // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    default:
      consumeT(131);                // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(169);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(169);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 269:                       // 'wildcards'
      consume(269);                 // 'wildcards'
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consume(269);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 269:                       // 'wildcards'
      consumeT(269);                // 'wildcards'
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consumeT(269);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(200);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(200);                  // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(272);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(272);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 94)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(79);                    // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 64)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(94);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(155);                   // 'index'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    consume(198);                   // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    consume(193);                   // 'nodes'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(87);                    // 'by'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(161);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(97);                    // 'constraint'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 198:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(198);                   // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 192:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    consume(256);                   // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(138);                   // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(139);                   // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(140);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(249);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        consumeT(24);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(50);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      consumeT(22);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 145:                       // 'function'
      consume(145);                 // 'function'
      break;
    case 152:                       // 'if'
      consume(152);                 // 'if'
      break;
    case 165:                       // 'item'
      consume(165);                 // 'item'
      break;
    case 186:                       // 'namespace-node'
      consume(186);                 // 'namespace-node'
      break;
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    case 217:                       // 'processing-instruction'
      consume(217);                 // 'processing-instruction'
      break;
    case 227:                       // 'schema-attribute'
      consume(227);                 // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consume(228);                 // 'schema-element'
      break;
    case 244:                       // 'switch'
      consume(244);                 // 'switch'
      break;
    case 245:                       // 'text'
      consume(245);                 // 'text'
      break;
    case 254:                       // 'typeswitch'
      consume(254);                 // 'typeswitch'
      break;
    case 78:                        // 'array'
      consume(78);                  // 'array'
      break;
    case 167:                       // 'json-item'
      consume(167);                 // 'json-item'
      break;
    case 243:                       // 'structured-item'
      consume(243);                 // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 145:                       // 'function'
      consumeT(145);                // 'function'
      break;
    case 152:                       // 'if'
      consumeT(152);                // 'if'
      break;
    case 165:                       // 'item'
      consumeT(165);                // 'item'
      break;
    case 186:                       // 'namespace-node'
      consumeT(186);                // 'namespace-node'
      break;
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    case 217:                       // 'processing-instruction'
      consumeT(217);                // 'processing-instruction'
      break;
    case 227:                       // 'schema-attribute'
      consumeT(227);                // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consumeT(228);                // 'schema-element'
      break;
    case 244:                       // 'switch'
      consumeT(244);                // 'switch'
      break;
    case 245:                       // 'text'
      consumeT(245);                // 'text'
      break;
    case 254:                       // 'typeswitch'
      consumeT(254);                // 'typeswitch'
      break;
    case 78:                        // 'array'
      consumeT(78);                 // 'array'
      break;
    case 167:                       // 'json-item'
      consumeT(167);                // 'json-item'
      break;
    case 243:                       // 'structured-item'
      consumeT(243);                // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consume(74);                  // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      consume(75);                  // 'and'
      break;
    case 79:                        // 'as'
      consume(79);                  // 'as'
      break;
    case 80:                        // 'ascending'
      consume(80);                  // 'ascending'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    case 88:                        // 'case'
      consume(88);                  // 'case'
      break;
    case 89:                        // 'cast'
      consume(89);                  // 'cast'
      break;
    case 90:                        // 'castable'
      consume(90);                  // 'castable'
      break;
    case 93:                        // 'child'
      consume(93);                  // 'child'
      break;
    case 94:                        // 'collation'
      consume(94);                  // 'collation'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 134:                       // 'first'
      consume(134);                 // 'first'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 146:                       // 'ge'
      consume(146);                 // 'ge'
      break;
    case 148:                       // 'group'
      consume(148);                 // 'group'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    case 151:                       // 'idiv'
      consume(151);                 // 'idiv'
      break;
    case 153:                       // 'import'
      consume(153);                 // 'import'
      break;
    case 159:                       // 'insert'
      consume(159);                 // 'insert'
      break;
    case 160:                       // 'instance'
      consume(160);                 // 'instance'
      break;
    case 162:                       // 'intersect'
      consume(162);                 // 'intersect'
      break;
    case 163:                       // 'into'
      consume(163);                 // 'into'
      break;
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 170:                       // 'last'
      consume(170);                 // 'last'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 174:                       // 'let'
      consume(174);                 // 'let'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 179:                       // 'map'
      consume(179);                 // 'map'
      break;
    case 181:                       // 'mod'
      consume(181);                 // 'mod'
      break;
    case 182:                       // 'modify'
      consume(182);                 // 'modify'
      break;
    case 183:                       // 'module'
      consume(183);                 // 'module'
      break;
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 199:                       // 'only'
      consume(199);                 // 'only'
      break;
    case 201:                       // 'or'
      consume(201);                 // 'or'
      break;
    case 202:                       // 'order'
      consume(202);                 // 'order'
      break;
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      break;
    case 219:                       // 'rename'
      consume(219);                 // 'rename'
      break;
    case 220:                       // 'replace'
      consume(220);                 // 'replace'
      break;
    case 221:                       // 'return'
      consume(221);                 // 'return'
      break;
    case 225:                       // 'satisfies'
      consume(225);                 // 'satisfies'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      break;
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    case 237:                       // 'stable'
      consume(237);                 // 'stable'
      break;
    case 238:                       // 'start'
      consume(238);                 // 'start'
      break;
    case 249:                       // 'to'
      consume(249);                 // 'to'
      break;
    case 250:                       // 'treat'
      consume(250);                 // 'treat'
      break;
    case 251:                       // 'try'
      consume(251);                 // 'try'
      break;
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    case 257:                       // 'unordered'
      consume(257);                 // 'unordered'
      break;
    case 261:                       // 'validate'
      consume(261);                 // 'validate'
      break;
    case 267:                       // 'where'
      consume(267);                 // 'where'
      break;
    case 271:                       // 'with'
      consume(271);                 // 'with'
      break;
    case 275:                       // 'xquery'
      consume(275);                 // 'xquery'
      break;
    case 72:                        // 'allowing'
      consume(72);                  // 'allowing'
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      break;
    case 83:                        // 'base-uri'
      consume(83);                  // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consume(85);                  // 'boundary-space'
      break;
    case 86:                        // 'break'
      consume(86);                  // 'break'
      break;
    case 91:                        // 'catch'
      consume(91);                  // 'catch'
      break;
    case 98:                        // 'construction'
      consume(98);                  // 'construction'
      break;
    case 101:                       // 'context'
      consume(101);                 // 'context'
      break;
    case 102:                       // 'continue'
      consume(102);                 // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consume(104);                 // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      break;
    case 132:                       // 'exit'
      consume(132);                 // 'exit'
      break;
    case 133:                       // 'external'
      consume(133);                 // 'external'
      break;
    case 141:                       // 'ft-option'
      consume(141);                 // 'ft-option'
      break;
    case 154:                       // 'in'
      consume(154);                 // 'in'
      break;
    case 155:                       // 'index'
      consume(155);                 // 'index'
      break;
    case 161:                       // 'integrity'
      consume(161);                 // 'integrity'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    case 193:                       // 'nodes'
      consume(193);                 // 'nodes'
      break;
    case 200:                       // 'option'
      consume(200);                 // 'option'
      break;
    case 204:                       // 'ordering'
      consume(204);                 // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consume(223);                 // 'revalidation'
      break;
    case 226:                       // 'schema'
      consume(226);                 // 'schema'
      break;
    case 229:                       // 'score'
      consume(229);                 // 'score'
      break;
    case 235:                       // 'sliding'
      consume(235);                 // 'sliding'
      break;
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 252:                       // 'tumbling'
      consume(252);                 // 'tumbling'
      break;
    case 253:                       // 'type'
      consume(253);                 // 'type'
      break;
    case 258:                       // 'updating'
      consume(258);                 // 'updating'
      break;
    case 262:                       // 'value'
      consume(262);                 // 'value'
      break;
    case 263:                       // 'variable'
      consume(263);                 // 'variable'
      break;
    case 264:                       // 'version'
      consume(264);                 // 'version'
      break;
    case 268:                       // 'while'
      consume(268);                 // 'while'
      break;
    case 97:                        // 'constraint'
      consume(97);                  // 'constraint'
      break;
    case 176:                       // 'loop'
      consume(176);                 // 'loop'
      break;
    case 222:                       // 'returning'
      consume(222);                 // 'returning'
      break;
    case 77:                        // 'append'
      consume(77);                  // 'append'
      break;
    case 166:                       // 'json'
      consume(166);                 // 'json'
      break;
    default:
      consume(195);                 // 'object'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consumeT(74);                 // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      consumeT(75);                 // 'and'
      break;
    case 79:                        // 'as'
      consumeT(79);                 // 'as'
      break;
    case 80:                        // 'ascending'
      consumeT(80);                 // 'ascending'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      break;
    case 89:                        // 'cast'
      consumeT(89);                 // 'cast'
      break;
    case 90:                        // 'castable'
      consumeT(90);                 // 'castable'
      break;
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      break;
    case 94:                        // 'collation'
      consumeT(94);                 // 'collation'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 134:                       // 'first'
      consumeT(134);                // 'first'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 146:                       // 'ge'
      consumeT(146);                // 'ge'
      break;
    case 148:                       // 'group'
      consumeT(148);                // 'group'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    case 151:                       // 'idiv'
      consumeT(151);                // 'idiv'
      break;
    case 153:                       // 'import'
      consumeT(153);                // 'import'
      break;
    case 159:                       // 'insert'
      consumeT(159);                // 'insert'
      break;
    case 160:                       // 'instance'
      consumeT(160);                // 'instance'
      break;
    case 162:                       // 'intersect'
      consumeT(162);                // 'intersect'
      break;
    case 163:                       // 'into'
      consumeT(163);                // 'into'
      break;
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 170:                       // 'last'
      consumeT(170);                // 'last'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 174:                       // 'let'
      consumeT(174);                // 'let'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 179:                       // 'map'
      consumeT(179);                // 'map'
      break;
    case 181:                       // 'mod'
      consumeT(181);                // 'mod'
      break;
    case 182:                       // 'modify'
      consumeT(182);                // 'modify'
      break;
    case 183:                       // 'module'
      consumeT(183);                // 'module'
      break;
    case 185:                       // 'namespace'
      consumeT(185);                // 'namespace'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 199:                       // 'only'
      consumeT(199);                // 'only'
      break;
    case 201:                       // 'or'
      consumeT(201);                // 'or'
      break;
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      break;
    case 203:                       // 'ordered'
      consumeT(203);                // 'ordered'
      break;
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      break;
    case 219:                       // 'rename'
      consumeT(219);                // 'rename'
      break;
    case 220:                       // 'replace'
      consumeT(220);                // 'replace'
      break;
    case 221:                       // 'return'
      consumeT(221);                // 'return'
      break;
    case 225:                       // 'satisfies'
      consumeT(225);                // 'satisfies'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      break;
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    case 237:                       // 'stable'
      consumeT(237);                // 'stable'
      break;
    case 238:                       // 'start'
      consumeT(238);                // 'start'
      break;
    case 249:                       // 'to'
      consumeT(249);                // 'to'
      break;
    case 250:                       // 'treat'
      consumeT(250);                // 'treat'
      break;
    case 251:                       // 'try'
      consumeT(251);                // 'try'
      break;
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    case 257:                       // 'unordered'
      consumeT(257);                // 'unordered'
      break;
    case 261:                       // 'validate'
      consumeT(261);                // 'validate'
      break;
    case 267:                       // 'where'
      consumeT(267);                // 'where'
      break;
    case 271:                       // 'with'
      consumeT(271);                // 'with'
      break;
    case 275:                       // 'xquery'
      consumeT(275);                // 'xquery'
      break;
    case 72:                        // 'allowing'
      consumeT(72);                 // 'allowing'
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      break;
    case 83:                        // 'base-uri'
      consumeT(83);                 // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consumeT(85);                 // 'boundary-space'
      break;
    case 86:                        // 'break'
      consumeT(86);                 // 'break'
      break;
    case 91:                        // 'catch'
      consumeT(91);                 // 'catch'
      break;
    case 98:                        // 'construction'
      consumeT(98);                 // 'construction'
      break;
    case 101:                       // 'context'
      consumeT(101);                // 'context'
      break;
    case 102:                       // 'continue'
      consumeT(102);                // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consumeT(104);                // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consumeT(106);                // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consumeT(125);                // 'encoding'
      break;
    case 132:                       // 'exit'
      consumeT(132);                // 'exit'
      break;
    case 133:                       // 'external'
      consumeT(133);                // 'external'
      break;
    case 141:                       // 'ft-option'
      consumeT(141);                // 'ft-option'
      break;
    case 154:                       // 'in'
      consumeT(154);                // 'in'
      break;
    case 155:                       // 'index'
      consumeT(155);                // 'index'
      break;
    case 161:                       // 'integrity'
      consumeT(161);                // 'integrity'
      break;
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    case 193:                       // 'nodes'
      consumeT(193);                // 'nodes'
      break;
    case 200:                       // 'option'
      consumeT(200);                // 'option'
      break;
    case 204:                       // 'ordering'
      consumeT(204);                // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consumeT(223);                // 'revalidation'
      break;
    case 226:                       // 'schema'
      consumeT(226);                // 'schema'
      break;
    case 229:                       // 'score'
      consumeT(229);                // 'score'
      break;
    case 235:                       // 'sliding'
      consumeT(235);                // 'sliding'
      break;
    case 241:                       // 'strict'
      consumeT(241);                // 'strict'
      break;
    case 252:                       // 'tumbling'
      consumeT(252);                // 'tumbling'
      break;
    case 253:                       // 'type'
      consumeT(253);                // 'type'
      break;
    case 258:                       // 'updating'
      consumeT(258);                // 'updating'
      break;
    case 262:                       // 'value'
      consumeT(262);                // 'value'
      break;
    case 263:                       // 'variable'
      consumeT(263);                // 'variable'
      break;
    case 264:                       // 'version'
      consumeT(264);                // 'version'
      break;
    case 268:                       // 'while'
      consumeT(268);                // 'while'
      break;
    case 97:                        // 'constraint'
      consumeT(97);                 // 'constraint'
      break;
    case 176:                       // 'loop'
      consumeT(176);                // 'loop'
      break;
    case 222:                       // 'returning'
      consumeT(222);                // 'returning'
      break;
    case 77:                        // 'append'
      consumeT(77);                 // 'append'
      break;
    case 166:                       // 'json'
      consumeT(166);                // 'json'
      break;
    default:
      consumeT(195);                // 'object'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 75:                        // 'and'
      consume(75);                  // 'and'
      break;
    case 79:                        // 'as'
      consume(79);                  // 'as'
      break;
    case 80:                        // 'ascending'
      consume(80);                  // 'ascending'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    case 88:                        // 'case'
      consume(88);                  // 'case'
      break;
    case 89:                        // 'cast'
      consume(89);                  // 'cast'
      break;
    case 90:                        // 'castable'
      consume(90);                  // 'castable'
      break;
    case 94:                        // 'collation'
      consume(94);                  // 'collation'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 146:                       // 'ge'
      consume(146);                 // 'ge'
      break;
    case 148:                       // 'group'
      consume(148);                 // 'group'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    case 151:                       // 'idiv'
      consume(151);                 // 'idiv'
      break;
    case 160:                       // 'instance'
      consume(160);                 // 'instance'
      break;
    case 162:                       // 'intersect'
      consume(162);                 // 'intersect'
      break;
    case 163:                       // 'into'
      consume(163);                 // 'into'
      break;
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 174:                       // 'let'
      consume(174);                 // 'let'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 179:                       // 'map'
      consume(179);                 // 'map'
      break;
    case 181:                       // 'mod'
      consume(181);                 // 'mod'
      break;
    case 182:                       // 'modify'
      consume(182);                 // 'modify'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 199:                       // 'only'
      consume(199);                 // 'only'
      break;
    case 201:                       // 'or'
      consume(201);                 // 'or'
      break;
    case 202:                       // 'order'
      consume(202);                 // 'order'
      break;
    case 221:                       // 'return'
      consume(221);                 // 'return'
      break;
    case 225:                       // 'satisfies'
      consume(225);                 // 'satisfies'
      break;
    case 237:                       // 'stable'
      consume(237);                 // 'stable'
      break;
    case 238:                       // 'start'
      consume(238);                 // 'start'
      break;
    case 249:                       // 'to'
      consume(249);                 // 'to'
      break;
    case 250:                       // 'treat'
      consume(250);                 // 'treat'
      break;
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    case 267:                       // 'where'
      consume(267);                 // 'where'
      break;
    case 271:                       // 'with'
      consume(271);                 // 'with'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consume(74);                  // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      break;
    case 93:                        // 'child'
      consume(93);                  // 'child'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 134:                       // 'first'
      consume(134);                 // 'first'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 145:                       // 'function'
      consume(145);                 // 'function'
      break;
    case 152:                       // 'if'
      consume(152);                 // 'if'
      break;
    case 153:                       // 'import'
      consume(153);                 // 'import'
      break;
    case 159:                       // 'insert'
      consume(159);                 // 'insert'
      break;
    case 165:                       // 'item'
      consume(165);                 // 'item'
      break;
    case 170:                       // 'last'
      consume(170);                 // 'last'
      break;
    case 183:                       // 'module'
      consume(183);                 // 'module'
      break;
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      break;
    case 186:                       // 'namespace-node'
      consume(186);                 // 'namespace-node'
      break;
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      break;
    case 217:                       // 'processing-instruction'
      consume(217);                 // 'processing-instruction'
      break;
    case 219:                       // 'rename'
      consume(219);                 // 'rename'
      break;
    case 220:                       // 'replace'
      consume(220);                 // 'replace'
      break;
    case 227:                       // 'schema-attribute'
      consume(227);                 // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consume(228);                 // 'schema-element'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      break;
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    case 244:                       // 'switch'
      consume(244);                 // 'switch'
      break;
    case 245:                       // 'text'
      consume(245);                 // 'text'
      break;
    case 251:                       // 'try'
      consume(251);                 // 'try'
      break;
    case 254:                       // 'typeswitch'
      consume(254);                 // 'typeswitch'
      break;
    case 257:                       // 'unordered'
      consume(257);                 // 'unordered'
      break;
    case 261:                       // 'validate'
      consume(261);                 // 'validate'
      break;
    case 263:                       // 'variable'
      consume(263);                 // 'variable'
      break;
    case 275:                       // 'xquery'
      consume(275);                 // 'xquery'
      break;
    case 72:                        // 'allowing'
      consume(72);                  // 'allowing'
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      break;
    case 83:                        // 'base-uri'
      consume(83);                  // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consume(85);                  // 'boundary-space'
      break;
    case 86:                        // 'break'
      consume(86);                  // 'break'
      break;
    case 91:                        // 'catch'
      consume(91);                  // 'catch'
      break;
    case 98:                        // 'construction'
      consume(98);                  // 'construction'
      break;
    case 101:                       // 'context'
      consume(101);                 // 'context'
      break;
    case 102:                       // 'continue'
      consume(102);                 // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consume(104);                 // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      break;
    case 132:                       // 'exit'
      consume(132);                 // 'exit'
      break;
    case 133:                       // 'external'
      consume(133);                 // 'external'
      break;
    case 141:                       // 'ft-option'
      consume(141);                 // 'ft-option'
      break;
    case 154:                       // 'in'
      consume(154);                 // 'in'
      break;
    case 155:                       // 'index'
      consume(155);                 // 'index'
      break;
    case 161:                       // 'integrity'
      consume(161);                 // 'integrity'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    case 193:                       // 'nodes'
      consume(193);                 // 'nodes'
      break;
    case 200:                       // 'option'
      consume(200);                 // 'option'
      break;
    case 204:                       // 'ordering'
      consume(204);                 // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consume(223);                 // 'revalidation'
      break;
    case 226:                       // 'schema'
      consume(226);                 // 'schema'
      break;
    case 229:                       // 'score'
      consume(229);                 // 'score'
      break;
    case 235:                       // 'sliding'
      consume(235);                 // 'sliding'
      break;
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 252:                       // 'tumbling'
      consume(252);                 // 'tumbling'
      break;
    case 253:                       // 'type'
      consume(253);                 // 'type'
      break;
    case 258:                       // 'updating'
      consume(258);                 // 'updating'
      break;
    case 262:                       // 'value'
      consume(262);                 // 'value'
      break;
    case 264:                       // 'version'
      consume(264);                 // 'version'
      break;
    case 268:                       // 'while'
      consume(268);                 // 'while'
      break;
    case 97:                        // 'constraint'
      consume(97);                  // 'constraint'
      break;
    case 176:                       // 'loop'
      consume(176);                 // 'loop'
      break;
    case 222:                       // 'returning'
      consume(222);                 // 'returning'
      break;
    case 77:                        // 'append'
      consume(77);                  // 'append'
      break;
    case 166:                       // 'json'
      consume(166);                 // 'json'
      break;
    default:
      consume(195);                 // 'object'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 75:                        // 'and'
      consumeT(75);                 // 'and'
      break;
    case 79:                        // 'as'
      consumeT(79);                 // 'as'
      break;
    case 80:                        // 'ascending'
      consumeT(80);                 // 'ascending'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      break;
    case 89:                        // 'cast'
      consumeT(89);                 // 'cast'
      break;
    case 90:                        // 'castable'
      consumeT(90);                 // 'castable'
      break;
    case 94:                        // 'collation'
      consumeT(94);                 // 'collation'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 146:                       // 'ge'
      consumeT(146);                // 'ge'
      break;
    case 148:                       // 'group'
      consumeT(148);                // 'group'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    case 151:                       // 'idiv'
      consumeT(151);                // 'idiv'
      break;
    case 160:                       // 'instance'
      consumeT(160);                // 'instance'
      break;
    case 162:                       // 'intersect'
      consumeT(162);                // 'intersect'
      break;
    case 163:                       // 'into'
      consumeT(163);                // 'into'
      break;
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 174:                       // 'let'
      consumeT(174);                // 'let'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 179:                       // 'map'
      consumeT(179);                // 'map'
      break;
    case 181:                       // 'mod'
      consumeT(181);                // 'mod'
      break;
    case 182:                       // 'modify'
      consumeT(182);                // 'modify'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 199:                       // 'only'
      consumeT(199);                // 'only'
      break;
    case 201:                       // 'or'
      consumeT(201);                // 'or'
      break;
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      break;
    case 221:                       // 'return'
      consumeT(221);                // 'return'
      break;
    case 225:                       // 'satisfies'
      consumeT(225);                // 'satisfies'
      break;
    case 237:                       // 'stable'
      consumeT(237);                // 'stable'
      break;
    case 238:                       // 'start'
      consumeT(238);                // 'start'
      break;
    case 249:                       // 'to'
      consumeT(249);                // 'to'
      break;
    case 250:                       // 'treat'
      consumeT(250);                // 'treat'
      break;
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    case 267:                       // 'where'
      consumeT(267);                // 'where'
      break;
    case 271:                       // 'with'
      consumeT(271);                // 'with'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consumeT(74);                 // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      break;
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 134:                       // 'first'
      consumeT(134);                // 'first'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 145:                       // 'function'
      consumeT(145);                // 'function'
      break;
    case 152:                       // 'if'
      consumeT(152);                // 'if'
      break;
    case 153:                       // 'import'
      consumeT(153);                // 'import'
      break;
    case 159:                       // 'insert'
      consumeT(159);                // 'insert'
      break;
    case 165:                       // 'item'
      consumeT(165);                // 'item'
      break;
    case 170:                       // 'last'
      consumeT(170);                // 'last'
      break;
    case 183:                       // 'module'
      consumeT(183);                // 'module'
      break;
    case 185:                       // 'namespace'
      consumeT(185);                // 'namespace'
      break;
    case 186:                       // 'namespace-node'
      consumeT(186);                // 'namespace-node'
      break;
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    case 203:                       // 'ordered'
      consumeT(203);                // 'ordered'
      break;
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      break;
    case 217:                       // 'processing-instruction'
      consumeT(217);                // 'processing-instruction'
      break;
    case 219:                       // 'rename'
      consumeT(219);                // 'rename'
      break;
    case 220:                       // 'replace'
      consumeT(220);                // 'replace'
      break;
    case 227:                       // 'schema-attribute'
      consumeT(227);                // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consumeT(228);                // 'schema-element'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      break;
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    case 244:                       // 'switch'
      consumeT(244);                // 'switch'
      break;
    case 245:                       // 'text'
      consumeT(245);                // 'text'
      break;
    case 251:                       // 'try'
      consumeT(251);                // 'try'
      break;
    case 254:                       // 'typeswitch'
      consumeT(254);                // 'typeswitch'
      break;
    case 257:                       // 'unordered'
      consumeT(257);                // 'unordered'
      break;
    case 261:                       // 'validate'
      consumeT(261);                // 'validate'
      break;
    case 263:                       // 'variable'
      consumeT(263);                // 'variable'
      break;
    case 275:                       // 'xquery'
      consumeT(275);                // 'xquery'
      break;
    case 72:                        // 'allowing'
      consumeT(72);                 // 'allowing'
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      break;
    case 83:                        // 'base-uri'
      consumeT(83);                 // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consumeT(85);                 // 'boundary-space'
      break;
    case 86:                        // 'break'
      consumeT(86);                 // 'break'
      break;
    case 91:                        // 'catch'
      consumeT(91);                 // 'catch'
      break;
    case 98:                        // 'construction'
      consumeT(98);                 // 'construction'
      break;
    case 101:                       // 'context'
      consumeT(101);                // 'context'
      break;
    case 102:                       // 'continue'
      consumeT(102);                // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consumeT(104);                // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consumeT(106);                // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consumeT(125);                // 'encoding'
      break;
    case 132:                       // 'exit'
      consumeT(132);                // 'exit'
      break;
    case 133:                       // 'external'
      consumeT(133);                // 'external'
      break;
    case 141:                       // 'ft-option'
      consumeT(141);                // 'ft-option'
      break;
    case 154:                       // 'in'
      consumeT(154);                // 'in'
      break;
    case 155:                       // 'index'
      consumeT(155);                // 'index'
      break;
    case 161:                       // 'integrity'
      consumeT(161);                // 'integrity'
      break;
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    case 193:                       // 'nodes'
      consumeT(193);                // 'nodes'
      break;
    case 200:                       // 'option'
      consumeT(200);                // 'option'
      break;
    case 204:                       // 'ordering'
      consumeT(204);                // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consumeT(223);                // 'revalidation'
      break;
    case 226:                       // 'schema'
      consumeT(226);                // 'schema'
      break;
    case 229:                       // 'score'
      consumeT(229);                // 'score'
      break;
    case 235:                       // 'sliding'
      consumeT(235);                // 'sliding'
      break;
    case 241:                       // 'strict'
      consumeT(241);                // 'strict'
      break;
    case 252:                       // 'tumbling'
      consumeT(252);                // 'tumbling'
      break;
    case 253:                       // 'type'
      consumeT(253);                // 'type'
      break;
    case 258:                       // 'updating'
      consumeT(258);                // 'updating'
      break;
    case 262:                       // 'value'
      consumeT(262);                // 'value'
      break;
    case 264:                       // 'version'
      consumeT(264);                // 'version'
      break;
    case 268:                       // 'while'
      consumeT(268);                // 'while'
      break;
    case 97:                        // 'constraint'
      consumeT(97);                 // 'constraint'
      break;
    case 176:                       // 'loop'
      consumeT(176);                // 'loop'
      break;
    case 222:                       // 'returning'
      consumeT(222);                // 'returning'
      break;
    case 77:                        // 'append'
      consumeT(77);                 // 'append'
      break;
    case 166:                       // 'json'
      consumeT(166);                // 'json'
      break;
    default:
      consumeT(195);                // 'object'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(286);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '?'
        lookahead2W(256);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 66:                      // '@'
        lookahead2W(258);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 82:                      // 'attribute'
        lookahead2W(282);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'replace'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 261:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 277:                     // '{'
        lookahead2W(278);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 279:                     // '{|'
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 185:                     // 'namespace'
      case 217:                     // 'processing-instruction'
        lookahead2W(270);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 236:                     // 'some'
      case 263:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 243:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 179:                     // 'map'
      case 203:                     // 'ordered'
      case 245:                     // 'text'
      case 251:                     // 'try'
      case 257:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 207:                     // 'parent'
      case 213:                     // 'preceding'
      case 214:                     // 'preceding-sibling'
      case 230:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 181:                     // 'mod'
      case 182:                     // 'modify'
      case 183:                     // 'module'
      case 186:                     // 'namespace-node'
      case 187:                     // 'ne'
      case 192:                     // 'node'
      case 193:                     // 'nodes'
      case 195:                     // 'object'
      case 199:                     // 'only'
      case 200:                     // 'option'
      case 201:                     // 'or'
      case 202:                     // 'order'
      case 204:                     // 'ordering'
      case 221:                     // 'return'
      case 222:                     // 'returning'
      case 223:                     // 'revalidation'
      case 225:                     // 'satisfies'
      case 226:                     // 'schema'
      case 227:                     // 'schema-attribute'
      case 228:                     // 'schema-element'
      case 229:                     // 'score'
      case 235:                     // 'sliding'
      case 237:                     // 'stable'
      case 238:                     // 'start'
      case 241:                     // 'strict'
      case 244:                     // 'switch'
      case 249:                     // 'to'
      case 250:                     // 'treat'
      case 252:                     // 'tumbling'
      case 253:                     // 'type'
      case 254:                     // 'typeswitch'
      case 255:                     // 'union'
      case 258:                     // 'updating'
      case 262:                     // 'value'
      case 264:                     // 'version'
      case 267:                     // 'where'
      case 268:                     // 'while'
      case 271:                     // 'with'
      case 275:                     // 'xquery'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 283                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12979               // 'map' EOF
       && lk != 12981               // 'mod' EOF
       && lk != 12982               // 'modify' EOF
       && lk != 12983               // 'module' EOF
       && lk != 12985               // 'namespace' EOF
       && lk != 12986               // 'namespace-node' EOF
       && lk != 12987               // 'ne' EOF
       && lk != 12992               // 'node' EOF
       && lk != 12993               // 'nodes' EOF
       && lk != 12995               // 'object' EOF
       && lk != 12999               // 'only' EOF
       && lk != 13000               // 'option' EOF
       && lk != 13001               // 'or' EOF
       && lk != 13002               // 'order' EOF
       && lk != 13003               // 'ordered' EOF
       && lk != 13004               // 'ordering' EOF
       && lk != 13007               // 'parent' EOF
       && lk != 13013               // 'preceding' EOF
       && lk != 13014               // 'preceding-sibling' EOF
       && lk != 13017               // 'processing-instruction' EOF
       && lk != 13019               // 'rename' EOF
       && lk != 13020               // 'replace' EOF
       && lk != 13021               // 'return' EOF
       && lk != 13022               // 'returning' EOF
       && lk != 13023               // 'revalidation' EOF
       && lk != 13025               // 'satisfies' EOF
       && lk != 13026               // 'schema' EOF
       && lk != 13027               // 'schema-attribute' EOF
       && lk != 13028               // 'schema-element' EOF
       && lk != 13029               // 'score' EOF
       && lk != 13030               // 'self' EOF
       && lk != 13035               // 'sliding' EOF
       && lk != 13036               // 'some' EOF
       && lk != 13037               // 'stable' EOF
       && lk != 13038               // 'start' EOF
       && lk != 13041               // 'strict' EOF
       && lk != 13043               // 'structured-item' EOF
       && lk != 13044               // 'switch' EOF
       && lk != 13045               // 'text' EOF
       && lk != 13049               // 'to' EOF
       && lk != 13050               // 'treat' EOF
       && lk != 13051               // 'try' EOF
       && lk != 13052               // 'tumbling' EOF
       && lk != 13053               // 'type' EOF
       && lk != 13054               // 'typeswitch' EOF
       && lk != 13055               // 'union' EOF
       && lk != 13057               // 'unordered' EOF
       && lk != 13058               // 'updating' EOF
       && lk != 13061               // 'validate' EOF
       && lk != 13062               // 'value' EOF
       && lk != 13063               // 'variable' EOF
       && lk != 13064               // 'version' EOF
       && lk != 13067               // 'where' EOF
       && lk != 13068               // 'while' EOF
       && lk != 13071               // 'with' EOF
       && lk != 13075               // 'xquery' EOF
       && lk != 16135               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21171               // 'map' ','
       && lk != 21173               // 'mod' ','
       && lk != 21174               // 'modify' ','
       && lk != 21175               // 'module' ','
       && lk != 21177               // 'namespace' ','
       && lk != 21178               // 'namespace-node' ','
       && lk != 21179               // 'ne' ','
       && lk != 21184               // 'node' ','
       && lk != 21185               // 'nodes' ','
       && lk != 21187               // 'object' ','
       && lk != 21191               // 'only' ','
       && lk != 21192               // 'option' ','
       && lk != 21193               // 'or' ','
       && lk != 21194               // 'order' ','
       && lk != 21195               // 'ordered' ','
       && lk != 21196               // 'ordering' ','
       && lk != 21199               // 'parent' ','
       && lk != 21205               // 'preceding' ','
       && lk != 21206               // 'preceding-sibling' ','
       && lk != 21209               // 'processing-instruction' ','
       && lk != 21211               // 'rename' ','
       && lk != 21212               // 'replace' ','
       && lk != 21213               // 'return' ','
       && lk != 21214               // 'returning' ','
       && lk != 21215               // 'revalidation' ','
       && lk != 21217               // 'satisfies' ','
       && lk != 21218               // 'schema' ','
       && lk != 21219               // 'schema-attribute' ','
       && lk != 21220               // 'schema-element' ','
       && lk != 21221               // 'score' ','
       && lk != 21222               // 'self' ','
       && lk != 21227               // 'sliding' ','
       && lk != 21228               // 'some' ','
       && lk != 21229               // 'stable' ','
       && lk != 21230               // 'start' ','
       && lk != 21233               // 'strict' ','
       && lk != 21235               // 'structured-item' ','
       && lk != 21236               // 'switch' ','
       && lk != 21237               // 'text' ','
       && lk != 21241               // 'to' ','
       && lk != 21242               // 'treat' ','
       && lk != 21243               // 'try' ','
       && lk != 21244               // 'tumbling' ','
       && lk != 21245               // 'type' ','
       && lk != 21246               // 'typeswitch' ','
       && lk != 21247               // 'union' ','
       && lk != 21249               // 'unordered' ','
       && lk != 21250               // 'updating' ','
       && lk != 21253               // 'validate' ','
       && lk != 21254               // 'value' ','
       && lk != 21255               // 'variable' ','
       && lk != 21256               // 'version' ','
       && lk != 21259               // 'where' ','
       && lk != 21260               // 'while' ','
       && lk != 21263               // 'with' ','
       && lk != 21267               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796              // 'exit' 'returning'
       && lk != 144901              // Wildcard '}'
       && lk != 144902              // EQName^Token '}'
       && lk != 144904              // IntegerLiteral '}'
       && lk != 144905              // DecimalLiteral '}'
       && lk != 144906              // DoubleLiteral '}'
       && lk != 144907              // StringLiteral '}'
       && lk != 144940              // '.' '}'
       && lk != 144941              // '..' '}'
       && lk != 144942              // '/' '}'
       && lk != 144966              // 'after' '}'
       && lk != 144968              // 'allowing' '}'
       && lk != 144969              // 'ancestor' '}'
       && lk != 144970              // 'ancestor-or-self' '}'
       && lk != 144971              // 'and' '}'
       && lk != 144973              // 'append' '}'
       && lk != 144974              // 'array' '}'
       && lk != 144975              // 'as' '}'
       && lk != 144976              // 'ascending' '}'
       && lk != 144977              // 'at' '}'
       && lk != 144978              // 'attribute' '}'
       && lk != 144979              // 'base-uri' '}'
       && lk != 144980              // 'before' '}'
       && lk != 144981              // 'boundary-space' '}'
       && lk != 144982              // 'break' '}'
       && lk != 144984              // 'case' '}'
       && lk != 144985              // 'cast' '}'
       && lk != 144986              // 'castable' '}'
       && lk != 144987              // 'catch' '}'
       && lk != 144989              // 'child' '}'
       && lk != 144990              // 'collation' '}'
       && lk != 144992              // 'comment' '}'
       && lk != 144993              // 'constraint' '}'
       && lk != 144994              // 'construction' '}'
       && lk != 144997              // 'context' '}'
       && lk != 144998              // 'continue' '}'
       && lk != 144999              // 'copy' '}'
       && lk != 145000              // 'copy-namespaces' '}'
       && lk != 145001              // 'count' '}'
       && lk != 145002              // 'decimal-format' '}'
       && lk != 145004              // 'declare' '}'
       && lk != 145005              // 'default' '}'
       && lk != 145006              // 'delete' '}'
       && lk != 145007              // 'descendant' '}'
       && lk != 145008              // 'descendant-or-self' '}'
       && lk != 145009              // 'descending' '}'
       && lk != 145014              // 'div' '}'
       && lk != 145015              // 'document' '}'
       && lk != 145016              // 'document-node' '}'
       && lk != 145017              // 'element' '}'
       && lk != 145018              // 'else' '}'
       && lk != 145019              // 'empty' '}'
       && lk != 145020              // 'empty-sequence' '}'
       && lk != 145021              // 'encoding' '}'
       && lk != 145022              // 'end' '}'
       && lk != 145024              // 'eq' '}'
       && lk != 145025              // 'every' '}'
       && lk != 145027              // 'except' '}'
       && lk != 145028              // 'exit' '}'
       && lk != 145029              // 'external' '}'
       && lk != 145030              // 'first' '}'
       && lk != 145031              // 'following' '}'
       && lk != 145032              // 'following-sibling' '}'
       && lk != 145033              // 'for' '}'
       && lk != 145037              // 'ft-option' '}'
       && lk != 145041              // 'function' '}'
       && lk != 145042              // 'ge' '}'
       && lk != 145044              // 'group' '}'
       && lk != 145046              // 'gt' '}'
       && lk != 145047              // 'idiv' '}'
       && lk != 145048              // 'if' '}'
       && lk != 145049              // 'import' '}'
       && lk != 145050              // 'in' '}'
       && lk != 145051              // 'index' '}'
       && lk != 145055              // 'insert' '}'
       && lk != 145056              // 'instance' '}'
       && lk != 145057              // 'integrity' '}'
       && lk != 145058              // 'intersect' '}'
       && lk != 145059              // 'into' '}'
       && lk != 145060              // 'is' '}'
       && lk != 145061              // 'item' '}'
       && lk != 145062              // 'json' '}'
       && lk != 145063              // 'json-item' '}'
       && lk != 145066              // 'last' '}'
       && lk != 145067              // 'lax' '}'
       && lk != 145068              // 'le' '}'
       && lk != 145070              // 'let' '}'
       && lk != 145072              // 'loop' '}'
       && lk != 145074              // 'lt' '}'
       && lk != 145075              // 'map' '}'
       && lk != 145077              // 'mod' '}'
       && lk != 145078              // 'modify' '}'
       && lk != 145079              // 'module' '}'
       && lk != 145081              // 'namespace' '}'
       && lk != 145082              // 'namespace-node' '}'
       && lk != 145083              // 'ne' '}'
       && lk != 145088              // 'node' '}'
       && lk != 145089              // 'nodes' '}'
       && lk != 145091              // 'object' '}'
       && lk != 145095              // 'only' '}'
       && lk != 145096              // 'option' '}'
       && lk != 145097              // 'or' '}'
       && lk != 145098              // 'order' '}'
       && lk != 145099              // 'ordered' '}'
       && lk != 145100              // 'ordering' '}'
       && lk != 145103              // 'parent' '}'
       && lk != 145109              // 'preceding' '}'
       && lk != 145110              // 'preceding-sibling' '}'
       && lk != 145113              // 'processing-instruction' '}'
       && lk != 145115              // 'rename' '}'
       && lk != 145116              // 'replace' '}'
       && lk != 145117              // 'return' '}'
       && lk != 145118              // 'returning' '}'
       && lk != 145119              // 'revalidation' '}'
       && lk != 145121              // 'satisfies' '}'
       && lk != 145122              // 'schema' '}'
       && lk != 145123              // 'schema-attribute' '}'
       && lk != 145124              // 'schema-element' '}'
       && lk != 145125              // 'score' '}'
       && lk != 145126              // 'self' '}'
       && lk != 145131              // 'sliding' '}'
       && lk != 145132              // 'some' '}'
       && lk != 145133              // 'stable' '}'
       && lk != 145134              // 'start' '}'
       && lk != 145137              // 'strict' '}'
       && lk != 145139              // 'structured-item' '}'
       && lk != 145140              // 'switch' '}'
       && lk != 145141              // 'text' '}'
       && lk != 145145              // 'to' '}'
       && lk != 145146              // 'treat' '}'
       && lk != 145147              // 'try' '}'
       && lk != 145148              // 'tumbling' '}'
       && lk != 145149              // 'type' '}'
       && lk != 145150              // 'typeswitch' '}'
       && lk != 145151              // 'union' '}'
       && lk != 145153              // 'unordered' '}'
       && lk != 145154              // 'updating' '}'
       && lk != 145157              // 'validate' '}'
       && lk != 145158              // 'value' '}'
       && lk != 145159              // 'variable' '}'
       && lk != 145160              // 'version' '}'
       && lk != 145163              // 'where' '}'
       && lk != 145164              // 'while' '}'
       && lk != 145167              // 'with' '}'
       && lk != 145171)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16135               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(286);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '?'
        lookahead2W(256);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 66:                      // '@'
        lookahead2W(258);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 82:                      // 'attribute'
        lookahead2W(282);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'replace'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 261:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 277:                     // '{'
        lookahead2W(278);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 279:                     // '{|'
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 185:                     // 'namespace'
      case 217:                     // 'processing-instruction'
        lookahead2W(270);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 236:                     // 'some'
      case 263:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 243:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 179:                     // 'map'
      case 203:                     // 'ordered'
      case 245:                     // 'text'
      case 251:                     // 'try'
      case 257:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 207:                     // 'parent'
      case 213:                     // 'preceding'
      case 214:                     // 'preceding-sibling'
      case 230:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 181:                     // 'mod'
      case 182:                     // 'modify'
      case 183:                     // 'module'
      case 186:                     // 'namespace-node'
      case 187:                     // 'ne'
      case 192:                     // 'node'
      case 193:                     // 'nodes'
      case 195:                     // 'object'
      case 199:                     // 'only'
      case 200:                     // 'option'
      case 201:                     // 'or'
      case 202:                     // 'order'
      case 204:                     // 'ordering'
      case 221:                     // 'return'
      case 222:                     // 'returning'
      case 223:                     // 'revalidation'
      case 225:                     // 'satisfies'
      case 226:                     // 'schema'
      case 227:                     // 'schema-attribute'
      case 228:                     // 'schema-element'
      case 229:                     // 'score'
      case 235:                     // 'sliding'
      case 237:                     // 'stable'
      case 238:                     // 'start'
      case 241:                     // 'strict'
      case 244:                     // 'switch'
      case 249:                     // 'to'
      case 250:                     // 'treat'
      case 252:                     // 'tumbling'
      case 253:                     // 'type'
      case 254:                     // 'typeswitch'
      case 255:                     // 'union'
      case 258:                     // 'updating'
      case 262:                     // 'value'
      case 264:                     // 'version'
      case 267:                     // 'where'
      case 268:                     // 'while'
      case 271:                     // 'with'
      case 275:                     // 'xquery'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 283                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12979               // 'map' EOF
       && lk != 12981               // 'mod' EOF
       && lk != 12982               // 'modify' EOF
       && lk != 12983               // 'module' EOF
       && lk != 12985               // 'namespace' EOF
       && lk != 12986               // 'namespace-node' EOF
       && lk != 12987               // 'ne' EOF
       && lk != 12992               // 'node' EOF
       && lk != 12993               // 'nodes' EOF
       && lk != 12995               // 'object' EOF
       && lk != 12999               // 'only' EOF
       && lk != 13000               // 'option' EOF
       && lk != 13001               // 'or' EOF
       && lk != 13002               // 'order' EOF
       && lk != 13003               // 'ordered' EOF
       && lk != 13004               // 'ordering' EOF
       && lk != 13007               // 'parent' EOF
       && lk != 13013               // 'preceding' EOF
       && lk != 13014               // 'preceding-sibling' EOF
       && lk != 13017               // 'processing-instruction' EOF
       && lk != 13019               // 'rename' EOF
       && lk != 13020               // 'replace' EOF
       && lk != 13021               // 'return' EOF
       && lk != 13022               // 'returning' EOF
       && lk != 13023               // 'revalidation' EOF
       && lk != 13025               // 'satisfies' EOF
       && lk != 13026               // 'schema' EOF
       && lk != 13027               // 'schema-attribute' EOF
       && lk != 13028               // 'schema-element' EOF
       && lk != 13029               // 'score' EOF
       && lk != 13030               // 'self' EOF
       && lk != 13035               // 'sliding' EOF
       && lk != 13036               // 'some' EOF
       && lk != 13037               // 'stable' EOF
       && lk != 13038               // 'start' EOF
       && lk != 13041               // 'strict' EOF
       && lk != 13043               // 'structured-item' EOF
       && lk != 13044               // 'switch' EOF
       && lk != 13045               // 'text' EOF
       && lk != 13049               // 'to' EOF
       && lk != 13050               // 'treat' EOF
       && lk != 13051               // 'try' EOF
       && lk != 13052               // 'tumbling' EOF
       && lk != 13053               // 'type' EOF
       && lk != 13054               // 'typeswitch' EOF
       && lk != 13055               // 'union' EOF
       && lk != 13057               // 'unordered' EOF
       && lk != 13058               // 'updating' EOF
       && lk != 13061               // 'validate' EOF
       && lk != 13062               // 'value' EOF
       && lk != 13063               // 'variable' EOF
       && lk != 13064               // 'version' EOF
       && lk != 13067               // 'where' EOF
       && lk != 13068               // 'while' EOF
       && lk != 13071               // 'with' EOF
       && lk != 13075               // 'xquery' EOF
       && lk != 16135               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21171               // 'map' ','
       && lk != 21173               // 'mod' ','
       && lk != 21174               // 'modify' ','
       && lk != 21175               // 'module' ','
       && lk != 21177               // 'namespace' ','
       && lk != 21178               // 'namespace-node' ','
       && lk != 21179               // 'ne' ','
       && lk != 21184               // 'node' ','
       && lk != 21185               // 'nodes' ','
       && lk != 21187               // 'object' ','
       && lk != 21191               // 'only' ','
       && lk != 21192               // 'option' ','
       && lk != 21193               // 'or' ','
       && lk != 21194               // 'order' ','
       && lk != 21195               // 'ordered' ','
       && lk != 21196               // 'ordering' ','
       && lk != 21199               // 'parent' ','
       && lk != 21205               // 'preceding' ','
       && lk != 21206               // 'preceding-sibling' ','
       && lk != 21209               // 'processing-instruction' ','
       && lk != 21211               // 'rename' ','
       && lk != 21212               // 'replace' ','
       && lk != 21213               // 'return' ','
       && lk != 21214               // 'returning' ','
       && lk != 21215               // 'revalidation' ','
       && lk != 21217               // 'satisfies' ','
       && lk != 21218               // 'schema' ','
       && lk != 21219               // 'schema-attribute' ','
       && lk != 21220               // 'schema-element' ','
       && lk != 21221               // 'score' ','
       && lk != 21222               // 'self' ','
       && lk != 21227               // 'sliding' ','
       && lk != 21228               // 'some' ','
       && lk != 21229               // 'stable' ','
       && lk != 21230               // 'start' ','
       && lk != 21233               // 'strict' ','
       && lk != 21235               // 'structured-item' ','
       && lk != 21236               // 'switch' ','
       && lk != 21237               // 'text' ','
       && lk != 21241               // 'to' ','
       && lk != 21242               // 'treat' ','
       && lk != 21243               // 'try' ','
       && lk != 21244               // 'tumbling' ','
       && lk != 21245               // 'type' ','
       && lk != 21246               // 'typeswitch' ','
       && lk != 21247               // 'union' ','
       && lk != 21249               // 'unordered' ','
       && lk != 21250               // 'updating' ','
       && lk != 21253               // 'validate' ','
       && lk != 21254               // 'value' ','
       && lk != 21255               // 'variable' ','
       && lk != 21256               // 'version' ','
       && lk != 21259               // 'where' ','
       && lk != 21260               // 'while' ','
       && lk != 21263               // 'with' ','
       && lk != 21267               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796              // 'exit' 'returning'
       && lk != 144901              // Wildcard '}'
       && lk != 144902              // EQName^Token '}'
       && lk != 144904              // IntegerLiteral '}'
       && lk != 144905              // DecimalLiteral '}'
       && lk != 144906              // DoubleLiteral '}'
       && lk != 144907              // StringLiteral '}'
       && lk != 144940              // '.' '}'
       && lk != 144941              // '..' '}'
       && lk != 144942              // '/' '}'
       && lk != 144966              // 'after' '}'
       && lk != 144968              // 'allowing' '}'
       && lk != 144969              // 'ancestor' '}'
       && lk != 144970              // 'ancestor-or-self' '}'
       && lk != 144971              // 'and' '}'
       && lk != 144973              // 'append' '}'
       && lk != 144974              // 'array' '}'
       && lk != 144975              // 'as' '}'
       && lk != 144976              // 'ascending' '}'
       && lk != 144977              // 'at' '}'
       && lk != 144978              // 'attribute' '}'
       && lk != 144979              // 'base-uri' '}'
       && lk != 144980              // 'before' '}'
       && lk != 144981              // 'boundary-space' '}'
       && lk != 144982              // 'break' '}'
       && lk != 144984              // 'case' '}'
       && lk != 144985              // 'cast' '}'
       && lk != 144986              // 'castable' '}'
       && lk != 144987              // 'catch' '}'
       && lk != 144989              // 'child' '}'
       && lk != 144990              // 'collation' '}'
       && lk != 144992              // 'comment' '}'
       && lk != 144993              // 'constraint' '}'
       && lk != 144994              // 'construction' '}'
       && lk != 144997              // 'context' '}'
       && lk != 144998              // 'continue' '}'
       && lk != 144999              // 'copy' '}'
       && lk != 145000              // 'copy-namespaces' '}'
       && lk != 145001              // 'count' '}'
       && lk != 145002              // 'decimal-format' '}'
       && lk != 145004              // 'declare' '}'
       && lk != 145005              // 'default' '}'
       && lk != 145006              // 'delete' '}'
       && lk != 145007              // 'descendant' '}'
       && lk != 145008              // 'descendant-or-self' '}'
       && lk != 145009              // 'descending' '}'
       && lk != 145014              // 'div' '}'
       && lk != 145015              // 'document' '}'
       && lk != 145016              // 'document-node' '}'
       && lk != 145017              // 'element' '}'
       && lk != 145018              // 'else' '}'
       && lk != 145019              // 'empty' '}'
       && lk != 145020              // 'empty-sequence' '}'
       && lk != 145021              // 'encoding' '}'
       && lk != 145022              // 'end' '}'
       && lk != 145024              // 'eq' '}'
       && lk != 145025              // 'every' '}'
       && lk != 145027              // 'except' '}'
       && lk != 145028              // 'exit' '}'
       && lk != 145029              // 'external' '}'
       && lk != 145030              // 'first' '}'
       && lk != 145031              // 'following' '}'
       && lk != 145032              // 'following-sibling' '}'
       && lk != 145033              // 'for' '}'
       && lk != 145037              // 'ft-option' '}'
       && lk != 145041              // 'function' '}'
       && lk != 145042              // 'ge' '}'
       && lk != 145044              // 'group' '}'
       && lk != 145046              // 'gt' '}'
       && lk != 145047              // 'idiv' '}'
       && lk != 145048              // 'if' '}'
       && lk != 145049              // 'import' '}'
       && lk != 145050              // 'in' '}'
       && lk != 145051              // 'index' '}'
       && lk != 145055              // 'insert' '}'
       && lk != 145056              // 'instance' '}'
       && lk != 145057              // 'integrity' '}'
       && lk != 145058              // 'intersect' '}'
       && lk != 145059              // 'into' '}'
       && lk != 145060              // 'is' '}'
       && lk != 145061              // 'item' '}'
       && lk != 145062              // 'json' '}'
       && lk != 145063              // 'json-item' '}'
       && lk != 145066              // 'last' '}'
       && lk != 145067              // 'lax' '}'
       && lk != 145068              // 'le' '}'
       && lk != 145070              // 'let' '}'
       && lk != 145072              // 'loop' '}'
       && lk != 145074              // 'lt' '}'
       && lk != 145075              // 'map' '}'
       && lk != 145077              // 'mod' '}'
       && lk != 145078              // 'modify' '}'
       && lk != 145079              // 'module' '}'
       && lk != 145081              // 'namespace' '}'
       && lk != 145082              // 'namespace-node' '}'
       && lk != 145083              // 'ne' '}'
       && lk != 145088              // 'node' '}'
       && lk != 145089              // 'nodes' '}'
       && lk != 145091              // 'object' '}'
       && lk != 145095              // 'only' '}'
       && lk != 145096              // 'option' '}'
       && lk != 145097              // 'or' '}'
       && lk != 145098              // 'order' '}'
       && lk != 145099              // 'ordered' '}'
       && lk != 145100              // 'ordering' '}'
       && lk != 145103              // 'parent' '}'
       && lk != 145109              // 'preceding' '}'
       && lk != 145110              // 'preceding-sibling' '}'
       && lk != 145113              // 'processing-instruction' '}'
       && lk != 145115              // 'rename' '}'
       && lk != 145116              // 'replace' '}'
       && lk != 145117              // 'return' '}'
       && lk != 145118              // 'returning' '}'
       && lk != 145119              // 'revalidation' '}'
       && lk != 145121              // 'satisfies' '}'
       && lk != 145122              // 'schema' '}'
       && lk != 145123              // 'schema-attribute' '}'
       && lk != 145124              // 'schema-element' '}'
       && lk != 145125              // 'score' '}'
       && lk != 145126              // 'self' '}'
       && lk != 145131              // 'sliding' '}'
       && lk != 145132              // 'some' '}'
       && lk != 145133              // 'stable' '}'
       && lk != 145134              // 'start' '}'
       && lk != 145137              // 'strict' '}'
       && lk != 145139              // 'structured-item' '}'
       && lk != 145140              // 'switch' '}'
       && lk != 145141              // 'text' '}'
       && lk != 145145              // 'to' '}'
       && lk != 145146              // 'treat' '}'
       && lk != 145147              // 'try' '}'
       && lk != 145148              // 'tumbling' '}'
       && lk != 145149              // 'type' '}'
       && lk != 145150              // 'typeswitch' '}'
       && lk != 145151              // 'union' '}'
       && lk != 145153              // 'unordered' '}'
       && lk != 145154              // 'updating' '}'
       && lk != 145157              // 'validate' '}'
       && lk != 145158              // 'value' '}'
       && lk != 145159              // 'variable' '}'
       && lk != 145160              // 'version' '}'
       && lk != 145163              // 'where' '}'
       && lk != 145164              // 'while' '}'
       && lk != 145167              // 'with' '}'
       && lk != 145171)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16135               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 283)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 283)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 251:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 263:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 268:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17676                 // 'while' '('
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27413                 // '{' ';'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36117                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38677                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39701                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40213                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40725                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41749                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43285                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44309                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45333                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45845                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46357                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46869                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47893                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48405                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49429                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50453                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51989                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52501                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53013                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54037                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55573                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56085                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56597                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58133                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60693                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61205                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61717                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62229                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62741                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63253                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64789                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65813                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66325                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67349                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67861                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68373                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68885                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69397                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70421                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74517                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75029                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76053                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77077                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77589                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78101                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78613                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79125                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79637                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81685                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82197                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82709                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83733                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84245                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84757                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85269                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87317                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87829                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88341                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89365                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90389                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91413                 // '{' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 91680                 // '%' 'map'
     || lk == 91925                 // '{' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 92704                 // '%' 'mod'
     || lk == 92949                 // '{' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93216                 // '%' 'modify'
     || lk == 93461                 // '{' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 93728                 // '%' 'module'
     || lk == 93973                 // '{' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 94752                 // '%' 'namespace'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95264                 // '%' 'namespace-node'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 95776                 // '%' 'ne'
     || lk == 96021                 // '{' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98336                 // '%' 'node'
     || lk == 98581                 // '{' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 98848                 // '%' 'nodes'
     || lk == 99093                 // '{' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 99872                 // '%' 'object'
     || lk == 100117                // '{' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 101920                // '%' 'only'
     || lk == 102165                // '{' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102432                // '%' 'option'
     || lk == 102677                // '{' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 102944                // '%' 'or'
     || lk == 103189                // '{' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103456                // '%' 'order'
     || lk == 103701                // '{' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 103968                // '%' 'ordered'
     || lk == 104213                // '{' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 104480                // '%' 'ordering'
     || lk == 104725                // '{' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 106016                // '%' 'parent'
     || lk == 106261                // '{' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109088                // '%' 'preceding'
     || lk == 109333                // '{' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 109600                // '%' 'preceding-sibling'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 111136                // '%' 'processing-instruction'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112160                // '%' 'rename'
     || lk == 112405                // '{' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 112672                // '%' 'replace'
     || lk == 112917                // '{' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113184                // '%' 'return'
     || lk == 113429                // '{' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 113696                // '%' 'returning'
     || lk == 113941                // '{' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 114208                // '%' 'revalidation'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115232                // '%' 'satisfies'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 115744                // '%' 'schema'
     || lk == 115989                // '{' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116256                // '%' 'schema-attribute'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 116768                // '%' 'schema-element'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117280                // '%' 'score'
     || lk == 117525                // '{' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 117792                // '%' 'self'
     || lk == 118037                // '{' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120352                // '%' 'sliding'
     || lk == 120597                // '{' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 120864                // '%' 'some'
     || lk == 121109                // '{' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121376                // '%' 'stable'
     || lk == 121621                // '{' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 121888                // '%' 'start'
     || lk == 122133                // '{' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 123424                // '%' 'strict'
     || lk == 123669                // '{' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124448                // '%' 'structured-item'
     || lk == 124693                // '{' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 124960                // '%' 'switch'
     || lk == 125205                // '{' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 125472                // '%' 'text'
     || lk == 125717                // '{' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 127520                // '%' 'to'
     || lk == 127765                // '{' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128032                // '%' 'treat'
     || lk == 128277                // '{' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 128544                // '%' 'try'
     || lk == 128789                // '{' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129056                // '%' 'tumbling'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 129568                // '%' 'type'
     || lk == 129813                // '{' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130080                // '%' 'typeswitch'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 130592                // '%' 'union'
     || lk == 130837                // '{' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 131616                // '%' 'unordered'
     || lk == 131861                // '{' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 132128                // '%' 'updating'
     || lk == 132373                // '{' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 133664                // '%' 'validate'
     || lk == 133909                // '{' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134176                // '%' 'value'
     || lk == 134421                // '{' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 134688                // '%' 'variable'
     || lk == 134933                // '{' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 135200                // '%' 'version'
     || lk == 135445                // '{' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 136736                // '%' 'where'
     || lk == 136981                // '{' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 137248                // '%' 'while'
     || lk == 137493                // '{' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 138784                // '%' 'with'
     || lk == 139029                // '{' 'with'
     || lk == 140831                // '$' 'xquery'
     || lk == 140832                // '%' 'xquery'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 113796:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17652:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 142075:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17662:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16135:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 53:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 251:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 263:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 268:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17676                 // 'while' '('
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27413                 // '{' ';'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36117                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38677                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39701                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40213                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40725                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41749                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43285                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44309                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45333                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45845                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46357                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46869                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47893                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48405                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49429                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50453                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51989                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52501                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53013                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54037                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55573                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56085                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56597                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58133                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60693                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61205                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61717                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62229                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62741                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63253                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64789                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65813                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66325                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67349                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67861                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68373                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68885                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69397                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70421                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74517                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75029                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76053                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77077                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77589                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78101                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78613                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79125                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79637                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81685                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82197                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82709                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83733                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84245                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84757                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85269                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87317                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87829                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88341                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89365                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90389                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91413                 // '{' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 91680                 // '%' 'map'
     || lk == 91925                 // '{' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 92704                 // '%' 'mod'
     || lk == 92949                 // '{' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93216                 // '%' 'modify'
     || lk == 93461                 // '{' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 93728                 // '%' 'module'
     || lk == 93973                 // '{' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 94752                 // '%' 'namespace'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95264                 // '%' 'namespace-node'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 95776                 // '%' 'ne'
     || lk == 96021                 // '{' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98336                 // '%' 'node'
     || lk == 98581                 // '{' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 98848                 // '%' 'nodes'
     || lk == 99093                 // '{' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 99872                 // '%' 'object'
     || lk == 100117                // '{' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 101920                // '%' 'only'
     || lk == 102165                // '{' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102432                // '%' 'option'
     || lk == 102677                // '{' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 102944                // '%' 'or'
     || lk == 103189                // '{' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103456                // '%' 'order'
     || lk == 103701                // '{' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 103968                // '%' 'ordered'
     || lk == 104213                // '{' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 104480                // '%' 'ordering'
     || lk == 104725                // '{' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 106016                // '%' 'parent'
     || lk == 106261                // '{' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109088                // '%' 'preceding'
     || lk == 109333                // '{' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 109600                // '%' 'preceding-sibling'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 111136                // '%' 'processing-instruction'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112160                // '%' 'rename'
     || lk == 112405                // '{' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 112672                // '%' 'replace'
     || lk == 112917                // '{' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113184                // '%' 'return'
     || lk == 113429                // '{' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 113696                // '%' 'returning'
     || lk == 113941                // '{' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 114208                // '%' 'revalidation'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115232                // '%' 'satisfies'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 115744                // '%' 'schema'
     || lk == 115989                // '{' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116256                // '%' 'schema-attribute'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 116768                // '%' 'schema-element'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117280                // '%' 'score'
     || lk == 117525                // '{' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 117792                // '%' 'self'
     || lk == 118037                // '{' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120352                // '%' 'sliding'
     || lk == 120597                // '{' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 120864                // '%' 'some'
     || lk == 121109                // '{' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121376                // '%' 'stable'
     || lk == 121621                // '{' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 121888                // '%' 'start'
     || lk == 122133                // '{' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 123424                // '%' 'strict'
     || lk == 123669                // '{' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124448                // '%' 'structured-item'
     || lk == 124693                // '{' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 124960                // '%' 'switch'
     || lk == 125205                // '{' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 125472                // '%' 'text'
     || lk == 125717                // '{' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 127520                // '%' 'to'
     || lk == 127765                // '{' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128032                // '%' 'treat'
     || lk == 128277                // '{' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 128544                // '%' 'try'
     || lk == 128789                // '{' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129056                // '%' 'tumbling'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 129568                // '%' 'type'
     || lk == 129813                // '{' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130080                // '%' 'typeswitch'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 130592                // '%' 'union'
     || lk == 130837                // '{' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 131616                // '%' 'unordered'
     || lk == 131861                // '{' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 132128                // '%' 'updating'
     || lk == 132373                // '{' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 133664                // '%' 'validate'
     || lk == 133909                // '{' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134176                // '%' 'value'
     || lk == 134421                // '{' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 134688                // '%' 'variable'
     || lk == 134933                // '{' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 135200                // '%' 'version'
     || lk == 135445                // '{' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 136736                // '%' 'where'
     || lk == 136981                // '{' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 137248                // '%' 'while'
     || lk == 137493                // '{' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 138784                // '%' 'with'
     || lk == 139029                // '{' 'with'
     || lk == 140831                // '$' 'xquery'
     || lk == 140832                // '%' 'xquery'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 113796:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      try_IfStatement();
      break;
    case 17652:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 142075:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17662:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16135:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 53:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(53);                   // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(277);                   // '{'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(283);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(277);                  // '{'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(283);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(86);                    // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(176);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(86);                   // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(176);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(102);                   // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(176);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(102);                  // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(176);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(132);                   // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consume(222);                   // 'returning'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(132);                  // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consumeT(222);                  // 'returning'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(152);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(246);                   // 'then'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(122);                   // 'else'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(152);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(246);                  // 'then'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(122);                  // 'else'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(244);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(244);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(88);                  // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(88);                 // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(251);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(91);                  // 'catch'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(279);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92763               // 'catch' 'mod'
       || lk == 95835               // 'catch' 'ne'
       || lk == 103003              // 'catch' 'or'
       || lk == 127579              // 'catch' 'to'
       || lk == 128091              // 'catch' 'treat'
       || lk == 130651)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(91);           // 'catch'
            lookahead1W(258);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 91739               // 'catch' 'map'
       && lk != 93275               // 'catch' 'modify'
       && lk != 93787               // 'catch' 'module'
       && lk != 94811               // 'catch' 'namespace'
       && lk != 95323               // 'catch' 'namespace-node'
       && lk != 98395               // 'catch' 'node'
       && lk != 98907               // 'catch' 'nodes'
       && lk != 99931               // 'catch' 'object'
       && lk != 101979              // 'catch' 'only'
       && lk != 102491              // 'catch' 'option'
       && lk != 103515              // 'catch' 'order'
       && lk != 104027              // 'catch' 'ordered'
       && lk != 104539              // 'catch' 'ordering'
       && lk != 106075              // 'catch' 'parent'
       && lk != 109147              // 'catch' 'preceding'
       && lk != 109659              // 'catch' 'preceding-sibling'
       && lk != 111195              // 'catch' 'processing-instruction'
       && lk != 112219              // 'catch' 'rename'
       && lk != 112731              // 'catch' 'replace'
       && lk != 113243              // 'catch' 'return'
       && lk != 113755              // 'catch' 'returning'
       && lk != 114267              // 'catch' 'revalidation'
       && lk != 115291              // 'catch' 'satisfies'
       && lk != 115803              // 'catch' 'schema'
       && lk != 116315              // 'catch' 'schema-attribute'
       && lk != 116827              // 'catch' 'schema-element'
       && lk != 117339              // 'catch' 'score'
       && lk != 117851              // 'catch' 'self'
       && lk != 120411              // 'catch' 'sliding'
       && lk != 120923              // 'catch' 'some'
       && lk != 121435              // 'catch' 'stable'
       && lk != 121947              // 'catch' 'start'
       && lk != 123483              // 'catch' 'strict'
       && lk != 124507              // 'catch' 'structured-item'
       && lk != 125019              // 'catch' 'switch'
       && lk != 125531              // 'catch' 'text'
       && lk != 128603              // 'catch' 'try'
       && lk != 129115              // 'catch' 'tumbling'
       && lk != 129627              // 'catch' 'type'
       && lk != 130139              // 'catch' 'typeswitch'
       && lk != 131675              // 'catch' 'unordered'
       && lk != 132187              // 'catch' 'updating'
       && lk != 133723              // 'catch' 'validate'
       && lk != 134235              // 'catch' 'value'
       && lk != 134747              // 'catch' 'variable'
       && lk != 135259              // 'catch' 'version'
       && lk != 136795              // 'catch' 'where'
       && lk != 137307              // 'catch' 'while'
       && lk != 138843              // 'catch' 'with'
       && lk != 140891)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(251);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(91);                   // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(279);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92763               // 'catch' 'mod'
       || lk == 95835               // 'catch' 'ne'
       || lk == 103003              // 'catch' 'or'
       || lk == 127579              // 'catch' 'to'
       || lk == 128091              // 'catch' 'treat'
       || lk == 130651)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(91);           // 'catch'
            lookahead1W(258);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 91739               // 'catch' 'map'
       && lk != 93275               // 'catch' 'modify'
       && lk != 93787               // 'catch' 'module'
       && lk != 94811               // 'catch' 'namespace'
       && lk != 95323               // 'catch' 'namespace-node'
       && lk != 98395               // 'catch' 'node'
       && lk != 98907               // 'catch' 'nodes'
       && lk != 99931               // 'catch' 'object'
       && lk != 101979              // 'catch' 'only'
       && lk != 102491              // 'catch' 'option'
       && lk != 103515              // 'catch' 'order'
       && lk != 104027              // 'catch' 'ordered'
       && lk != 104539              // 'catch' 'ordering'
       && lk != 106075              // 'catch' 'parent'
       && lk != 109147              // 'catch' 'preceding'
       && lk != 109659              // 'catch' 'preceding-sibling'
       && lk != 111195              // 'catch' 'processing-instruction'
       && lk != 112219              // 'catch' 'rename'
       && lk != 112731              // 'catch' 'replace'
       && lk != 113243              // 'catch' 'return'
       && lk != 113755              // 'catch' 'returning'
       && lk != 114267              // 'catch' 'revalidation'
       && lk != 115291              // 'catch' 'satisfies'
       && lk != 115803              // 'catch' 'schema'
       && lk != 116315              // 'catch' 'schema-attribute'
       && lk != 116827              // 'catch' 'schema-element'
       && lk != 117339              // 'catch' 'score'
       && lk != 117851              // 'catch' 'self'
       && lk != 120411              // 'catch' 'sliding'
       && lk != 120923              // 'catch' 'some'
       && lk != 121435              // 'catch' 'stable'
       && lk != 121947              // 'catch' 'start'
       && lk != 123483              // 'catch' 'strict'
       && lk != 124507              // 'catch' 'structured-item'
       && lk != 125019              // 'catch' 'switch'
       && lk != 125531              // 'catch' 'text'
       && lk != 128603              // 'catch' 'try'
       && lk != 129115              // 'catch' 'tumbling'
       && lk != 129627              // 'catch' 'type'
       && lk != 130139              // 'catch' 'typeswitch'
       && lk != 131675              // 'catch' 'unordered'
       && lk != 132187              // 'catch' 'updating'
       && lk != 133723              // 'catch' 'validate'
       && lk != 134235              // 'catch' 'value'
       && lk != 134747              // 'catch' 'variable'
       && lk != 135259              // 'catch' 'version'
       && lk != 136795              // 'catch' 'where'
       && lk != 137307              // 'catch' 'while'
       && lk != 138843              // 'catch' 'with'
       && lk != 140891)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(91);                 // 'catch'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(254);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(254);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(88);                    // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(88);                   // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(263);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(53);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(263);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consumeT(52);                 // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consumeT(52);               // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(53);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(268);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(268);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    consumeT(53);                   // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 251:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17652:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 142075:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17662:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 251:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      try_IfExpr();
      break;
    case 17652:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 142075:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17662:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'replace'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 236:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 134364)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          lk = -6;
        }
        catch (p6A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16108:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 98463:                     // 'insert' 'node'
    case 98975:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 98414:                     // 'delete' 'node'
    case 98926:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 98523:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case -6:
    case 98524:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85211:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case -11:
      parse_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'replace'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 236:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 134364)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          memoize(9, e0A, -6);
          lk = -13;
        }
        catch (p6A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16108:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 98463:                     // 'insert' 'node'
    case 98975:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 98414:                     // 'delete' 'node'
    case 98926:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 98523:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case -6:
    case 98524:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85211:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case -11:
      try_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(159);              // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        consumeT(166);              // 'json'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(163);              // 'into'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108625)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(81);         // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              consumeT(212);        // 'position'
              lookahead1W(271);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(81);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(212);            // 'position'
          lookahead1W(271);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(159);                 // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consume(166);                 // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      consume(163);                 // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108625)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(81);           // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            consumeT(212);          // 'position'
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(11, e0, lk);
        }
      }
      if (lk == -1)
      {
        consume(81);                // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        consume(212);               // 'position'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      consume(159);                 // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consume(166);                 // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructorList();
      consume(163);                 // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(159);              // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        consumeT(166);              // 'json'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(163);              // 'into'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108625)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(81);         // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              consumeT(212);        // 'position'
              lookahead1W(271);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(81);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(212);            // 'position'
          lookahead1W(271);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        memoize(10, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(159);                // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consumeT(166);                // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      consumeT(163);                // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108625)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(81);           // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            consumeT(212);          // 'position'
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            memoize(11, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(11, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        consumeT(81);               // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        consumeT(212);              // 'position'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      consumeT(159);                // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consumeT(166);                // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PairConstructorList();
      consumeT(163);                // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(219);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(79);                    // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(219);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(79);                   // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(220);                   // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consume(262);                   // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consume(197);                   // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(271);                   // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(220);                  // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consumeT(262);                  // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consumeT(197);                  // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(271);                  // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(77);                    // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(163);                   // 'into'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(77);                   // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(163);                  // 'into'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consume(23);                  // CharRef
      break;
    case 278:                       // '{{'
      consume(278);                 // '{{'
      break;
    case 284:                       // '}}'
      consume(284);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consumeT(23);                 // CharRef
      break;
    case 278:                       // '{{'
      consumeT(278);                // '{{'
      break;
    case 284:                       // '}}'
      consumeT(284);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(119);                   // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(119);                  // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(82);                    // 'attribute'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(277);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(82);                   // 'attribute'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          memoize(12, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(277);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(283);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(217);                   // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(277);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(217);                  // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          memoize(13, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(277);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(283);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(96);                    // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(245);                   // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(245);                  // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 185:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 217:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(261);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 245:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 257:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 187:                       // 'ne'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 229:                       // 'score'
    case 230:                       // 'self'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 36117                 // '{' 'after'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 40213                 // '{' 'array'
     || lk == 40725                 // '{' 'as'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41749                 // '{' 'at'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43285                 // '{' 'before'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44309                 // '{' 'break'
     || lk == 45333                 // '{' 'case'
     || lk == 45845                 // '{' 'cast'
     || lk == 46357                 // '{' 'castable'
     || lk == 46869                 // '{' 'catch'
     || lk == 47893                 // '{' 'child'
     || lk == 48405                 // '{' 'collation'
     || lk == 49429                 // '{' 'comment'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50453                 // '{' 'construction'
     || lk == 51989                 // '{' 'context'
     || lk == 52501                 // '{' 'continue'
     || lk == 53013                 // '{' 'copy'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 54037                 // '{' 'count'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55573                 // '{' 'declare'
     || lk == 56085                 // '{' 'default'
     || lk == 56597                 // '{' 'delete'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 58133                 // '{' 'descending'
     || lk == 60693                 // '{' 'div'
     || lk == 61205                 // '{' 'document'
     || lk == 61717                 // '{' 'document-node'
     || lk == 62229                 // '{' 'element'
     || lk == 62741                 // '{' 'else'
     || lk == 63253                 // '{' 'empty'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64789                 // '{' 'end'
     || lk == 65813                 // '{' 'eq'
     || lk == 66325                 // '{' 'every'
     || lk == 67349                 // '{' 'except'
     || lk == 67861                 // '{' 'exit'
     || lk == 68373                 // '{' 'external'
     || lk == 68885                 // '{' 'first'
     || lk == 69397                 // '{' 'following'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70421                 // '{' 'for'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74517                 // '{' 'function'
     || lk == 75029                 // '{' 'ge'
     || lk == 76053                 // '{' 'group'
     || lk == 77077                 // '{' 'gt'
     || lk == 77589                 // '{' 'idiv'
     || lk == 78101                 // '{' 'if'
     || lk == 78613                 // '{' 'import'
     || lk == 79125                 // '{' 'in'
     || lk == 79637                 // '{' 'index'
     || lk == 81685                 // '{' 'insert'
     || lk == 82197                 // '{' 'instance'
     || lk == 82709                 // '{' 'integrity'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83733                 // '{' 'into'
     || lk == 84245                 // '{' 'is'
     || lk == 84757                 // '{' 'item'
     || lk == 85269                 // '{' 'json'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87317                 // '{' 'last'
     || lk == 87829                 // '{' 'lax'
     || lk == 88341                 // '{' 'le'
     || lk == 89365                 // '{' 'let'
     || lk == 90389                 // '{' 'loop'
     || lk == 91413                 // '{' 'lt'
     || lk == 91925                 // '{' 'map'
     || lk == 92949                 // '{' 'mod'
     || lk == 93461                 // '{' 'modify'
     || lk == 93973                 // '{' 'module'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 96021                 // '{' 'ne'
     || lk == 98581                 // '{' 'node'
     || lk == 99093                 // '{' 'nodes'
     || lk == 100117                // '{' 'object'
     || lk == 102165                // '{' 'only'
     || lk == 102677                // '{' 'option'
     || lk == 103189                // '{' 'or'
     || lk == 103701                // '{' 'order'
     || lk == 104213                // '{' 'ordered'
     || lk == 104725                // '{' 'ordering'
     || lk == 106261                // '{' 'parent'
     || lk == 109333                // '{' 'preceding'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112405                // '{' 'rename'
     || lk == 112917                // '{' 'replace'
     || lk == 113429                // '{' 'return'
     || lk == 113941                // '{' 'returning'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115989                // '{' 'schema'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117525                // '{' 'score'
     || lk == 118037                // '{' 'self'
     || lk == 120597                // '{' 'sliding'
     || lk == 121109                // '{' 'some'
     || lk == 121621                // '{' 'stable'
     || lk == 122133                // '{' 'start'
     || lk == 123669                // '{' 'strict'
     || lk == 124693                // '{' 'structured-item'
     || lk == 125205                // '{' 'switch'
     || lk == 125717                // '{' 'text'
     || lk == 127765                // '{' 'to'
     || lk == 128277                // '{' 'treat'
     || lk == 128789                // '{' 'try'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129813                // '{' 'type'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130837                // '{' 'union'
     || lk == 131861                // '{' 'unordered'
     || lk == 132373                // '{' 'updating'
     || lk == 133909                // '{' 'validate'
     || lk == 134421                // '{' 'value'
     || lk == 134933                // '{' 'variable'
     || lk == 135445                // '{' 'version'
     || lk == 136981                // '{' 'where'
     || lk == 137493                // '{' 'while'
     || lk == 139029                // '{' 'with'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 142027:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 142081:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15035:                     // 'ne' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 142003:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case -11:
    case 27413:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -12:
      parse_ObjectConstructor();
      break;
    case 68:                        // '['
      parse_ArrayConstructor();
      break;
    case 64:                        // '?'
      parse_UnaryLookup();
      break;
    case 279:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 185:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 217:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 277:                       // '{'
      lookahead2W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(261);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 245:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 257:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 187:                       // 'ne'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 229:                       // 'score'
    case 230:                       // 'self'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 36117                 // '{' 'after'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 40213                 // '{' 'array'
     || lk == 40725                 // '{' 'as'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41749                 // '{' 'at'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43285                 // '{' 'before'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44309                 // '{' 'break'
     || lk == 45333                 // '{' 'case'
     || lk == 45845                 // '{' 'cast'
     || lk == 46357                 // '{' 'castable'
     || lk == 46869                 // '{' 'catch'
     || lk == 47893                 // '{' 'child'
     || lk == 48405                 // '{' 'collation'
     || lk == 49429                 // '{' 'comment'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50453                 // '{' 'construction'
     || lk == 51989                 // '{' 'context'
     || lk == 52501                 // '{' 'continue'
     || lk == 53013                 // '{' 'copy'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 54037                 // '{' 'count'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55573                 // '{' 'declare'
     || lk == 56085                 // '{' 'default'
     || lk == 56597                 // '{' 'delete'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 58133                 // '{' 'descending'
     || lk == 60693                 // '{' 'div'
     || lk == 61205                 // '{' 'document'
     || lk == 61717                 // '{' 'document-node'
     || lk == 62229                 // '{' 'element'
     || lk == 62741                 // '{' 'else'
     || lk == 63253                 // '{' 'empty'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64789                 // '{' 'end'
     || lk == 65813                 // '{' 'eq'
     || lk == 66325                 // '{' 'every'
     || lk == 67349                 // '{' 'except'
     || lk == 67861                 // '{' 'exit'
     || lk == 68373                 // '{' 'external'
     || lk == 68885                 // '{' 'first'
     || lk == 69397                 // '{' 'following'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70421                 // '{' 'for'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74517                 // '{' 'function'
     || lk == 75029                 // '{' 'ge'
     || lk == 76053                 // '{' 'group'
     || lk == 77077                 // '{' 'gt'
     || lk == 77589                 // '{' 'idiv'
     || lk == 78101                 // '{' 'if'
     || lk == 78613                 // '{' 'import'
     || lk == 79125                 // '{' 'in'
     || lk == 79637                 // '{' 'index'
     || lk == 81685                 // '{' 'insert'
     || lk == 82197                 // '{' 'instance'
     || lk == 82709                 // '{' 'integrity'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83733                 // '{' 'into'
     || lk == 84245                 // '{' 'is'
     || lk == 84757                 // '{' 'item'
     || lk == 85269                 // '{' 'json'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87317                 // '{' 'last'
     || lk == 87829                 // '{' 'lax'
     || lk == 88341                 // '{' 'le'
     || lk == 89365                 // '{' 'let'
     || lk == 90389                 // '{' 'loop'
     || lk == 91413                 // '{' 'lt'
     || lk == 91925                 // '{' 'map'
     || lk == 92949                 // '{' 'mod'
     || lk == 93461                 // '{' 'modify'
     || lk == 93973                 // '{' 'module'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 96021                 // '{' 'ne'
     || lk == 98581                 // '{' 'node'
     || lk == 99093                 // '{' 'nodes'
     || lk == 100117                // '{' 'object'
     || lk == 102165                // '{' 'only'
     || lk == 102677                // '{' 'option'
     || lk == 103189                // '{' 'or'
     || lk == 103701                // '{' 'order'
     || lk == 104213                // '{' 'ordered'
     || lk == 104725                // '{' 'ordering'
     || lk == 106261                // '{' 'parent'
     || lk == 109333                // '{' 'preceding'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112405                // '{' 'rename'
     || lk == 112917                // '{' 'replace'
     || lk == 113429                // '{' 'return'
     || lk == 113941                // '{' 'returning'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115989                // '{' 'schema'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117525                // '{' 'score'
     || lk == 118037                // '{' 'self'
     || lk == 120597                // '{' 'sliding'
     || lk == 121109                // '{' 'some'
     || lk == 121621                // '{' 'stable'
     || lk == 122133                // '{' 'start'
     || lk == 123669                // '{' 'strict'
     || lk == 124693                // '{' 'structured-item'
     || lk == 125205                // '{' 'switch'
     || lk == 125717                // '{' 'text'
     || lk == 127765                // '{' 'to'
     || lk == 128277                // '{' 'treat'
     || lk == 128789                // '{' 'try'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129813                // '{' 'type'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130837                // '{' 'union'
     || lk == 131861                // '{' 'unordered'
     || lk == 132373                // '{' 'updating'
     || lk == 133909                // '{' 'validate'
     || lk == 134421                // '{' 'value'
     || lk == 134933                // '{' 'variable'
     || lk == 135445                // '{' 'version'
     || lk == 136981                // '{' 'where'
     || lk == 137493                // '{' 'while'
     || lk == 139029                // '{' 'with'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(14, e0A, -11);
          lk = -16;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 142027:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 142081:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15035:                     // 'ne' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 142003:                    // 'map' '{'
      try_MapConstructor();
      break;
    case -11:
    case 27413:                     // '{' ';'
      try_BlockExpr();
      break;
    case -12:
      try_ObjectConstructor();
      break;
    case 68:                        // '['
      try_ArrayConstructor();
      break;
    case 64:                        // '?'
      try_UnaryLookup();
      break;
    case 279:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -16:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(279);                   // '{|'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 282)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(282);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(279);                  // '{|'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 282)                  // '|}'
    {
      try_Expr();
    }
    consumeT(282);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_PairConstructorList();
    }
    consumeT(283);                  // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    consume(68);                    // '['
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    consume(69);                    // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    consumeT(68);                   // '['
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      try_Expr();
    }
    consumeT(69);                   // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(277);                   // '{'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(277);                  // '{'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(283);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(145);                   // 'function'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(283);                 // '}'
      break;
    default:
      consume(133);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }
}

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 285; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3620 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
}

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;
  this.name = name;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  }
}

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;
  this.name = name;
  this.children = children;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  }
}

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288
];

XQueryParser.TRANSITION =
[
  /*     0 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*    15 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*    30 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*    45 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*    60 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*    75 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*    90 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   105 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   120 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   135 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   150 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   165 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   180 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   195 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   210 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   225 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   240 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   255 */ 21679, 18176, 18191, 18195, 18195, 18195, 18224, 18195, 18195, 18195, 18195, 18236, 18195, 18195, 18195,
  /*   270 */ 18195, 18211, 18195, 18195, 18252, 21678, 21679, 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679,
  /*   285 */ 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120,
  /*   300 */ 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665,
  /*   315 */ 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646,
  /*   330 */ 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655,
  /*   345 */ 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917,
  /*   360 */ 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107,
  /*   375 */ 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289,
  /*   390 */ 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539,
  /*   405 */ 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879,
  /*   420 */ 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127,
  /*   435 */ 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345,
  /*   450 */ 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583,
  /*   465 */ 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808,
  /*   480 */ 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   495 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   510 */ 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21679, 21679, 21679, 21679, 42157, 50353, 50361,
  /*   525 */ 20946, 20958, 20970, 45007, 27525, 21012, 21678, 21679, 21679, 21581, 21679, 21679, 50689, 24232, 21679,
  /*   540 */ 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 20792, 21028, 19825, 18311, 18329, 18345,
  /*   555 */ 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086,
  /*   570 */ 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679,
  /*   585 */ 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821,
  /*   600 */ 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894,
  /*   615 */ 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473,
  /*   630 */ 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236,
  /*   645 */ 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785,
  /*   660 */ 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738,
  /*   675 */ 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110,
  /*   690 */ 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178,
  /*   705 */ 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545,
  /*   720 */ 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427,
  /*   735 */ 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   750 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*   765 */ 21679, 21679, 21679, 21062, 25910, 21679, 21679, 21679, 28355, 21679, 21679, 18630, 18839, 25785, 21679,
  /*   780 */ 21679, 21679, 21679, 19591, 19900, 18267, 21078, 21678, 21679, 21679, 21581, 21679, 21679, 23828, 21679,
  /*   795 */ 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283, 19536, 18311, 18329,
  /*   810 */ 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980,
  /*   825 */ 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679,
  /*   840 */ 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795,
  /*   855 */ 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592,
  /*   870 */ 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076,
  /*   885 */ 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252,
  /*   900 */ 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498,
  /*   915 */ 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861,
  /*   930 */ 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020,
  /*   945 */ 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162,
  /*   960 */ 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136,
  /*   975 */ 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770,
  /*   990 */ 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1005 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1020 */ 21679, 21679, 21679, 21679, 21094, 21198, 21679, 21679, 21679, 28803, 21679, 21679, 39589, 21679, 42157,
  /*  1035 */ 21225, 21140, 21166, 21156, 21188, 21219, 27151, 21241, 21678, 21679, 21679, 21581, 21257, 21679, 43821,
  /*  1050 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283, 25262, 18311,
  /*  1065 */ 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298,
  /*  1080 */ 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679,
  /*  1095 */ 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 21277, 21285,
  /*  1110 */ 18795, 20821, 20655, 18814, 21304, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446,
  /*  1125 */ 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034,
  /*  1140 */ 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911,
  /*  1155 */ 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475,
  /*  1170 */ 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843,
  /*  1185 */ 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993,
  /*  1200 */ 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339,
  /*  1215 */ 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532,
  /*  1230 */ 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871,
  /*  1245 */ 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1260 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1275 */ 21679, 21679, 21679, 21679, 21679, 20927, 21325, 21679, 21679, 21679, 30379, 21330, 21679, 40493, 21679,
  /*  1290 */ 21347, 49483, 21409, 21679, 21416, 21679, 45086, 21398, 21012, 21678, 21679, 21679, 21581, 21679, 21679,
  /*  1305 */ 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283, 19825,
  /*  1320 */ 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491,
  /*  1335 */ 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623,
  /*  1350 */ 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689,
  /*  1365 */ 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855,
  /*  1380 */ 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307,
  /*  1395 */ 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215,
  /*  1410 */ 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452,
  /*  1425 */ 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811,
  /*  1440 */ 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969,
  /*  1455 */ 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172,
  /*  1470 */ 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554,
  /*  1485 */ 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754,
  /*  1500 */ 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1515 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1530 */ 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21467, 21679, 21679,
  /*  1545 */ 21679, 48072, 21679, 21679, 21432, 21679, 21679, 34842, 21454, 21012, 21678, 21679, 21679, 21581, 21679,
  /*  1560 */ 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283,
  /*  1575 */ 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475,
  /*  1590 */ 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679,
  /*  1605 */ 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772,
  /*  1620 */ 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833,
  /*  1635 */ 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295,
  /*  1650 */ 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199,
  /*  1665 */ 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546,
  /*  1680 */ 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759,
  /*  1695 */ 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773,
  /*  1710 */ 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323,
  /*  1725 */ 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499,
  /*  1740 */ 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623,
  /*  1755 */ 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1770 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  1785 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21679, 21679,
  /*  1800 */ 21679, 21679, 40432, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21486, 21502, 21679, 21679, 21581,
  /*  1815 */ 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817,
  /*  1830 */ 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453,
  /*  1845 */ 18475, 18491, 19298, 20004, 19086, 25665, 18507, 21041, 21520, 19091, 25670, 18512, 21046, 18559, 21679,
  /*  1860 */ 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976,
  /*  1875 */ 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679,
  /*  1890 */ 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996,
  /*  1905 */ 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173,
  /*  1920 */ 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530,
  /*  1935 */ 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729,
  /*  1950 */ 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953,
  /*  1965 */ 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307,
  /*  1980 */ 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483,
  /*  1995 */ 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543,
  /*  2010 */ 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  2025 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  2040 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21562, 21578, 21679, 21679, 21679, 31859, 21679,
  /*  2055 */ 21679, 18901, 21172, 21597, 21679, 21679, 21679, 21679, 20930, 19937, 21663, 21696, 21712, 21679, 21679,
  /*  2070 */ 21581, 21679, 21679, 50689, 21729, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291,
  /*  2085 */ 18817, 18283, 20034, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437,
  /*  2100 */ 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559,
  /*  2115 */ 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631,
  /*  2130 */ 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327,
  /*  2145 */ 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567,
  /*  2160 */ 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360,
  /*  2175 */ 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505,
  /*  2190 */ 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708,
  /*  2205 */ 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932,
  /*  2220 */ 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291,
  /*  2235 */ 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467,
  /*  2250 */ 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721,
  /*  2265 */ 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679,
  /*  2280 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  2295 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21748, 21763, 21791, 21791, 21791, 21770,
  /*  2310 */ 21786, 21791, 21796, 21886, 21812, 21827, 21912, 21880, 21853, 21840, 21864, 21902, 21012, 21678, 21679,
  /*  2325 */ 21679, 49751, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655,
  /*  2340 */ 18291, 18817, 18283, 19825, 18311, 18329, 18345, 49069, 21679, 41088, 21679, 21679, 18384, 18404, 18432,
  /*  2355 */ 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046,
  /*  2370 */ 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743,
  /*  2385 */ 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680,
  /*  2400 */ 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049,
  /*  2415 */ 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326,
  /*  2430 */ 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482,
  /*  2445 */ 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675,
  /*  2460 */ 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916,
  /*  2475 */ 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256,
  /*  2490 */ 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451,
  /*  2505 */ 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696,
  /*  2520 */ 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679,
  /*  2535 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  2550 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 33421, 21679, 21679, 21679,
  /*  2565 */ 32573, 21928, 21679, 41415, 21934, 42157, 33421, 21679, 21951, 21957, 21973, 33685, 33428, 22010, 21678,
  /*  2580 */ 21679, 21679, 21732, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458,
  /*  2595 */ 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 30074, 21679, 41088, 21679, 21679, 18384, 18404,
  /*  2610 */ 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512,
  /*  2625 */ 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977,
  /*  2640 */ 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656,
  /*  2655 */ 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969,
  /*  2670 */ 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144,
  /*  2685 */ 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459,
  /*  2700 */ 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560,
  /*  2715 */ 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895,
  /*  2730 */ 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180,
  /*  2745 */ 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464,
  /*  2760 */ 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672,
  /*  2775 */ 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679,
  /*  2790 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  2805 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 50596, 21679, 21679,
  /*  2820 */ 21679, 30071, 21679, 21679, 21679, 40881, 18416, 22050, 22026, 22044, 22028, 22066, 22095, 22110, 21012,
  /*  2835 */ 21678, 21679, 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701,
  /*  2850 */ 18458, 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384,
  /*  2865 */ 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 22126, 19091, 25670,
  /*  2880 */ 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727,
  /*  2895 */ 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824,
  /*  2910 */ 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771,
  /*  2925 */ 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473,
  /*  2940 */ 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443,
  /*  2955 */ 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646,
  /*  2970 */ 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157,
  /*  2985 */ 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266,
  /*  3000 */ 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435,
  /*  3015 */ 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647,
  /*  3030 */ 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679,
  /*  3045 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3060 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679,
  /*  3075 */ 21679, 21679, 30071, 21679, 21679, 21679, 41029, 18953, 22181, 22152, 22175, 22152, 22159, 45406, 22152,
  /*  3090 */ 21012, 21678, 21679, 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3105 */ 20701, 18458, 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 50447, 21679, 21679,
  /*  3120 */ 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091,
  /*  3135 */ 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904,
  /*  3150 */ 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798,
  /*  3165 */ 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705,
  /*  3180 */ 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076,
  /*  3195 */ 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382,
  /*  3210 */ 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679,
  /*  3225 */ 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877,
  /*  3240 */ 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143,
  /*  3255 */ 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409,
  /*  3270 */ 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622,
  /*  3285 */ 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679,
  /*  3300 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3315 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 22201,
  /*  3330 */ 21679, 21679, 21679, 30071, 20988, 21679, 41559, 22197, 35287, 22217, 22268, 22272, 22272, 34110, 20979,
  /*  3345 */ 34100, 21012, 21678, 21679, 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3360 */ 21679, 20701, 18458, 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679,
  /*  3375 */ 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533,
  /*  3390 */ 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716,
  /*  3405 */ 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288,
  /*  3420 */ 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574,
  /*  3435 */ 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034,
  /*  3450 */ 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596,
  /*  3465 */ 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607,
  /*  3480 */ 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736,
  /*  3495 */ 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126,
  /*  3510 */ 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393,
  /*  3525 */ 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309,
  /*  3540 */ 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907,
  /*  3555 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3570 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 22288,
  /*  3585 */ 21679, 21679, 21679, 21679, 30071, 21679, 21679, 21679, 21679, 42157, 22340, 22311, 22334, 22311, 22318,
  /*  3600 */ 47226, 22311, 22356, 21678, 21679, 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679,
  /*  3615 */ 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 22372, 21679, 22391, 21679, 19120, 35275, 50447,
  /*  3630 */ 21679, 22411, 21679, 21679, 21679, 21503, 29115, 31135, 29115, 29115, 30561, 37215, 22429, 37215, 37215,
  /*  3645 */ 22448, 45182, 22682, 22682, 33217, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 48246, 45470, 22467,
  /*  3660 */ 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681,
  /*  3675 */ 22682, 22682, 22682, 22682, 22742, 28044, 21679, 22507, 21679, 21679, 21679, 21679, 21679, 36183, 21679,
  /*  3690 */ 21679, 30551, 21641, 29115, 29115, 29115, 40333, 33555, 22556, 37215, 22577, 37215, 22722, 22595, 22620,
  /*  3705 */ 22682, 22641, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 50392, 21679, 32276, 29115, 22659,
  /*  3720 */ 29115, 29115, 29734, 37215, 33564, 37215, 37215, 22722, 22679, 37548, 22682, 22682, 22682, 41335, 33489,
  /*  3735 */ 21679, 21679, 22699, 21679, 21504, 29115, 29115, 49418, 22663, 37215, 37215, 37215, 22721, 22682, 22682,
  /*  3750 */ 22682, 22738, 33895, 22758, 21679, 44970, 21679, 40330, 22777, 29115, 37213, 22795, 37215, 32713, 22812,
  /*  3765 */ 22682, 42810, 21679, 21679, 22830, 21994, 38586, 29115, 29198, 22851, 36772, 22868, 22682, 28121, 21679,
  /*  3780 */ 41674, 32279, 22902, 42874, 22926, 47739, 22959, 38886, 21362, 23001, 23039, 23073, 49824, 41188, 34627,
  /*  3795 */ 29920, 32278, 40139, 32711, 30024, 23108, 30001, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738,
  /*  3810 */ 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3825 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3840 */ 20927, 21679, 21679, 21679, 21679, 30071, 21679, 21679, 21679, 48727, 42157, 21679, 21679, 21679, 21679,
  /*  3855 */ 21679, 40473, 23138, 23154, 21678, 21679, 21679, 21581, 21679, 21679, 46328, 21679, 21679, 21679, 21679,
  /*  3870 */ 21679, 21679, 21679, 32277, 31689, 37215, 41799, 35924, 41791, 22372, 21679, 21679, 21679, 19120, 21679,
  /*  3885 */ 41088, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 30561, 37215, 37215, 37215,
  /*  3900 */ 37215, 22448, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 48246, 21679,
  /*  3915 */ 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918,
  /*  3930 */ 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  3945 */ 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681,
  /*  3960 */ 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115,
  /*  3975 */ 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682, 41335,
  /*  3990 */ 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431, 22682,
  /*  4005 */ 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713,
  /*  4020 */ 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121,
  /*  4035 */ 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690,
  /*  4050 */ 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038,
  /*  4065 */ 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4080 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4095 */ 21679, 20927, 23170, 21679, 21679, 21679, 39274, 21679, 21679, 21679, 21679, 42157, 22075, 23190, 23208,
  /*  4110 */ 22079, 23230, 43247, 23192, 21012, 21678, 21679, 21679, 21581, 21679, 21679, 50689, 46755, 21679, 40948,
  /*  4125 */ 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120,
  /*  4140 */ 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665,
  /*  4155 */ 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646,
  /*  4170 */ 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655,
  /*  4185 */ 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917,
  /*  4200 */ 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107,
  /*  4215 */ 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289,
  /*  4230 */ 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539,
  /*  4245 */ 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879,
  /*  4260 */ 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127,
  /*  4275 */ 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345,
  /*  4290 */ 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583,
  /*  4305 */ 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808,
  /*  4320 */ 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4335 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4350 */ 21679, 21679, 20927, 23270, 21679, 21679, 21679, 30071, 21679, 21679, 21679, 32420, 42157, 21679, 21679,
  /*  4365 */ 21679, 21679, 21679, 23287, 23302, 23318, 21678, 21679, 21679, 21581, 21679, 21679, 30673, 21679, 21679,
  /*  4380 */ 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 35246, 41791, 22372, 21679, 21679, 21679,
  /*  4395 */ 19120, 21679, 28525, 23334, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 30561, 37215,
  /*  4410 */ 37215, 37215, 37215, 22448, 22682, 22682, 22682, 22625, 38111, 23355, 21679, 21679, 21679, 21679, 21679,
  /*  4425 */ 26246, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215,
  /*  4440 */ 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 41486, 23383, 21679, 21679, 21679, 21679, 21679,
  /*  4455 */ 26933, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 49136, 22490, 37215, 37215, 37215, 37215,
  /*  4470 */ 35202, 22681, 22682, 22682, 22682, 22682, 22741, 34056, 23420, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4485 */ 32276, 29115, 29115, 29115, 29115, 45868, 37215, 37215, 37215, 37215, 35816, 22679, 22682, 22682, 22682,
  /*  4500 */ 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215,
  /*  4515 */ 43980, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215,
  /*  4530 */ 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682,
  /*  4545 */ 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451,
  /*  4560 */ 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160,
  /*  4575 */ 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4590 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4605 */ 21679, 21679, 21679, 20927, 21438, 21679, 21679, 21679, 41379, 19128, 21679, 21679, 23439, 42157, 49893,
  /*  4620 */ 19267, 23476, 23482, 23498, 21679, 50398, 23538, 23554, 21679, 21679, 50216, 23573, 21679, 50689, 21679,
  /*  4635 */ 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18778, 24282, 24456, 24461, 24153, 24599, 18311, 18329,
  /*  4650 */ 18345, 48493, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298, 19060,
  /*  4665 */ 24976, 24315, 23593, 23781, 23619, 24569, 23652, 24208, 23668, 23684, 21679, 21679, 18623, 21679, 21679,
  /*  4680 */ 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19358, 23787, 23991,
  /*  4695 */ 23770, 24282, 24428, 23715, 23743, 23629, 23736, 23720, 23636, 19743, 21679, 18833, 18855, 49446, 45592,
  /*  4710 */ 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 24261, 24518, 24345, 23759,
  /*  4725 */ 24001, 23803, 24165, 24923, 24834, 23844, 23854, 23870, 19742, 18360, 19173, 19199, 19215, 32911, 19252,
  /*  4740 */ 19236, 19289, 19314, 19343, 20596, 19382, 23899, 23950, 23977, 24017, 19366, 24033, 24079, 24095, 24111,
  /*  4755 */ 24560, 24138, 24181, 24229, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 24248, 24277, 24302,
  /*  4770 */ 24331, 24361, 24911, 24819, 24490, 24398, 23883, 19895, 19916, 19932, 19953, 24773, 19969, 19993, 24414,
  /*  4785 */ 24970, 24444, 24804, 24196, 24477, 24748, 49266, 20180, 20256, 20291, 20307, 20323, 24506, 24534, 23961,
  /*  4800 */ 24585, 24615, 24631, 20377, 20393, 20409, 20435, 24881, 24647, 24663, 24679, 20499, 20554, 26288, 24719,
  /*  4815 */ 24695, 20583, 18779, 24286, 24213, 20622, 24711, 24735, 24764, 24789, 23603, 24122, 24850, 24547, 24866,
  /*  4830 */ 23912, 24897, 24939, 24955, 24992, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4845 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  4860 */ 21679, 21679, 21679, 21679, 20927, 48591, 21679, 21679, 21679, 30071, 25017, 21679, 21679, 25012, 23367,
  /*  4875 */ 25033, 25061, 25061, 25061, 25040, 48589, 25056, 21012, 21678, 21679, 21679, 21581, 21679, 21679, 50689,
  /*  4890 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 18283, 19825, 18311,
  /*  4905 */ 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491, 19298,
  /*  4920 */ 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623, 21679,
  /*  4935 */ 21679, 21679, 25077, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689, 21285,
  /*  4950 */ 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 18756, 19408, 25093, 18855, 49446,
  /*  4965 */ 45592, 18894, 25115, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307, 19034,
  /*  4980 */ 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19395, 19419, 19173, 19199, 19215, 32911,
  /*  4995 */ 19252, 19236, 19289, 19314, 19343, 20596, 19382, 25149, 19459, 19482, 19505, 21530, 25194, 25232, 19475,
  /*  5010 */ 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 25248, 19843,
  /*  5025 */ 19861, 20738, 19774, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969, 19993,
  /*  5040 */ 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172, 20339,
  /*  5055 */ 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554, 25532,
  /*  5070 */ 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754, 20871,
  /*  5085 */ 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5100 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5115 */ 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21679, 21679, 21679, 21679,
  /*  5130 */ 48648, 34119, 34127, 34127, 34127, 34134, 41580, 25278, 21012, 21678, 21679, 21679, 21581, 21679, 21679,
  /*  5145 */ 50689, 21679, 21679, 34582, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 25294, 19825,
  /*  5160 */ 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475, 18491,
  /*  5175 */ 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679, 18623,
  /*  5190 */ 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772, 19689,
  /*  5205 */ 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833, 18855,
  /*  5220 */ 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295, 25307,
  /*  5235 */ 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199, 19215,
  /*  5250 */ 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546, 19452,
  /*  5265 */ 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759, 19811,
  /*  5280 */ 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773, 19969,
  /*  5295 */ 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323, 25172,
  /*  5310 */ 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499, 20554,
  /*  5325 */ 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623, 20754,
  /*  5340 */ 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5355 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5370 */ 21679, 21679, 21679, 21679, 21679, 21679, 25323, 48782, 21679, 21679, 21679, 30071, 21679, 21679, 21679,
  /*  5385 */ 21679, 42157, 23239, 23247, 23247, 23247, 23254, 48781, 34734, 21012, 25351, 21679, 21679, 21581, 21679,
  /*  5400 */ 21679, 50689, 21679, 21679, 25371, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817, 25414,
  /*  5415 */ 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475,
  /*  5430 */ 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679, 21679,
  /*  5445 */ 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772,
  /*  5460 */ 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833,
  /*  5475 */ 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295,
  /*  5490 */ 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199,
  /*  5505 */ 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546,
  /*  5520 */ 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759,
  /*  5535 */ 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773,
  /*  5550 */ 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323,
  /*  5565 */ 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499,
  /*  5580 */ 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623,
  /*  5595 */ 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5610 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5625 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25456, 25465, 21679, 21679, 21679, 42469, 21679, 21679,
  /*  5640 */ 21679, 21679, 42157, 23507, 23515, 23515, 23515, 23522, 48850, 36035, 25485, 25501, 21679, 21679, 21581,
  /*  5655 */ 21679, 21679, 50689, 21679, 21679, 25380, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817,
  /*  5670 */ 18283, 20065, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453,
  /*  5685 */ 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679,
  /*  5700 */ 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976,
  /*  5715 */ 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679,
  /*  5730 */ 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996,
  /*  5745 */ 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173,
  /*  5760 */ 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530,
  /*  5775 */ 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729,
  /*  5790 */ 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953,
  /*  5805 */ 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307,
  /*  5820 */ 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483,
  /*  5835 */ 20499, 20554, 25532, 22136, 25545, 25519, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543,
  /*  5850 */ 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5865 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  5880 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25561, 21679, 21679, 21679, 21679, 30071, 42519,
  /*  5895 */ 21679, 21679, 42489, 25335, 21679, 25601, 21679, 42523, 25598, 41948, 25620, 25636, 21678, 21679, 21679,
  /*  5910 */ 21581, 21679, 21679, 50689, 49311, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291,
  /*  5925 */ 20891, 25652, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437,
  /*  5940 */ 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559,
  /*  5955 */ 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631,
  /*  5970 */ 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327,
  /*  5985 */ 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567,
  /*  6000 */ 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360,
  /*  6015 */ 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505,
  /*  6030 */ 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708,
  /*  6045 */ 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932,
  /*  6060 */ 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291,
  /*  6075 */ 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467,
  /*  6090 */ 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721,
  /*  6105 */ 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679,
  /*  6120 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  6135 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071,
  /*  6150 */ 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 21679, 43228, 25686, 21012, 21678, 21679,
  /*  6165 */ 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655,
  /*  6180 */ 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432,
  /*  6195 */ 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046,
  /*  6210 */ 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743,
  /*  6225 */ 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680,
  /*  6240 */ 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049,
  /*  6255 */ 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326,
  /*  6270 */ 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482,
  /*  6285 */ 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675,
  /*  6300 */ 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916,
  /*  6315 */ 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256,
  /*  6330 */ 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451,
  /*  6345 */ 20467, 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696,
  /*  6360 */ 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679,
  /*  6375 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  6390 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 21679,
  /*  6405 */ 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772, 21678,
  /*  6420 */ 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689,
  /*  6435 */ 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  6450 */ 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682,
  /*  6465 */ 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 26930, 21679, 21679, 21679, 21679, 32276, 29115,
  /*  6480 */ 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682,
  /*  6495 */ 22742, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 21679, 21679, 21679, 40330, 29115, 29115,
  /*  6510 */ 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741,
  /*  6525 */ 34056, 23420, 21679, 21679, 21679, 21679, 25860, 21679, 32276, 29115, 29115, 29115, 29115, 48449, 37215,
  /*  6540 */ 37215, 37215, 37215, 33798, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679,
  /*  6555 */ 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682, 22682, 22682, 22682, 33895, 21679,
  /*  6570 */ 21679, 48630, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679,
  /*  6585 */ 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215,
  /*  6600 */ 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711,
  /*  6615 */ 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679,
  /*  6630 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  6645 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679,
  /*  6660 */ 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772,
  /*  6675 */ 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277,
  /*  6690 */ 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679,
  /*  6705 */ 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682,
  /*  6720 */ 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 26930, 21679, 21679, 21679, 21679, 32276,
  /*  6735 */ 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682,
  /*  6750 */ 22682, 22742, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 21679, 21679, 21679, 40330, 29115,
  /*  6765 */ 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682,
  /*  6780 */ 22741, 34056, 23420, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 48449,
  /*  6795 */ 37215, 37215, 37215, 37215, 33798, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679,
  /*  6810 */ 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682, 22682, 22682, 22682, 33895,
  /*  6825 */ 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679,
  /*  6840 */ 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115,
  /*  6855 */ 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139,
  /*  6870 */ 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679,
  /*  6885 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  6900 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679,
  /*  6915 */ 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444,
  /*  6930 */ 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  6945 */ 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679,
  /*  6960 */ 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682,
  /*  6975 */ 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 26930, 32868, 21679, 21679, 21679,
  /*  6990 */ 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682,
  /*  7005 */ 22682, 22682, 22742, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 21679, 21679, 21679, 40330,
  /*  7020 */ 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682,
  /*  7035 */ 22682, 22741, 34056, 23420, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115,
  /*  7050 */ 48449, 37215, 37215, 37215, 37215, 33798, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679,
  /*  7065 */ 21679, 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682, 22682, 22682, 22682,
  /*  7080 */ 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122,
  /*  7095 */ 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279,
  /*  7110 */ 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278,
  /*  7125 */ 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679,
  /*  7140 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7155 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679,
  /*  7170 */ 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 50013, 25723,
  /*  7185 */ 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7200 */ 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679, 19120, 21679, 21679, 21679,
  /*  7215 */ 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107,
  /*  7230 */ 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 26930, 21679, 21679, 21679,
  /*  7245 */ 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681, 22682,
  /*  7260 */ 22682, 22682, 22682, 22742, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 25877, 21679, 21679,
  /*  7275 */ 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682,
  /*  7290 */ 22682, 22682, 22741, 34056, 23420, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115,
  /*  7305 */ 29115, 48449, 37215, 37215, 37215, 37215, 33798, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679,
  /*  7320 */ 21679, 21679, 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682, 22682, 22682,
  /*  7335 */ 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682,
  /*  7350 */ 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674,
  /*  7365 */ 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920,
  /*  7380 */ 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085,
  /*  7395 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7410 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702,
  /*  7425 */ 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 50013,
  /*  7440 */ 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 28979, 21679, 21679, 21679, 21679, 21679,
  /*  7455 */ 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679, 19120, 21679, 28604,
  /*  7470 */ 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215,
  /*  7485 */ 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 26930, 21679, 21679,
  /*  7500 */ 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681,
  /*  7515 */ 22682, 22682, 22682, 22682, 22742, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 21679, 21679,
  /*  7530 */ 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682,
  /*  7545 */ 22682, 22682, 22682, 22741, 34056, 23420, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115,
  /*  7560 */ 29115, 29115, 48449, 37215, 37215, 37215, 37215, 33798, 22679, 22682, 22682, 22682, 22682, 41335, 33489,
  /*  7575 */ 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682, 22682,
  /*  7590 */ 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682,
  /*  7605 */ 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679,
  /*  7620 */ 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755,
  /*  7635 */ 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738,
  /*  7650 */ 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7665 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7680 */ 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679,
  /*  7695 */ 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7710 */ 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679, 19120, 21679,
  /*  7725 */ 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215,
  /*  7740 */ 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7755 */ 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918,
  /*  7770 */ 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7785 */ 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681,
  /*  7800 */ 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115,
  /*  7815 */ 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682, 41335,
  /*  7830 */ 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431, 22682,
  /*  7845 */ 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713,
  /*  7860 */ 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121,
  /*  7875 */ 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690,
  /*  7890 */ 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038,
  /*  7905 */ 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7920 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7935 */ 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679,
  /*  7950 */ 21679, 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  7965 */ 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 35954, 21679, 21679, 21679, 19120,
  /*  7980 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215,
  /*  7995 */ 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8010 */ 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215,
  /*  8025 */ 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8040 */ 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722,
  /*  8055 */ 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276,
  /*  8070 */ 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682,
  /*  8085 */ 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431,
  /*  8100 */ 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215,
  /*  8115 */ 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682,
  /*  8130 */ 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889,
  /*  8145 */ 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980,
  /*  8160 */ 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8175 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8190 */ 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679,
  /*  8205 */ 21679, 21679, 50013, 25723, 27444, 25896, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679,
  /*  8220 */ 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679, 21679,
  /*  8235 */ 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215,
  /*  8250 */ 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8265 */ 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215,
  /*  8280 */ 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8295 */ 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215,
  /*  8310 */ 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8325 */ 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682,
  /*  8340 */ 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215,
  /*  8355 */ 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215,
  /*  8370 */ 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682,
  /*  8385 */ 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451,
  /*  8400 */ 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160,
  /*  8415 */ 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8430 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8445 */ 21679, 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 25929,
  /*  8460 */ 21679, 21679, 21679, 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679,
  /*  8475 */ 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679, 21679,
  /*  8490 */ 21679, 19120, 21679, 21679, 21679, 25950, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374,
  /*  8505 */ 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679,
  /*  8520 */ 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215,
  /*  8535 */ 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679,
  /*  8550 */ 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215,
  /*  8565 */ 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8580 */ 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682,
  /*  8595 */ 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215,
  /*  8610 */ 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213,
  /*  8625 */ 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756,
  /*  8640 */ 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757,
  /*  8655 */ 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524,
  /*  8670 */ 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8685 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8700 */ 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157,
  /*  8715 */ 21679, 21679, 21679, 21679, 40674, 25971, 25986, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679,
  /*  8730 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679,
  /*  8745 */ 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115,
  /*  8760 */ 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679,
  /*  8775 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215,
  /*  8790 */ 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679,
  /*  8805 */ 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215,
  /*  8820 */ 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679,
  /*  8835 */ 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682,
  /*  8850 */ 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215,
  /*  8865 */ 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115,
  /*  8880 */ 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215,
  /*  8895 */ 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019,
  /*  8910 */ 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711,
  /*  8925 */ 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8940 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  8955 */ 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679,
  /*  8970 */ 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679,
  /*  8985 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801,
  /*  9000 */ 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115,
  /*  9015 */ 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679,
  /*  9030 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487,
  /*  9045 */ 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679,
  /*  9060 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215,
  /*  9075 */ 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679,
  /*  9090 */ 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679,
  /*  9105 */ 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 41398, 21679, 21504, 29115, 29115, 29115, 22663,
  /*  9120 */ 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115,
  /*  9135 */ 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214,
  /*  9150 */ 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279,
  /*  9165 */ 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018,
  /*  9180 */ 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9195 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9210 */ 21679, 21679, 21679, 21679, 21679, 21679, 26002, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679,
  /*  9225 */ 21679, 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679,
  /*  9240 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791,
  /*  9255 */ 25801, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115,
  /*  9270 */ 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679,
  /*  9285 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115,
  /*  9300 */ 22487, 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679,
  /*  9315 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490,
  /*  9330 */ 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679,
  /*  9345 */ 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722,
  /*  9360 */ 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115,
  /*  9375 */ 22663, 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330,
  /*  9390 */ 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115,
  /*  9405 */ 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886,
  /*  9420 */ 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024,
  /*  9435 */ 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9450 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9465 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21679, 21679,
  /*  9480 */ 21679, 21679, 42157, 42032, 26023, 26036, 26058, 26070, 42029, 26023, 21012, 21678, 21679, 21679, 21581,
  /*  9495 */ 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291, 18817,
  /*  9510 */ 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 26098, 18384, 18404, 18432, 18437, 18453,
  /*  9525 */ 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679,
  /*  9540 */ 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976,
  /*  9555 */ 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679,
  /*  9570 */ 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996,
  /*  9585 */ 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173,
  /*  9600 */ 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530,
  /*  9615 */ 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729,
  /*  9630 */ 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953,
  /*  9645 */ 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 26116, 20291, 20307,
  /*  9660 */ 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483,
  /*  9675 */ 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543,
  /*  9690 */ 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9705 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9720 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21679,
  /*  9735 */ 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21012, 21678, 21679, 21679,
  /*  9750 */ 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655, 18291,
  /*  9765 */ 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437,
  /*  9780 */ 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559,
  /*  9795 */ 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631,
  /*  9810 */ 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327,
  /*  9825 */ 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567,
  /*  9840 */ 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360,
  /*  9855 */ 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505,
  /*  9870 */ 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708,
  /*  9885 */ 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932,
  /*  9900 */ 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291,
  /*  9915 */ 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467,
  /*  9930 */ 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721,
  /*  9945 */ 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679,
  /*  9960 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /*  9975 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071,
  /*  9990 */ 21679, 21679, 21679, 21679, 42157, 36108, 21679, 26151, 26157, 26173, 21679, 36113, 21012, 21678, 21679,
  /* 10005 */ 21679, 21581, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458, 20655,
  /* 10020 */ 18291, 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432,
  /* 10035 */ 18437, 18453, 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046,
  /* 10050 */ 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743,
  /* 10065 */ 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680,
  /* 10080 */ 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049,
  /* 10095 */ 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326,
  /* 10110 */ 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482,
  /* 10125 */ 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675,
  /* 10140 */ 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916,
  /* 10155 */ 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256,
  /* 10170 */ 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 26202, 20409, 20435, 20464, 20451,
  /* 10185 */ 20467, 20483, 26218, 20554, 25532, 22136, 25545, 26275, 18459, 20655, 21309, 20622, 20647, 20672, 20696,
  /* 10200 */ 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679,
  /* 10215 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 10230 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 18313, 21679, 21679, 21679,
  /* 10245 */ 33078, 26304, 26335, 22413, 26320, 26352, 18692, 18700, 26391, 26405, 26417, 26433, 26448, 25772, 26464,
  /* 10260 */ 21679, 26491, 48501, 26511, 33932, 26546, 23398, 26562, 26600, 19183, 26635, 26100, 26651, 26682, 26727,
  /* 10275 */ 26754, 26798, 26824, 26840, 26856, 21679, 21679, 21679, 19659, 26884, 46277, 33154, 28392, 37622, 21679,
  /* 10290 */ 44817, 33657, 29115, 29115, 29115, 42594, 21374, 37215, 37215, 37215, 26907, 27107, 22682, 22682, 27110,
  /* 10305 */ 22625, 46876, 21679, 35958, 21679, 26926, 30970, 35754, 26930, 26949, 21679, 33175, 31596, 26969, 26990,
  /* 10320 */ 29115, 29115, 48439, 27026, 27053, 46218, 37215, 37215, 27069, 27092, 27126, 22879, 22682, 22682, 27167,
  /* 10335 */ 27198, 27214, 25821, 25133, 21679, 19795, 27243, 42130, 27264, 21679, 26619, 27290, 27310, 27352, 29482,
  /* 10350 */ 29115, 27377, 27037, 45879, 27395, 33448, 37215, 27419, 48314, 43743, 27436, 42671, 22682, 27460, 26808,
  /* 10365 */ 34056, 27477, 26375, 48721, 21679, 27493, 27513, 21679, 32276, 27541, 29115, 29115, 27577, 48449, 27593,
  /* 10380 */ 27615, 37215, 33573, 31476, 27633, 39943, 22682, 37951, 44989, 41335, 27139, 27662, 27681, 21679, 38378,
  /* 10395 */ 33237, 42210, 36893, 27721, 35182, 47407, 46210, 27740, 43980, 44049, 47060, 34656, 22682, 47526, 36248,
  /* 10410 */ 21679, 21679, 21679, 40330, 27760, 35112, 37213, 27781, 42309, 32713, 27801, 47816, 28122, 21679, 21679,
  /* 10425 */ 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215,
  /* 10440 */ 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 27822, 27873, 44297, 33834, 27889, 42249, 38042,
  /* 10455 */ 33300, 38017, 32709, 41874, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679,
  /* 10470 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 10485 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 27916, 21679,
  /* 10500 */ 21679, 33078, 21679, 21679, 21679, 21679, 45497, 27935, 21679, 27959, 27965, 27981, 27997, 28012, 25772,
  /* 10515 */ 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277,
  /* 10530 */ 42241, 37878, 41799, 28028, 41791, 25801, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679,
  /* 10545 */ 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682,
  /* 10560 */ 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 26495, 26930, 36437, 21679, 36445, 21679, 32276,
  /* 10575 */ 29115, 29115, 29115, 29115, 28060, 22487, 37215, 37215, 37215, 27744, 28083, 22681, 22682, 22682, 22682,
  /* 10590 */ 37305, 28114, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 21679, 21679, 21679, 40330, 29115,
  /* 10605 */ 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682,
  /* 10620 */ 22741, 34056, 23420, 21679, 44212, 21679, 21679, 21679, 28138, 48254, 28159, 29115, 29115, 29115, 28178,
  /* 10635 */ 28205, 37215, 37215, 37215, 33582, 28229, 22682, 22682, 22682, 39032, 41335, 33489, 21679, 21679, 21679,
  /* 10650 */ 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682, 22682, 22682, 22682, 33895,
  /* 10665 */ 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679,
  /* 10680 */ 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115,
  /* 10695 */ 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 40397, 28282,
  /* 10710 */ 28298, 28314, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679,
  /* 10725 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 10740 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 28335,
  /* 10755 */ 21679, 21679, 33078, 21679, 28371, 21679, 28389, 43630, 28408, 28416, 28432, 28447, 28459, 28475, 28490,
  /* 10770 */ 25772, 21678, 21679, 25861, 21581, 28506, 21679, 28523, 21679, 21679, 21679, 21679, 21679, 28541, 23423,
  /* 10785 */ 28562, 46867, 27617, 41799, 35720, 32666, 25801, 23174, 21679, 21679, 26259, 21679, 32414, 21679, 35598,
  /* 10800 */ 28582, 28602, 25805, 25355, 28620, 28672, 29115, 29115, 31732, 23122, 37215, 37215, 37215, 28693, 28718,
  /* 10815 */ 22682, 22682, 22625, 46876, 21679, 28744, 21679, 21679, 28764, 21679, 28783, 21679, 28819, 21679, 21679,
  /* 10830 */ 32276, 28848, 22779, 29115, 28900, 29115, 22487, 28922, 31783, 37215, 28950, 47918, 41803, 47680, 34263,
  /* 10845 */ 29151, 22682, 22742, 35567, 25821, 21679, 21679, 37077, 21679, 21679, 28969, 21679, 21679, 21679, 40330,
  /* 10860 */ 29115, 29115, 39875, 34332, 40333, 22490, 37215, 37215, 29567, 39764, 22722, 22681, 22682, 22682, 41747,
  /* 10875 */ 37899, 22741, 34056, 29003, 21679, 21679, 21679, 29037, 31651, 21679, 32276, 29115, 29115, 31985, 29115,
  /* 10890 */ 48449, 37215, 37215, 37215, 29056, 33798, 22679, 22682, 22682, 38086, 22682, 41335, 33489, 21679, 39049,
  /* 10905 */ 21679, 21679, 29077, 29115, 50134, 29115, 35182, 37215, 38980, 37215, 43980, 22682, 39781, 22682, 22682,
  /* 10920 */ 40286, 33612, 21679, 21679, 34682, 26974, 50071, 29114, 26738, 50152, 29132, 45824, 42891, 29149, 28122,
  /* 10935 */ 21679, 21679, 43087, 32275, 29115, 35979, 37214, 37215, 36405, 22682, 22682, 29167, 21679, 41674, 32279,
  /* 10950 */ 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 50329, 27227,
  /* 10965 */ 45648, 40035, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 35730, 29184, 23085, 21679,
  /* 10980 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 10995 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679,
  /* 11010 */ 25913, 21679, 21679, 33078, 21679, 29221, 22295, 21679, 45388, 29240, 29248, 29264, 29278, 29285, 29301,
  /* 11025 */ 29316, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 32886, 21679, 29341, 21679,
  /* 11040 */ 29332, 29358, 31689, 44398, 28934, 33639, 41791, 25801, 21679, 29374, 29411, 19120, 27665, 21679, 32690,
  /* 11055 */ 21679, 35161, 46300, 29431, 29458, 29480, 29498, 22540, 29115, 29514, 40354, 32363, 29549, 27076, 29583,
  /* 11070 */ 39735, 47090, 29605, 43607, 46876, 21679, 21679, 21679, 34350, 29626, 31055, 26930, 21679, 21679, 21679,
  /* 11085 */ 27294, 32276, 29115, 29115, 29115, 27379, 29115, 22487, 37215, 37215, 37215, 36946, 47918, 22681, 22682,
  /* 11100 */ 22682, 22682, 35226, 22742, 29643, 25821, 29672, 21679, 21679, 43276, 46736, 26933, 21679, 21679, 31514,
  /* 11115 */ 40918, 29693, 29710, 29115, 29115, 29727, 27336, 27420, 37215, 37215, 37215, 29750, 29779, 32296, 22682,
  /* 11130 */ 22682, 22682, 29795, 34056, 23420, 21679, 21679, 21679, 21679, 47861, 21679, 46336, 29115, 29115, 32021,
  /* 11145 */ 29115, 35122, 29819, 37215, 37215, 29837, 33798, 29855, 22682, 22682, 42075, 22682, 41335, 33489, 48288,
  /* 11160 */ 32383, 21679, 33039, 21504, 29115, 29880, 27837, 35182, 37215, 29898, 32467, 43980, 22682, 29916, 34021,
  /* 11175 */ 29936, 33895, 42051, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682,
  /* 11190 */ 28122, 21679, 49732, 21679, 32275, 29115, 50309, 37214, 37215, 43368, 22682, 22682, 29953, 21679, 41674,
  /* 11205 */ 32279, 29115, 37215, 28266, 22682, 35678, 38886, 32279, 38019, 37757, 22451, 38889, 29974, 29996, 30017,
  /* 11220 */ 32798, 45725, 37190, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085,
  /* 11235 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 11250 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702,
  /* 11265 */ 21679, 21680, 30045, 21679, 33078, 26042, 30064, 21679, 30090, 19551, 30114, 30124, 30140, 30154, 30166,
  /* 11280 */ 30182, 30197, 25772, 21678, 30213, 30229, 30273, 29763, 30289, 28979, 19572, 30344, 25604, 30257, 30244,
  /* 11295 */ 30395, 30620, 30411, 30448, 30493, 30509, 30539, 39469, 30585, 30605, 30372, 46066, 30636, 30660, 27919,
  /* 11310 */ 30706, 30725, 21679, 25469, 21679, 21503, 43567, 30742, 30762, 30780, 30829, 30853, 45448, 47010, 31348,
  /* 11325 */ 31320, 41730, 44006, 44183, 30890, 46876, 18663, 30918, 46818, 30965, 30986, 41927, 31002, 31031, 21105,
  /* 11340 */ 40788, 31050, 31071, 31087, 31125, 31159, 31175, 43559, 31191, 31220, 31236, 31252, 31268, 31305, 31385,
  /* 11355 */ 47162, 31446, 31821, 47662, 31530, 31546, 25821, 24382, 31575, 31670, 31593, 45946, 26933, 31612, 31647,
  /* 11370 */ 31667, 31686, 31706, 29115, 29882, 27554, 30793, 22490, 31748, 37215, 25756, 31777, 26769, 22681, 31799,
  /* 11385 */ 22682, 43702, 49210, 48976, 31837, 23420, 47287, 31875, 31894, 43049, 21679, 31929, 31967, 40121, 31983,
  /* 11400 */ 32001, 21627, 48449, 32037, 32058, 32489, 32081, 32109, 32161, 37972, 22682, 32189, 32216, 41335, 33489,
  /* 11415 */ 21679, 31623, 32251, 21679, 32270, 33255, 41131, 39684, 35182, 48868, 43393, 32042, 43980, 22682, 32295,
  /* 11430 */ 32312, 22682, 33895, 40081, 48524, 32379, 32399, 32436, 38916, 40727, 32452, 36066, 42619, 32505, 28728,
  /* 11445 */ 32521, 32537, 32566, 32589, 39568, 29464, 32611, 32632, 22985, 46989, 32651, 35447, 42402, 28121, 21679,
  /* 11460 */ 32682, 32279, 44863, 37215, 31289, 22682, 36007, 26584, 32847, 38019, 32706, 32729, 40908, 30432, 34879,
  /* 11475 */ 48183, 49182, 41826, 45570, 38811, 32760, 32776, 32792, 38018, 32711, 30523, 32814, 29980, 28038, 25738,
  /* 11490 */ 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 11505 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 11520 */ 25702, 21679, 21679, 32863, 21679, 33078, 32884, 32902, 21261, 19566, 32927, 32957, 21679, 32943, 32981,
  /* 11535 */ 32988, 33004, 33019, 25772, 21678, 21679, 28796, 21581, 21679, 21679, 21679, 21679, 22835, 21679, 21679,
  /* 11550 */ 33035, 22834, 21679, 33055, 32635, 45908, 41443, 33639, 41791, 25801, 25880, 21679, 21679, 25440, 21679,
  /* 11565 */ 21679, 21679, 32965, 33071, 21679, 33094, 21503, 44369, 29115, 29115, 29115, 21374, 33112, 37215, 37215,
  /* 11580 */ 37215, 47041, 33135, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 26930, 21679,
  /* 11595 */ 21679, 21679, 33153, 32276, 29115, 29115, 29115, 43891, 29115, 22487, 37215, 37215, 37215, 44405, 47918,
  /* 11610 */ 22681, 22682, 22682, 22682, 49926, 22742, 35567, 25821, 21679, 21679, 21679, 21679, 21679, 26933, 21679,
  /* 11625 */ 33170, 21679, 40330, 29115, 29115, 41161, 29115, 40333, 22490, 37215, 37215, 33191, 37215, 22722, 22681,
  /* 11640 */ 22682, 22682, 33212, 22682, 22741, 34056, 23420, 21679, 21679, 21679, 21679, 21679, 33233, 32276, 29115,
  /* 11655 */ 29115, 29115, 33253, 48449, 37215, 37215, 37215, 39430, 33798, 22679, 22682, 22682, 36828, 22682, 41335,
  /* 11670 */ 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 35182, 37215, 37215, 37215, 43980, 22682,
  /* 11685 */ 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713,
  /* 11700 */ 22682, 22682, 28122, 33271, 21679, 21679, 32275, 28878, 29115, 33779, 37215, 37756, 47672, 22682, 28121,
  /* 11715 */ 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690,
  /* 11730 */ 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 31334, 33292, 29980, 31399,
  /* 11745 */ 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 11760 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 11775 */ 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 45162, 21679, 21679, 43114, 33316, 33324, 33340,
  /* 11790 */ 33346, 33362, 33378, 33393, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 36446, 21679, 21679, 21679,
  /* 11805 */ 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 33409, 21679, 21679, 21679, 19120,
  /* 11820 */ 21679, 21679, 21679, 37651, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215,
  /* 11835 */ 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 11850 */ 21679, 39267, 21679, 38848, 32276, 29115, 29115, 29115, 29115, 29115, 33444, 37215, 37215, 37215, 37215,
  /* 11865 */ 47918, 41461, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 27497, 21679, 25582, 28586,
  /* 11880 */ 21679, 21679, 33464, 40330, 29115, 37934, 29115, 29115, 40333, 22490, 37215, 41273, 37215, 37215, 22722,
  /* 11895 */ 22681, 22682, 34897, 22682, 22682, 22741, 33480, 21679, 21679, 21679, 33508, 21679, 21679, 21679, 32276,
  /* 11910 */ 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682,
  /* 11925 */ 41335, 33489, 21679, 21679, 33525, 31905, 21504, 29115, 29115, 29115, 33542, 37215, 37215, 37215, 33598,
  /* 11940 */ 22682, 22682, 22682, 33635, 33895, 35330, 33655, 33673, 33720, 33738, 46693, 33758, 33795, 39364, 33814,
  /* 11955 */ 33830, 47497, 33850, 33891, 48911, 21679, 33911, 36505, 35796, 33948, 25752, 33971, 35837, 41520, 34245,
  /* 11970 */ 28121, 21679, 44342, 35026, 46684, 39919, 33987, 34255, 34037, 38886, 32279, 38019, 37757, 22451, 38889,
  /* 11985 */ 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 34072,
  /* 12000 */ 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12015 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12030 */ 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679,
  /* 12045 */ 21679, 21679, 50013, 25723, 27444, 25772, 34088, 21679, 21679, 34150, 21679, 21679, 21679, 22471, 21679,
  /* 12060 */ 29017, 21679, 22471, 34166, 29013, 38743, 44277, 34217, 34235, 29589, 34279, 34307, 21679, 21679, 30098,
  /* 12075 */ 19120, 32139, 31631, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 34327, 21374, 37215,
  /* 12090 */ 37215, 29839, 37215, 27107, 22682, 22682, 44013, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12105 */ 21679, 21679, 21679, 34348, 43487, 32276, 29115, 29115, 29115, 29115, 29115, 34366, 37215, 37215, 37215,
  /* 12120 */ 37215, 27785, 22681, 22682, 22682, 22682, 22682, 50290, 28044, 21679, 42462, 21679, 21679, 21679, 21679,
  /* 12135 */ 21679, 21679, 21679, 46792, 28566, 29115, 29115, 29115, 29115, 40333, 34369, 37215, 37215, 37215, 37215,
  /* 12150 */ 22722, 34291, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 34385, 21679, 21679, 21679,
  /* 12165 */ 32276, 29115, 29115, 29115, 46925, 29734, 37215, 37215, 37215, 36577, 22722, 22679, 22682, 22682, 22682,
  /* 12180 */ 32228, 41335, 33489, 21679, 21679, 34406, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215,
  /* 12195 */ 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215,
  /* 12210 */ 37215, 32713, 22682, 22682, 28122, 21679, 49289, 21679, 40718, 29115, 29115, 37214, 37215, 37756, 22682,
  /* 12225 */ 22682, 29803, 21679, 41674, 34427, 37697, 37215, 48670, 22682, 43683, 38886, 32279, 38019, 37757, 22451,
  /* 12240 */ 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160,
  /* 12255 */ 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12270 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12285 */ 21679, 21679, 21679, 25702, 21679, 21679, 19622, 21679, 33078, 25503, 22705, 23404, 18868, 18878, 34448,
  /* 12300 */ 34456, 34472, 34487, 34499, 34515, 34530, 25772, 21678, 21679, 21679, 47293, 23460, 21679, 21679, 21679,
  /* 12315 */ 34546, 34570, 21679, 30359, 34606, 32827, 32550, 45050, 34622, 34643, 49216, 50042, 34678, 21679, 21679,
  /* 12330 */ 29627, 34698, 21679, 34722, 21679, 21679, 21679, 34750, 28546, 21503, 40977, 45855, 29115, 47608, 34789,
  /* 12345 */ 34813, 30867, 37215, 34858, 28098, 22886, 34895, 35527, 40274, 46876, 21679, 29677, 30048, 34913, 34930,
  /* 12360 */ 39965, 34967, 31034, 34988, 21679, 35004, 35023, 21647, 29115, 49844, 35042, 35088, 22487, 48045, 37215,
  /* 12375 */ 28213, 44889, 45685, 22681, 36626, 22682, 32200, 46582, 39008, 28044, 21679, 21679, 21679, 21679, 26475,
  /* 12390 */ 35138, 46367, 21679, 21679, 21679, 38577, 35177, 29115, 29115, 35364, 44119, 28648, 35198, 37215, 37215,
  /* 12405 */ 47399, 47123, 35218, 35242, 22682, 22682, 23049, 39805, 28043, 21679, 43765, 35262, 35303, 29442, 35319,
  /* 12420 */ 50736, 35346, 29115, 35380, 29098, 35408, 39088, 37215, 39372, 35470, 32482, 35486, 35522, 22682, 35543,
  /* 12435 */ 32173, 42652, 35559, 40048, 45957, 47984, 44682, 35583, 21504, 35620, 38595, 27361, 28635, 35644, 41650,
  /* 12450 */ 35652, 31761, 35668, 44926, 35694, 35710, 30902, 21679, 21679, 43031, 35746, 43208, 35770, 35791, 33875,
  /* 12465 */ 35812, 35832, 41851, 35853, 39498, 28122, 21679, 35874, 50115, 32275, 29115, 29115, 37214, 37215, 37756,
  /* 12480 */ 22682, 22682, 28121, 35895, 41674, 20514, 47350, 37728, 38947, 35920, 35940, 38886, 35974, 38019, 37757,
  /* 12495 */ 22451, 38889, 35423, 35995, 36023, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 36051, 36082, 45524,
  /* 12510 */ 40160, 29980, 28038, 31461, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12525 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12540 */ 21679, 21679, 21679, 21679, 25702, 21679, 21679, 18654, 21679, 33078, 21679, 21679, 21679, 21679, 42157,
  /* 12555 */ 21679, 38301, 18662, 18587, 35506, 36129, 36144, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679,
  /* 12570 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801, 21679,
  /* 12585 */ 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 46945, 29115,
  /* 12600 */ 21374, 37215, 37215, 31362, 37215, 27107, 22682, 22682, 36160, 22625, 46876, 21679, 21679, 21679, 21679,
  /* 12615 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215,
  /* 12630 */ 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679,
  /* 12645 */ 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215,
  /* 12660 */ 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679,
  /* 12675 */ 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682,
  /* 12690 */ 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215,
  /* 12705 */ 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115,
  /* 12720 */ 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215,
  /* 12735 */ 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019,
  /* 12750 */ 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711,
  /* 12765 */ 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12780 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 12795 */ 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 40955, 21679, 33078, 21679, 21679, 21679, 21679,
  /* 12810 */ 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679,
  /* 12825 */ 36178, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801,
  /* 12840 */ 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115,
  /* 12855 */ 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679,
  /* 12870 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487,
  /* 12885 */ 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 26127, 21679,
  /* 12900 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 48094, 29115, 29115, 29115, 29115, 40333, 28189, 37215,
  /* 12915 */ 37215, 37215, 37215, 22722, 36199, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679,
  /* 12930 */ 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679,
  /* 12945 */ 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663,
  /* 12960 */ 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115,
  /* 12975 */ 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214,
  /* 12990 */ 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279,
  /* 13005 */ 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018,
  /* 13020 */ 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13035 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13050 */ 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 23214, 21679, 33078, 21679, 23934, 21679,
  /* 13065 */ 18368, 36227, 36264, 36276, 36292, 36298, 36314, 36330, 36345, 25772, 21678, 25836, 21679, 21581, 21679,
  /* 13080 */ 25844, 28987, 21679, 21935, 21679, 21679, 28348, 26233, 25842, 36361, 46901, 36390, 43595, 37035, 32744,
  /* 13095 */ 36096, 31852, 21679, 21679, 36429, 21679, 21679, 36462, 36479, 31913, 29342, 42945, 36499, 36521, 47343,
  /* 13110 */ 42690, 27851, 36550, 40207, 36576, 36560, 27599, 36593, 36614, 22682, 36648, 49117, 36682, 21679, 36720,
  /* 13125 */ 21679, 21679, 21679, 30709, 21679, 21679, 21679, 21679, 21679, 32276, 31720, 28906, 29115, 22532, 29694,
  /* 13140 */ 33444, 36742, 29533, 37215, 36767, 48949, 36788, 36804, 37785, 22682, 36826, 32235, 28044, 21679, 21679,
  /* 13155 */ 38629, 36844, 21679, 31878, 21679, 36865, 21679, 21679, 40330, 29115, 29115, 27003, 36882, 36917, 22490,
  /* 13170 */ 37215, 37215, 36940, 36962, 36996, 22681, 22682, 22682, 48826, 37025, 37051, 28043, 21679, 37076, 21679,
  /* 13185 */ 21679, 37093, 21679, 21679, 32276, 30764, 29115, 29115, 29115, 29734, 37215, 37114, 37215, 37215, 22722,
  /* 13200 */ 22679, 42373, 22682, 22682, 22682, 41335, 40311, 21679, 37134, 43518, 37151, 21504, 36534, 29115, 29115,
  /* 13215 */ 48007, 32342, 37215, 37215, 37585, 43456, 22682, 22682, 47181, 33895, 21679, 37167, 40691, 21679, 40330,
  /* 13230 */ 30813, 29115, 37213, 41641, 37215, 32713, 48337, 22682, 28122, 21679, 38321, 21679, 32275, 29115, 33955,
  /* 13245 */ 37214, 37215, 37184, 22682, 47758, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886,
  /* 13260 */ 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 37206, 37232, 37263,
  /* 13275 */ 26702, 37299, 45524, 40160, 37321, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13290 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13305 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 18388, 21679, 33078, 21679, 22375,
  /* 13320 */ 21679, 21679, 20210, 37351, 37359, 37375, 37389, 37396, 37412, 37427, 25896, 21678, 50571, 21679, 21581,
  /* 13335 */ 21679, 26336, 21679, 21679, 23271, 21679, 21679, 50572, 26367, 26374, 37443, 31689, 37459, 20538, 33639,
  /* 13350 */ 41791, 25801, 21679, 23577, 21679, 19120, 21679, 37482, 34945, 21679, 21679, 21679, 37616, 19630, 45427,
  /* 13365 */ 29115, 27010, 41114, 21374, 41249, 37215, 37503, 37523, 27107, 37547, 22643, 45202, 37564, 37601, 37638,
  /* 13380 */ 29040, 37674, 38713, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 42586, 37695, 32015, 29115,
  /* 13395 */ 29115, 22487, 37713, 37215, 37751, 37215, 47918, 22681, 37773, 29937, 22682, 22682, 22742, 28044, 21679,
  /* 13410 */ 36463, 21679, 44560, 21679, 21679, 37807, 37825, 21679, 21679, 40330, 48139, 29115, 29115, 37851, 27724,
  /* 13425 */ 22490, 47638, 37215, 29133, 37873, 26910, 22681, 41311, 22682, 41462, 37894, 22741, 28043, 21679, 21679,
  /* 13440 */ 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215,
  /* 13455 */ 22722, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115,
  /* 13470 */ 29115, 22663, 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 37915, 21679, 21679, 21679,
  /* 13485 */ 40330, 37933, 29115, 45342, 37215, 37215, 32713, 37950, 22682, 28122, 21679, 21679, 21679, 32275, 29115,
  /* 13500 */ 29115, 37214, 39111, 37756, 22682, 37967, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662,
  /* 13515 */ 45265, 32279, 33773, 43422, 47940, 37988, 38014, 38035, 38058, 32278, 40139, 32711, 30024, 38017, 32709,
  /* 13530 */ 30024, 38018, 38081, 38102, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13545 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13560 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21470, 21679, 44567, 21679,
  /* 13575 */ 21203, 38127, 40104, 38164, 38201, 38225, 38245, 38229, 38209, 38261, 38276, 25772, 21678, 38344, 25125,
  /* 13590 */ 29656, 31491, 38292, 21679, 38317, 38337, 38403, 38360, 38394, 38419, 38455, 38490, 42280, 38506, 38534,
  /* 13605 */ 38565, 41791, 25801, 37835, 21679, 21679, 38611, 30644, 38645, 38663, 38698, 33722, 34914, 35151, 38735,
  /* 13620 */ 49602, 35628, 29115, 38759, 21374, 43956, 38778, 45106, 37215, 27107, 38797, 22682, 41739, 27806, 38827,
  /* 13635 */ 21679, 38864, 38179, 45965, 21679, 21679, 21679, 38881, 21679, 21679, 41372, 32276, 38905, 29115, 44433,
  /* 13650 */ 29115, 29115, 38932, 36972, 37215, 38976, 37215, 47918, 38996, 44044, 22682, 39031, 22682, 22742, 28044,
  /* 13665 */ 21679, 21679, 21679, 21679, 37135, 39048, 21679, 45155, 39065, 21679, 46246, 29115, 29115, 48113, 29115,
  /* 13680 */ 39081, 39104, 37215, 37215, 49362, 37215, 39127, 39169, 22682, 22682, 48888, 22682, 39192, 28043, 29415,
  /* 13695 */ 39217, 36849, 30589, 21679, 38148, 39254, 25208, 35101, 39290, 39314, 39330, 29734, 47717, 39351, 39388,
  /* 13710 */ 39419, 22722, 22679, 39454, 39485, 34000, 39520, 37060, 39538, 39557, 39584, 39605, 39621, 39640, 29115,
  /* 13725 */ 39678, 37276, 39700, 37215, 39758, 31281, 34828, 39780, 39797, 22943, 48411, 39821, 21124, 21679, 21679,
  /* 13740 */ 34180, 39846, 27561, 39868, 39891, 37531, 39912, 50284, 45804, 39935, 29168, 39959, 21679, 44514, 32275,
  /* 13755 */ 39981, 30426, 43856, 40020, 37756, 40064, 46602, 28121, 40080, 40097, 32279, 40120, 31430, 37754, 49160,
  /* 13770 */ 34662, 38886, 32279, 40137, 40155, 37335, 40176, 40192, 40230, 40302, 40327, 40349, 40370, 40391, 38017,
  /* 13785 */ 32709, 30024, 38018, 32711, 47104, 40413, 29980, 28038, 27182, 40448, 21679, 21679, 21679, 21679, 21679,
  /* 13800 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 13815 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 40468, 33078,
  /* 13830 */ 21679, 18925, 40489, 21679, 43164, 40509, 40517, 40533, 40547, 40554, 40570, 40585, 25772, 40601, 40617,
  /* 13845 */ 40636, 26666, 25707, 40667, 40690, 23699, 44825, 40707, 40743, 40759, 31015, 40775, 28832, 40804, 40829,
  /* 13860 */ 38518, 40845, 40861, 40877, 21679, 40897, 43493, 23925, 30726, 21679, 40934, 38621, 21679, 21679, 46728,
  /* 13875 */ 21503, 29115, 22252, 40971, 40993, 21374, 37215, 41009, 49865, 27403, 27107, 22683, 29864, 39725, 41778,
  /* 13890 */ 46876, 21679, 21679, 41025, 21679, 38842, 37809, 26135, 41045, 41062, 26953, 21679, 41104, 41130, 41147,
  /* 13905 */ 41183, 29115, 39298, 41204, 37215, 41234, 41271, 37215, 46523, 41289, 22814, 46627, 22682, 22682, 41327,
  /* 13920 */ 49238, 41359, 41395, 38647, 21679, 41414, 21679, 21679, 21679, 21679, 26611, 40330, 29115, 49004, 28884,
  /* 13935 */ 29115, 40333, 22490, 37215, 47711, 45915, 37215, 22722, 22681, 22682, 47786, 47792, 22682, 22741, 28043,
  /* 13950 */ 21679, 21679, 39624, 21679, 21987, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 41431, 37215, 37215,
  /* 13965 */ 37215, 37215, 28656, 41459, 22682, 22682, 22682, 22682, 41478, 33489, 41502, 21679, 21679, 21679, 44791,
  /* 13980 */ 29115, 28067, 29115, 30746, 37215, 37735, 37215, 22431, 41518, 49641, 22682, 22682, 29958, 41536, 21679,
  /* 13995 */ 21679, 21679, 37998, 39852, 29115, 30459, 37466, 37215, 36413, 40375, 22682, 28122, 41558, 21679, 21679,
  /* 14010 */ 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 41575, 41674, 41596, 29115, 41632, 43650,
  /* 14025 */ 48212, 34662, 41666, 22232, 41700, 41716, 41763, 38889, 41819, 41842, 41867, 32278, 40139, 32711, 30024,
  /* 14040 */ 38017, 32709, 30024, 38018, 32711, 33864, 45746, 29980, 28038, 28244, 23085, 21679, 21679, 21679, 21679,
  /* 14055 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 14070 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 19789,
  /* 14085 */ 33078, 21679, 21679, 41890, 39830, 41912, 41943, 21679, 33492, 41964, 41977, 41993, 42008, 25772, 21678,
  /* 14100 */ 21679, 30681, 21581, 21679, 21679, 21679, 42024, 32145, 21679, 21679, 42048, 30687, 21679, 46666, 42433,
  /* 14115 */ 39896, 42067, 42091, 41791, 25801, 26889, 42128, 21679, 19120, 21679, 35499, 42146, 21679, 42173, 21679,
  /* 14130 */ 26891, 21503, 42191, 42226, 35356, 42265, 20526, 46199, 43925, 42296, 30477, 42344, 42367, 42389, 42644,
  /* 14145 */ 42418, 46876, 42449, 21679, 34706, 38432, 21679, 42485, 42505, 21679, 21679, 21679, 21679, 32276, 29115,
  /* 14160 */ 29115, 41616, 29115, 29115, 22487, 37215, 37215, 43917, 37215, 47918, 22681, 22682, 22682, 45777, 22682,
  /* 14175 */ 22742, 41343, 42539, 21679, 42555, 21679, 21679, 34972, 37168, 46786, 41896, 21679, 40330, 29115, 42576,
  /* 14190 */ 29115, 29115, 28162, 22490, 37215, 42610, 37215, 37215, 28953, 22681, 22682, 42635, 22682, 22682, 22741,
  /* 14205 */ 28043, 21679, 49670, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 22246, 29115, 47373, 37215,
  /* 14220 */ 37215, 46477, 37215, 22432, 22679, 22682, 22682, 42668, 22682, 41335, 33489, 21679, 21679, 21679, 21679,
  /* 14235 */ 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679,
  /* 14250 */ 30690, 21679, 21679, 42687, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 45227, 21679, 21679,
  /* 14265 */ 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215,
  /* 14280 */ 37754, 22682, 34662, 42706, 22522, 34773, 42754, 22451, 49991, 31690, 37755, 29920, 32278, 40139, 32711,
  /* 14295 */ 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679,
  /* 14310 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 14325 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679,
  /* 14340 */ 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772,
  /* 14355 */ 21678, 21679, 21679, 21581, 21679, 21679, 28507, 21679, 21679, 41678, 41681, 41684, 30319, 30326, 42722,
  /* 14370 */ 46440, 42770, 42790, 29610, 41791, 42826, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679,
  /* 14385 */ 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682,
  /* 14400 */ 22682, 22625, 46876, 21679, 21679, 21679, 38185, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276,
  /* 14415 */ 29115, 29115, 29115, 29115, 29115, 42870, 37215, 37215, 37215, 37215, 47918, 42890, 22682, 22682, 22682,
  /* 14430 */ 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115,
  /* 14445 */ 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682,
  /* 14460 */ 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734,
  /* 14475 */ 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679,
  /* 14490 */ 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895,
  /* 14505 */ 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679,
  /* 14520 */ 21679, 21679, 32275, 31143, 29115, 37214, 42907, 37756, 45782, 22682, 28121, 21679, 41674, 32279, 29115,
  /* 14535 */ 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139,
  /* 14550 */ 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679,
  /* 14565 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 14580 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679,
  /* 14595 */ 21679, 19009, 37658, 21679, 21679, 18600, 21679, 44095, 42925, 19273, 42961, 42974, 42981, 42997, 43012,
  /* 14610 */ 25772, 21678, 18607, 43137, 21581, 22395, 31506, 29389, 34201, 43028, 43047, 43065, 43103, 43130, 43153,
  /* 14625 */ 26782, 43314, 43180, 49039, 43196, 40245, 43224, 21679, 21679, 21679, 32124, 43244, 43263, 24996, 28143,
  /* 14640 */ 21679, 21679, 28767, 43299, 29115, 29091, 29115, 43330, 43355, 22796, 43392, 29205, 43409, 43448, 36632,
  /* 14655 */ 22682, 36211, 47473, 43472, 21679, 21679, 21679, 21679, 43509, 20267, 21679, 47581, 21679, 43516, 33696,
  /* 14670 */ 49077, 29115, 42203, 29115, 27765, 43534, 43583, 37215, 43646, 37215, 39438, 41218, 43666, 22682, 43699,
  /* 14685 */ 22682, 41300, 43718, 28044, 21679, 21679, 36866, 43759, 44545, 43781, 21679, 28748, 43797, 43809, 43837,
  /* 14700 */ 29115, 43872, 32616, 43888, 34432, 43907, 37215, 43941, 43962, 43978, 49800, 43996, 22682, 44029, 36598,
  /* 14715 */ 44065, 49401, 28043, 29395, 21679, 21679, 33704, 44084, 23453, 37098, 44111, 27900, 29115, 44135, 29115,
  /* 14730 */ 29734, 22561, 44154, 28259, 37215, 22722, 22679, 44173, 44068, 22682, 22682, 39201, 44206, 37487, 40620,
  /* 14745 */ 21679, 21679, 21504, 44228, 29115, 29115, 42735, 44250, 37215, 37215, 26711, 34013, 22682, 22682, 45707,
  /* 14760 */ 33895, 21679, 33925, 21679, 21679, 44272, 29115, 29115, 44293, 37215, 46967, 44313, 22682, 50256, 28122,
  /* 14775 */ 21679, 34194, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279,
  /* 14790 */ 29115, 37215, 37754, 22682, 34662, 44334, 44358, 44385, 39403, 36666, 38889, 31690, 37755, 29920, 44421,
  /* 14805 */ 45532, 48161, 38065, 38017, 32709, 30024, 38018, 32711, 22973, 44456, 29980, 34051, 25738, 23085, 21679,
  /* 14820 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 14835 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702, 21679,
  /* 14850 */ 21679, 21679, 33619, 33078, 44512, 20195, 44472, 44498, 44530, 44583, 44482, 44599, 44613, 44629, 44645,
  /* 14865 */ 44660, 25772, 44676, 28373, 21679, 27274, 21679, 21679, 22761, 21679, 26007, 33096, 21679, 44698, 49901,
  /* 14880 */ 44705, 44721, 44737, 23015, 45661, 33639, 41791, 44753, 44769, 21679, 44785, 19120, 44807, 21679, 21679,
  /* 14895 */ 21679, 30933, 36242, 44841, 31951, 49780, 29116, 44859, 29115, 35392, 44879, 30569, 37215, 37215, 44905,
  /* 14910 */ 44942, 47153, 22682, 22625, 46876, 21679, 38140, 21679, 47558, 39140, 44964, 21679, 21679, 21679, 21679,
  /* 14925 */ 36704, 32276, 46254, 45029, 29115, 29115, 44138, 22487, 46471, 30469, 37215, 37215, 32065, 22681, 44986,
  /* 14940 */ 44920, 22682, 22682, 50177, 28044, 21679, 21679, 34390, 21679, 45005, 42938, 36726, 26522, 48756, 30328,
  /* 14955 */ 45023, 29115, 29115, 26693, 45045, 45066, 45102, 37215, 37215, 48037, 45122, 45142, 45178, 22682, 22682,
  /* 14970 */ 48403, 45198, 45218, 45243, 45259, 45281, 21679, 49477, 21679, 21679, 26530, 45303, 29115, 29115, 45322,
  /* 14985 */ 29115, 29734, 37215, 37215, 29525, 45358, 22722, 22679, 22682, 36162, 39176, 22682, 41335, 33489, 21679,
  /* 15000 */ 45377, 21679, 45404, 21504, 29115, 45422, 39238, 33742, 37215, 45443, 31369, 22579, 22682, 47053, 50091,
  /* 15015 */ 22682, 33895, 21679, 21679, 45464, 45486, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682,
  /* 15030 */ 45513, 36483, 21679, 45548, 34764, 29115, 46675, 37214, 37215, 45564, 22682, 44318, 39015, 45586, 45608,
  /* 15045 */ 45635, 29115, 45677, 37754, 45701, 47838, 38886, 45306, 45723, 45741, 45762, 38889, 31690, 37755, 29920,
  /* 15060 */ 39231, 37579, 45798, 30024, 45335, 45820, 45840, 45895, 39715, 45524, 40160, 29980, 28038, 25738, 23085,
  /* 15075 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15090 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25702,
  /* 15105 */ 21679, 21679, 21679, 20911, 33078, 21679, 21679, 19018, 21679, 45931, 20080, 20093, 45981, 45997, 46012,
  /* 15120 */ 46028, 46043, 25772, 46059, 35604, 21679, 46082, 19427, 25934, 46098, 25955, 23339, 46127, 31559, 46152,
  /* 15135 */ 46143, 30304, 46111, 46168, 46184, 31204, 46234, 37247, 25801, 46270, 31944, 46293, 23816, 21679, 21679,
  /* 15150 */ 37009, 34951, 46316, 36697, 46352, 46389, 43549, 46420, 46405, 46436, 46456, 46493, 21382, 23023, 29900,
  /* 15165 */ 46567, 39742, 49107, 46618, 44190, 46876, 46643, 34554, 21679, 48280, 20164, 46718, 21679, 21679, 46752,
  /* 15180 */ 46771, 46808, 46834, 46858, 46892, 46917, 29115, 46941, 22487, 46961, 46983, 47005, 22491, 47026, 50054,
  /* 15195 */ 47076, 47139, 47178, 47960, 48690, 47197, 21679, 41542, 21679, 47224, 47242, 21679, 47272, 47309, 42175,
  /* 15210 */ 35007, 40330, 47332, 39995, 29115, 27857, 47366, 22490, 47389, 47423, 37215, 33119, 47447, 22681, 47463,
  /* 15225 */ 47489, 22682, 48218, 47513, 28043, 20275, 47551, 21679, 20157, 47574, 21679, 24375, 47597, 41610, 36374,
  /* 15240 */ 35053, 35064, 36924, 30874, 44256, 47624, 47696, 22722, 47733, 47755, 47774, 47808, 47832, 41335, 27646,
  /* 15255 */ 21679, 25575, 21679, 47854, 32838, 35072, 47877, 29115, 46702, 36751, 47897, 47917, 40214, 44948, 47934,
  /* 15270 */ 47956, 50197, 33895, 21679, 47976, 38674, 21679, 48000, 28863, 35775, 31424, 48023, 42774, 22936, 38960,
  /* 15285 */ 39522, 28122, 48061, 21679, 21679, 48088, 48110, 48129, 39662, 36980, 48155, 48177, 48199, 28121, 48234,
  /* 15300 */ 48270, 21612, 39335, 48304, 42328, 48330, 46551, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755,
  /* 15315 */ 29920, 32278, 40139, 48353, 48376, 43339, 48392, 48427, 39655, 48465, 31413, 40160, 29980, 28038, 32327,
  /* 15330 */ 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15345 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15360 */ 25702, 21679, 21679, 21679, 21679, 48481, 21679, 21679, 48517, 21679, 47208, 20225, 20233, 48540, 20233,
  /* 15375 */ 20240, 48556, 48571, 25772, 21678, 21679, 21679, 21581, 48587, 23557, 21679, 21679, 21679, 21679, 34590,
  /* 15390 */ 21679, 48587, 21679, 30029, 22910, 48607, 32093, 22604, 43731, 48623, 48646, 21679, 21679, 19120, 21679,
  /* 15405 */ 21679, 38465, 38473, 21679, 21679, 21679, 38474, 42112, 29115, 29115, 29115, 31101, 48664, 37215, 37215,
  /* 15420 */ 22852, 46538, 48686, 22682, 22682, 39504, 46876, 48706, 21679, 47316, 48743, 21679, 21679, 21679, 39153,
  /* 15435 */ 48779, 29224, 33276, 32276, 29115, 48798, 50236, 25216, 41167, 22487, 44157, 47901, 30837, 46508, 47431,
  /* 15450 */ 22681, 36810, 35454, 36659, 48814, 42802, 28044, 21679, 21679, 48848, 34411, 21679, 21679, 21679, 32254,
  /* 15465 */ 21679, 21679, 40330, 37283, 29115, 29115, 29115, 40333, 48866, 31109, 37215, 37215, 37215, 22722, 48884,
  /* 15480 */ 23057, 22682, 22682, 22682, 22741, 28043, 48904, 21679, 48927, 21679, 21679, 21679, 38865, 20996, 29115,
  /* 15495 */ 29115, 29115, 29115, 29734, 48945, 37215, 37215, 37215, 22722, 48965, 22682, 22682, 22682, 22682, 41335,
  /* 15510 */ 40423, 21679, 21679, 38682, 21679, 21504, 48992, 29115, 29115, 22663, 49027, 37215, 37215, 49055, 49093,
  /* 15525 */ 22682, 22682, 46594, 33895, 29021, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713,
  /* 15540 */ 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121,
  /* 15555 */ 21679, 41674, 32279, 49133, 33196, 37754, 48360, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690,
  /* 15570 */ 37755, 29920, 32278, 40139, 32711, 30024, 43848, 49152, 49176, 38018, 32711, 45524, 40160, 49198, 49232,
  /* 15585 */ 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15600 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15615 */ 21679, 25702, 21679, 21679, 21679, 21679, 49254, 49308, 49282, 24058, 21679, 45619, 21679, 24046, 49305,
  /* 15630 */ 25099, 38439, 49327, 49342, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15645 */ 21679, 21679, 21679, 21679, 28319, 31689, 49358, 35435, 33639, 41791, 25801, 21679, 48763, 38370, 19120,
  /* 15660 */ 21679, 21679, 21679, 21679, 33526, 21679, 21679, 21503, 38762, 29115, 29115, 49378, 21374, 29559, 37215,
  /* 15675 */ 45126, 37215, 27107, 49397, 22682, 43675, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679, 43080,
  /* 15690 */ 21679, 21679, 21116, 21679, 32276, 29115, 29115, 49417, 29115, 29115, 22487, 37215, 45361, 37215, 37215,
  /* 15705 */ 47918, 22681, 22682, 37791, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15720 */ 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722,
  /* 15735 */ 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276,
  /* 15750 */ 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682,
  /* 15765 */ 41335, 33489, 21679, 37679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431,
  /* 15780 */ 22682, 22682, 22682, 22682, 33895, 21679, 49507, 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215,
  /* 15795 */ 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682,
  /* 15810 */ 28121, 40452, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889,
  /* 15825 */ 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980,
  /* 15840 */ 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15855 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15870 */ 21679, 21679, 25702, 21679, 21679, 21679, 21679, 49434, 21679, 21331, 21679, 43283, 49462, 49499, 21679,
  /* 15885 */ 49523, 49537, 49550, 49566, 49581, 25772, 21678, 21679, 21679, 21581, 21679, 21679, 21679, 21679, 21679,
  /* 15900 */ 21679, 21679, 21679, 21679, 21679, 32277, 40004, 29821, 41799, 43432, 38549, 25801, 21679, 21679, 21679,
  /* 15915 */ 19120, 21679, 21679, 21679, 33509, 21679, 21679, 21679, 21503, 29115, 29115, 29115, 29115, 21374, 37215,
  /* 15930 */ 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15945 */ 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215, 37215,
  /* 15960 */ 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 15975 */ 45079, 21679, 21679, 21679, 49597, 29115, 29115, 29115, 29115, 40333, 49618, 37215, 37215, 37215, 37215,
  /* 15990 */ 22722, 49637, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 19229, 21679, 21679, 21679, 21679,
  /* 16005 */ 32276, 29115, 49011, 29115, 37857, 29734, 37215, 42909, 37215, 37215, 49657, 22679, 22682, 31812, 22682,
  /* 16020 */ 42351, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215, 37215,
  /* 16035 */ 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213, 37215,
  /* 16050 */ 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756, 22682,
  /* 16065 */ 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757, 22451,
  /* 16080 */ 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524, 40160,
  /* 16095 */ 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16110 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16125 */ 21679, 21679, 21679, 26002, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157, 21679,
  /* 16140 */ 21679, 21679, 21679, 49677, 49693, 49708, 25772, 21678, 21679, 21679, 21581, 49724, 21679, 49748, 21679,
  /* 16155 */ 21679, 23089, 23092, 21679, 27696, 27703, 49767, 31689, 49796, 47650, 33639, 41791, 25801, 21679, 21679,
  /* 16170 */ 27248, 19120, 46373, 50742, 49816, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 49840, 44234, 21374,
  /* 16185 */ 37215, 38781, 37215, 49860, 27107, 22682, 49934, 27461, 22625, 40813, 49881, 21679, 21679, 21679, 21679,
  /* 16200 */ 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487, 37215, 37215,
  /* 16215 */ 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679, 21679, 21679,
  /* 16230 */ 21679, 35879, 21679, 21679, 21679, 40330, 29115, 28677, 29115, 29115, 49381, 22490, 37215, 41255, 37215,
  /* 16245 */ 37215, 37118, 22681, 22682, 35858, 22682, 22682, 22741, 28043, 39541, 21679, 21679, 21679, 21679, 21679,
  /* 16260 */ 21679, 32276, 46842, 29115, 29115, 29115, 29734, 37507, 37215, 37215, 37215, 22722, 22679, 49917, 22682,
  /* 16275 */ 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663, 37215, 37215,
  /* 16290 */ 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 37213,
  /* 16305 */ 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214, 37215, 37756,
  /* 16320 */ 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019, 37757,
  /* 16335 */ 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711, 45524,
  /* 16350 */ 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16365 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16380 */ 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679, 42157,
  /* 16395 */ 21679, 21679, 21679, 21679, 50013, 25723, 27444, 25772, 49950, 21679, 21679, 21581, 21679, 21679, 32595,
  /* 16410 */ 21679, 21679, 21679, 31577, 21679, 21679, 21713, 30806, 36901, 37216, 41799, 28702, 40260, 49983, 21679,
  /* 16425 */ 27943, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 50007, 29115, 29115, 29115, 47881,
  /* 16440 */ 21374, 37215, 37215, 37215, 34872, 27107, 22682, 22682, 22682, 50029, 46876, 21679, 38719, 21679, 21679,
  /* 16455 */ 21679, 21679, 21679, 21679, 37917, 21679, 21679, 32276, 44440, 29115, 29115, 50070, 29115, 22487, 32356,
  /* 16470 */ 37215, 49621, 37215, 47918, 22681, 50087, 22682, 48832, 22682, 22742, 28044, 21679, 21679, 50107, 21679,
  /* 16485 */ 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29711, 50131, 29115, 29115, 40333, 42748, 34219, 50150,
  /* 16500 */ 37215, 37215, 22722, 50168, 33137, 50193, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679, 21679,
  /* 16515 */ 21679, 50213, 32276, 29115, 29115, 50232, 29115, 27325, 37215, 37215, 34797, 37215, 29061, 22679, 22682,
  /* 16530 */ 22682, 50252, 22682, 50272, 33489, 21679, 21679, 26576, 21679, 21504, 29115, 29115, 29115, 22663, 37215,
  /* 16545 */ 37215, 37215, 22431, 22682, 22682, 22682, 22682, 43619, 21679, 21679, 34311, 21679, 42103, 29115, 29115,
  /* 16560 */ 47115, 37215, 37215, 43376, 22682, 22682, 28122, 21679, 41046, 21679, 32275, 29115, 50306, 37214, 42319,
  /* 16575 */ 37756, 22682, 50325, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279, 38019,
  /* 16590 */ 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018, 32711,
  /* 16605 */ 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16620 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16635 */ 21679, 21679, 21679, 21679, 21679, 25702, 21679, 21679, 21679, 21679, 33078, 21679, 21679, 21679, 21679,
  /* 16650 */ 42157, 50345, 21679, 21679, 21679, 50013, 25723, 27444, 25772, 21678, 21679, 21679, 21581, 21679, 21679,
  /* 16665 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215, 41799, 33639, 41791, 25801,
  /* 16680 */ 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21503, 29115, 29115, 29115,
  /* 16695 */ 29115, 21374, 37215, 37215, 37215, 37215, 27107, 22682, 22682, 22682, 22625, 46876, 21679, 21679, 21679,
  /* 16710 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29115, 22487,
  /* 16725 */ 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742, 28044, 21679, 21679, 21679,
  /* 16740 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115, 29115, 40333, 22490, 37215,
  /* 16755 */ 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043, 21679, 21679, 21679, 21679,
  /* 16770 */ 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215, 37215, 37215, 22722, 22679,
  /* 16785 */ 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504, 29115, 29115, 29115, 22663,
  /* 16800 */ 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679, 21679, 21679, 40330, 29115,
  /* 16815 */ 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679, 32275, 29115, 29115, 37214,
  /* 16830 */ 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754, 22682, 34662, 38886, 32279,
  /* 16845 */ 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024, 38017, 32709, 30024, 38018,
  /* 16860 */ 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16875 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 16890 */ 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 41074, 30949, 30947, 25389,
  /* 16905 */ 40651, 50377, 24061, 24063, 41086, 40648, 25398, 50414, 50429, 21012, 21678, 21679, 21679, 21581, 21679,
  /* 16920 */ 21679, 50689, 50445, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 19713, 20655, 20884, 18817, 18283,
  /* 16935 */ 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453, 18475,
  /* 16950 */ 18491, 19298, 20606, 19086, 25665, 18507, 21041, 50463, 19091, 25670, 18512, 21046, 18559, 21679, 21679,
  /* 16965 */ 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976, 18772,
  /* 16980 */ 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679, 18833,
  /* 16995 */ 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996, 18295,
  /* 17010 */ 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173, 19199,
  /* 17025 */ 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530, 21546,
  /* 17040 */ 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729, 19759,
  /* 17055 */ 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953, 24773,
  /* 17070 */ 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307, 20323,
  /* 17085 */ 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483, 20499,
  /* 17100 */ 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543, 50623,
  /* 17115 */ 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17130 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17145 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071, 21679, 21679,
  /* 17160 */ 46657, 21679, 42157, 49959, 49967, 50489, 50503, 50510, 48929, 50526, 21012, 21678, 21679, 21679, 21581,
  /* 17175 */ 21679, 21679, 50689, 21679, 21679, 21679, 26082, 21679, 21679, 26079, 20701, 18458, 20655, 18291, 18517,
  /* 17190 */ 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437, 18453,
  /* 17205 */ 18475, 18491, 19298, 18980, 19086, 25665, 18507, 21041, 18533, 19091, 25670, 18512, 21046, 18559, 21679,
  /* 17220 */ 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631, 19976,
  /* 17235 */ 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327, 21679,
  /* 17250 */ 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567, 18996,
  /* 17265 */ 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360, 19173,
  /* 17280 */ 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505, 21530,
  /* 17295 */ 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708, 19729,
  /* 17310 */ 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932, 19953,
  /* 17325 */ 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291, 20307,
  /* 17340 */ 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467, 20483,
  /* 17355 */ 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721, 18543,
  /* 17370 */ 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17385 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17400 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 47535, 21679,
  /* 17415 */ 21679, 21679, 21679, 47256, 42838, 50542, 50546, 42854, 50562, 27705, 42848, 21012, 21678, 21679, 21679,
  /* 17430 */ 21581, 21679, 21679, 50689, 50588, 21679, 26186, 21679, 21679, 21679, 26182, 20701, 18458, 20655, 18291,
  /* 17445 */ 18817, 18283, 19825, 18311, 18329, 18345, 19120, 21679, 41088, 21679, 21679, 18384, 18404, 18432, 18437,
  /* 17460 */ 18453, 18475, 18491, 19298, 20419, 19086, 25665, 18507, 21041, 50612, 19091, 25670, 18512, 21046, 18559,
  /* 17475 */ 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977, 18743, 20631,
  /* 17490 */ 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656, 20680, 19327,
  /* 17505 */ 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969, 19049, 20567,
  /* 17520 */ 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144, 19326, 18360,
  /* 17535 */ 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459, 19482, 19505,
  /* 17550 */ 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560, 19675, 19708,
  /* 17565 */ 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895, 19916, 19932,
  /* 17580 */ 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180, 20256, 20291,
  /* 17595 */ 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 20393, 20409, 20435, 20464, 20451, 20467,
  /* 17610 */ 20483, 20499, 20554, 25532, 22136, 25545, 20583, 18459, 20655, 21309, 20622, 20647, 20672, 20696, 20721,
  /* 17625 */ 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679, 21679, 21679,
  /* 17640 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17655 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20927, 21679, 21679, 21679, 21679, 30071,
  /* 17670 */ 21679, 21679, 21679, 21679, 42157, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 25772, 21678, 21679,
  /* 17685 */ 21679, 21581, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32277, 31689, 37215,
  /* 17700 */ 41799, 33639, 41791, 22372, 21679, 21679, 21679, 19120, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17715 */ 21503, 29115, 29115, 29115, 29115, 30561, 37215, 37215, 37215, 37215, 22448, 22682, 22682, 22682, 22625,
  /* 17730 */ 46876, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115,
  /* 17745 */ 29115, 29115, 29115, 22487, 37215, 37215, 37215, 37215, 47918, 22681, 22682, 22682, 22682, 22682, 22742,
  /* 17760 */ 28044, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 40330, 29115, 29115, 29115,
  /* 17775 */ 29115, 40333, 22490, 37215, 37215, 37215, 37215, 22722, 22681, 22682, 22682, 22682, 22682, 22741, 28043,
  /* 17790 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 32276, 29115, 29115, 29115, 29115, 29734, 37215, 37215,
  /* 17805 */ 37215, 37215, 22722, 22679, 22682, 22682, 22682, 22682, 41335, 33489, 21679, 21679, 21679, 21679, 21504,
  /* 17820 */ 29115, 29115, 29115, 22663, 37215, 37215, 37215, 22431, 22682, 22682, 22682, 22682, 33895, 21679, 21679,
  /* 17835 */ 21679, 21679, 40330, 29115, 29115, 37213, 37215, 37215, 32713, 22682, 22682, 28122, 21679, 21679, 21679,
  /* 17850 */ 32275, 29115, 29115, 37214, 37215, 37756, 22682, 22682, 28121, 21679, 41674, 32279, 29115, 37215, 37754,
  /* 17865 */ 22682, 34662, 38886, 32279, 38019, 37757, 22451, 38889, 31690, 37755, 29920, 32278, 40139, 32711, 30024,
  /* 17880 */ 38017, 32709, 30024, 38018, 32711, 45524, 40160, 29980, 28038, 25738, 23085, 21679, 21679, 21679, 21679,
  /* 17895 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17910 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 17925 */ 21679, 21679, 21679, 45287, 21679, 21679, 26868, 50639, 50643, 50643, 50666, 44843, 50659, 50682, 21679,
  /* 17940 */ 21679, 21679, 21679, 21679, 21679, 50689, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 20701, 18458,
  /* 17955 */ 20655, 18291, 18817, 18283, 19825, 18311, 18329, 18345, 21679, 21679, 41088, 21679, 21679, 18384, 18404,
  /* 17970 */ 18432, 18437, 18453, 18475, 18491, 19298, 20606, 19086, 25665, 18507, 21041, 50463, 19091, 25670, 18512,
  /* 17985 */ 21046, 18559, 21679, 21679, 18623, 21679, 21679, 21679, 18646, 18679, 21679, 18716, 35904, 18727, 19977,
  /* 18000 */ 18743, 20631, 19976, 18772, 19689, 21285, 18795, 20821, 20655, 18814, 19692, 21288, 18798, 20824, 20656,
  /* 18015 */ 20680, 19327, 21679, 18833, 18855, 49446, 45592, 18894, 18917, 21679, 18941, 18574, 20705, 50771, 18969,
  /* 18030 */ 19049, 20567, 18996, 18295, 25307, 19034, 19076, 50473, 19107, 18295, 25307, 19034, 19076, 50473, 19144,
  /* 18045 */ 19326, 18360, 19173, 19199, 19215, 32911, 19252, 19236, 19289, 19314, 19343, 20596, 19382, 19443, 19459,
  /* 18060 */ 19482, 19505, 21530, 21546, 19452, 19475, 19498, 20785, 21539, 19521, 19588, 19607, 21679, 19646, 42560,
  /* 18075 */ 19675, 19708, 19729, 19759, 19811, 19843, 19861, 20738, 19879, 19841, 19859, 20736, 19877, 19157, 19895,
  /* 18090 */ 19916, 19932, 19953, 24773, 19969, 19993, 20020, 20110, 20127, 20050, 20109, 20126, 20143, 49266, 20180,
  /* 18105 */ 20256, 20291, 20307, 20323, 25172, 20339, 25162, 25178, 20345, 20361, 20377, 50705, 20409, 20435, 20464,
  /* 18120 */ 20451, 20467, 20483, 50721, 20554, 25532, 22136, 25545, 50758, 18459, 20655, 21309, 20622, 20647, 20672,
  /* 18135 */ 20696, 20721, 18543, 50623, 20754, 20871, 20770, 25427, 20808, 20840, 20856, 20907, 21679, 21679, 21679,
  /* 18150 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679,
  /* 18165 */ 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 21679, 1, 12290, 3, 0, 0, 0, 0, 0,
  /* 18184 */ 0, 0, 90410, 90410, 90410, 90410, 0, 94507, 94507, 90410, 90410, 94507, 94507, 94507, 94507, 94507, 94507,
  /* 18201 */ 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 94507,
  /* 18216 */ 94507, 94507, 94507, 94507, 94507, 0, 94507, 90410, 94507, 94507, 94507, 94507, 94507, 94507, 94507,
  /* 18231 */ 94507, 94507, 366, 94507, 90410, 94507, 94507, 94507, 94507, 94507, 94507, 94507, 69632, 73728, 94507,
  /* 18246 */ 94507, 94507, 94507, 94507, 65536, 94507, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 90410, 94507, 300, 301, 0,
  /* 18266 */ 2134016, 304, 304, 304, 304, 304, 304, 304, 0, 0, 304, 0, 0, 0, 0, 304, 304, 2125824, 2125824, 2179072,
  /* 18286 */ 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824,
  /* 18298 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2461696, 2465792,
  /* 18309 */ 2125824, 2125824, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 310, 0, 0, 0, 0, 2732032, 0,
  /* 18335 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2908160, 2912256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3121152, 0, 0, 0, 0,
  /* 18364 */ 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 2875392, 0, 0, 2424832, 0, 0, 0,
  /* 18391 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 2625536, 0, 2699264, 2715648, 0, 0, 2772992, 2805760, 2830336, 0,
  /* 18414 */ 2867200, 2924544, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 2805760,
  /* 18436 */ 2924544, 0, 0, 0, 0, 0, 2924544, 0, 0, 0, 0, 0, 0, 0, 2732032, 0, 2179072, 2179072, 2179072, 2179072,
  /* 18456 */ 2424832, 2433024, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18467 */ 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072, 2625536,
  /* 18478 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2699264, 2179072, 2715648, 2179072, 2723840,
  /* 18489 */ 2179072, 2732032, 2772992, 2179072, 2179072, 2179072, 2805760, 2179072, 2830336, 2179072, 2179072,
  /* 18500 */ 2179072, 2867200, 2179072, 2179072, 2179072, 2179072, 2924544, 2830336, 2125824, 2125824, 2125824,
  /* 18511 */ 2867200, 2125824, 2125824, 2125824, 2125824, 2924544, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18522 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 1146880, 0, 2179072, 0, 0, 979, 2125824,
  /* 18537 */ 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18548 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824, 2125824,
  /* 18559 */ 2179072, 2179072, 2179072, 2179072, 2457600, 2125824, 2125824, 2125824, 2125824, 2457600, 2125824,
  /* 18570 */ 2125824, 2125824, 2125824, 2183168, 0, 0, 0, 0, 0, 0, 3018752, 3211264, 0, 2691072, 0, 0, 3219456, 0, 0,
  /* 18589 */ 0, 0, 0, 0, 335, 0, 0, 335, 0, 0, 335, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
  /* 18621 */ 0, 0, 2617344, 0, 0, 0, 0, 0, 2789376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 2801664, 0,
  /* 18650 */ 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1572, 0, 0, 0,
  /* 18682 */ 0, 0, 2662400, 0, 2813952, 0, 0, 0, 0, 2375680, 0, 0, 0, 0, 0, 0, 309, 444, 458, 458, 458, 458, 458, 458,
  /* 18706 */ 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 0, 0, 2408448, 0, 0, 2584576, 0, 0, 0, 0, 2842624, 0, 0,
  /* 18729 */ 2842624, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18744 */ 2179072, 2179072, 2179072, 2179072, 2617344, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18755 */ 2662400, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18766 */ 2125824, 300, 0, 0, 0, 300, 2179072, 2179072, 2179072, 2179072, 2179072, 3129344, 2179072, 2179072,
  /* 18780 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18791 */ 2126727, 2126727, 2126727, 2126727, 2125824, 2125824, 2617344, 2125824, 2125824, 2125824, 2125824,
  /* 18802 */ 2125824, 2125824, 2662400, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18813 */ 2125824, 2125824, 2125824, 3129344, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18824 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 2179072, 0, 0, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0,
  /* 18845 */ 0, 0, 0, 0, 304, 304, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 2768896, 2777088, 2781184, 0, 2822144, 0, 0,
  /* 18867 */ 2887680, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 69632, 73728, 0, 420, 420, 0, 0, 65536,
  /* 18893 */ 420, 0, 0, 2854912, 2871296, 0, 0, 2887680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18920 */ 3059712, 0, 0, 0, 3137536, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2916352, 0,
  /* 18948 */ 3211264, 2465792, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 167936, 0, 0, 0, 0, 65536, 0, 2179072,
  /* 18970 */ 2179072, 2179072, 2641920, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2719744, 2179072,
  /* 18981 */ 2179072, 2179072, 2179072, 2179072, 2179072, 0, 904, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832,
  /* 18994 */ 2433024, 2125824, 2179072, 3137536, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19005 */ 2179072, 2179072, 3211264, 2179072, 0, 0, 0, 0, 0, 0, 349, 350, 351, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0,
  /* 19030 */ 0, 398, 0, 0, 2125824, 2125824, 2641920, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2719744,
  /* 19044 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2768896, 2777088, 2781184, 2797568, 2822144, 2179072,
  /* 19055 */ 2179072, 2179072, 2887680, 2179072, 2916352, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 904,
  /* 19068 */ 2126727, 2126727, 2126727, 2126727, 2126727, 2425735, 2433927, 2126727, 2777088, 2781184, 2797568,
  /* 19079 */ 2822144, 2125824, 2125824, 2125824, 2887680, 2125824, 2916352, 2125824, 2125824, 2125824, 2125824,
  /* 19090 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2625536, 2125824, 2125824,
  /* 19101 */ 2125824, 2125824, 2125824, 2125824, 2699264, 2125824, 2125824, 3137536, 2125824, 2125824, 2125824,
  /* 19112 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3211264, 2125824, 0, 0, 0, 0, 0, 0, 366, 366, 0, 0,
  /* 19130 */ 0, 0, 0, 0, 0, 0, 308, 308, 308, 0, 0, 0, 0, 0, 2125824, 3137536, 2125824, 2125824, 2125824, 2125824,
  /* 19150 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3211264, 2125824, 2179072, 2125824, 2125824, 2179072,
  /* 19161 */ 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 2510848, 0, 0, 2605056, 0, 0, 0, 0,
  /* 19180 */ 2891776, 0, 2928640, 0, 0, 0, 0, 0, 0, 0, 669, 0, 0, 0, 0, 0, 731, 0, 782, 0, 0, 0, 3166208, 3174400, 0,
  /* 19205 */ 0, 3223552, 3039232, 0, 0, 0, 0, 0, 3076096, 2650112, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19228 */ 3092480, 0, 0, 0, 0, 0, 0, 2431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3125248, 3145728, 0, 0, 0, 2928640, 0, 0, 0,
  /* 19254 */ 2576384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2387968, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
  /* 19284 */ 0, 0, 0, 0, 0, 2682880, 0, 0, 0, 0, 0, 0, 3117056, 2387968, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19303 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3121152, 2179072, 2179072, 2179072, 2179072,
  /* 19314 */ 2179072, 2453504, 2179072, 2473984, 2482176, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19325 */ 2531328, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19336 */ 2125824, 2125824, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2605056, 2179072, 2629632, 2179072, 2179072,
  /* 19351 */ 2650112, 2179072, 2179072, 2179072, 2707456, 2179072, 2736128, 2179072, 2179072, 2125824, 0, 2126727,
  /* 19363 */ 2126727, 2126727, 2409351, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 19374 */ 2126727, 3040135, 2126727, 2126727, 3076999, 2126727, 2126727, 2126727, 2179072, 2179072, 2179072,
  /* 19385 */ 3039232, 2179072, 2179072, 3076096, 2179072, 2179072, 3125248, 2179072, 2179072, 3145728, 2179072,
  /* 19396 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 300, 0,
  /* 19409 */ 301, 0, 0, 0, 301, 0, 304, 0, 0, 0, 304, 0, 305, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 704,
  /* 19436 */ 0, 0, 0, 0, 0, 0, 0, 3174400, 2179072, 2179072, 3194880, 3198976, 2179072, 0, 0, 0, 0, 0, 0, 2387968,
  /* 19456 */ 2125824, 2125824, 2125824, 2420736, 2125824, 2125824, 2125824, 2125824, 2125824, 2453504, 2125824,
  /* 19467 */ 2473984, 2482176, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2482176, 2125824, 2125824,
  /* 19478 */ 2125824, 2125824, 2125824, 2125824, 2531328, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19489 */ 2125824, 2605056, 2125824, 2629632, 2125824, 2125824, 2650112, 2125824, 2125824, 2125824, 2629632,
  /* 19500 */ 2125824, 2125824, 2650112, 2125824, 2125824, 2125824, 2707456, 2125824, 2736128, 2125824, 2125824,
  /* 19511 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2891776, 2125824, 2125824, 2928640, 2125824,
  /* 19522 */ 3194880, 3198976, 2125824, 2179072, 2125824, 2125824, 2179072, 2179072, 3117056, 3223552, 2125824,
  /* 19533 */ 2125824, 3117056, 3223552, 2125824, 2125824, 0, 0, 0, 300, 0, 0, 0, 304, 0, 0, 0, 2424832, 2433024, 0, 0,
  /* 19553 */ 0, 0, 0, 329, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19582 */ 751, 0, 0, 0, 0, 0, 2125824, 3117056, 3223552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 2818048,
  /* 19608 */ 2850816, 0, 2920448, 0, 0, 3006464, 0, 0, 3026944, 0, 0, 3149824, 0, 3207168, 0, 0, 0, 0, 0, 332, 333,
  /* 19629 */ 334, 0, 0, 0, 0, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 536, 0, 0, 0, 2727936, 0, 0, 0, 3088384, 0, 0, 0, 0,
  /* 19658 */ 3072000, 0, 0, 0, 0, 0, 0, 366, 366, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 2637824, 0, 0, 0, 0, 2621440, 0,
  /* 19683 */ 3186688, 2904064, 0, 2965504, 0, 0, 2179072, 2179072, 2125824, 0, 2125824, 2125824, 2125824, 2408448,
  /* 19697 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19708 */ 2416640, 2179072, 2179072, 2179072, 2445312, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19719 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2126728, 2125824, 2551808,
  /* 19730 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2637824, 2179072, 2179072, 2179072, 2179072, 2727936,
  /* 19741 */ 2752512, 2179072, 2179072, 2179072, 2179072, 2126727, 2126727, 2126727, 2126727, 2126802, 2126802,
  /* 19752 */ 2126802, 2126802, 0, 0, 0, 0, 0, 2846720, 2850816, 2179072, 2899968, 2920448, 2179072, 2179072, 2949120,
  /* 19767 */ 2179072, 2179072, 2998272, 2179072, 3006464, 2179072, 2179072, 3026944, 2125824, 3072000, 3088384,
  /* 19778 */ 2125824, 3100672, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3227648, 979, 0, 0, 0, 0,
  /* 19793 */ 0, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2050, 0, 0, 0, 0, 0, 2179072, 3072000, 3088384, 3100672, 2179072,
  /* 19816 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3227648, 0, 0, 2125824, 2125824, 0, 0, 0, 0, 0, 0,
  /* 19833 */ 0, 0, 0, 0, 0, 2424832, 2433024, 0, 2125824, 2125824, 2416640, 2125824, 2125824, 2125824, 2445312,
  /* 19848 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19859 */ 2125824, 2125824, 2551808, 2125824, 2125824, 2125824, 2125824, 2125824, 2637824, 2125824, 2125824,
  /* 19870 */ 2125824, 2125824, 2727936, 2752512, 2125824, 2125824, 2125824, 2125824, 2125824, 3026944, 2125824,
  /* 19881 */ 3072000, 3088384, 2125824, 3100672, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19892 */ 3227648, 0, 0, 2514944, 0, 0, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 304, 304, 0, 304, 0,
  /* 19917 */ 0, 3182592, 2670592, 0, 2744320, 0, 0, 0, 0, 0, 2932736, 0, 0, 0, 3063808, 0, 2543616, 2666496, 0,
  /* 19936 */ 2633728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 0, 305, 2961408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19965 */ 0, 0, 0, 3215360, 2179072, 2179072, 2543616, 2547712, 2179072, 2179072, 2596864, 2179072, 2179072,
  /* 19978 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19989 */ 2179072, 2179072, 2179072, 2584576, 2179072, 2932736, 2179072, 2179072, 2179072, 3002368, 2179072,
  /* 20000 */ 2179072, 2179072, 2179072, 3063808, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 1348,
  /* 20012 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2179072, 3182592, 2125824,
  /* 20023 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2494464, 2125824, 2125824, 2514944,
  /* 20034 */ 2125824, 2125824, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 305, 2424832, 2433024, 0, 2125824, 2125824, 3182592,
  /* 20053 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2494464, 2125824, 2125824,
  /* 20064 */ 2514944, 2125824, 2125824, 0, 0, 180224, 0, 0, 0, 0, 0, 0, 0, 0, 2424832, 2433024, 0, 0, 0, 0, 0, 357, 0,
  /* 20087 */ 0, 468, 468, 468, 468, 468, 468, 468, 468, 473, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
  /* 20108 */ 473, 2125824, 2125824, 2543616, 2547712, 2125824, 2125824, 2596864, 2125824, 2125824, 2125824, 2125824,
  /* 20120 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2932736, 2125824, 2125824,
  /* 20131 */ 2125824, 3002368, 2125824, 2125824, 2125824, 2125824, 3063808, 2125824, 2125824, 2125824, 2125824,
  /* 20142 */ 2125824, 2125824, 2125824, 2125824, 3182592, 2179072, 2125824, 2125824, 2179072, 2179072, 2125824,
  /* 20153 */ 2125824, 2125824, 2125824, 2441216, 0, 0, 0, 0, 0, 0, 2442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 0, 0, 0, 0,
  /* 20178 */ 0, 0, 2646016, 2613248, 2703360, 0, 0, 0, 0, 2981888, 0, 0, 3051520, 3133440, 0, 2985984, 2396160, 0, 0,
  /* 20197 */ 0, 0, 0, 377, 0, 0, 0, 0, 369, 0, 386, 0, 352, 0, 0, 0, 0, 0, 387, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536,
  /* 20225 */ 0, 0, 0, 0, 0, 443, 0, 0, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469,
  /* 20249 */ 554, 577, 554, 577, 554, 554, 577, 3158016, 0, 0, 0, 2740224, 0, 0, 0, 0, 0, 2793472, 0, 0, 0, 0, 0, 0, 0,
  /* 20274 */ 1641, 0, 0, 0, 0, 0, 0, 0, 0, 2406, 0, 0, 0, 0, 0, 0, 0, 2469888, 2506752, 2756608, 0, 0, 2580480, 0, 0,
  /* 20299 */ 0, 2396160, 2400256, 2179072, 2179072, 2441216, 2179072, 2469888, 2179072, 2179072, 2179072, 2519040,
  /* 20311 */ 2179072, 2179072, 2179072, 2179072, 2588672, 2179072, 2613248, 2646016, 2179072, 2179072, 2695168,
  /* 20322 */ 2756608, 2179072, 2179072, 2179072, 2936832, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20333 */ 2179072, 3133440, 2179072, 2179072, 3158016, 3170304, 2588672, 2125824, 2613248, 2646016, 2125824,
  /* 20344 */ 2125824, 2695168, 2756608, 2125824, 2125824, 2125824, 2125824, 2936832, 2125824, 2125824, 2125824,
  /* 20355 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3133440, 2125824, 2125824, 3158016, 3170304, 3178496,
  /* 20366 */ 2506752, 2506752, 2506752, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 2486272, 0, 0, 0, 0,
  /* 20381 */ 0, 2678784, 2859008, 3010560, 0, 3112960, 3203072, 0, 0, 3047424, 0, 3153920, 2940928, 0, 2760704, 3140,
  /* 20397 */ 0, 0, 0, 0, 2957312, 0, 0, 2826240, 3162112, 2428928, 0, 3022848, 2764800, 2572288, 0, 0, 3055616,
  /* 20414 */ 2179072, 2428928, 2437120, 2179072, 2486272, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 903,
  /* 20427 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2179072, 2179072, 2654208,
  /* 20438 */ 2678784, 2760704, 2764800, 2859008, 2973696, 2179072, 3010560, 2179072, 3022848, 2179072, 2179072,
  /* 20449 */ 2179072, 3153920, 2764800, 2785280, 2859008, 2973696, 2125824, 3010560, 2125824, 3022848, 2125824,
  /* 20460 */ 2125824, 2125824, 2125824, 3153920, 2125824, 2428928, 2437120, 2125824, 2486272, 2125824, 2125824,
  /* 20471 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2654208, 2678784, 2760704, 2764800, 2785280,
  /* 20482 */ 2859008, 2973696, 2125824, 3010560, 2125824, 3022848, 2125824, 2125824, 2125824, 2125824, 3153920,
  /* 20493 */ 2179072, 3055616, 2125824, 3055616, 2125824, 3055616, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0,
  /* 20510 */ 3140, 0, 0, 2838528, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 3273, 536, 536, 536, 536, 536, 536,
  /* 20532 */ 1347, 904, 558, 558, 558, 1353, 558, 558, 558, 558, 0, 582, 582, 582, 582, 582, 582, 998, 582, 582, 1012,
  /* 20553 */ 582, 3231744, 2568192, 2564096, 0, 2945024, 2179072, 2179072, 2498560, 2179072, 2179072, 2179072, 2555904,
  /* 20566 */ 2564096, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3043328, 2179072, 3067904,
  /* 20577 */ 2179072, 2179072, 2179072, 2179072, 3104768, 2179072, 0, 0, 0, 0, 0, 2748416, 2883584, 0, 3140, 0, 0, 0,
  /* 20595 */ 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2891776, 2179072, 2179072, 2928640, 2179072,
  /* 20607 */ 2179072, 2179072, 2179072, 2179072, 2179072, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832,
  /* 20620 */ 2433024, 2125824, 3014656, 0, 0, 0, 0, 2994176, 2179072, 2179072, 2502656, 2179072, 2179072, 2179072,
  /* 20634 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2801664, 2813952, 2179072, 2834432, 2842624, 2179072,
  /* 20645 */ 2179072, 2179072, 2179072, 2179072, 3014656, 2179072, 2179072, 2125824, 2125824, 2502656, 2125824,
  /* 20656 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20667 */ 2125824, 2125824, 2125824, 2125824, 3129344, 2125824, 3014656, 2125824, 2125824, 2125824, 2125824,
  /* 20678 */ 2125824, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20689 */ 2125824, 2125824, 2125824, 2179072, 2125824, 2125824, 2179072, 2125824, 3014656, 2125824, 2125824,
  /* 20700 */ 2125824, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20716 */ 2179072, 2179072, 2461696, 2465792, 2179072, 2179072, 2592768, 2179072, 2179072, 2179072, 2179072,
  /* 20727 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824,
  /* 20738 */ 2125824, 2846720, 2850816, 2125824, 2899968, 2920448, 2125824, 2125824, 2949120, 2125824, 2125824,
  /* 20749 */ 2998272, 2125824, 3006464, 2125824, 2125824, 2179072, 2609152, 2179072, 2863104, 2179072, 2179072,
  /* 20760 */ 2179072, 3035136, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 2863104, 3035136,
  /* 20771 */ 2125824, 2527232, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824,
  /* 20784 */ 2527232, 2125824, 2125824, 2125824, 2891776, 2125824, 2125824, 2928640, 2125824, 2125824, 2125824,
  /* 20795 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1052, 0, 0, 2179072,
  /* 20808 */ 2404352, 2179072, 2179072, 2179072, 2179072, 3031040, 2404352, 2125824, 2125824, 2125824, 2125824,
  /* 20819 */ 3031040, 2404352, 2125824, 2125824, 2125824, 2125824, 2125824, 2801664, 2813952, 2125824, 2834432,
  /* 20830 */ 2842624, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20841 */ 3031040, 2539520, 0, 2953216, 2179072, 2658304, 2977792, 2179072, 2125824, 2658304, 2977792, 2125824,
  /* 20853 */ 2125824, 2658304, 2977792, 2125824, 2711552, 2560000, 2179072, 2560000, 2125824, 2560000, 2125824,
  /* 20864 */ 2179072, 2125824, 2125824, 2179072, 2125824, 2125824, 2179072, 2125824, 2125824, 2125824, 3035136,
  /* 20875 */ 2125824, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 2863104, 2125824, 2125824,
  /* 20886 */ 2125824, 2125824, 0, 2125824, 2126803, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20898 */ 2125824, 2125824, 2125824, 2125824, 2125824, 245760, 0, 0, 2179072, 2125824, 2990080, 2990080, 2990080, 0,
  /* 20912 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 356, 357, 358, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20943 */ 305, 0, 0, 111046, 111046, 111046, 454, 454, 111046, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
  /* 20962 */ 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 454, 111046, 111046,
  /* 20975 */ 111046, 111046, 111046, 111046, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0,
  /* 20999 */ 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 2500, 536, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 300,
  /* 21024 */ 301, 0, 2134016, 304, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824,
  /* 21037 */ 2125824, 2125824, 2125824, 1052, 2125824, 2125824, 2125824, 2125824, 2125824, 3121152, 2125824, 2125824,
  /* 21049 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2179072, 2125824, 2125824,
  /* 21061 */ 2457600, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 300, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0,
  /* 21087 */ 0, 0, 33398, 301, 0, 2134016, 49786, 2105633, 12290, 3, 0, 0, 295, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
  /* 21112 */ 1679, 1680, 1681, 1682, 0, 0, 0, 0, 0, 0, 0, 1692, 0, 0, 0, 0, 0, 0, 0, 0, 2937, 2938, 0, 0, 0, 0, 2943,
  /* 21139 */ 0, 122880, 122880, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880,
  /* 21153 */ 122880, 122880, 122880, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880,
  /* 21168 */ 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 122880,
  /* 21195 */ 122880, 122880, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 388, 0, 122880, 0,
  /* 21222 */ 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 122880, 2105633,
  /* 21242 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 300, 301, 0, 2134016, 304, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0,
  /* 21268 */ 0, 0, 0, 0, 0, 401, 0, 0, 0, 2179072, 2179072, 2125824, 1806, 2125824, 2125824, 2125824, 2408448, 2125824,
  /* 21286 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21297 */ 2584576, 2125824, 2125824, 2125824, 2125824, 2125824, 2617344, 1902, 2125824, 2125824, 2125824, 2408448,
  /* 21309 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21320 */ 2125824, 0, 2502656, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0,
  /* 21349 */ 0, 131072, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 3347,
  /* 21374 */ 536, 536, 536, 536, 536, 536, 1347, 904, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1394, 558, 558, 558,
  /* 21395 */ 558, 1399, 558, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 131072, 0, 0, 0, 0, 131072,
  /* 21413 */ 131072, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 135168,
  /* 21438 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 308, 0, 0, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168,
  /* 21460 */ 135168, 0, 0, 135168, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 341, 342, 1,
  /* 21487 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 631, 632, 0, 2134016, 635, 636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21514 */ 0, 0, 0, 0, 536, 536, 0, 0, 1441, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824,
  /* 21531 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3039232, 2125824, 2125824,
  /* 21542 */ 3076096, 2125824, 2125824, 2125824, 3125248, 2125824, 2125824, 3145728, 2125824, 2125824, 2125824,
  /* 21553 */ 3174400, 2125824, 2125824, 3194880, 3198976, 2125824, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21575 */ 0, 139264, 301, 0, 305, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 366, 366, 0, 0, 305, 0, 0, 0,
  /* 21603 */ 305, 69632, 139683, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 3272, 536, 536, 536,
  /* 21626 */ 3276, 536, 536, 536, 536, 536, 2546, 536, 536, 536, 536, 536, 536, 536, 2551, 536, 536, 536, 536, 536,
  /* 21646 */ 2155, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1736, 536, 536, 536, 536, 305, 305, 305, 305,
  /* 21667 */ 305, 305, 305, 0, 0, 305, 0, 0, 0, 0, 305, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 1,
  /* 21697 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 300, 33401, 0, 2134016, 304, 49789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21723 */ 0, 0, 0, 0, 0, 642, 0, 0, 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 366, 208896, 1, 12290, 3, 0,
  /* 21752 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 302, 0, 0, 302, 302, 143662, 302, 302, 302, 302, 302, 302, 302, 302,
  /* 21778 */ 302, 367, 302, 0, 143662, 302, 302, 302, 302, 302, 302, 143662, 372, 302, 302, 302, 302, 302, 302, 302,
  /* 21798 */ 302, 302, 302, 302, 302, 302, 302, 302, 302, 143662, 302, 302, 143662, 302, 302, 302, 143732, 302, 302,
  /* 21817 */ 302, 143732, 69632, 73728, 302, 302, 143662, 302, 302, 65536, 302, 302, 302, 302, 302, 302, 302, 302,
  /* 21835 */ 143662, 302, 143662, 143662, 143662, 143662, 302, 143662, 143662, 143662, 143662, 143662, 143662, 143662,
  /* 21849 */ 302, 0, 302, 0, 302, 302, 302, 302, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662,
  /* 21865 */ 143662, 302, 302, 302, 302, 143662, 302, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143732,
  /* 21880 */ 143662, 143662, 143662, 302, 302, 143662, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 143732,
  /* 21898 */ 302, 302, 302, 302, 143732, 143732, 143732, 143732, 143732, 143732, 143732, 143662, 143662, 143732,
  /* 21912 */ 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662, 143662,
  /* 21925 */ 143662, 143662, 143662, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656,
  /* 21951 */ 0, 0, 0, 155648, 155648, 0, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21966 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21979 */ 155648, 155648, 155648, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 2457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 3158,
  /* 22005 */ 536, 536, 536, 3161, 536, 0, 12290, 3, 0, 0, 2183168, 126976, 0, 0, 0, 0, 300, 301, 0, 2134016, 304,
  /* 22026 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 22039 */ 159744, 159744, 159744, 163840, 159744, 159744, 159744, 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22058 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 163840, 159744, 159744,
  /* 22071 */ 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 192967, 192967, 192967, 192967, 192967, 192967,
  /* 22089 */ 192967, 192967, 192967, 192967, 0, 192967, 159744, 0, 25157, 159744, 0, 0, 0, 159744, 159744, 0, 0, 0,
  /* 22107 */ 25157, 25157, 159744, 25157, 25157, 25157, 25157, 25157, 25157, 25157, 25157, 159744, 25157, 159744,
  /* 22121 */ 159744, 159744, 159744, 25157, 25157, 0, 24576, 979, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832,
  /* 22135 */ 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3141632,
  /* 22146 */ 2125824, 2125824, 2498560, 2125824, 2125824, 2125824, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 22158 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0,
  /* 22175 */ 167936, 167936, 167936, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936,
  /* 22194 */ 167936, 167936, 167936, 0, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 172032,
  /* 22218 */ 172032, 0, 172032, 0, 0, 172032, 172032, 0, 172032, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 536, 536, 536,
  /* 22240 */ 3344, 536, 536, 536, 536, 3348, 536, 536, 536, 536, 536, 2531, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 22260 */ 536, 536, 1296, 536, 536, 536, 536, 536, 172032, 172032, 172032, 0, 172032, 172032, 172032, 172032,
  /* 22276 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 1, 290, 3,
  /* 22291 */ 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 399, 0, 0, 0, 325, 0, 176128, 176128, 176128, 176128,
  /* 22315 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 0, 0,
  /* 22330 */ 0, 0, 0, 0, 176128, 176128, 176128, 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128,
  /* 22352 */ 176128, 176128, 176128, 176128, 1, 0, 3, 78116, 78116, 294, 0, 629, 0, 0, 0, 300, 301, 0, 2134016, 304,
  /* 22372 */ 582, 582, 78116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 387, 339, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
  /* 22402 */ 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 309, 558, 1387, 558,
  /* 22432 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 0, 0, 2306, 0, 0, 979, 582, 582, 582,
  /* 22454 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 536, 558, 582, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22480 */ 0, 0, 0, 753, 0, 0, 0, 536, 536, 1347, 0, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 22504 */ 558, 558, 1886, 0, 0, 0, 2021, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2031, 0, 0, 0, 0, 0, 536, 3343, 536, 536,
  /* 22531 */ 3345, 536, 536, 536, 536, 536, 536, 536, 1778, 536, 536, 536, 536, 536, 536, 536, 536, 1309, 536, 536,
  /* 22551 */ 1311, 536, 536, 536, 1315, 558, 558, 558, 558, 2240, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 22571 */ 558, 558, 2570, 558, 558, 558, 558, 2265, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 22592 */ 558, 0, 2306, 0, 582, 582, 582, 582, 582, 582, 582, 2315, 582, 582, 582, 582, 582, 582, 582, 1043, 582,
  /* 22613 */ 582, 582, 582, 0, 0, 0, 536, 582, 582, 582, 582, 2327, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 22635 */ 582, 0, 536, 582, 558, 536, 582, 2352, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 22656 */ 582, 1496, 582, 536, 536, 536, 2517, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 0, 0,
  /* 22677 */ 558, 558, 0, 0, 0, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1482,
  /* 22699 */ 0, 0, 0, 0, 0, 2740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 383, 385, 0, 0, 0, 2858, 558, 558, 558, 558, 558,
  /* 22727 */ 558, 558, 558, 558, 558, 558, 558, 558, 0, 0, 0, 582, 582, 2907, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 22749 */ 582, 582, 582, 582, 582, 536, 582, 558, 536, 0, 0, 2933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 638, 0, 0,
  /* 22777 */ 536, 2998, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1753, 536, 3038, 558,
  /* 22797 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1384, 582, 3080, 582, 582, 582, 582,
  /* 22818 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1936, 582, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22844 */ 0, 0, 771, 0, 0, 0, 0, 3196, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 22867 */ 1439, 3217, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3225, 582, 582, 582, 582, 582, 582, 1929, 582,
  /* 22887 */ 582, 582, 582, 582, 582, 582, 582, 582, 1475, 582, 582, 582, 582, 582, 582, 536, 536, 3280, 536, 536, 536,
  /* 22908 */ 3281, 3282, 536, 536, 536, 536, 536, 536, 536, 536, 894, 536, 536, 536, 536, 558, 558, 558, 558, 558,
  /* 22928 */ 3299, 3300, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 3071, 582, 582, 582, 582, 582,
  /* 22948 */ 582, 582, 582, 582, 2900, 582, 582, 582, 582, 582, 582, 3319, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 22969 */ 536, 536, 558, 558, 582, 582, 0, 0, 0, 0, 536, 536, 536, 536, 536, 3573, 536, 558, 558, 558, 3187, 558,
  /* 22991 */ 558, 558, 558, 558, 558, 558, 3192, 558, 558, 558, 536, 536, 3353, 536, 536, 536, 536, 558, 558, 558, 558,
  /* 23012 */ 558, 558, 3362, 558, 558, 558, 558, 558, 558, 939, 941, 558, 558, 558, 558, 558, 558, 558, 558, 1407, 558,
  /* 23033 */ 558, 558, 1414, 1416, 558, 558, 558, 558, 558, 558, 3368, 558, 558, 558, 3372, 558, 582, 582, 582, 582,
  /* 23053 */ 582, 582, 582, 2370, 582, 582, 582, 582, 582, 582, 582, 582, 2331, 582, 582, 582, 582, 582, 582, 582,
  /* 23073 */ 3378, 582, 582, 582, 582, 582, 582, 3384, 582, 582, 582, 3388, 582, 536, 558, 582, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23097 */ 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 3505, 536, 536, 536, 536, 536, 536, 536, 536, 558, 558, 558, 558, 3517,
  /* 23122 */ 558, 558, 558, 558, 558, 558, 1369, 558, 1374, 558, 558, 1378, 558, 558, 1381, 558, 184927, 184927,
  /* 23140 */ 184927, 184927, 184927, 184927, 184927, 0, 0, 184927, 0, 0, 0, 0, 184927, 184927, 1, 12290, 3, 78116,
  /* 23158 */ 78116, 294, 0, 0, 0, 0, 0, 300, 301, 0, 2134016, 304, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23186 */ 1100, 0, 0, 0, 192967, 192967, 192967, 192967, 192967, 192967, 192967, 192967, 192967, 192967, 192967,
  /* 23201 */ 192967, 192967, 192967, 192967, 192967, 0, 0, 192967, 192967, 192967, 0, 0, 192967, 0, 0, 0, 0, 0, 0, 0,
  /* 23221 */ 0, 0, 0, 337, 338, 0, 0, 0, 0, 192967, 192967, 0, 192967, 192967, 192967, 192967, 192967, 192967, 0, 0, 0,
  /* 23242 */ 0, 0, 0, 0, 0, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
  /* 23258 */ 249856, 249856, 249856, 249856, 249856, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23284 */ 0, 0, 657, 303, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 408, 408, 408, 0, 408, 408, 408, 408, 408, 408, 408, 0, 0,
  /* 23311 */ 408, 0, 0, 0, 0, 408, 408, 1, 12290, 3, 78116, 78116, 294, 0, 0, 0, 0, 0, 300, 301, 0, 303, 304, 0, 0, 0,
  /* 23337 */ 0, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 639, 0, 0, 0, 0, 0, 0, 0, 1554, 0, 0, 0, 1560, 0, 0, 0, 1566, 0,
  /* 23368 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 0, 1554, 2015, 0, 0, 0, 0, 1560, 2017, 0, 0,
  /* 23394 */ 0, 0, 1566, 2019, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 2017, 0, 2019, 0,
  /* 23424 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 308, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0,
  /* 23457 */ 0, 0, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204800, 204800, 0, 204800, 204800,
  /* 23484 */ 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 205108,
  /* 23497 */ 204800, 204800, 205107, 205108, 204800, 205107, 204800, 205107, 204800, 204800, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23515 */ 254409, 254409, 254409, 254409, 254409, 254409, 254409, 254409, 254409, 254409, 254409, 254409, 254409,
  /* 23528 */ 254409, 254409, 254409, 0, 0, 0, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 2183796, 0, 0, 0, 0, 0, 300, 301, 151552,
  /* 23552 */ 2134016, 304, 305, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 0, 151552, 0, 0, 0,
  /* 23580 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1115, 0, 0, 0, 2831239, 2126727, 2126727, 2126727, 2868103, 2126727, 2126727,
  /* 23600 */ 2126727, 2126727, 2925447, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126802,
  /* 23611 */ 2126802, 2126802, 2126802, 2126802, 2593746, 2126802, 2126802, 2126802, 0, 0, 979, 2126802, 2126802,
  /* 23624 */ 2126802, 2126802, 2126802, 2425810, 2434002, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 23635 */ 2663378, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 23646 */ 2126802, 2126802, 2179072, 2126802, 2126727, 2179072, 2716626, 2126802, 2724818, 2126802, 2733010,
  /* 23657 */ 2773970, 2126802, 2126802, 2126802, 2806738, 2126802, 2831314, 2126802, 2126802, 2126802, 2868178,
  /* 23668 */ 3122130, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 0,
  /* 23680 */ 2179072, 2126802, 2126727, 2457600, 2179072, 2179072, 2179072, 2179072, 2458503, 2126727, 2126727,
  /* 23691 */ 2126727, 2126727, 2458578, 2126802, 2126802, 2126802, 2126802, 2183168, 0, 0, 0, 0, 0, 641, 747, 748, 749,
  /* 23708 */ 0, 0, 0, 0, 0, 755, 756, 0, 2126802, 2126802, 2126802, 2409426, 2126802, 2126802, 2126802, 2126802,
  /* 23724 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 23735 */ 3130322, 2126802, 2126802, 2802642, 2814930, 2126802, 2835410, 2843602, 2126802, 2126802, 2126802,
  /* 23746 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2585554, 2126802, 2126802, 2126802, 2126802,
  /* 23757 */ 2126802, 2618322, 2777991, 2782087, 2798471, 2823047, 2126727, 2126727, 2126727, 2888583, 2126727,
  /* 23768 */ 2917255, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2802567, 2814855, 2126727, 2835335,
  /* 23779 */ 2843527, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 3122055, 2126727, 2126727, 2126727,
  /* 23790 */ 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2585479, 2126727,
  /* 23801 */ 2126727, 2126727, 2126727, 3138439, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 23812 */ 2126727, 2126727, 3212167, 2126727, 0, 0, 0, 0, 0, 0, 366, 366, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
  /* 23835 */ 2134016, 0, 0, 0, 0, 0, 0, 57344, 0, 2778066, 2782162, 2798546, 2823122, 2126802, 2126802, 2126802,
  /* 23851 */ 2888658, 2126802, 2917330, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 3044306, 2126802,
  /* 23862 */ 3068882, 2126802, 2126802, 2126802, 2126802, 2126802, 3105746, 2126802, 2126802, 3138514, 2126802,
  /* 23873 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 3212242, 2126802, 2179072,
  /* 23884 */ 2126802, 2126727, 2179072, 2179072, 2126727, 2126727, 2126802, 2126802, 0, 0, 0, 0, 0, 0, 2510848,
  /* 23899 */ 3174400, 2179072, 2179072, 3194880, 3198976, 2179072, 0, 0, 0, 0, 0, 0, 2388871, 2126727, 2126727,
  /* 23914 */ 2126727, 2126727, 3097479, 2126802, 2528210, 2126802, 2126802, 2126802, 2126802, 2126802, 3097554, 0, 0,
  /* 23927 */ 0, 0, 0, 0, 366, 366, 1138, 0, 0, 0, 0, 0, 0, 0, 379, 0, 382, 0, 0, 0, 382, 0, 0, 2421639, 2126727,
  /* 23952 */ 2126727, 2126727, 2126727, 2126727, 2454407, 2126727, 2474887, 2483079, 2126727, 2126727, 2126727,
  /* 23963 */ 2126727, 2126727, 2126727, 3134343, 2126727, 2126727, 3158919, 3171207, 3179399, 2397138, 2401234,
  /* 23974 */ 2126802, 2126802, 2442194, 2532231, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 23985 */ 2605959, 2126727, 2630535, 2126727, 2126727, 2651015, 2126727, 2126727, 2618247, 2126727, 2126727,
  /* 23996 */ 2126727, 2126727, 2126727, 2126727, 2663303, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24007 */ 3044231, 2126727, 3068807, 2126727, 2126727, 2126727, 2126727, 2126727, 3105671, 2126727, 2126727,
  /* 24018 */ 2708359, 2126727, 2737031, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24029 */ 2892679, 2126727, 2126727, 2929543, 3126151, 2126727, 2126727, 3146631, 2126727, 2126727, 2126727,
  /* 24040 */ 3175303, 2126727, 2126727, 3195783, 3199879, 2126727, 0, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0, 0, 361, 0,
  /* 24062 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 2388946, 2126802, 2126802, 2126802,
  /* 24086 */ 2421714, 2126802, 2126802, 2126802, 2126802, 2126802, 2454482, 2126802, 2474962, 2483154, 2126802,
  /* 24097 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2532306, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24108 */ 2126802, 2126802, 2606034, 2126802, 2630610, 2126802, 2126802, 2651090, 2126802, 2126802, 2126802,
  /* 24119 */ 2708434, 2126802, 2737106, 2126802, 2126802, 2126802, 2126802, 2126802, 2449408, 0, 2535424, 3035136, 0,
  /* 24132 */ 0, 0, 2179072, 2449408, 2179072, 2535424, 3040210, 2126802, 2126802, 3077074, 2126802, 2126802, 2126802,
  /* 24145 */ 3126226, 2126802, 2126802, 3146706, 2126802, 2126802, 2126802, 3175378, 2126802, 2126727, 2179072,
  /* 24156 */ 2179072, 2179072, 2179072, 2179072, 2126727, 2126727, 2126727, 2126727, 2126727, 0, 2126802, 2126802,
  /* 24168 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2462674, 2466770,
  /* 24179 */ 2126802, 2126802, 2126802, 3195858, 3199954, 2126802, 2179072, 2126802, 2126727, 2179072, 2179072,
  /* 24190 */ 3117056, 3223552, 2126727, 2126727, 3117959, 3224455, 2126802, 2126802, 2544594, 2548690, 2126802,
  /* 24201 */ 2126802, 2597842, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24212 */ 2925522, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24223 */ 2126802, 2126802, 0, 2502656, 0, 0, 2126802, 3118034, 3224530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
  /* 24246 */ 0, 0, 2179072, 3072000, 3088384, 3100672, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 24259 */ 3227648, 0, 0, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24272 */ 2126727, 2462599, 2466695, 2126727, 2126727, 2417543, 2126727, 2126727, 2126727, 2446215, 2126727,
  /* 24283 */ 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24294 */ 2126727, 2126727, 2126727, 2126727, 2126802, 2126802, 2126802, 2126802, 2552711, 2126727, 2126727,
  /* 24305 */ 2126727, 2126727, 2126727, 2638727, 2126727, 2126727, 2126727, 2126727, 2728839, 2753415, 2126727,
  /* 24316 */ 2126727, 2126727, 2700167, 2126727, 2716551, 2126727, 2724743, 2126727, 2732935, 2773895, 2126727,
  /* 24327 */ 2126727, 2126727, 2806663, 2126727, 2126727, 2847623, 2851719, 2126727, 2900871, 2921351, 2126727,
  /* 24338 */ 2126727, 2950023, 2126727, 2126727, 2999175, 2126727, 3007367, 2126727, 2126727, 2642823, 2126727,
  /* 24349 */ 2126727, 2126727, 2126727, 2126727, 2126727, 2720647, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24360 */ 2769799, 3027847, 2126727, 3072903, 3089287, 2126727, 3101575, 2126727, 2126727, 2126727, 2126727,
  /* 24371 */ 2126727, 2126727, 2126727, 3228551, 0, 0, 0, 0, 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2026, 0, 0, 2029,
  /* 24395 */ 2030, 0, 0, 2126802, 2126802, 3027922, 2126802, 3072978, 3089362, 2126802, 3101650, 2126802, 2126802,
  /* 24408 */ 2126802, 2126802, 2126802, 2126802, 2126802, 3228626, 2179072, 3182592, 2126727, 2126727, 2126727,
  /* 24419 */ 2126727, 2126727, 2126727, 2126727, 2126727, 2495367, 2126727, 2126727, 2515847, 2126727, 2126727,
  /* 24430 */ 3130247, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24441 */ 2126727, 2126727, 0, 2126727, 2933639, 2126727, 2126727, 2126727, 3003271, 2126727, 2126727, 2126727,
  /* 24453 */ 2126727, 3064711, 2126727, 2126727, 2126727, 2126727, 2126727, 977, 2126802, 2126802, 2126802, 2126802,
  /* 24465 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 0, 0, 0, 2179072, 2126802,
  /* 24478 */ 2126802, 2933714, 2126802, 2126802, 2126802, 3003346, 2126802, 2126802, 2126802, 2126802, 3064786,
  /* 24489 */ 2126802, 2126802, 2126802, 2126802, 2847698, 2851794, 2126802, 2900946, 2921426, 2126802, 2126802,
  /* 24500 */ 2950098, 2126802, 2126802, 2999250, 2126802, 3007442, 3178496, 2397063, 2401159, 2126727, 2126727,
  /* 24511 */ 2442119, 2126727, 2470791, 2126727, 2126727, 2126727, 2519943, 2126727, 2126727, 2126727, 2126727,
  /* 24522 */ 2524039, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2601863, 2126727,
  /* 24533 */ 2126727, 2589575, 2126727, 2614151, 2646919, 2126727, 2126727, 2696071, 2757511, 2126727, 2126727,
  /* 24544 */ 2126727, 2126727, 2937735, 2126727, 2126727, 2126727, 3036039, 2126727, 2126802, 2450386, 2126802,
  /* 24555 */ 2536402, 2126802, 2610130, 2126802, 2864082, 2126802, 2126802, 2126802, 2892754, 2126802, 2126802,
  /* 24566 */ 2929618, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2626514,
  /* 24577 */ 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2700242, 2126802, 2126802, 2470866, 2126802,
  /* 24588 */ 2126802, 2126802, 2520018, 2126802, 2126802, 2126802, 2126802, 2589650, 2126802, 2614226, 2646994,
  /* 24599 */ 2126802, 2126802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2424832, 2433024, 0, 2696146, 2757586, 2126802,
  /* 24618 */ 2126802, 2126802, 2126802, 2937810, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24629 */ 2126802, 3134418, 2126802, 2126802, 3158994, 3171282, 3179474, 2506752, 2507730, 2507655, 2179072,
  /* 24640 */ 2179072, 2126727, 2126727, 2126802, 2126802, 0, 2486272, 2765703, 2786183, 2859911, 2974599, 2126727,
  /* 24652 */ 3011463, 2126727, 3023751, 2126727, 2126727, 2126727, 2126727, 3154823, 2126802, 2429906, 2438098,
  /* 24663 */ 2126802, 2487250, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2655186,
  /* 24674 */ 2679762, 2761682, 2765778, 2786258, 2859986, 2974674, 2126802, 3011538, 2126802, 3023826, 2126802,
  /* 24685 */ 2126802, 2126802, 2126802, 3154898, 2179072, 3055616, 2126727, 3056519, 2126802, 3056594, 2556882,
  /* 24696 */ 2565074, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24707 */ 3142610, 2945024, 2945927, 2946002, 2179072, 2179072, 3014656, 2179072, 2179072, 2126727, 2126727,
  /* 24718 */ 2503559, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 3142535,
  /* 24729 */ 2126802, 2126802, 2499538, 2126802, 2126802, 2126802, 2126727, 3015559, 2126727, 2126727, 2126727,
  /* 24740 */ 2126802, 2126802, 2503634, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24751 */ 3183570, 2179072, 2126802, 2126727, 2179072, 2179072, 2126727, 2126727, 2126802, 2126802, 2441216, 0, 0,
  /* 24764 */ 2126802, 3015634, 2126802, 2126802, 2126802, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072,
  /* 24780 */ 2179072, 2179072, 2179072, 2179072, 2494464, 2179072, 2179072, 2514944, 2179072, 2179072, 2592768,
  /* 24791 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126727, 2126727, 2126727, 2126727,
  /* 24802 */ 2126727, 2593671, 2126727, 2126727, 3183495, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24813 */ 2126802, 2126802, 2495442, 2126802, 2126802, 2515922, 2126802, 2126802, 2552786, 2126802, 2126802,
  /* 24824 */ 2126802, 2126802, 2126802, 2638802, 2126802, 2126802, 2126802, 2126802, 2728914, 2753490, 2126802,
  /* 24835 */ 2126802, 2642898, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2720722, 2126802, 2126802,
  /* 24846 */ 2126802, 2126802, 2126802, 2769874, 2179072, 2609152, 2179072, 2863104, 2179072, 2179072, 2179072,
  /* 24857 */ 3035136, 2126727, 2450311, 2126727, 2536327, 2126727, 2610055, 2126727, 2864007, 3036114, 2126802,
  /* 24868 */ 2527232, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2126727, 2528135,
  /* 24881 */ 2126727, 2429831, 2438023, 2126727, 2487175, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24892 */ 2126727, 2126727, 2655111, 2679687, 2761607, 2404352, 2179072, 2179072, 2179072, 2179072, 3031040,
  /* 24903 */ 2405255, 2126727, 2126727, 2126727, 2126727, 3031943, 2405330, 2126802, 2126802, 2126802, 2417618,
  /* 24914 */ 2126802, 2126802, 2126802, 2446290, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24925 */ 2126802, 2126802, 2524114, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802, 2126802,
  /* 24936 */ 2601938, 2126802, 2126802, 2126802, 3032018, 2539520, 0, 2953216, 2179072, 2658304, 2977792, 2179072,
  /* 24948 */ 2126727, 2659207, 2978695, 2126727, 2126802, 2659282, 2978770, 2126802, 2711552, 2560000, 2179072,
  /* 24959 */ 2560903, 2126727, 2560978, 2126802, 2179072, 2126727, 2126802, 2179072, 2126727, 2126802, 2179072,
  /* 24970 */ 2126727, 2544519, 2548615, 2126727, 2126727, 2597767, 2126727, 2126727, 2126727, 2126727, 2126727,
  /* 24981 */ 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2126727, 2626439, 2126727, 2126727, 2126727,
  /* 24992 */ 2126802, 2990080, 2990983, 2991058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1190, 0, 0, 0, 0, 221184, 221184,
  /* 25015 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 0, 0, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 221184, 0, 0,
  /* 25040 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0,
  /* 25059 */ 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 25073 */ 221184, 221184, 221184, 221184, 0, 0, 2801664, 0, 0, 0, 0, 2142208, 0, 0, 0, 98304, 0, 0, 0, 53248, 0,
  /* 25094 */ 305, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 3059712, 0, 0, 0,
  /* 25122 */ 3137536, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 2025, 0, 0, 0, 0, 0, 0, 0, 3174400,
  /* 25150 */ 2179072, 2179072, 3194880, 3198976, 2179072, 904, 0, 0, 0, 904, 0, 2387968, 2125824, 2125824, 2125824,
  /* 25165 */ 2125824, 2125824, 3133440, 2125824, 2125824, 3158016, 3170304, 3178496, 2396160, 2400256, 2125824,
  /* 25176 */ 2125824, 2441216, 2125824, 2469888, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824,
  /* 25187 */ 2125824, 2588672, 2125824, 2613248, 2646016, 2125824, 2125824, 3125248, 2125824, 2125824, 3145728,
  /* 25198 */ 2125824, 2125824, 2125824, 3174400, 2125824, 2125824, 3194880, 3198976, 2125824, 979, 0, 0, 0, 0, 0, 0,
  /* 25214 */ 2494, 0, 536, 536, 536, 536, 536, 536, 536, 536, 1779, 536, 536, 536, 536, 536, 536, 536, 0, 979, 0,
  /* 25235 */ 2387968, 2125824, 2125824, 2125824, 2420736, 2125824, 2125824, 2125824, 2125824, 2125824, 2453504,
  /* 25246 */ 2125824, 2473984, 2179072, 3072000, 3088384, 3100672, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25257 */ 2179072, 2179072, 3227648, 904, 0, 2125824, 2125824, 0, 0, 0, 0, 1072, 1076, 0, 0, 1080, 1084, 0, 2424832,
  /* 25276 */ 2433024, 0, 225885, 225885, 225885, 225885, 225885, 225885, 225885, 225736, 225736, 225885, 225736,
  /* 25289 */ 225736, 225736, 225736, 225901, 225901, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25301 */ 2125824, 2125824, 2125824, 2125824, 2125824, 237568, 2125824, 2125824, 2125824, 2125824, 2523136, 2125824,
  /* 25313 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2600960, 2125824, 2125824, 1, 12290, 3, 0,
  /* 25327 */ 0, 0, 0, 249856, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 266240, 0, 0, 0, 0, 65536, 0, 305, 0,
  /* 25353 */ 0, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1223, 0, 0, 536, 0, 0, 0, 0, 0, 114688, 0, 241664, 258048,
  /* 25380 */ 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 1138688, 0, 0, 0, 0, 1138688,
  /* 25406 */ 1138688, 0, 0, 1138688, 0, 0, 1138688, 0, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25421 */ 2125824, 2125824, 2125824, 2125824, 2125824, 241664, 2125824, 2125824, 2125824, 2125824, 3096576, 2125824,
  /* 25433 */ 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 3096576, 0, 0, 0, 0, 0, 0, 366, 366, 0, 0, 0, 0, 0,
  /* 25453 */ 1101, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1228,
  /* 25482 */ 0, 0, 0, 1, 12290, 0, 0, 0, 2183168, 0, 0, 270336, 0, 0, 300, 301, 0, 2134016, 304, 305, 200704, 0, 0, 0,
  /* 25506 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 2748416, 2883584, 0, 20480, 0, 0, 0, 0, 2179072,
  /* 25533 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3141632, 2125824, 2125824, 2498560, 2125824, 2125824,
  /* 25544 */ 2125824, 2555904, 2564096, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25555 */ 2125824, 2125824, 3141632, 2945024, 2945024, 2945024, 1, 12290, 2113827, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0,
  /* 25574 */ 297, 0, 0, 0, 0, 0, 0, 2726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2076, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0,
  /* 25603 */ 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 792, 266240, 266240, 266240, 266240, 266240,
  /* 25625 */ 266240, 266240, 0, 0, 266240, 0, 0, 0, 0, 266240, 266240, 1, 12290, 2113827, 0, 0, 2183168, 0, 0, 0, 0, 0,
  /* 25647 */ 300, 301, 0, 2134016, 304, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824,
  /* 25660 */ 2125824, 2125824, 2125824, 2125824, 245760, 2125824, 2125824, 2125824, 2699264, 2125824, 2715648, 2125824,
  /* 25672 */ 2723840, 2125824, 2732032, 2772992, 2125824, 2125824, 2125824, 2805760, 2125824, 2830336, 2125824,
  /* 25683 */ 2125824, 2125824, 2867200, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 0, 0, 274432, 0, 0, 0,
  /* 25699 */ 0, 274432, 274432, 1, 12290, 3, 78116, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 711, 536, 536,
  /* 25725 */ 582, 558, 558, 558, 558, 558, 536, 558, 558, 558, 582, 582, 536, 582, 0, 536, 536, 558, 558, 582, 582,
  /* 25746 */ 536, 558, 582, 536, 558, 582, 536, 558, 558, 3186, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 25767 */ 558, 558, 2274, 2275, 558, 1, 12290, 3, 78116, 78116, 294, 0, 0, 0, 0, 0, 300, 301, 0, 0, 304, 0, 0, 0,
  /* 25791 */ 304, 119199, 73728, 0, 0, 0, 0, 0, 65536, 0, 582, 582, 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25817 */ 1244, 0, 0, 0, 0, 0, 2015, 0, 0, 0, 0, 0, 2017, 0, 0, 0, 0, 0, 2019, 0, 0, 0, 0, 0, 655, 656, 0, 0, 0, 0,
  /* 25847 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 724, 0, 0, 0, 2462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 0,
  /* 25879 */ 2097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101, 0, 0, 1, 12290, 3, 78116, 78451, 294, 0, 0, 0, 0, 0,
  /* 25907 */ 300, 301, 0, 0, 304, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 325, 0, 0, 0, 0, 0, 433, 0, 0, 0,
  /* 25937 */ 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 752, 0, 0, 0,
  /* 25970 */ 0, 536, 536, 583, 559, 559, 559, 559, 559, 536, 559, 559, 559, 583, 583, 536, 583, 583, 583, 583, 583,
  /* 25991 */ 583, 583, 583, 559, 583, 559, 536, 559, 559, 583, 583, 1, 12290, 3, 78117, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26016 */ 0, 0, 772, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624,
  /* 26033 */ 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 373, 0, 0,
  /* 26055 */ 374, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0,
  /* 26073 */ 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26096 */ 0, 0, 0, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 643, 0, 3158016, 3140, 0, 0, 2740224, 0, 0, 0, 0,
  /* 26125 */ 0, 2793472, 0, 0, 0, 0, 0, 0, 0, 2024, 0, 0, 0, 0, 0, 0, 0, 0, 1655, 0, 1657, 0, 0, 0, 1659, 0, 0, 0, 0,
  /* 26154 */ 286720, 286720, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 26168 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 26181 */ 286720, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940928, 0, 2760704, 3260, 0, 0,
  /* 26208 */ 0, 0, 2957312, 0, 0, 2826240, 3162112, 2428928, 0, 3022848, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0,
  /* 26227 */ 0, 0, 3337, 0, 0, 2838528, 0, 0, 0, 0, 0, 656, 0, 656, 0, 0, 0, 0, 816, 0, 0, 0, 0, 0, 0, 1176, 1176, 0,
  /* 26255 */ 0, 0, 1180, 1658, 0, 0, 0, 0, 0, 0, 366, 366, 0, 0, 0, 0, 1142, 1100, 0, 0, 0, 0, 0, 0, 0, 2748416,
  /* 26281 */ 2883584, 0, 3337, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3141632, 2126727,
  /* 26296 */ 2126727, 2499463, 2126727, 2126727, 2126727, 2556807, 2564999, 2126727, 0, 0, 0, 310, 0, 0, 0, 0, 0, 309,
  /* 26314 */ 0, 309, 310, 0, 309, 309, 0, 0, 0, 309, 309, 310, 310, 0, 0, 0, 0, 0, 0, 309, 409, 310, 0, 0, 0, 0, 0, 0,
  /* 26342 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 0, 0, 310, 414, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0,
  /* 26371 */ 0, 657, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2426, 458, 458, 458, 484, 484, 458, 484, 484,
  /* 26399 */ 484, 484, 484, 484, 484, 509, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 529,
  /* 26420 */ 484, 484, 484, 484, 484, 484, 537, 560, 537, 560, 537, 537, 560, 537, 537, 584, 560, 560, 560, 560, 560,
  /* 26441 */ 537, 560, 560, 560, 584, 584, 537, 584, 584, 584, 584, 584, 584, 584, 584, 560, 584, 560, 537, 560, 560,
  /* 26462 */ 584, 584, 305, 0, 0, 0, 0, 0, 640, 0, 0, 643, 644, 0, 0, 0, 0, 0, 0, 0, 2062, 0, 0, 0, 2065, 0, 0, 0, 0,
  /* 26491 */ 0, 0, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1646, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 0, 0, 706, 0,
  /* 26523 */ 0, 0, 0, 0, 0, 0, 2102, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0,
  /* 26556 */ 0, 0, 0, 0, 0, 742, 757, 0, 0, 0, 0, 763, 0, 0, 767, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0, 0, 2741, 0, 0, 0, 0,
  /* 26587 */ 0, 0, 0, 0, 0, 3334, 3335, 0, 3140, 0, 3339, 0, 0, 0, 0, 778, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0,
  /* 26617 */ 0, 2128, 0, 0, 0, 0, 0, 0, 0, 0, 2117, 2118, 0, 0, 2120, 0, 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 0, 0, 0, 806,
  /* 26647 */ 0, 0, 0, 782, 0, 0, 0, 0, 823, 778, 0, 0, 0, 0, 0, 827, 828, 778, 778, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0,
  /* 26677 */ 0, 694, 366, 366, 366, 0, 0, 0, 778, 731, 778, 0, 536, 536, 838, 842, 536, 536, 536, 536, 536, 536, 536,
  /* 26700 */ 2182, 2183, 536, 536, 536, 536, 536, 536, 536, 536, 3550, 558, 558, 558, 558, 558, 558, 558, 558, 2863,
  /* 26720 */ 558, 558, 558, 558, 558, 0, 0, 536, 868, 872, 874, 536, 881, 536, 884, 536, 536, 898, 536, 536, 558, 558,
  /* 26742 */ 558, 558, 558, 558, 558, 558, 558, 558, 3035, 558, 558, 558, 912, 916, 558, 558, 558, 558, 558, 558, 942,
  /* 26763 */ 946, 948, 558, 955, 558, 958, 558, 558, 558, 558, 558, 558, 2296, 558, 558, 2299, 2300, 558, 558, 0, 0, 0,
  /* 26785 */ 0, 0, 0, 797, 536, 536, 841, 536, 536, 536, 536, 859, 536, 558, 972, 558, 558, 0, 582, 582, 582, 987, 991,
  /* 26808 */ 582, 582, 582, 582, 582, 582, 582, 2384, 582, 582, 582, 582, 582, 2389, 2390, 2391, 1017, 1021, 1023, 582,
  /* 26828 */ 1030, 582, 1033, 582, 582, 1047, 582, 582, 0, 0, 0, 842, 991, 916, 838, 1057, 884, 536, 536, 912, 1062,
  /* 26849 */ 958, 558, 558, 0, 987, 1067, 1033, 582, 582, 78116, 1071, 0, 0, 1073, 1077, 0, 0, 1081, 1085, 0, 0, 0, 0,
  /* 26872 */ 0, 0, 0, 106496, 0, 106496, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26900 */ 1099, 0, 0, 0, 0, 0, 0, 558, 558, 1422, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 26923 */ 0, 2304, 0, 0, 0, 0, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 0,
  /* 26954 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1696, 0, 0, 0, 1711, 0, 0, 1712, 0, 0, 0, 0, 536, 536, 536, 536, 536,
  /* 26982 */ 536, 536, 536, 536, 536, 2995, 536, 536, 536, 536, 1725, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 27002 */ 1738, 536, 536, 536, 536, 536, 536, 2181, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1310, 536, 536,
  /* 27022 */ 536, 536, 536, 536, 536, 536, 536, 536, 1792, 536, 536, 536, 536, 536, 1797, 536, 536, 536, 536, 536, 536,
  /* 27043 */ 536, 2210, 536, 536, 536, 536, 536, 0, 0, 0, 536, 536, 1347, 1807, 558, 558, 558, 558, 558, 1814, 558,
  /* 27064 */ 558, 558, 558, 558, 1820, 558, 558, 558, 1872, 558, 558, 1875, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 27084 */ 558, 558, 1432, 558, 558, 558, 558, 558, 558, 1888, 558, 558, 558, 558, 558, 1893, 558, 558, 558, 558,
  /* 27104 */ 558, 558, 558, 26016, 1347, 979, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1515,
  /* 27124 */ 582, 582, 1903, 582, 582, 582, 582, 582, 1910, 582, 582, 582, 582, 582, 1916, 582, 582, 582, 0, 0, 0, 0,
  /* 27146 */ 2702, 0, 0, 0, 2706, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 0, 122880, 122880, 122880, 122880, 0, 0, 1968,
  /* 27168 */ 582, 582, 1971, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1984, 582, 0, 536, 536, 558, 558, 582,
  /* 27189 */ 582, 536, 558, 582, 536, 558, 582, 3618, 3619, 582, 582, 582, 582, 1989, 582, 582, 582, 582, 582, 582,
  /* 27209 */ 582, 536, 582, 558, 2001, 536, 536, 536, 2005, 558, 558, 558, 2009, 582, 582, 582, 0, 2013, 0, 0, 0, 0, 0,
  /* 27232 */ 0, 536, 3454, 536, 3455, 536, 536, 536, 3459, 536, 536, 0, 0, 0, 0, 2059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27259 */ 1128, 0, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 689, 0, 0, 0, 0, 0, 366, 366,
  /* 27289 */ 366, 2118, 0, 0, 2125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 0, 0, 0, 2117, 536, 536, 536, 536,
  /* 27317 */ 536, 536, 536, 536, 536, 536, 536, 2147, 536, 536, 536, 536, 536, 2556, 0, 0, 0, 0, 0, 0, 558, 558, 558,
  /* 27340 */ 558, 558, 558, 558, 558, 558, 2230, 558, 558, 558, 558, 2234, 536, 2150, 536, 536, 536, 536, 536, 536,
  /* 27360 */ 2158, 536, 536, 536, 536, 536, 536, 536, 536, 2804, 536, 536, 536, 2807, 536, 2809, 536, 536, 2191, 536,
  /* 27380 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1785, 536, 2235, 558, 558, 558, 558, 558,
  /* 27401 */ 558, 2243, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1431, 558, 558, 558, 558, 558, 558, 2277, 558,
  /* 27421 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2250, 2322, 582, 582, 582, 582, 582,
  /* 27442 */ 582, 2330, 582, 582, 582, 582, 582, 582, 582, 582, 558, 582, 558, 536, 558, 558, 582, 582, 2364, 582, 582,
  /* 27463 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1518, 2017, 0, 2019, 0, 0, 2405, 0, 0, 0,
  /* 27486 */ 0, 0, 0, 0, 0, 0, 2413, 0, 0, 0, 2454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 0, 0, 0, 2463, 0, 0,
  /* 27517 */ 0, 0, 0, 0, 0, 0, 0, 2472, 0, 0, 0, 0, 0, 0, 0, 111046, 111046, 0, 111046, 111046, 111046, 111046, 111046,
  /* 27540 */ 111046, 2502, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2510, 536, 536, 536, 536, 536, 536,
  /* 27560 */ 2196, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3005, 536, 3007, 536, 536, 536, 536, 536, 2544,
  /* 27580 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2553, 558, 558, 558, 558, 558, 2566, 558, 558,
  /* 27601 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 1433, 558, 558, 558, 558, 558, 2574, 558, 558, 558, 558, 558,
  /* 27622 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 959, 558, 0, 0, 0, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 27644 */ 582, 2632, 582, 582, 582, 0, 0, 0, 2701, 0, 0, 2704, 2705, 0, 0, 2708, 2709, 0, 0, 0, 2711, 0, 0, 0, 0, 0,
  /* 27670 */ 0, 0, 0, 0, 0, 0, 0, 0, 1158, 1159, 0, 0, 2721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2734, 0, 0, 0, 0, 0,
  /* 27701 */ 730, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 536, 536, 2801, 536, 536, 536, 536,
  /* 27728 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 0, 2217, 0, 558, 558, 558, 2849, 558, 558, 558, 558, 558,
  /* 27749 */ 558, 558, 558, 558, 558, 558, 558, 558, 1882, 558, 558, 536, 536, 536, 536, 2999, 536, 536, 536, 536, 536,
  /* 27770 */ 536, 536, 536, 536, 536, 536, 536, 1783, 536, 536, 536, 558, 558, 558, 3039, 558, 558, 558, 558, 558, 558,
  /* 27791 */ 558, 558, 558, 558, 558, 558, 558, 1900, 558, 26016, 582, 582, 582, 582, 3081, 582, 582, 582, 582, 582,
  /* 27811 */ 582, 582, 582, 582, 582, 582, 0, 1533, 1534, 1535, 536, 3389, 0, 3391, 0, 0, 0, 0, 0, 3140, 3395, 0, 3397,
  /* 27834 */ 0, 536, 3400, 536, 536, 536, 536, 536, 2802, 536, 536, 536, 536, 536, 536, 536, 2808, 536, 536, 536, 536,
  /* 27855 */ 536, 1326, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2199, 536, 536, 536, 2202, 3402, 536,
  /* 27875 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 558, 3415, 558, 3417, 0, 0, 0, 3451, 0, 0, 536, 536,
  /* 27897 */ 536, 536, 3456, 536, 536, 536, 536, 536, 536, 536, 2506, 536, 536, 536, 536, 536, 2511, 536, 536, 311,
  /* 27917 */ 312, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1174, 736, 0, 0, 0, 422, 0, 0, 0, 0, 445, 0, 0, 0, 0, 0,
  /* 27948 */ 0, 0, 0, 1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 445, 445, 422, 445, 445, 445, 445, 445, 445, 445, 445, 445,
  /* 27974 */ 445, 445, 445, 445, 528, 445, 528, 528, 528, 445, 528, 528, 528, 528, 528, 445, 538, 561, 538, 561, 538,
  /* 27995 */ 538, 561, 538, 538, 585, 561, 561, 561, 561, 561, 538, 561, 561, 561, 585, 585, 538, 585, 585, 585, 585,
  /* 28016 */ 585, 585, 585, 585, 561, 585, 561, 611, 616, 616, 585, 622, 582, 582, 582, 1026, 582, 582, 582, 582, 582,
  /* 28037 */ 582, 582, 582, 0, 0, 0, 536, 536, 536, 536, 558, 558, 558, 558, 582, 582, 582, 582, 0, 0, 0, 0, 0, 1787,
  /* 28061 */ 536, 536, 536, 536, 536, 1793, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2797, 536, 536, 536, 536,
  /* 28082 */ 536, 558, 558, 558, 1889, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 26016, 1347, 979, 582,
  /* 28102 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1456, 1985, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 28123 */ 582, 582, 582, 536, 582, 558, 536, 536, 558, 558, 582, 582, 0, 0, 0, 0, 0, 0, 0, 2480, 0, 0, 0, 0, 0, 0,
  /* 28149 */ 0, 0, 0, 0, 0, 1204, 1205, 0, 0, 0, 536, 536, 2503, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 28173 */ 536, 536, 0, 2218, 0, 536, 2554, 536, 536, 536, 536, 0, 2557, 0, 0, 0, 0, 558, 558, 558, 558, 558, 558,
  /* 28196 */ 558, 558, 558, 558, 2231, 558, 558, 558, 558, 558, 558, 2563, 558, 558, 558, 558, 2567, 558, 558, 558,
  /* 28216 */ 558, 558, 558, 558, 558, 558, 1861, 558, 558, 558, 558, 1867, 558, 0, 0, 0, 582, 582, 582, 582, 582, 582,
  /* 28238 */ 2629, 582, 582, 582, 582, 2633, 582, 0, 536, 536, 558, 558, 582, 582, 536, 558, 582, 3615, 3616, 3617,
  /* 28258 */ 536, 558, 558, 558, 558, 558, 558, 2591, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3305, 558, 558,
  /* 28279 */ 582, 582, 582, 3462, 536, 536, 3464, 536, 558, 558, 558, 558, 558, 558, 558, 558, 3473, 558, 3475, 558,
  /* 28299 */ 558, 3477, 558, 558, 582, 582, 582, 582, 582, 582, 582, 582, 3487, 582, 3489, 582, 582, 3491, 582, 582, 0,
  /* 28320 */ 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 852, 536, 536, 536, 0, 0, 0, 314, 315, 316, 317, 318, 319, 320,
  /* 28345 */ 321, 322, 323, 0, 0, 0, 0, 0, 0, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 300, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0,
  /* 28376 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1206, 0, 0,
  /* 28408 */ 424, 432, 423, 432, 0, 314, 432, 446, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
  /* 28429 */ 459, 459, 459, 459, 459, 480, 485, 485, 496, 485, 485, 485, 485, 485, 485, 485, 485, 511, 511, 524, 524,
  /* 28450 */ 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 511, 525, 525, 525, 525, 525, 525, 539, 562, 539,
  /* 28471 */ 562, 539, 539, 562, 539, 539, 586, 562, 562, 562, 562, 562, 539, 562, 562, 562, 586, 586, 608, 586, 586,
  /* 28492 */ 586, 586, 586, 586, 586, 609, 610, 586, 610, 608, 610, 610, 609, 609, 697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28517 */ 0, 0, 0, 0, 0, 744, 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 1176, 0, 0, 0, 0, 813, 0, 0, 0,
  /* 28549 */ 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 28577 */ 536, 536, 536, 536, 2148, 0, 0, 0, 1211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2091, 0, 0, 0, 0, 1223, 0, 0,
  /* 28606 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 536, 1259, 536, 1262, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 28632 */ 1276, 536, 1281, 536, 536, 536, 536, 536, 2813, 536, 536, 536, 536, 536, 536, 0, 0, 558, 558, 558, 558,
  /* 28653 */ 558, 558, 2227, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2621, 558, 558, 558, 0, 0, 0, 536, 1285, 536,
  /* 28675 */ 536, 1288, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2175, 536, 536, 536, 26016, 1347,
  /* 28695 */ 979, 582, 582, 1444, 582, 582, 1448, 582, 582, 582, 582, 582, 582, 582, 1044, 582, 582, 582, 582, 0, 0, 0,
  /* 28717 */ 536, 582, 1462, 582, 1467, 582, 582, 1471, 582, 582, 1474, 582, 582, 582, 582, 582, 582, 582, 3084, 582,
  /* 28737 */ 582, 582, 582, 582, 3090, 582, 582, 0, 0, 1575, 1576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2107, 0, 2109,
  /* 28763 */ 2110, 0, 0, 1620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28794 */ 0, 1658, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 122880, 122880, 0, 0, 0, 0, 0, 1675,
  /* 28823 */ 0, 1677, 0, 0, 0, 0, 0, 0, 1684, 0, 0, 0, 0, 0, 0, 687, 536, 536, 840, 844, 847, 536, 855, 536, 536, 536,
  /* 28849 */ 536, 536, 536, 1728, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1740, 536, 536, 536, 536, 536, 3001,
  /* 28869 */ 536, 536, 536, 536, 536, 536, 536, 536, 3009, 536, 536, 536, 536, 536, 3166, 536, 536, 536, 536, 536, 536,
  /* 28890 */ 536, 536, 536, 536, 536, 2185, 536, 536, 536, 536, 536, 536, 536, 536, 1775, 1776, 536, 536, 536, 536,
  /* 28910 */ 536, 536, 536, 536, 536, 536, 536, 1751, 536, 536, 536, 536, 558, 1823, 558, 558, 558, 558, 558, 558, 558,
  /* 28931 */ 558, 558, 1835, 558, 558, 558, 558, 0, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1010, 582, 558, 1870,
  /* 28952 */ 1871, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 0, 2305, 0, 0, 0, 0, 0, 2086, 0, 0,
  /* 28976 */ 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0, 737, 0, 743, 2017, 0, 2019,
  /* 29006 */ 0, 0, 0, 0, 0, 0, 2407, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2941, 0, 0, 0, 0, 0,
  /* 29039 */ 2453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1586, 0, 0, 558, 558, 558, 558, 2605, 558, 558, 558, 558,
  /* 29065 */ 558, 558, 558, 558, 558, 558, 558, 558, 2622, 0, 0, 0, 0, 0, 2764, 0, 0, 2767, 0, 0, 0, 0, 0, 0, 0, 2771,
  /* 29091 */ 536, 536, 536, 536, 536, 1291, 1293, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2535, 536, 536, 536,
  /* 29111 */ 536, 536, 536, 3011, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1300,
  /* 29132 */ 3052, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2276, 582, 3094, 582,
  /* 29152 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1966, 1967, 3241, 582, 582, 582, 582,
  /* 29172 */ 536, 582, 558, 536, 536, 558, 558, 582, 582, 0, 0, 3120, 3608, 0, 536, 536, 558, 558, 582, 582, 536, 558,
  /* 29194 */ 582, 536, 558, 582, 536, 558, 3185, 558, 558, 558, 3188, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 29215 */ 1409, 558, 558, 558, 558, 558, 325, 325, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1595, 0, 0, 0, 0,
  /* 29242 */ 375, 0, 434, 440, 0, 447, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
  /* 29264 */ 460, 460, 460, 486, 486, 497, 486, 486, 486, 486, 486, 486, 486, 486, 512, 512, 512, 512, 512, 512, 512,
  /* 29285 */ 512, 512, 512, 512, 512, 512, 512, 512, 512, 540, 563, 540, 563, 540, 540, 563, 540, 540, 587, 563, 563,
  /* 29306 */ 563, 563, 563, 540, 563, 563, 563, 587, 587, 540, 587, 587, 587, 587, 587, 587, 587, 587, 563, 587, 563,
  /* 29327 */ 540, 563, 563, 587, 587, 0, 789, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29357 */ 1094, 0, 0, 789, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 861, 0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29384 */ 0, 1114, 0, 1116, 1117, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2408, 2409, 0, 0, 0, 0, 0, 0,
  /* 29413 */ 1119, 1120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2410, 0, 2412, 0, 1186, 0, 1105, 0, 1236, 0, 0, 0, 0, 0,
  /* 29441 */ 1120, 0, 0, 0, 0, 0, 0, 0, 2458, 0, 0, 0, 2460, 0, 0, 0, 0, 1219, 0, 0, 0, 1251, 1119, 0, 0, 0, 0, 0, 0,
  /* 29470 */ 0, 0, 0, 536, 536, 536, 3160, 536, 536, 536, 536, 1260, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 29492 */ 536, 536, 536, 536, 2177, 536, 536, 1286, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 29513 */ 1299, 1339, 536, 536, 536, 536, 536, 1347, 904, 558, 558, 1352, 558, 558, 558, 558, 558, 558, 558, 2592,
  /* 29533 */ 558, 558, 558, 558, 558, 558, 558, 558, 1846, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1402, 558, 558,
  /* 29554 */ 1404, 558, 558, 558, 1408, 558, 558, 558, 558, 558, 558, 558, 1373, 558, 558, 558, 558, 558, 558, 558,
  /* 29574 */ 558, 2270, 558, 558, 558, 558, 558, 558, 558, 26016, 1347, 979, 582, 582, 1445, 582, 582, 582, 582, 582,
  /* 29594 */ 582, 582, 582, 582, 582, 1049, 582, 0, 0, 0, 843, 1497, 582, 582, 582, 1501, 582, 582, 582, 582, 582, 582,
  /* 29616 */ 582, 582, 582, 582, 582, 1051, 0, 0, 0, 536, 1618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 536,
  /* 29644 */ 536, 2004, 558, 558, 558, 2008, 582, 582, 582, 2012, 0, 2013, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0,
  /* 29669 */ 366, 366, 366, 0, 0, 0, 0, 2022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 2149, 536, 536, 536,
  /* 29697 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1803, 2165, 536, 536, 536, 536, 536, 536, 536,
  /* 29718 */ 536, 536, 536, 536, 536, 536, 536, 536, 2164, 536, 536, 536, 2206, 536, 2208, 536, 536, 536, 536, 536,
  /* 29738 */ 536, 536, 0, 0, 0, 0, 0, 0, 558, 558, 558, 558, 558, 558, 558, 2293, 558, 2295, 558, 558, 558, 558, 558,
  /* 29761 */ 558, 558, 0, 0, 0, 0, 0, 0, 702, 703, 0, 0, 0, 0, 0, 709, 0, 0, 0, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 29788 */ 582, 2317, 582, 582, 582, 582, 2321, 582, 582, 582, 2380, 582, 2382, 582, 582, 582, 582, 582, 582, 582,
  /* 29808 */ 536, 582, 558, 3243, 536, 3245, 558, 3247, 582, 0, 0, 558, 2562, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 29829 */ 558, 558, 558, 558, 558, 558, 964, 558, 558, 2602, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 29850 */ 558, 558, 558, 1417, 558, 0, 0, 0, 582, 582, 582, 2627, 582, 2628, 582, 582, 582, 582, 582, 582, 582,
  /* 29871 */ 1489, 582, 582, 1493, 582, 582, 582, 582, 582, 536, 2789, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 29891 */ 536, 536, 536, 536, 536, 2188, 2189, 558, 2836, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 29911 */ 558, 558, 558, 1438, 558, 582, 582, 582, 2885, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 29932 */ 0, 0, 0, 0, 2905, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1953, 582,
  /* 29954 */ 3242, 582, 582, 582, 536, 582, 558, 536, 536, 558, 558, 582, 582, 0, 0, 2928, 0, 0, 0, 0, 536, 536, 536,
  /* 29977 */ 3405, 536, 536, 536, 536, 536, 536, 536, 536, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 558, 558,
  /* 29998 */ 3420, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 3530, 582, 582, 582, 582, 582, 582,
  /* 30019 */ 3436, 582, 582, 582, 582, 582, 582, 582, 582, 582, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 857,
  /* 30043 */ 536, 536, 327, 328, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1599, 0, 0, 0, 0, 0, 326, 374, 329, 373,
  /* 30071 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0, 373, 373, 403, 0, 329, 0, 0, 0, 0,
  /* 30102 */ 0, 0, 0, 0, 1125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 448, 461, 461, 461, 461, 461, 461, 461, 461,
  /* 30130 */ 474, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 487, 487, 461, 487, 487, 502, 504, 487,
  /* 30151 */ 487, 502, 487, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 530, 513, 513, 513,
  /* 30172 */ 513, 513, 513, 541, 564, 541, 564, 541, 541, 564, 541, 541, 588, 564, 564, 564, 564, 564, 541, 564, 564,
  /* 30193 */ 564, 588, 588, 541, 588, 588, 588, 588, 588, 588, 588, 588, 564, 588, 564, 541, 564, 564, 588, 588, 0, 0,
  /* 30215 */ 0, 653, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 665, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 679, 680, 0, 0,
  /* 30246 */ 0, 0, 0, 775, 0, 787, 0, 804, 0, 0, 0, 0, 795, 0, 0, 0, 0, 792, 795, 0, 0, 0, 795, 795, 792, 0, 0, 0, 0,
  /* 30275 */ 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 366, 366, 0, 713, 0, 715, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0, 726, 0,
  /* 30305 */ 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 779, 779, 0, 0, 0, 0, 0, 785, 0, 785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30337 */ 0, 0, 0, 0, 0, 2133, 0, 0, 758, 0, 0, 0, 764, 765, 0, 0, 0, 0, 0, 773, 0, 775, 0, 0, 0, 0, 0, 802, 0, 0,
  /* 30367 */ 0, 0, 0, 0, 807, 0, 0, 0, 0, 0, 0, 1109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 131072, 131072, 702,
  /* 30396 */ 0, 0, 812, 0, 0, 0, 0, 0, 812, 812, 815, 0, 0, 0, 775, 0, 0, 0, 824, 804, 824, 0, 536, 536, 839, 536, 845,
  /* 30423 */ 536, 536, 858, 536, 536, 536, 536, 536, 3177, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3413,
  /* 30444 */ 558, 558, 558, 558, 536, 869, 536, 875, 536, 536, 883, 886, 891, 536, 899, 536, 536, 558, 558, 558, 558,
  /* 30465 */ 558, 558, 558, 3033, 558, 558, 558, 558, 558, 558, 558, 1845, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 30485 */ 1429, 558, 558, 558, 558, 558, 558, 558, 913, 558, 919, 558, 558, 932, 558, 558, 943, 558, 949, 558, 558,
  /* 30506 */ 957, 960, 965, 558, 973, 558, 558, 0, 582, 582, 582, 988, 582, 994, 582, 582, 1007, 582, 582, 0, 0, 0, 0,
  /* 30529 */ 536, 536, 3570, 536, 536, 536, 3574, 558, 558, 3576, 1018, 582, 1024, 582, 582, 1032, 1035, 1040, 582,
  /* 30548 */ 1048, 582, 582, 0, 0, 0, 536, 536, 536, 536, 536, 536, 2143, 536, 536, 536, 536, 536, 536, 0, 904, 558,
  /* 30570 */ 558, 558, 558, 558, 558, 558, 558, 558, 1393, 558, 558, 558, 1397, 558, 558, 1040, 582, 78116, 1071, 0, 0,
  /* 30591 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2448, 0, 2449, 0, 0, 0, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
  /* 30622 */ 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 0, 1134, 0, 0, 0, 366, 366, 0, 0, 0, 0, 0, 0, 0, 0, 1153,
  /* 30653 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 0, 0, 0, 0, 0, 0, 735, 408, 0, 0, 0, 0,
  /* 30685 */ 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2954, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30718 */ 0, 0, 0, 0, 1647, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1160, 536, 536, 536, 1287, 536,
  /* 30747 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 0, 0, 558, 2820, 536, 1302, 536, 536, 536, 536,
  /* 30768 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2512, 536, 536, 1317, 536, 536, 536, 536, 536, 536, 536,
  /* 30789 */ 536, 536, 536, 1333, 536, 536, 536, 536, 536, 536, 2209, 536, 536, 2212, 2213, 536, 536, 0, 0, 0, 0, 0, 0,
  /* 30812 */ 738, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3004, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1343,
  /* 30833 */ 536, 536, 1347, 904, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1862, 558, 558, 558, 558, 558, 558, 558,
  /* 30854 */ 558, 1360, 558, 558, 558, 558, 558, 558, 1375, 558, 558, 558, 1380, 558, 558, 558, 558, 558, 558, 1390,
  /* 30874 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2568, 558, 558, 558, 558, 558, 582, 1519, 582, 582, 582,
  /* 30895 */ 582, 582, 582, 1529, 582, 582, 0, 536, 582, 558, 536, 536, 558, 558, 582, 582, 2926, 0, 0, 2929, 2930, 0,
  /* 30917 */ 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 1090, 1213, 0, 0, 0, 0, 0, 0, 1220,
  /* 30947 */ 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0,
  /* 30977 */ 0, 0, 0, 0, 1629, 0, 0, 0, 0, 0, 0, 0, 0, 1622, 0, 0, 0, 0, 0, 1628, 0, 0, 1631, 0, 1633, 1650, 0, 0, 0,
  /* 31006 */ 0, 0, 0, 0, 0, 1656, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 749, 0, 0, 814, 694, 0, 0, 0, 819, 0, 0, 1660, 1661, 0,
  /* 31035 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 1669, 0, 0, 0, 0, 1702, 1703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31066 */ 1645, 0, 0, 0, 0, 0, 1694, 0, 0, 0, 1714, 1574, 1574, 1716, 536, 1718, 536, 1719, 1720, 536, 1722, 536,
  /* 31088 */ 536, 536, 1726, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1739, 536, 536, 536, 536, 536, 1346, 1347,
  /* 31108 */ 904, 558, 558, 558, 558, 558, 558, 558, 558, 2244, 558, 558, 558, 558, 558, 558, 558, 536, 536, 1743, 536,
  /* 31129 */ 536, 536, 536, 1747, 536, 1749, 536, 536, 536, 536, 536, 536, 536, 1294, 536, 536, 536, 536, 536, 536,
  /* 31149 */ 536, 536, 536, 3170, 536, 536, 536, 536, 536, 536, 536, 536, 1757, 1758, 1760, 536, 536, 536, 536, 536,
  /* 31169 */ 536, 536, 536, 1768, 1769, 1770, 536, 536, 1773, 1774, 536, 536, 536, 536, 536, 536, 536, 1782, 536, 536,
  /* 31189 */ 536, 1786, 536, 1805, 1347, 0, 1810, 558, 1812, 558, 1813, 558, 1815, 558, 1817, 558, 558, 558, 558, 0,
  /* 31209 */ 582, 582, 986, 582, 582, 582, 582, 1005, 1009, 1015, 582, 1821, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 31229 */ 558, 1834, 558, 558, 558, 558, 1838, 558, 558, 558, 558, 1842, 558, 1844, 558, 558, 558, 558, 558, 558,
  /* 31249 */ 558, 558, 1852, 1853, 1855, 558, 558, 558, 558, 558, 558, 558, 558, 1863, 1864, 1865, 558, 558, 1868,
  /* 31268 */ 1869, 558, 558, 558, 558, 558, 558, 558, 1877, 558, 558, 558, 1881, 558, 558, 558, 558, 558, 558, 558,
  /* 31288 */ 2851, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3304, 558, 558, 558, 582, 582, 582, 558, 558, 558, 558,
  /* 31309 */ 1890, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1901, 26016, 1347, 979, 582, 582, 582, 582, 582, 582,
  /* 31329 */ 582, 582, 582, 582, 1453, 582, 582, 0, 0, 0, 0, 3569, 536, 536, 536, 536, 536, 536, 3575, 558, 558, 558,
  /* 31351 */ 558, 558, 558, 1426, 558, 558, 558, 558, 558, 558, 1436, 558, 558, 558, 558, 558, 558, 1405, 558, 558,
  /* 31371 */ 558, 558, 558, 558, 558, 558, 558, 558, 2853, 558, 558, 558, 558, 558, 0, 1906, 582, 1908, 582, 1909, 582,
  /* 31392 */ 1911, 582, 1913, 582, 582, 582, 1917, 582, 582, 0, 0, 0, 3603, 536, 536, 536, 3605, 558, 558, 558, 3607,
  /* 31413 */ 582, 582, 0, 0, 3567, 0, 536, 536, 536, 536, 536, 536, 536, 558, 558, 558, 3029, 558, 558, 558, 558, 558,
  /* 31435 */ 558, 558, 558, 558, 558, 558, 3296, 558, 558, 558, 558, 582, 1938, 582, 1940, 582, 582, 582, 582, 582,
  /* 31455 */ 582, 582, 582, 1948, 1949, 1951, 582, 0, 536, 536, 558, 558, 582, 582, 3612, 3613, 3614, 536, 558, 582,
  /* 31475 */ 536, 558, 558, 558, 558, 558, 558, 2619, 558, 558, 558, 558, 558, 558, 0, 2623, 0, 0, 0, 0, 0, 701, 0, 0,
  /* 31499 */ 0, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0, 717, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0, 2129, 0, 0, 0, 0, 0, 0, 0, 582,
  /* 31531 */ 1986, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1997, 536, 582, 558, 1774, 536, 2003, 536, 1869, 558,
  /* 31551 */ 2007, 558, 1965, 582, 2011, 582, 0, 2013, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 2034, 0,
  /* 31578 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1710, 0,
  /* 31611 */ 0, 0, 2096, 0, 0, 0, 0, 0, 0, 2103, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 2727, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 0,
  /* 31641 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473, 2474, 0, 0, 2030, 0, 2124, 0,
  /* 31671 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2053, 0, 0, 2135, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 31698 */ 536, 536, 536, 536, 558, 558, 558, 558, 536, 536, 2151, 536, 2153, 536, 536, 536, 536, 536, 536, 2161,
  /* 31718 */ 536, 2163, 536, 536, 536, 536, 536, 1729, 1730, 536, 536, 536, 536, 1737, 536, 536, 536, 536, 536, 536,
  /* 31738 */ 1347, 904, 558, 558, 1351, 558, 558, 1355, 558, 558, 558, 2236, 558, 2238, 558, 558, 558, 558, 558, 558,
  /* 31758 */ 2246, 558, 2248, 558, 558, 558, 558, 558, 558, 558, 2862, 558, 558, 558, 558, 558, 558, 0, 0, 558, 558,
  /* 31779 */ 558, 558, 558, 2282, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1848, 558, 558, 558, 558, 582,
  /* 31800 */ 2323, 582, 2325, 582, 582, 582, 582, 582, 582, 2333, 582, 2335, 582, 582, 582, 582, 582, 2651, 582, 582,
  /* 31820 */ 582, 582, 582, 582, 582, 582, 582, 582, 1959, 1960, 1961, 582, 582, 1964, 1965, 582, 582, 536, 2393, 536,
  /* 31840 */ 536, 558, 2397, 558, 558, 582, 2401, 582, 582, 2013, 0, 2015, 0, 0, 0, 0, 0, 1093, 1094, 0, 0, 0, 0, 0, 0,
  /* 31865 */ 0, 0, 0, 366, 301, 0, 0, 0, 0, 0, 0, 0, 2429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 2438,
  /* 31896 */ 0, 0, 0, 0, 0, 2443, 0, 2445, 2446, 0, 0, 0, 0, 0, 0, 0, 2756, 0, 0, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0, 0,
  /* 31926 */ 0, 0, 0, 2476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2487, 2445, 0, 0, 0, 0, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
  /* 31957 */ 0, 0, 0, 1225, 1255, 1256, 0, 1225, 0, 536, 0, 0, 0, 0, 2492, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536,
  /* 31982 */ 2501, 536, 2515, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2540, 536, 536,
  /* 32002 */ 536, 536, 536, 2530, 536, 536, 536, 536, 2534, 536, 536, 536, 2539, 536, 536, 536, 536, 536, 1762, 536,
  /* 32022 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2537, 536, 536, 536, 536, 558, 558, 558, 558, 2565, 558,
  /* 32043 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2854, 558, 558, 558, 558, 558, 558, 558, 2577, 558,
  /* 32064 */ 2579, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1897, 558, 558, 558, 558, 26016, 558, 558, 558,
  /* 32084 */ 2604, 558, 558, 558, 558, 558, 558, 558, 2611, 558, 558, 558, 558, 0, 582, 582, 582, 582, 582, 582, 582,
  /* 32105 */ 1006, 582, 582, 582, 558, 558, 558, 558, 2617, 558, 558, 558, 558, 558, 558, 558, 558, 0, 2623, 0, 0, 0,
  /* 32127 */ 0, 0, 1137, 366, 366, 0, 0, 1140, 0, 0, 0, 1143, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770,
  /* 32156 */ 0, 0, 0, 0, 0, 0, 0, 0, 582, 582, 582, 582, 582, 582, 582, 582, 2631, 582, 582, 582, 582, 582, 582, 2666,
  /* 32180 */ 582, 582, 582, 582, 582, 582, 2673, 582, 582, 582, 2661, 582, 582, 582, 582, 2665, 582, 582, 582, 2670,
  /* 32200 */ 582, 582, 582, 582, 582, 582, 1957, 582, 582, 582, 582, 1963, 582, 582, 582, 582, 582, 582, 2677, 582,
  /* 32220 */ 582, 582, 582, 582, 582, 582, 582, 2683, 582, 582, 582, 582, 582, 582, 2680, 582, 582, 582, 582, 582, 582,
  /* 32241 */ 582, 582, 582, 1995, 582, 582, 536, 582, 558, 536, 0, 0, 2738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32267 */ 2108, 0, 0, 0, 0, 0, 2765, 2766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 32293 */ 536, 536, 2883, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2337, 582,
  /* 32313 */ 2896, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2903, 582, 0, 536, 3609, 558, 3610, 582,
  /* 32334 */ 3611, 536, 558, 582, 536, 558, 582, 536, 558, 558, 558, 558, 558, 558, 2825, 558, 558, 558, 558, 558, 558,
  /* 32355 */ 2833, 558, 558, 558, 558, 558, 558, 1829, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1392, 558, 558,
  /* 32375 */ 558, 558, 558, 558, 0, 0, 0, 2957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2732, 0, 0, 0, 0, 0, 0, 2971, 0, 0,
  /* 32405 */ 0, 0, 2976, 2977, 0, 2979, 0, 0, 2982, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0,
  /* 32435 */ 0, 0, 0, 2985, 536, 536, 536, 536, 536, 536, 2992, 536, 536, 536, 536, 536, 2996, 3025, 536, 558, 558,
  /* 32456 */ 558, 558, 558, 558, 3032, 558, 558, 558, 558, 558, 3036, 558, 558, 558, 558, 558, 558, 2850, 558, 558,
  /* 32476 */ 558, 558, 558, 558, 558, 2856, 558, 558, 558, 558, 558, 558, 2607, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 32497 */ 558, 558, 2595, 558, 558, 558, 558, 2599, 3066, 3067, 558, 582, 582, 582, 582, 582, 582, 3074, 582, 582,
  /* 32517 */ 582, 582, 582, 3078, 3093, 582, 582, 582, 582, 582, 582, 582, 582, 3100, 3102, 582, 582, 582, 582, 3106,
  /* 32537 */ 582, 3108, 3109, 582, 536, 582, 558, 536, 3114, 558, 3116, 582, 3118, 0, 0, 0, 0, 0, 0, 825, 536, 536,
  /* 32559 */ 536, 536, 846, 536, 854, 536, 536, 0, 0, 0, 3124, 0, 0, 3127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0,
  /* 32587 */ 155648, 0, 0, 0, 0, 0, 0, 3134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 0, 0, 536, 536, 536, 536,
  /* 32615 */ 3165, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2186, 536, 536, 536, 536, 536, 3175,
  /* 32635 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 558, 558, 905, 558, 558, 558, 558, 3211,
  /* 32656 */ 558, 558, 558, 558, 558, 558, 582, 582, 582, 3216, 582, 558, 536, 536, 885, 536, 536, 558, 558, 959, 558,
  /* 32677 */ 558, 0, 582, 582, 1034, 0, 3259, 0, 3140, 3261, 0, 0, 3264, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 1188, 0, 0, 0,
  /* 32703 */ 0, 0, 0, 3364, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 32725 */ 582, 582, 582, 582, 582, 582, 582, 3380, 582, 582, 582, 582, 582, 582, 582, 582, 582, 536, 558, 582, 558,
  /* 32746 */ 536, 536, 887, 536, 536, 558, 558, 961, 558, 558, 0, 582, 582, 1036, 536, 536, 3506, 536, 3508, 536, 536,
  /* 32767 */ 536, 536, 3513, 3514, 3515, 558, 558, 558, 3518, 558, 3520, 558, 558, 558, 558, 3525, 3526, 3527, 3528,
  /* 32786 */ 582, 582, 582, 3531, 582, 3533, 582, 582, 582, 582, 3538, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536,
  /* 32809 */ 536, 536, 536, 536, 3461, 558, 558, 558, 3580, 558, 582, 582, 3582, 582, 582, 582, 3586, 582, 0, 0, 0, 0,
  /* 32831 */ 0, 0, 825, 780, 0, 0, 825, 0, 0, 0, 0, 0, 0, 0, 2768, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536,
  /* 32859 */ 536, 536, 3349, 536, 0, 0, 0, 330, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 370, 0, 0,
  /* 32888 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 370, 0, 0, 0, 378, 380, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32919 */ 2686976, 2736128, 0, 0, 2531328, 2707456, 0, 3194880, 0, 0, 413, 0, 0, 0, 413, 69632, 73728, 0, 370, 370,
  /* 32939 */ 0, 425, 65536, 370, 0, 0, 370, 425, 494, 498, 494, 494, 503, 494, 494, 494, 503, 494, 425, 425, 331, 425,
  /* 32961 */ 0, 0, 425, 425, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 425, 425, 425, 425, 425, 425, 425, 425,
  /* 32989 */ 425, 425, 425, 425, 425, 425, 425, 425, 542, 565, 542, 565, 542, 542, 565, 542, 542, 589, 565, 565, 565,
  /* 33010 */ 565, 565, 542, 565, 565, 565, 589, 589, 542, 589, 589, 589, 589, 589, 589, 589, 589, 565, 589, 565, 542,
  /* 33031 */ 565, 565, 589, 589, 0, 0, 0, 771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2760, 0, 0, 0, 771, 0, 0, 0, 0, 0,
  /* 33061 */ 0, 536, 832, 536, 536, 536, 536, 536, 536, 862, 0, 0, 0, 0, 1212, 0, 1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366,
  /* 33088 */ 0, 294, 0, 0, 0, 0, 0, 1233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 1358, 558, 558, 558, 558,
  /* 33117 */ 558, 1370, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2285, 558, 558, 558, 558, 2289, 582, 1463,
  /* 33137 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2336, 582, 1699, 0, 0, 0, 0, 0, 0,
  /* 33160 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 0, 2115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 0, 0, 0, 558,
  /* 33192 */ 558, 558, 558, 2266, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3297, 558, 558, 558, 582,
  /* 33213 */ 582, 582, 582, 2353, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1195, 536, 582, 558, 536, 0,
  /* 33234 */ 0, 0, 2479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0, 536, 536, 536, 2543, 536, 536, 536, 536, 536,
  /* 33260 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 2787, 536, 0, 0, 0, 0, 3125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33287 */ 1708, 0, 0, 0, 0, 558, 558, 558, 558, 558, 3581, 582, 582, 582, 582, 582, 582, 582, 0, 0, 0, 0, 3498, 0,
  /* 33311 */ 3500, 536, 536, 536, 536, 426, 426, 0, 426, 435, 0, 426, 426, 462, 462, 462, 462, 462, 462, 462, 462, 462,
  /* 33333 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 488, 488, 462, 488, 488, 488, 488, 488, 488, 488, 488,
  /* 33354 */ 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 543, 566, 543, 566,
  /* 33375 */ 543, 543, 566, 543, 543, 590, 566, 566, 566, 566, 566, 543, 566, 566, 566, 590, 590, 543, 590, 590, 590,
  /* 33396 */ 590, 590, 590, 590, 590, 566, 590, 566, 543, 566, 566, 590, 590, 582, 582, 78116, 1071, 0, 0, 1074, 1078,
  /* 33417 */ 0, 0, 1082, 1086, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 155648, 0,
  /* 33443 */ 155648, 536, 536, 1347, 1808, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2262, 558,
  /* 33463 */ 558, 0, 2091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134, 2392, 536, 536, 536, 2396, 558, 558, 558, 2400,
  /* 33489 */ 582, 582, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 510, 517, 517, 2437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33519 */ 0, 0, 0, 0, 0, 1208, 2736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1222, 2811, 536, 536, 536, 536,
  /* 33547 */ 536, 536, 536, 536, 536, 536, 536, 0, 0, 558, 558, 558, 558, 558, 558, 558, 2228, 558, 558, 558, 558, 558,
  /* 33569 */ 558, 558, 558, 2581, 558, 558, 558, 558, 558, 558, 558, 558, 2609, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 33590 */ 2620, 558, 558, 558, 558, 0, 2623, 0, 558, 2859, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 33611 */ 558, 0, 0, 0, 0, 0, 0, 2935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 353, 354, 0, 0, 0, 0, 582, 582, 582, 2908,
  /* 33639 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 0, 0, 0, 536, 0, 2946, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33665 */ 0, 0, 0, 0, 0, 0, 1217, 536, 2956, 0, 0, 0, 0, 0, 2959, 0, 2961, 0, 0, 2964, 0, 0, 0, 0, 0, 0, 0, 155648,
  /* 33693 */ 155648, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 1706, 0, 0, 0, 0, 0, 0, 0, 0, 2444, 0, 0, 2447, 0, 0, 0, 0, 0,
  /* 33721 */ 2969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 2986, 536, 536, 536, 536, 536, 536, 536,
  /* 33749 */ 536, 536, 536, 536, 536, 0, 2219, 558, 558, 536, 536, 3012, 536, 536, 536, 536, 536, 536, 536, 536, 3020,
  /* 33770 */ 536, 536, 3023, 536, 536, 536, 536, 536, 3356, 536, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 33791 */ 558, 3193, 558, 558, 536, 536, 3026, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 0,
  /* 33812 */ 2623, 0, 558, 558, 3053, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3062, 558, 558, 3065, 558, 558, 558,
  /* 33833 */ 3068, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 0, 0, 0, 3448, 582, 582, 582, 3095, 582,
  /* 33855 */ 582, 582, 582, 582, 582, 582, 582, 582, 3104, 582, 582, 0, 3566, 0, 3568, 536, 536, 536, 536, 536, 536,
  /* 33876 */ 536, 558, 558, 558, 558, 3030, 558, 558, 558, 558, 3034, 558, 558, 558, 558, 3107, 582, 582, 582, 536,
  /* 33896 */ 582, 558, 536, 536, 558, 558, 582, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3143, 0, 0, 0, 0, 0, 0, 0,
  /* 33924 */ 3150, 0, 0, 0, 0, 0, 0, 2948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 3176,
  /* 33953 */ 536, 3178, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3182, 536, 536, 536, 536, 536, 558, 558, 558,
  /* 33974 */ 558, 3198, 558, 558, 558, 558, 558, 558, 558, 558, 3204, 558, 3206, 558, 558, 558, 558, 3301, 558, 558,
  /* 33994 */ 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 2664, 582, 582, 582, 582, 582, 582, 2672, 582, 582,
  /* 34015 */ 582, 582, 582, 2872, 582, 2873, 582, 582, 582, 582, 582, 582, 582, 582, 2899, 582, 582, 582, 582, 582,
  /* 34035 */ 582, 582, 582, 3320, 582, 582, 582, 582, 582, 582, 582, 582, 536, 536, 558, 558, 582, 582, 0, 3602, 0,
  /* 34056 */ 536, 536, 536, 536, 558, 558, 558, 558, 582, 582, 582, 582, 2013, 0, 2015, 0, 536, 536, 3591, 3592, 536,
  /* 34077 */ 536, 558, 558, 3595, 3596, 558, 558, 582, 582, 3599, 3600, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0,
  /* 34102 */ 0, 0, 0, 0, 0, 172032, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 34119 */ 0, 0, 0, 0, 0, 0, 0, 0, 225736, 225736, 225736, 225736, 225736, 225736, 225736, 225736, 225736, 225736,
  /* 34137 */ 225736, 225736, 225736, 225736, 225736, 225736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 685, 686, 0, 0, 0, 0, 691,
  /* 34160 */ 0, 0, 0, 366, 366, 366, 0, 0, 0, 753, 0, 0, 0, 0, 0, 753, 753, 0, 0, 818, 0, 0, 0, 0, 0, 0, 2974, 0, 0, 0,
  /* 34190 */ 0, 0, 0, 2981, 0, 0, 0, 0, 0, 0, 3135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 0, 558, 917, 558,
  /* 34220 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2249, 558, 558, 558, 974, 558, 0, 582,
  /* 34241 */ 582, 582, 582, 992, 582, 582, 582, 582, 582, 582, 582, 3233, 582, 3235, 582, 582, 582, 582, 582, 582, 582,
  /* 34262 */ 3314, 582, 582, 582, 582, 582, 582, 582, 582, 1944, 582, 582, 582, 582, 582, 582, 582, 992, 917, 536, 536,
  /* 34283 */ 536, 536, 900, 558, 558, 558, 558, 974, 0, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 34304 */ 582, 2320, 582, 582, 1049, 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2965, 0, 0, 0, 536, 536, 536,
  /* 34330 */ 536, 1324, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2200, 2201, 536, 536, 0, 1688, 0,
  /* 34351 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 1617, 1804, 536, 1347, 0, 558, 558, 558, 558, 558, 558, 558,
  /* 34377 */ 558, 558, 558, 558, 558, 558, 2233, 558, 0, 0, 0, 0, 2440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2039, 0, 2040,
  /* 34404 */ 0, 0, 0, 0, 0, 0, 2739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 0, 0, 0, 0, 0, 3268, 0, 0, 536, 536,
  /* 34434 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2214, 0, 0, 0, 0, 0, 0, 0, 436, 0, 0, 333, 463, 463,
  /* 34458 */ 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 481, 489, 489, 481, 489,
  /* 34479 */ 489, 489, 489, 489, 489, 489, 489, 514, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  /* 34500 */ 522, 531, 522, 522, 522, 522, 522, 522, 544, 567, 544, 567, 544, 544, 567, 544, 544, 591, 567, 567, 567,
  /* 34521 */ 567, 567, 544, 567, 567, 567, 591, 591, 544, 591, 591, 591, 591, 591, 591, 591, 591, 567, 591, 567, 544,
  /* 34542 */ 567, 567, 591, 591, 0, 759, 0, 0, 762, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 0, 1581, 1582, 0, 0, 0, 0, 0, 1588,
  /* 34570 */ 0, 0, 0, 780, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
  /* 34602 */ 0, 0, 0, 0, 784, 0, 0, 807, 0, 0, 0, 0, 0, 807, 807, 0, 0, 0, 0, 784, 558, 558, 920, 558, 928, 558, 558,
  /* 34629 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3430, 582, 582, 582, 558, 558, 975, 558, 0, 582, 582,
  /* 34650 */ 582, 582, 582, 995, 582, 1003, 582, 582, 582, 582, 582, 2898, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 34671 */ 582, 536, 536, 558, 558, 582, 582, 1069, 1050, 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2980, 0,
  /* 34696 */ 0, 0, 1132, 0, 0, 0, 0, 0, 366, 366, 0, 0, 0, 0, 0, 0, 0, 0, 1594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1164, 0,
  /* 34727 */ 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 0, 249856, 249856, 249856, 249856, 249856,
  /* 34749 */ 249856, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 0, 0, 0, 0, 0, 0, 3155, 0, 3157, 536, 536, 536,
  /* 34776 */ 536, 536, 536, 536, 558, 3358, 558, 558, 3360, 558, 558, 558, 558, 536, 536, 536, 1344, 536, 536, 1347,
  /* 34796 */ 904, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2594, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 34817 */ 1363, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1382, 558, 558, 558, 558, 558, 558, 2861, 558, 558,
  /* 34837 */ 2864, 558, 558, 2867, 558, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 135168, 135168, 135168, 135168, 135168, 0,
  /* 34857 */ 135168, 1420, 558, 558, 1424, 558, 558, 558, 558, 558, 1430, 558, 558, 558, 1437, 558, 558, 558, 558, 558,
  /* 34877 */ 558, 1427, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3428, 558, 582, 582, 582, 582, 582, 1483,
  /* 34897 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2350, 582, 1602, 0, 0, 0, 0, 0, 0,
  /* 34920 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1231, 0, 0, 0, 1621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 0, 1182,
  /* 34951 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34983 */ 2078, 0, 0, 0, 0, 1671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1685, 0, 1687, 0, 0, 1701, 0, 0, 0, 0, 0, 0,
  /* 35013 */ 0, 0, 0, 0, 0, 0, 0, 2132, 0, 0, 0, 0, 1685, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 35040 */ 536, 3277, 536, 1772, 536, 536, 536, 536, 536, 536, 536, 536, 1781, 536, 536, 536, 536, 536, 536, 536,
  /* 35060 */ 2532, 536, 536, 2536, 536, 536, 536, 536, 536, 536, 536, 2547, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 35080 */ 2780, 536, 2783, 536, 536, 536, 536, 2788, 536, 1789, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1798,
  /* 35100 */ 1800, 536, 536, 536, 536, 536, 536, 2505, 536, 536, 2508, 2509, 536, 536, 536, 536, 536, 536, 536, 3016,
  /* 35120 */ 536, 3018, 536, 536, 536, 536, 536, 536, 0, 2557, 0, 0, 0, 0, 558, 558, 558, 2561, 0, 2071, 0, 0, 0, 0, 0,
  /* 35145 */ 0, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 1214, 0, 0, 0, 0, 1219, 0,
  /* 35175 */ 0, 0, 536, 536, 536, 536, 2154, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2557, 0, 558,
  /* 35197 */ 558, 558, 558, 558, 2239, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2302, 0, 0, 0,
  /* 35219 */ 582, 582, 582, 582, 582, 582, 2314, 582, 582, 582, 582, 582, 582, 582, 582, 1976, 582, 582, 582, 582, 582,
  /* 35240 */ 582, 582, 582, 582, 582, 2326, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 0, 0, 735, 536,
  /* 35262 */ 2427, 0, 0, 0, 0, 0, 0, 0, 0, 2432, 0, 0, 2435, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 1156, 0, 0, 0, 0, 0,
  /* 35292 */ 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2450, 0,
  /* 35320 */ 0, 0, 2464, 2465, 0, 0, 2468, 0, 0, 2471, 0, 0, 0, 0, 0, 0, 0, 2936, 0, 0, 0, 2940, 0, 0, 0, 0, 0, 0, 0,
  /* 35349 */ 2491, 0, 0, 0, 0, 536, 2495, 536, 536, 536, 536, 536, 536, 536, 1308, 536, 536, 536, 536, 536, 536, 536,
  /* 35371 */ 536, 2197, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2518, 536, 536, 536, 536, 536, 536,
  /* 35391 */ 2523, 536, 536, 536, 536, 536, 536, 1347, 904, 558, 558, 558, 558, 558, 558, 558, 1357, 2542, 536, 536,
  /* 35411 */ 536, 536, 536, 536, 536, 536, 536, 2549, 536, 536, 536, 2552, 536, 536, 536, 536, 536, 3407, 536, 3409,
  /* 35431 */ 3410, 536, 3412, 536, 558, 558, 558, 558, 0, 582, 582, 582, 582, 582, 582, 1001, 582, 582, 582, 582, 582,
  /* 35452 */ 582, 3221, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1945, 582, 582, 582, 582, 582, 582, 2587, 558,
  /* 35472 */ 558, 558, 558, 558, 558, 558, 2593, 558, 558, 558, 558, 558, 558, 2600, 558, 2615, 558, 558, 558, 2618,
  /* 35492 */ 558, 558, 558, 558, 558, 558, 558, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 545, 568, 545, 568,
  /* 35519 */ 545, 545, 568, 0, 0, 0, 582, 2625, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1513, 582, 582,
  /* 35541 */ 1517, 582, 2648, 582, 582, 582, 582, 582, 582, 2653, 582, 582, 582, 582, 582, 582, 582, 2659, 582, 582,
  /* 35561 */ 582, 582, 2689, 2690, 2691, 536, 536, 536, 536, 558, 558, 558, 558, 582, 582, 582, 582, 0, 2013, 0, 0, 0,
  /* 35583 */ 0, 0, 0, 0, 0, 2754, 0, 0, 0, 0, 2759, 0, 0, 0, 2761, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35614 */ 660, 0, 0, 663, 0, 0, 536, 2774, 536, 536, 536, 536, 536, 2779, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 35636 */ 1295, 536, 536, 536, 536, 536, 536, 536, 558, 2821, 558, 558, 558, 558, 558, 2826, 558, 558, 558, 558,
  /* 35656 */ 558, 558, 558, 558, 558, 2852, 558, 558, 558, 2855, 558, 2857, 582, 582, 582, 2870, 582, 582, 582, 582,
  /* 35676 */ 582, 2875, 582, 582, 582, 582, 582, 582, 582, 3324, 582, 582, 536, 536, 558, 558, 582, 582, 2895, 582,
  /* 35696 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 2901, 582, 582, 582, 2904, 582, 2906, 582, 582, 582, 582,
  /* 35716 */ 582, 582, 582, 2911, 582, 582, 582, 582, 582, 582, 1034, 582, 582, 582, 582, 582, 0, 0, 0, 536, 536, 536,
  /* 35738 */ 3604, 558, 558, 558, 3606, 582, 582, 582, 0, 0, 2970, 0, 0, 0, 0, 2975, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0,
  /* 35764 */ 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 3000, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 35787 */ 3021, 536, 536, 536, 536, 536, 536, 536, 3014, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 35808 */ 3171, 536, 536, 536, 558, 558, 558, 3040, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 35829 */ 2302, 2623, 0, 558, 558, 558, 558, 3055, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582,
  /* 35850 */ 3215, 582, 582, 582, 582, 582, 582, 3082, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2347,
  /* 35870 */ 582, 582, 582, 582, 0, 0, 0, 3132, 3133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2090, 0, 0, 0, 0, 0, 0, 3252, 0,
  /* 35899 */ 0, 0, 0, 0, 3255, 0, 0, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 0, 0, 2392064, 2412544, 582, 582, 582, 3310,
  /* 35924 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 0, 0, 188416, 536, 582, 582, 582, 3321, 582,
  /* 35945 */ 582, 582, 582, 582, 582, 536, 536, 558, 558, 582, 582, 292, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35970 */ 1585, 0, 0, 0, 0, 0, 0, 3341, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3183, 536,
  /* 35993 */ 536, 536, 558, 558, 558, 558, 3422, 558, 3424, 3425, 558, 3427, 558, 3429, 582, 582, 582, 582, 582, 582,
  /* 36013 */ 3323, 582, 582, 582, 536, 536, 558, 558, 582, 582, 582, 582, 582, 582, 3438, 582, 3440, 3441, 582, 3443,
  /* 36033 */ 582, 3445, 0, 0, 0, 0, 0, 0, 0, 254409, 254409, 0, 254409, 254409, 254409, 254409, 254409, 254409, 536,
  /* 36052 */ 536, 3546, 536, 3547, 536, 536, 536, 558, 558, 558, 558, 558, 558, 3553, 558, 558, 558, 558, 558, 558,
  /* 36072 */ 3042, 558, 558, 558, 558, 558, 3048, 558, 558, 3051, 3554, 558, 558, 558, 558, 582, 582, 582, 582, 582,
  /* 36092 */ 582, 3561, 582, 3562, 582, 582, 292, 1071, 0, 0, 1074, 1078, 0, 0, 1082, 1086, 0, 0, 0, 0, 0, 0, 0,
  /* 36115 */ 286720, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 0, 286720, 545, 545, 592, 568, 568, 568, 568, 568,
  /* 36137 */ 545, 568, 568, 568, 592, 592, 545, 592, 592, 592, 592, 592, 592, 592, 592, 568, 592, 568, 545, 568, 568,
  /* 36158 */ 592, 592, 582, 1498, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2658, 582, 0,
  /* 36179 */ 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2106, 0, 0, 0, 0, 0, 582, 582, 582, 582, 582, 582, 582,
  /* 36207 */ 582, 582, 582, 2318, 582, 582, 582, 582, 582, 1502, 582, 582, 582, 582, 582, 582, 582, 1516, 582, 582,
  /* 36227 */ 404, 0, 0, 0, 0, 382, 0, 69632, 73728, 0, 0, 0, 0, 427, 65536, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 0, 0, 0, 0,
  /* 36255 */ 0, 0, 0, 2939, 0, 0, 0, 0, 0, 427, 427, 0, 427, 0, 441, 427, 427, 464, 464, 464, 471, 464, 464, 464, 464,
  /* 36280 */ 464, 464, 464, 464, 471, 464, 464, 464, 464, 464, 464, 464, 464, 478, 464, 490, 490, 464, 490, 490, 490,
  /* 36301 */ 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
  /* 36322 */ 533, 546, 569, 546, 569, 546, 546, 569, 546, 546, 593, 569, 569, 569, 569, 569, 546, 569, 569, 569, 593,
  /* 36343 */ 593, 546, 593, 593, 593, 593, 593, 593, 593, 593, 569, 593, 569, 546, 569, 569, 593, 593, 737, 656, 0, 0,
  /* 36365 */ 0, 0, 0, 536, 833, 536, 536, 536, 848, 536, 536, 536, 536, 536, 536, 2519, 536, 536, 536, 2522, 536, 536,
  /* 36387 */ 2524, 536, 2525, 558, 558, 558, 922, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 961, 558, 558, 558,
  /* 36408 */ 558, 558, 558, 3212, 558, 558, 558, 558, 582, 582, 582, 582, 582, 582, 582, 3075, 582, 582, 582, 582, 582,
  /* 36429 */ 0, 1133, 0, 1135, 0, 0, 366, 366, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36460 */ 0, 743, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2032, 0, 0, 1094, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36491 */ 0, 0, 0, 0, 3130, 3131, 0, 0, 0, 0, 1093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 536, 3159, 536, 536,
  /* 36519 */ 536, 536, 1258, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1271, 1278, 536, 536, 536, 536, 536,
  /* 36539 */ 536, 2778, 536, 536, 536, 536, 536, 536, 2786, 536, 536, 536, 1340, 536, 536, 536, 536, 1347, 904, 558,
  /* 36559 */ 1350, 558, 558, 558, 558, 558, 558, 558, 1406, 558, 558, 558, 558, 558, 558, 558, 1419, 1385, 558, 558,
  /* 36579 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2614, 26016, 1347, 979, 582, 1443, 582,
  /* 36599 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2359, 582, 582, 582, 582, 1457, 1464, 582, 582, 582,
  /* 36619 */ 582, 582, 582, 582, 582, 582, 1478, 582, 582, 582, 582, 582, 1927, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 36640 */ 582, 582, 1477, 1479, 582, 582, 582, 582, 582, 582, 1499, 582, 582, 582, 582, 582, 582, 582, 1512, 582,
  /* 36660 */ 582, 582, 582, 582, 582, 1958, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3386, 582, 582, 582, 536, 558,
  /* 36681 */ 582, 536, 1326, 536, 536, 558, 558, 1419, 558, 558, 582, 582, 1512, 582, 582, 1071, 0, 0, 0, 0, 0, 1226,
  /* 36703 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1577, 1578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36735 */ 0, 1184, 0, 0, 0, 0, 0, 558, 558, 1824, 1825, 558, 558, 558, 558, 1832, 558, 558, 558, 558, 558, 558, 558,
  /* 36758 */ 558, 2827, 558, 2830, 558, 558, 558, 558, 2835, 558, 558, 558, 558, 1873, 558, 558, 558, 558, 558, 558,
  /* 36778 */ 558, 558, 558, 558, 558, 582, 3214, 582, 582, 582, 1904, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 36799 */ 582, 582, 582, 582, 1920, 1921, 582, 582, 582, 582, 1928, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 36819 */ 582, 1932, 582, 582, 582, 582, 582, 582, 1969, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 36840 */ 582, 582, 2674, 582, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2434, 0, 0, 0, 0, 2095, 0, 0, 0,
  /* 36869 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2042, 536, 536, 536, 2193, 536, 536, 536, 536, 536, 536, 2198, 536,
  /* 36894 */ 536, 536, 536, 536, 536, 536, 2794, 536, 536, 536, 536, 536, 536, 536, 536, 895, 536, 536, 536, 536, 558,
  /* 36915 */ 558, 558, 2203, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 0, 0, 0, 0, 0, 0, 558, 558,
  /* 36938 */ 2560, 558, 558, 558, 558, 558, 558, 2267, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1880,
  /* 36958 */ 558, 558, 558, 558, 558, 558, 2279, 558, 558, 558, 558, 558, 558, 2284, 558, 558, 558, 558, 558, 558, 558,
  /* 36979 */ 1830, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3201, 558, 558, 558, 558, 558, 558, 2290, 558, 558,
  /* 36999 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 0, 0, 0, 0, 0, 0, 1184, 0, 1187, 0, 0, 0, 0, 0, 1192, 0,
  /* 37025 */ 582, 582, 2366, 582, 582, 582, 582, 582, 582, 2371, 582, 582, 582, 582, 582, 582, 1036, 582, 582, 582,
  /* 37045 */ 582, 582, 0, 0, 0, 536, 2377, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 536, 582, 558,
  /* 37067 */ 536, 2693, 536, 536, 558, 2695, 558, 558, 582, 2414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2054, 0,
  /* 37094 */ 0, 0, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2485, 0, 0, 0, 0, 558, 558, 558, 2576, 558, 558, 558, 558,
  /* 37122 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 2303, 0, 0, 2720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37149 */ 0, 2069, 0, 0, 0, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2762, 2945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37180 */ 0, 0, 0, 2094, 558, 558, 558, 3210, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 582, 582,
  /* 37202 */ 582, 582, 3488, 582, 536, 536, 536, 3507, 536, 3509, 536, 536, 536, 558, 558, 558, 558, 558, 558, 558,
  /* 37222 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 969, 3519, 558, 3521, 558, 558, 558, 558, 582, 582, 582, 582,
  /* 37243 */ 582, 582, 582, 3532, 582, 558, 536, 536, 889, 536, 536, 558, 558, 963, 558, 558, 0, 582, 582, 1038, 3534,
  /* 37264 */ 582, 582, 582, 582, 0, 0, 0, 0, 0, 0, 0, 3543, 536, 536, 536, 536, 536, 536, 2803, 536, 536, 536, 536,
  /* 37287 */ 536, 536, 536, 536, 536, 2159, 536, 536, 536, 536, 536, 536, 558, 558, 558, 558, 558, 3558, 582, 582, 582,
  /* 37308 */ 582, 582, 582, 582, 582, 582, 582, 1978, 582, 582, 582, 582, 582, 536, 3590, 536, 536, 536, 536, 558,
  /* 37328 */ 3594, 558, 558, 558, 558, 582, 3598, 582, 582, 582, 582, 582, 3382, 582, 582, 582, 582, 582, 582, 582,
  /* 37348 */ 536, 558, 582, 0, 0, 0, 0, 437, 0, 0, 449, 465, 465, 465, 465, 465, 465, 465, 465, 465, 475, 465, 465,
  /* 37371 */ 465, 465, 465, 465, 465, 465, 465, 449, 449, 465, 449, 449, 449, 449, 449, 449, 449, 449, 515, 515, 515,
  /* 37392 */ 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 547, 570, 547, 570, 547, 547, 570, 547,
  /* 37413 */ 547, 594, 570, 570, 570, 570, 570, 547, 570, 570, 570, 594, 594, 547, 594, 594, 594, 594, 594, 594, 594,
  /* 37434 */ 594, 570, 594, 570, 547, 570, 570, 594, 594, 0, 657, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 849, 536,
  /* 37457 */ 536, 863, 558, 558, 558, 923, 558, 558, 937, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3046, 558,
  /* 37478 */ 558, 558, 558, 558, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2717, 0, 2718, 0, 0, 558, 558, 558,
  /* 37506 */ 1403, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2571, 558, 558, 558, 1421, 558,
  /* 37526 */ 558, 558, 558, 558, 1428, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3045, 558, 3047, 558, 558, 558,
  /* 37546 */ 558, 1458, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2647, 582, 582,
  /* 37566 */ 1521, 582, 582, 582, 582, 582, 582, 582, 582, 0, 1272, 1458, 1365, 536, 536, 536, 536, 536, 3466, 558,
  /* 37586 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2866, 558, 558, 0, 0, 536, 536, 1538, 536, 558, 558,
  /* 37607 */ 558, 1542, 558, 582, 582, 582, 1546, 582, 1071, 0, 0, 0, 0, 0, 1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1217,
  /* 37633 */ 0, 0, 0, 0, 0, 1550, 0, 0, 0, 1556, 0, 0, 0, 1562, 0, 0, 0, 1568, 0, 0, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0,
  /* 37663 */ 0, 0, 0, 0, 366, 0, 294, 0, 0, 0, 349, 0, 577536, 0, 0, 1591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2731, 0, 0,
  /* 37693 */ 0, 0, 536, 1742, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3287, 536, 558,
  /* 37714 */ 558, 558, 558, 1826, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1837, 558, 558, 558, 558, 558, 558,
  /* 37734 */ 3291, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2844, 558, 558, 558, 558, 558, 558, 558, 1857,
  /* 37754 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 582, 582, 1922,
  /* 37775 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 1933, 582, 582, 582, 582, 582, 1942, 582, 582, 582, 582, 582,
  /* 37796 */ 582, 582, 582, 582, 582, 1946, 582, 582, 582, 582, 582, 0, 2084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37823 */ 1648, 0, 0, 0, 0, 2098, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0, 0, 0, 1095, 1096, 1097, 1098, 0, 0, 0, 0, 0,
  /* 37851 */ 2190, 536, 536, 536, 536, 2195, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2550, 536, 536,
  /* 37871 */ 536, 536, 558, 558, 558, 558, 2281, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 951, 558, 558,
  /* 37892 */ 558, 558, 582, 582, 582, 582, 2368, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2373, 2374,
  /* 37912 */ 2375, 582, 582, 0, 2932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1686, 0, 2997, 536, 536, 536, 536, 536,
  /* 37939 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2178, 3079, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 37960 */ 582, 582, 582, 582, 582, 582, 2675, 582, 582, 582, 582, 3231, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 37981 */ 582, 582, 2643, 582, 2645, 582, 582, 0, 0, 0, 3392, 0, 0, 0, 0, 3140, 0, 0, 0, 0, 536, 536, 536, 536, 536,
  /* 38006 */ 536, 536, 2993, 536, 536, 536, 536, 536, 536, 3403, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 558,
  /* 38027 */ 558, 558, 558, 558, 558, 558, 558, 558, 3418, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582,
  /* 38048 */ 582, 582, 582, 3483, 582, 582, 582, 582, 582, 582, 3434, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 38069 */ 582, 0, 0, 0, 0, 0, 3499, 0, 536, 536, 536, 536, 558, 558, 558, 558, 3557, 582, 582, 582, 582, 582, 582,
  /* 38092 */ 582, 582, 582, 582, 582, 2671, 582, 582, 582, 582, 582, 3565, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536,
  /* 38114 */ 536, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 1071, 1548, 389, 391, 341, 0, 0, 0, 0, 0, 0, 340,
  /* 38137 */ 0, 0, 341, 0, 0, 0, 0, 0, 0, 1579, 1580, 0, 0, 0, 0, 0, 0, 0, 0, 2469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388,
  /* 38168 */ 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1612, 0,
  /* 38197 */ 0, 0, 0, 0, 0, 0, 340, 0, 0, 442, 0, 0, 466, 466, 466, 466, 466, 466, 466, 466, 466, 548, 571, 548, 571,
  /* 38222 */ 548, 548, 571, 472, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 476, 476, 466, 477, 466,
  /* 38243 */ 466, 466, 477, 466, 466, 466, 495, 472, 495, 495, 495, 495, 495, 495, 495, 495, 466, 466, 548, 548, 595,
  /* 38264 */ 571, 571, 571, 571, 571, 548, 571, 571, 571, 595, 595, 548, 595, 595, 595, 595, 595, 595, 595, 595, 571,
  /* 38285 */ 595, 571, 548, 571, 571, 595, 595, 712, 0, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
  /* 38314 */ 335, 0, 0, 0, 0, 0, 745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3138, 0, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0,
  /* 38346 */ 0, 0, 0, 0, 0, 0, 658, 0, 0, 661, 662, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 701, 0, 0, 0, 0, 0, 0, 0,
  /* 38377 */ 1124, 0, 0, 0, 0, 0, 0, 0, 0, 2757, 2758, 0, 0, 0, 0, 0, 0, 801, 0, 798, 781, 0, 0, 803, 0, 662, 0, 777,
  /* 38405 */ 0, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 777, 803, 0, 803, 798, 0, 0, 0, 817, 0, 0, 0, 0,
  /* 38436 */ 0, 0, 1608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 555, 578, 555, 578, 555, 555, 578, 658, 820, 0, 777, 0, 0, 0, 0, 0,
  /* 38464 */ 826, 0, 0, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 781, 658, 830, 0,
  /* 38494 */ 0, 0, 0, 536, 834, 536, 536, 536, 850, 536, 536, 864, 558, 558, 558, 924, 558, 558, 938, 558, 558, 558,
  /* 38516 */ 558, 952, 558, 558, 558, 558, 0, 582, 582, 582, 989, 993, 996, 582, 1004, 582, 582, 582, 970, 558, 558,
  /* 38537 */ 558, 0, 582, 582, 982, 582, 582, 582, 999, 582, 582, 1013, 582, 558, 536, 536, 890, 536, 536, 558, 558,
  /* 38558 */ 964, 558, 558, 0, 582, 582, 1039, 582, 582, 582, 1027, 582, 582, 582, 582, 1045, 582, 582, 582, 0, 0, 0,
  /* 38580 */ 536, 536, 536, 536, 536, 2142, 536, 536, 536, 536, 536, 536, 536, 536, 3169, 536, 536, 536, 536, 536, 536,
  /* 38601 */ 536, 536, 2795, 2796, 536, 536, 536, 536, 2799, 536, 0, 0, 0, 0, 1136, 0, 366, 366, 0, 1139, 0, 0, 0, 0,
  /* 38625 */ 0, 0, 0, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 2037, 0, 2038, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38656 */ 0, 0, 0, 0, 0, 2041, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 2960, 0, 0, 0, 0, 0,
  /* 38687 */ 0, 0, 0, 2742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1098, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
  /* 38718 */ 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1583, 0, 0, 0, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
  /* 38749 */ 0, 536, 536, 536, 843, 536, 536, 536, 536, 536, 536, 536, 1319, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 38770 */ 536, 536, 536, 536, 536, 1280, 536, 536, 558, 558, 1388, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 38791 */ 558, 558, 558, 1398, 558, 558, 1459, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1481,
  /* 38811 */ 582, 582, 582, 582, 582, 3494, 3495, 0, 0, 0, 0, 0, 3501, 3502, 3503, 536, 536, 1537, 536, 536, 558, 558,
  /* 38833 */ 1541, 558, 558, 582, 582, 1545, 582, 582, 1071, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1707,
  /* 38859 */ 0, 0, 0, 0, 0, 1573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2488, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0,
  /* 38891 */ 0, 0, 0, 0, 0, 0, 3140, 0, 0, 0, 0, 536, 536, 536, 536, 1724, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 38915 */ 1735, 536, 536, 536, 536, 536, 536, 536, 3002, 536, 536, 536, 536, 536, 3008, 536, 536, 536, 536, 1347, 0,
  /* 38936 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1819, 558, 558, 558, 558, 558, 558, 3302, 558, 558, 558,
  /* 38957 */ 558, 558, 558, 582, 582, 582, 582, 582, 3083, 582, 582, 582, 582, 582, 582, 582, 582, 3091, 582, 558, 558,
  /* 38978 */ 558, 1858, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2845, 558, 558, 0, 582, 582,
  /* 38999 */ 582, 582, 582, 582, 582, 582, 582, 582, 1915, 582, 582, 582, 582, 582, 1990, 1992, 582, 582, 582, 582,
  /* 39019 */ 582, 536, 582, 558, 536, 3244, 558, 3246, 582, 3248, 3249, 0, 1954, 582, 582, 582, 582, 582, 582, 582,
  /* 39039 */ 582, 582, 582, 582, 582, 582, 582, 582, 2686, 2070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2735, 0,
  /* 39066 */ 2112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2123, 536, 536, 2205, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 39092 */ 536, 536, 0, 0, 0, 0, 0, 0, 558, 2559, 558, 558, 0, 558, 558, 558, 2224, 558, 2226, 558, 558, 558, 558,
  /* 39115 */ 558, 558, 558, 558, 558, 558, 3202, 558, 558, 558, 558, 558, 558, 558, 2292, 558, 558, 558, 558, 558, 558,
  /* 39136 */ 558, 558, 558, 558, 0, 0, 0, 0, 0, 0, 1624, 0, 1626, 0, 0, 0, 1630, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0,
  /* 39165 */ 0, 0, 0, 1670, 0, 582, 582, 582, 2311, 582, 2313, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2669, 582,
  /* 39187 */ 582, 582, 582, 582, 582, 582, 582, 2379, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 536, 582, 558,
  /* 39208 */ 2692, 536, 536, 536, 2694, 558, 558, 558, 2696, 0, 2415, 0, 0, 0, 0, 0, 0, 2420, 0, 0, 0, 2423, 2424, 0,
  /* 39232 */ 0, 0, 0, 0, 0, 3453, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2805, 536, 536, 536, 536, 536, 536, 0,
  /* 39255 */ 2477, 0, 0, 0, 0, 0, 2483, 0, 0, 0, 0, 2486, 0, 0, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0,
  /* 39285 */ 306, 0, 0, 0, 0, 2514, 536, 2516, 536, 536, 536, 536, 2520, 536, 536, 536, 536, 536, 536, 536, 536, 1795,
  /* 39307 */ 536, 536, 536, 536, 536, 536, 536, 2526, 536, 536, 536, 536, 536, 536, 536, 2533, 536, 536, 536, 536, 536,
  /* 39328 */ 536, 2541, 536, 536, 536, 536, 2545, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3285,
  /* 39348 */ 536, 536, 536, 558, 558, 558, 558, 558, 2578, 558, 2580, 558, 558, 558, 558, 2584, 558, 558, 558, 558,
  /* 39368 */ 558, 558, 558, 3043, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2582, 558, 558, 558, 558, 558, 558, 558,
  /* 39389 */ 558, 558, 558, 558, 2590, 558, 558, 558, 558, 558, 558, 558, 558, 2598, 558, 558, 558, 558, 558, 558,
  /* 39409 */ 3370, 558, 558, 558, 3373, 582, 582, 582, 582, 3377, 558, 558, 558, 558, 558, 2606, 558, 558, 558, 558,
  /* 39429 */ 2610, 558, 558, 558, 558, 558, 558, 558, 2608, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1878, 558,
  /* 39449 */ 558, 558, 1883, 558, 558, 582, 582, 2635, 582, 582, 2638, 2639, 582, 582, 582, 582, 582, 2644, 582, 2646,
  /* 39469 */ 582, 558, 839, 536, 1058, 891, 536, 913, 558, 1063, 965, 558, 0, 988, 582, 1068, 582, 582, 582, 2650, 582,
  /* 39490 */ 582, 582, 582, 582, 582, 582, 582, 2656, 582, 582, 582, 582, 582, 3097, 582, 582, 582, 582, 582, 582, 582,
  /* 39511 */ 582, 582, 582, 1532, 0, 1275, 1461, 1368, 536, 582, 2676, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 39531 */ 582, 582, 582, 582, 582, 3105, 582, 2697, 582, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2411, 0, 0, 0,
  /* 39558 */ 0, 0, 0, 2712, 0, 0, 0, 0, 0, 2716, 0, 0, 0, 0, 0, 0, 0, 3145, 0, 0, 0, 3148, 3149, 0, 0, 0, 0, 0, 2722,
  /* 39587 */ 2723, 2724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 2737, 0, 0, 0, 0, 0, 0, 0, 2743, 0,
  /* 39616 */ 2745, 0, 0, 0, 2748, 0, 0, 2751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2436, 0, 0, 2763, 0, 0, 0, 0, 0,
  /* 39646 */ 0, 0, 0, 0, 0, 0, 0, 0, 2772, 536, 536, 536, 536, 536, 3548, 3549, 536, 558, 558, 558, 558, 558, 558, 558,
  /* 39670 */ 558, 558, 3191, 558, 558, 558, 558, 558, 536, 536, 2790, 536, 536, 2793, 536, 536, 536, 536, 536, 536,
  /* 39690 */ 536, 536, 536, 536, 536, 2806, 536, 536, 536, 536, 536, 536, 536, 536, 2812, 536, 536, 2815, 536, 536,
  /* 39710 */ 2818, 536, 0, 0, 2819, 558, 558, 558, 558, 558, 582, 582, 3559, 582, 3560, 582, 582, 582, 582, 582, 582,
  /* 39731 */ 1504, 582, 582, 1511, 582, 582, 582, 582, 582, 582, 1472, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 39751 */ 1476, 582, 582, 582, 582, 582, 582, 558, 558, 2837, 558, 558, 2840, 558, 558, 558, 558, 558, 558, 558,
  /* 39771 */ 558, 558, 558, 558, 2286, 2287, 2288, 558, 558, 2868, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 39791 */ 582, 582, 582, 582, 582, 2894, 582, 582, 582, 582, 2886, 582, 582, 2889, 582, 582, 582, 582, 582, 582,
  /* 39811 */ 582, 582, 2385, 582, 582, 582, 582, 2154, 2326, 2239, 2917, 2918, 2919, 536, 536, 558, 558, 582, 582, 0,
  /* 39831 */ 0, 0, 0, 0, 0, 0, 348, 0, 406, 0, 0, 0, 0, 0, 406, 2983, 0, 0, 536, 536, 2988, 536, 536, 536, 536, 536,
  /* 39857 */ 536, 536, 536, 536, 536, 536, 3006, 536, 536, 536, 536, 536, 536, 536, 3013, 536, 536, 3015, 536, 536,
  /* 39877 */ 536, 536, 536, 536, 536, 536, 536, 2184, 536, 536, 536, 536, 536, 536, 536, 536, 558, 558, 3028, 558, 558,
  /* 39898 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 953, 558, 558, 558, 558, 558, 558, 558, 3054, 558, 558, 3056,
  /* 39919 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3295, 558, 558, 558, 558, 558, 582, 582, 582, 582, 3096,
  /* 39940 */ 582, 582, 3098, 582, 582, 582, 582, 582, 582, 582, 582, 2640, 582, 582, 582, 582, 582, 582, 582, 0, 3122,
  /* 39961 */ 0, 0, 0, 3126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 0, 3162, 3163, 536, 536, 536, 536, 3167,
  /* 39988 */ 3168, 536, 536, 536, 536, 536, 3172, 536, 536, 536, 536, 536, 2169, 536, 536, 2172, 536, 536, 536, 536,
  /* 40008 */ 536, 536, 536, 890, 536, 536, 536, 536, 536, 558, 558, 558, 558, 558, 558, 558, 558, 3199, 558, 558, 558,
  /* 40029 */ 558, 558, 558, 558, 558, 3205, 558, 558, 558, 558, 558, 582, 3481, 582, 3482, 582, 582, 582, 3486, 582,
  /* 40049 */ 582, 582, 0, 0, 2700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2710, 582, 582, 3218, 3219, 582, 582, 582, 582, 3223,
  /* 40073 */ 3224, 582, 582, 582, 582, 582, 3228, 3250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2944, 0, 0, 0,
  /* 40100 */ 3140, 0, 0, 3263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 0, 0, 0, 0, 0, 388, 3278, 536, 536, 536, 536, 536, 536,
  /* 40127 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 2513, 3351, 536, 536, 536, 536, 536, 536, 558, 558, 558, 558,
  /* 40148 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 3366, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582,
  /* 40169 */ 582, 582, 582, 582, 0, 0, 0, 0, 3390, 0, 0, 3393, 0, 0, 0, 3140, 0, 0, 0, 0, 536, 536, 3401, 536, 536,
  /* 40194 */ 536, 536, 3406, 536, 536, 536, 536, 3411, 536, 536, 558, 558, 3416, 558, 558, 558, 558, 558, 1364, 1371,
  /* 40214 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2865, 558, 558, 558, 0, 0, 558, 558, 558, 3421, 558,
  /* 40235 */ 558, 558, 558, 3426, 558, 558, 558, 582, 582, 3432, 582, 558, 841, 882, 536, 893, 536, 915, 956, 558, 967,
  /* 40256 */ 558, 0, 990, 1031, 582, 558, 1056, 536, 536, 895, 536, 1061, 558, 558, 969, 558, 0, 1066, 582, 582, 582,
  /* 40277 */ 582, 1523, 582, 582, 582, 1530, 582, 582, 0, 536, 582, 558, 536, 2921, 558, 2923, 582, 2925, 0, 0, 0, 0,
  /* 40299 */ 0, 2931, 0, 582, 582, 582, 3437, 582, 582, 582, 582, 3442, 582, 582, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2707,
  /* 40324 */ 0, 0, 0, 0, 3449, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 0, 0, 0,
  /* 40349 */ 536, 3463, 536, 536, 3465, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1379, 558, 558, 558,
  /* 40369 */ 558, 3476, 558, 558, 3478, 558, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3088, 582, 582,
  /* 40389 */ 582, 582, 3490, 582, 582, 3492, 582, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 3460,
  /* 40412 */ 536, 3577, 3578, 558, 558, 558, 582, 582, 582, 3583, 3584, 582, 582, 582, 0, 0, 0, 0, 0, 2703, 0, 0, 0, 0,
  /* 40436 */ 0, 0, 0, 416, 416, 0, 0, 0, 0, 0, 416, 0, 3620, 536, 558, 582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3257,
  /* 40465 */ 0, 3258, 0, 343, 344, 345, 346, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184727, 184927, 184927, 0, 184927,
  /* 40489 */ 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 346, 346, 347, 346, 0, 345, 346,
  /* 40516 */ 450, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 482, 491,
  /* 40537 */ 491, 499, 491, 501, 491, 491, 501, 501, 491, 501, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516,
  /* 40558 */ 516, 516, 516, 516, 516, 549, 572, 549, 572, 549, 549, 572, 549, 549, 596, 572, 572, 572, 572, 572, 549,
  /* 40579 */ 572, 572, 572, 596, 596, 549, 596, 596, 596, 596, 596, 596, 596, 596, 572, 596, 572, 549, 572, 572, 596,
  /* 40600 */ 596, 305, 0, 0, 0, 0, 0, 0, 641, 0, 0, 0, 0, 646, 647, 648, 649, 650, 651, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40629 */ 0, 0, 0, 0, 2733, 0, 0, 0, 667, 668, 0, 670, 671, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0,
  /* 40658 */ 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 714, 0, 716, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 559, 536, 559,
  /* 40687 */ 536, 536, 559, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2968, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40717 */ 783, 0, 0, 0, 0, 0, 0, 0, 3156, 0, 536, 536, 536, 536, 536, 536, 536, 536, 3017, 3019, 536, 536, 536,
  /* 40740 */ 3022, 536, 3024, 794, 0, 0, 687, 0, 0, 667, 0, 687, 0, 799, 670, 718, 0, 687, 800, 0, 0, 0, 0, 756, 0, 0,
  /* 40766 */ 0, 0, 0, 0, 0, 0, 749, 809, 810, 0, 0, 821, 0, 0, 0, 687, 694, 0, 0, 687, 819, 819, 0, 0, 0, 0, 0, 0,
  /* 40794 */ 1691, 0, 0, 1694, 0, 0, 0, 0, 0, 1698, 536, 870, 873, 876, 536, 536, 536, 888, 892, 536, 536, 536, 536,
  /* 40817 */ 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 1071, 1549, 914, 918, 921, 558, 929, 558, 558, 558, 944,
  /* 40838 */ 947, 950, 558, 558, 558, 962, 966, 1019, 1022, 1025, 582, 582, 582, 1037, 1041, 582, 582, 582, 582, 0, 0,
  /* 40859 */ 0, 1053, 1054, 1055, 840, 536, 888, 892, 1060, 914, 558, 962, 966, 1065, 0, 989, 582, 1037, 1041, 1070,
  /* 40879 */ 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 1106, 0, 0, 0, 0, 1110, 0, 0,
  /* 40907 */ 1113, 0, 0, 0, 0, 0, 0, 0, 3394, 3140, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 2145, 536, 536,
  /* 40932 */ 536, 536, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1191, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 0, 0, 0, 0,
  /* 40962 */ 0, 0, 336, 0, 0, 0, 0, 0, 0, 536, 536, 1303, 536, 536, 1307, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 40986 */ 536, 1270, 536, 536, 536, 536, 536, 536, 1318, 536, 536, 1325, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 41006 */ 536, 536, 1338, 558, 558, 558, 558, 1389, 558, 558, 558, 558, 558, 558, 558, 1396, 558, 558, 1400, 0, 0,
  /* 41027 */ 1589, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41058 */ 0, 0, 0, 3139, 0, 0, 0, 0, 1676, 0, 0, 0, 0, 0, 0, 1683, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 366, 0, 0, 0,
  /* 41087 */ 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 536, 1717, 536,
  /* 41115 */ 536, 536, 536, 536, 536, 536, 1328, 536, 536, 536, 536, 536, 1335, 536, 536, 1723, 536, 536, 536, 536,
  /* 41135 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2800, 536, 536, 536, 536, 1745, 536, 536, 536, 536,
  /* 41156 */ 536, 536, 536, 536, 1752, 536, 536, 536, 536, 536, 2180, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 41177 */ 536, 1799, 536, 536, 536, 536, 536, 1756, 536, 536, 1761, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 41197 */ 536, 536, 536, 3414, 558, 558, 558, 536, 536, 1347, 0, 558, 1811, 558, 558, 558, 558, 558, 558, 558, 1818,
  /* 41218 */ 558, 558, 558, 558, 558, 558, 1892, 558, 558, 558, 558, 1898, 558, 558, 558, 26016, 558, 1840, 558, 558,
  /* 41238 */ 558, 558, 558, 558, 558, 558, 1847, 558, 558, 558, 1851, 558, 558, 558, 558, 558, 1365, 558, 558, 558,
  /* 41258 */ 558, 558, 558, 558, 558, 558, 558, 558, 2260, 558, 558, 558, 558, 558, 1856, 558, 558, 558, 558, 558, 558,
  /* 41279 */ 558, 558, 558, 558, 558, 558, 558, 558, 2263, 558, 0, 582, 1907, 582, 582, 582, 582, 582, 582, 582, 1914,
  /* 41300 */ 582, 582, 582, 582, 582, 582, 1974, 582, 582, 582, 1979, 582, 582, 582, 582, 582, 582, 2329, 582, 582,
  /* 41320 */ 582, 582, 2334, 582, 582, 582, 582, 582, 582, 1987, 582, 582, 582, 582, 582, 582, 582, 582, 582, 536, 582,
  /* 41341 */ 558, 536, 536, 536, 536, 558, 558, 558, 558, 582, 582, 582, 582, 0, 0, 1552, 0, 0, 1074, 0, 0, 0, 2016, 0,
  /* 41365 */ 1078, 0, 0, 0, 2018, 0, 1082, 0, 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0,
  /* 41395 */ 2020, 0, 1086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2746, 0, 0, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41426 */ 0, 0, 0, 0, 155648, 536, 536, 2555, 536, 536, 536, 0, 0, 0, 2558, 0, 1808, 558, 558, 558, 558, 0, 582,
  /* 41449 */ 582, 980, 582, 582, 582, 582, 582, 582, 1011, 582, 2624, 0, 1904, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 41470 */ 582, 582, 582, 582, 582, 582, 582, 2363, 2687, 582, 582, 582, 536, 582, 558, 536, 536, 536, 536, 558, 558,
  /* 41491 */ 558, 558, 582, 582, 582, 582, 1548, 2013, 0, 0, 0, 0, 0, 0, 0, 0, 2713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2719,
  /* 41518 */ 582, 2869, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3227, 582, 0, 0, 0, 0, 0,
  /* 41541 */ 2934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2027, 2028, 0, 0, 0, 0, 3121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41572 */ 0, 0, 172032, 0, 0, 0, 0, 3254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225885, 225885, 225885, 225736, 225885,
  /* 41596 */ 0, 0, 0, 0, 0, 3270, 536, 536, 536, 536, 536, 536, 536, 3275, 536, 536, 536, 536, 536, 2504, 536, 536,
  /* 41618 */ 536, 536, 536, 536, 536, 536, 536, 536, 1765, 536, 536, 536, 536, 536, 3288, 558, 558, 558, 558, 558, 558,
  /* 41639 */ 558, 3293, 558, 558, 558, 558, 558, 558, 558, 558, 3044, 558, 558, 558, 558, 558, 558, 558, 558, 2842,
  /* 41659 */ 2843, 558, 558, 558, 558, 2846, 558, 0, 0, 0, 3330, 0, 0, 3333, 0, 0, 0, 0, 3140, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41686 */ 0, 0, 0, 0, 785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 3354, 536, 536, 536, 558, 558, 558, 3359, 558,
  /* 41712 */ 558, 558, 558, 3363, 558, 558, 558, 558, 558, 3369, 558, 558, 558, 558, 582, 582, 582, 3375, 582, 582,
  /* 41732 */ 582, 582, 1468, 582, 582, 582, 1473, 582, 582, 582, 582, 582, 582, 582, 1505, 582, 582, 582, 582, 582,
  /* 41752 */ 582, 582, 582, 2357, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3379, 582, 582, 582, 582, 582, 3385,
  /* 41772 */ 582, 582, 582, 582, 536, 558, 582, 582, 582, 582, 1524, 582, 582, 582, 582, 582, 582, 0, 536, 582, 558,
  /* 41793 */ 536, 536, 536, 536, 536, 558, 558, 558, 558, 558, 0, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 41814 */ 582, 582, 582, 1919, 582, 536, 536, 3404, 536, 536, 536, 3408, 536, 536, 536, 536, 536, 558, 558, 558,
  /* 41834 */ 558, 558, 558, 3471, 558, 558, 558, 558, 558, 3419, 558, 558, 558, 3423, 558, 558, 558, 558, 558, 558,
  /* 41854 */ 582, 582, 582, 582, 3072, 582, 582, 582, 582, 3076, 582, 582, 582, 582, 3435, 582, 582, 582, 3439, 582,
  /* 41874 */ 582, 582, 582, 582, 582, 0, 0, 0, 0, 0, 3541, 0, 536, 536, 536, 536, 390, 0, 0, 0, 394, 390, 0, 0, 0, 0,
  /* 41900 */ 0, 0, 0, 0, 0, 0, 2119, 0, 0, 0, 0, 0, 0, 0, 0, 406, 0, 348, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0,
  /* 41929 */ 0, 0, 0, 1639, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 0, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41959 */ 266240, 266240, 266240, 0, 266240, 517, 517, 517, 517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517, 517, 517, 517, 517,
  /* 41982 */ 517, 517, 517, 517, 550, 573, 550, 573, 550, 550, 573, 550, 550, 597, 573, 573, 573, 573, 573, 550, 573,
  /* 42003 */ 573, 573, 597, 597, 550, 597, 597, 597, 597, 597, 597, 597, 597, 573, 597, 573, 612, 617, 617, 597, 623,
  /* 42024 */ 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624,
  /* 42047 */ 282624, 0, 674, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2942, 0, 0, 971, 558, 558, 558, 0, 582, 582,
  /* 42074 */ 983, 582, 582, 582, 582, 582, 582, 582, 582, 2668, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1028,
  /* 42095 */ 582, 582, 582, 582, 1046, 582, 582, 582, 0, 0, 0, 536, 536, 536, 536, 536, 2991, 536, 536, 536, 536, 536,
  /* 42117 */ 536, 536, 1266, 536, 536, 536, 1275, 536, 536, 536, 536, 1104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42143 */ 0, 2081, 0, 0, 1178, 0, 0, 0, 1183, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0,
  /* 42171 */ 65536, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2122, 0, 536, 536, 1261, 536, 536, 536, 536,
  /* 42198 */ 536, 536, 536, 536, 1274, 536, 536, 536, 536, 536, 536, 1746, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 42219 */ 2781, 536, 536, 2785, 536, 536, 536, 1284, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 42239 */ 536, 1298, 536, 536, 536, 536, 877, 536, 536, 536, 536, 536, 536, 536, 536, 558, 558, 558, 558, 3469, 558,
  /* 42260 */ 558, 558, 558, 558, 558, 536, 536, 1320, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1336, 536,
  /* 42281 */ 536, 536, 536, 878, 536, 536, 536, 536, 896, 536, 536, 536, 558, 558, 907, 558, 1401, 558, 558, 558, 558,
  /* 42302 */ 558, 558, 558, 558, 558, 558, 1413, 558, 558, 558, 558, 558, 558, 558, 3057, 558, 3059, 558, 558, 558,
  /* 42322 */ 558, 558, 558, 558, 558, 3200, 558, 558, 558, 558, 558, 558, 558, 558, 3303, 558, 558, 558, 558, 582, 582,
  /* 42343 */ 582, 26016, 1347, 979, 582, 582, 582, 1446, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2682, 582, 582,
  /* 42363 */ 582, 582, 582, 582, 1460, 582, 582, 582, 582, 1470, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 42383 */ 2642, 582, 582, 582, 582, 582, 582, 582, 582, 1484, 582, 582, 582, 582, 582, 582, 582, 582, 1494, 582,
  /* 42403 */ 582, 582, 582, 582, 3232, 582, 582, 582, 582, 582, 582, 582, 582, 3240, 582, 582, 582, 582, 1522, 582,
  /* 42423 */ 582, 582, 582, 582, 582, 582, 0, 1274, 1460, 1367, 536, 536, 536, 536, 879, 536, 536, 536, 536, 897, 536,
  /* 42444 */ 536, 536, 558, 558, 908, 1551, 0, 0, 0, 1557, 0, 0, 0, 1563, 0, 0, 0, 1569, 0, 0, 0, 0, 0, 0, 2023, 0, 0,
  /* 42471 */ 0, 0, 0, 0, 0, 0, 0, 366, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 1637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42501 */ 266240, 0, 0, 0, 0, 0, 0, 1652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0,
  /* 42531 */ 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 1558, 0, 0, 0, 0, 0, 1564, 0, 0, 0, 0, 0, 1570, 0, 0, 0, 0, 2036, 0,
  /* 42561 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 0, 2846720, 0, 0, 536, 536, 2167, 536, 536, 536, 536, 2171, 536,
  /* 42585 */ 2173, 536, 536, 536, 536, 536, 536, 536, 1731, 536, 536, 536, 536, 536, 536, 536, 536, 1329, 536, 536,
  /* 42605 */ 536, 536, 536, 536, 536, 558, 2252, 558, 558, 558, 558, 2256, 558, 2258, 558, 558, 558, 558, 558, 558,
  /* 42625 */ 558, 558, 3058, 3060, 558, 558, 558, 558, 3064, 558, 582, 2339, 582, 582, 582, 582, 2343, 582, 2345, 582,
  /* 42645 */ 582, 582, 582, 582, 582, 582, 1506, 582, 582, 582, 582, 582, 582, 582, 582, 2681, 582, 582, 582, 2684,
  /* 42665 */ 582, 582, 582, 582, 582, 2662, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2349, 582,
  /* 42686 */ 582, 0, 2984, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1313, 536, 536, 3329, 0,
  /* 42708 */ 0, 0, 3331, 0, 0, 0, 0, 0, 0, 3140, 3338, 0, 0, 3340, 0, 785, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 851,
  /* 42735 */ 536, 536, 536, 536, 536, 536, 2814, 536, 536, 536, 536, 536, 0, 0, 558, 558, 558, 558, 2225, 558, 558,
  /* 42756 */ 558, 558, 558, 558, 558, 558, 558, 558, 582, 3374, 582, 582, 3376, 582, 558, 558, 558, 925, 558, 558, 558,
  /* 42777 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3063, 558, 558, 558, 558, 558, 976, 0, 582, 582, 582,
  /* 42798 */ 582, 582, 582, 1000, 582, 582, 582, 582, 582, 1991, 582, 582, 582, 582, 582, 582, 536, 582, 558, 536, 536,
  /* 42819 */ 558, 558, 582, 582, 0, 3119, 0, 582, 582, 78116, 1071, 0, 0, 1075, 1079, 0, 0, 1083, 1087, 0, 0, 0, 0, 0,
  /* 42843 */ 0, 0, 1163264, 0, 1163264, 0, 0, 0, 0, 1163264, 0, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264,
  /* 42860 */ 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 536, 536, 1347,
  /* 42873 */ 1809, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3298, 558, 558, 1905, 582, 582,
  /* 42893 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3092, 558, 3197, 558, 558, 558, 558, 558,
  /* 42914 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 2585, 558, 349, 349, 351, 349, 0, 0, 349, 349, 0, 0, 0, 0,
  /* 42937 */ 350, 0, 0, 0, 0, 0, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 1246, 1247, 0, 0, 0, 349, 349,
  /* 42966 */ 351, 349, 349, 349, 349, 349, 349, 508, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
  /* 42987 */ 349, 349, 349, 551, 574, 551, 574, 551, 551, 574, 551, 551, 598, 574, 574, 574, 574, 574, 551, 574, 574,
  /* 43008 */ 574, 598, 598, 551, 598, 598, 598, 598, 598, 598, 598, 598, 574, 598, 574, 551, 574, 574, 598, 598, 0, 0,
  /* 43030 */ 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2966, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43063 */ 2461, 0, 0, 0, 796, 797, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 1654, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43094 */ 0, 0, 3147, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 750, 0, 0, 805, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0,
  /* 43124 */ 0, 0, 0, 426, 65536, 0, 0, 0, 811, 0, 805, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 675, 676, 0, 0, 0, 0, 0, 0,
  /* 43154 */ 0, 0, 822, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 347, 346, 65536, 345, 915,
  /* 43181 */ 558, 558, 558, 558, 933, 558, 558, 558, 558, 558, 954, 956, 558, 558, 967, 582, 582, 582, 1029, 1031, 582,
  /* 43202 */ 582, 1042, 582, 582, 582, 582, 0, 0, 0, 536, 536, 536, 536, 2990, 536, 536, 536, 536, 2994, 536, 536, 536,
  /* 43224 */ 1042, 582, 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 274432, 0, 274432, 1145, 0, 1147, 0,
  /* 43248 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192967, 192967, 192967, 1161, 0, 1163, 0, 0, 0, 0, 1168, 0, 0, 0, 0,
  /* 43275 */ 1173, 0, 0, 0, 0, 0, 0, 2061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 362, 0, 1249, 0, 0, 0, 0,
  /* 43305 */ 1252, 0, 0, 0, 0, 0, 0, 0, 1173, 536, 536, 536, 536, 880, 882, 536, 536, 893, 536, 536, 536, 536, 558,
  /* 43328 */ 558, 909, 1316, 536, 536, 536, 536, 536, 536, 536, 1330, 536, 536, 536, 536, 536, 536, 536, 536, 3512,
  /* 43348 */ 558, 558, 558, 3516, 558, 558, 558, 536, 1341, 1342, 536, 536, 536, 1347, 904, 558, 558, 558, 558, 1354,
  /* 43368 */ 558, 558, 558, 558, 558, 558, 558, 3213, 558, 558, 558, 582, 582, 582, 582, 582, 3073, 582, 582, 582, 582,
  /* 43389 */ 582, 582, 582, 1386, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2847, 558,
  /* 43410 */ 558, 1423, 558, 558, 558, 558, 558, 558, 558, 558, 1434, 1435, 558, 558, 558, 558, 558, 558, 558, 3371,
  /* 43430 */ 558, 558, 582, 582, 582, 582, 582, 582, 1039, 582, 582, 582, 582, 582, 0, 0, 0, 536, 26016, 1347, 979,
  /* 43451 */ 582, 582, 582, 582, 1447, 582, 582, 582, 582, 582, 582, 582, 582, 2874, 582, 582, 582, 582, 582, 582,
  /* 43471 */ 2882, 1536, 536, 536, 1539, 558, 1540, 558, 558, 1543, 582, 1544, 582, 582, 1547, 1071, 0, 0, 0, 0, 0,
  /* 43492 */ 1704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 0, 0,
  /* 43523 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2747, 0, 1788, 536, 536, 536, 536, 536, 536, 536, 536, 1796, 536, 536, 536,
  /* 43547 */ 536, 1802, 536, 536, 536, 536, 1263, 536, 536, 536, 536, 1269, 536, 536, 536, 536, 536, 536, 536, 1794,
  /* 43567 */ 536, 536, 536, 536, 536, 536, 536, 536, 1267, 536, 536, 536, 536, 536, 536, 1282, 536, 536, 1347, 0, 558,
  /* 43588 */ 558, 558, 558, 558, 558, 558, 1816, 558, 558, 558, 558, 0, 582, 582, 981, 582, 582, 582, 997, 582, 582,
  /* 43609 */ 582, 582, 582, 1525, 582, 582, 582, 582, 582, 0, 536, 582, 558, 536, 536, 558, 558, 582, 582, 0, 2927, 0,
  /* 43631 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 317, 318, 318, 423, 424, 65536, 431, 558, 558, 558, 1841, 558, 558, 558,
  /* 43653 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3307, 582, 582, 0, 582, 582, 582, 582, 582, 582, 582,
  /* 43674 */ 1912, 582, 582, 582, 582, 582, 582, 582, 1508, 582, 582, 582, 582, 582, 582, 582, 582, 3325, 582, 536,
  /* 43694 */ 536, 558, 558, 582, 582, 1937, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 43715 */ 2361, 2362, 582, 582, 582, 582, 1988, 582, 582, 582, 582, 1994, 582, 582, 582, 536, 582, 558, 536, 536,
  /* 43735 */ 536, 894, 536, 558, 558, 558, 968, 558, 0, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 43756 */ 2319, 582, 582, 2043, 0, 2045, 2046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2421, 2422, 0, 0, 2425, 0, 0, 0,
  /* 43783 */ 0, 0, 2072, 0, 0, 2074, 0, 0, 0, 0, 0, 0, 0, 2082, 2111, 0, 2113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2121, 0,
  /* 43812 */ 0, 2126, 2127, 0, 0, 0, 0, 0, 2131, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 741, 0, 0, 0, 2137,
  /* 43841 */ 536, 536, 536, 536, 536, 536, 2144, 536, 536, 536, 536, 536, 536, 536, 3511, 536, 558, 558, 558, 558, 558,
  /* 43862 */ 558, 558, 3189, 3190, 558, 558, 558, 558, 3194, 3195, 536, 536, 536, 536, 2168, 536, 536, 536, 536, 536,
  /* 43882 */ 536, 2174, 536, 2176, 536, 2179, 536, 536, 2192, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 43902 */ 536, 536, 1784, 536, 536, 0, 2221, 558, 558, 558, 558, 558, 558, 558, 2229, 558, 558, 558, 558, 558, 558,
  /* 43923 */ 558, 1860, 558, 558, 558, 558, 558, 558, 558, 558, 1391, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 43944 */ 2253, 558, 558, 558, 558, 558, 558, 2259, 558, 2261, 558, 2264, 558, 558, 558, 558, 558, 1366, 558, 558,
  /* 43964 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 2272, 558, 558, 558, 558, 558, 2278, 558, 558, 558, 558, 558,
  /* 43985 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 2623, 0, 0, 2308, 582, 582, 582, 582, 582, 582, 582, 2316,
  /* 44006 */ 582, 582, 582, 582, 582, 582, 1488, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1510, 582, 582, 582, 582,
  /* 44027 */ 582, 582, 582, 582, 582, 2340, 582, 582, 582, 582, 582, 582, 2346, 582, 2348, 582, 2351, 582, 582, 582,
  /* 44047 */ 582, 1926, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2877, 582, 582, 2881, 582, 582, 2365,
  /* 44067 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2657, 582, 582, 2451, 0, 0, 0, 0, 0,
  /* 44090 */ 0, 0, 0, 0, 2459, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 351, 349, 65536, 0, 0, 0, 0, 0, 0, 2493, 0,
  /* 44118 */ 0, 536, 536, 536, 536, 536, 536, 536, 536, 2211, 536, 536, 536, 536, 0, 0, 0, 536, 2527, 536, 536, 536,
  /* 44140 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1801, 536, 536, 558, 558, 2575, 558, 558, 558, 558,
  /* 44161 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 1836, 558, 558, 582, 582, 582, 2636, 582, 582, 582, 582, 582,
  /* 44182 */ 2641, 582, 582, 582, 582, 582, 582, 1503, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1531, 582, 0, 536,
  /* 44203 */ 582, 558, 536, 582, 582, 582, 2698, 2699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2433, 0, 0, 0, 0, 0, 536, 536,
  /* 44230 */ 536, 2776, 536, 2777, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1332, 536, 536, 536, 536, 536,
  /* 44250 */ 558, 558, 558, 2823, 558, 2824, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2583, 558, 558,
  /* 44270 */ 558, 2586, 0, 0, 0, 536, 2987, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 900, 536, 558, 558,
  /* 44292 */ 558, 536, 536, 558, 3027, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 3431, 582,
  /* 44312 */ 3433, 558, 558, 558, 582, 3069, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3237, 582, 582,
  /* 44332 */ 582, 582, 0, 0, 0, 0, 0, 3332, 0, 0, 0, 0, 0, 3140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3267, 0, 0, 0, 0, 0, 0,
  /* 44363 */ 3342, 536, 536, 536, 536, 3346, 536, 536, 536, 536, 536, 536, 1265, 536, 536, 536, 536, 536, 1277, 536,
  /* 44383 */ 536, 536, 536, 536, 536, 536, 3355, 536, 536, 3357, 558, 558, 558, 558, 3361, 558, 558, 558, 558, 558,
  /* 44403 */ 558, 935, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1879, 558, 558, 558, 558, 558, 0, 0, 3450, 0,
  /* 44425 */ 3452, 0, 536, 536, 536, 536, 536, 3457, 536, 536, 536, 536, 536, 536, 1763, 536, 536, 536, 536, 536, 536,
  /* 44446 */ 536, 536, 536, 1734, 536, 536, 536, 536, 536, 536, 558, 558, 3579, 558, 558, 582, 582, 582, 582, 582,
  /* 44466 */ 3585, 582, 582, 3587, 0, 3589, 0, 0, 0, 0, 395, 396, 0, 397, 0, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 352, 0, 0,
  /* 44494 */ 369, 0, 0, 397, 402, 0, 0, 0, 0, 0, 369, 377, 405, 0, 0, 0, 0, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44525 */ 0, 0, 0, 3151, 0, 410, 412, 0, 0, 369, 377, 0, 69632, 73728, 0, 0, 0, 0, 428, 65536, 0, 0, 0, 0, 0, 2060,
  /* 44551 */ 0, 0, 0, 0, 0, 0, 0, 0, 2068, 0, 0, 0, 0, 0, 2048, 2049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 340, 294, 0, 0,
  /* 44581 */ 0, 0, 428, 428, 0, 428, 0, 412, 428, 451, 0, 0, 0, 0, 0, 0, 0, 369, 0, 410, 0, 492, 492, 0, 492, 492, 492,
  /* 44608 */ 492, 492, 492, 492, 492, 518, 518, 518, 518, 451, 451, 451, 451, 526, 451, 451, 527, 451, 518, 532, 518,
  /* 44629 */ 518, 518, 532, 518, 518, 518, 518, 518, 534, 552, 575, 552, 575, 552, 552, 575, 552, 552, 599, 575, 575,
  /* 44650 */ 575, 575, 575, 552, 575, 575, 575, 599, 599, 552, 599, 599, 599, 599, 599, 599, 599, 599, 575, 599, 575,
  /* 44671 */ 613, 618, 618, 599, 624, 305, 0, 0, 0, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2744, 0, 0, 0, 0, 0, 791, 0,
  /* 44700 */ 0, 772, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 772, 0, 791, 0, 0, 0, 0, 536, 836,
  /* 44730 */ 536, 536, 536, 536, 536, 536, 865, 867, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 558,
  /* 44751 */ 558, 910, 582, 582, 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1088, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
  /* 44779 */ 0, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2769, 0, 0, 0, 536, 2773, 0, 1146,
  /* 44809 */ 0, 0, 0, 0, 0, 1152, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 1239, 0, 0, 0, 0, 0, 0, 0, 0, 768, 769, 0, 0, 0, 756,
  /* 44839 */ 0, 0, 1225, 1234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 536, 536, 536, 1304, 536, 536, 536,
  /* 44866 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3286, 536, 536, 558, 558, 558, 1361, 558, 558, 1372,
  /* 44886 */ 558, 558, 1376, 558, 558, 558, 558, 558, 558, 558, 1876, 558, 558, 558, 558, 558, 558, 1884, 558, 26016,
  /* 44906 */ 1347, 979, 582, 582, 582, 582, 582, 582, 582, 1450, 582, 582, 582, 1454, 582, 582, 582, 582, 1941, 582,
  /* 44926 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2891, 2892, 582, 582, 582, 582, 582, 1465, 582, 582,
  /* 44946 */ 1469, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2876, 582, 2879, 582, 582, 582, 1634, 0, 0,
  /* 44967 */ 0, 1638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2963, 0, 0, 0, 2967, 0, 582, 582, 1923, 582, 582, 582, 582, 582,
  /* 44994 */ 582, 582, 582, 582, 582, 582, 582, 582, 2685, 582, 582, 0, 2056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45021 */ 111046, 0, 0, 2136, 0, 536, 536, 2139, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1750, 536, 536,
  /* 45042 */ 536, 536, 536, 536, 536, 536, 536, 2194, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 901, 536,
  /* 45063 */ 558, 558, 558, 536, 2204, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 0, 0, 0, 0, 0, 0, 2088,
  /* 45086 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 131072, 131072, 0, 131072, 0, 558, 558, 2223, 558, 558, 558,
  /* 45109 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 1412, 558, 558, 558, 558, 558, 558, 2280, 558, 558, 558, 558,
  /* 45130 */ 558, 558, 558, 558, 558, 558, 558, 558, 1415, 558, 558, 558, 558, 2291, 558, 558, 558, 558, 558, 558, 558,
  /* 45151 */ 558, 558, 558, 558, 0, 0, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381, 0, 0, 0, 0, 0, 0, 0, 582, 582,
  /* 45181 */ 2310, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1480, 582, 582, 582, 582, 582, 582,
  /* 45201 */ 2367, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1514, 582, 582, 582, 582, 2378, 582,
  /* 45221 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 536, 582, 558, 3113, 536, 3115, 558, 3117, 582, 0, 0, 0,
  /* 45243 */ 536, 536, 2394, 2395, 558, 558, 2398, 2399, 582, 582, 2402, 2403, 0, 1552, 0, 1558, 0, 1564, 0, 1570, 0,
  /* 45264 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3336, 3140, 0, 0, 0, 0, 0, 0, 0, 0, 2417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45296 */ 0, 106496, 0, 0, 0, 0, 0, 0, 0, 2490, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 45321 */ 3350, 536, 536, 2528, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2538, 536, 536, 536, 536, 536, 536,
  /* 45341 */ 3510, 536, 536, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3037, 558, 558, 2603,
  /* 45361 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1850, 558, 558, 0, 0, 0, 0, 0, 2725, 0,
  /* 45384 */ 0, 0, 0, 2730, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 375, 0, 65536, 0, 0, 2750, 0, 0, 0, 0, 0, 0, 0,
  /* 45413 */ 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 536, 536, 536, 536, 2792, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 45435 */ 536, 536, 536, 1272, 536, 536, 536, 536, 558, 558, 558, 558, 2839, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 45456 */ 558, 558, 558, 1395, 558, 558, 558, 558, 0, 0, 0, 0, 0, 2958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 0,
  /* 45483 */ 0, 0, 0, 0, 0, 0, 0, 2972, 2973, 0, 0, 0, 0, 2978, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 422, 0,
  /* 45511 */ 65536, 0, 582, 582, 582, 582, 3110, 3111, 3112, 536, 536, 558, 558, 582, 582, 0, 0, 0, 0, 536, 536, 536,
  /* 45533 */ 536, 536, 536, 536, 558, 558, 558, 558, 558, 3470, 558, 558, 558, 558, 558, 0, 0, 3141, 0, 0, 0, 3144, 0,
  /* 45556 */ 0, 0, 0, 0, 0, 0, 0, 3152, 558, 3208, 558, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582,
  /* 45579 */ 582, 582, 3485, 582, 582, 582, 582, 0, 0, 0, 3253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2797568, 0, 0, 0,
  /* 45606 */ 0, 0, 0, 0, 0, 3140, 0, 3262, 0, 0, 0, 0, 3266, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 371, 371, 0, 0,
  /* 45633 */ 65536, 371, 0, 0, 0, 3269, 0, 536, 536, 536, 3271, 536, 536, 536, 3274, 536, 536, 536, 536, 536, 558,
  /* 45654 */ 3467, 558, 3468, 558, 558, 558, 3472, 558, 558, 558, 558, 0, 582, 582, 985, 582, 582, 582, 582, 582, 582,
  /* 45675 */ 1014, 1016, 558, 558, 558, 3289, 558, 558, 558, 3292, 558, 558, 558, 558, 558, 558, 558, 558, 1894, 1896,
  /* 45695 */ 558, 558, 558, 558, 558, 26016, 3308, 582, 582, 582, 3311, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 45715 */ 582, 582, 2912, 582, 582, 582, 582, 582, 536, 3352, 536, 536, 536, 536, 536, 558, 558, 558, 558, 558, 558,
  /* 45736 */ 558, 558, 558, 3474, 558, 558, 3365, 558, 3367, 558, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582,
  /* 45756 */ 582, 582, 582, 0, 3588, 0, 582, 582, 582, 582, 3381, 582, 3383, 582, 582, 582, 582, 582, 582, 536, 558,
  /* 45777 */ 582, 582, 582, 582, 1956, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3226, 582, 582, 582, 582,
  /* 45798 */ 558, 558, 558, 558, 558, 3480, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3087, 582, 3089, 582,
  /* 45818 */ 582, 582, 558, 558, 558, 3522, 558, 558, 558, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3077, 582,
  /* 45839 */ 582, 582, 3535, 582, 582, 582, 0, 3539, 0, 0, 0, 0, 0, 536, 536, 3544, 536, 536, 536, 536, 1289, 536, 536,
  /* 45862 */ 536, 536, 536, 536, 536, 1297, 536, 536, 536, 536, 536, 536, 2215, 2557, 0, 0, 0, 0, 558, 558, 558, 558,
  /* 45884 */ 558, 558, 558, 558, 558, 558, 558, 558, 2232, 558, 558, 3545, 536, 536, 536, 536, 536, 536, 536, 558, 558,
  /* 45905 */ 3551, 558, 3552, 558, 558, 558, 558, 558, 558, 936, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 45925 */ 2271, 558, 558, 558, 558, 558, 411, 357, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0,
  /* 45951 */ 2073, 0, 0, 0, 0, 2077, 0, 0, 0, 0, 0, 0, 0, 2714, 0, 0, 0, 0, 0, 0, 0, 0, 1610, 0, 0, 1613, 0, 1615, 0,
  /* 45980 */ 0, 468, 479, 468, 0, 0, 468, 0, 0, 0, 0, 0, 0, 0, 0, 519, 519, 523, 523, 523, 523, 468, 468, 468, 468,
  /* 46005 */ 468, 468, 468, 473, 468, 523, 519, 523, 523, 519, 523, 523, 523, 523, 523, 535, 553, 576, 553, 576, 553,
  /* 46026 */ 553, 576, 553, 553, 600, 576, 576, 576, 576, 576, 553, 576, 576, 576, 600, 600, 553, 600, 600, 600, 600,
  /* 46047 */ 600, 600, 600, 600, 576, 600, 576, 614, 619, 619, 600, 625, 305, 0, 0, 0, 0, 639, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46073 */ 0, 0, 1126, 0, 0, 1129, 1130, 0, 0, 682, 683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 366, 366, 0, 0, 0, 0,
  /* 46102 */ 733, 0, 0, 0, 639, 733, 0, 739, 740, 639, 0, 0, 779, 793, 831, 0, 536, 837, 536, 536, 536, 536, 856, 860,
  /* 46126 */ 866, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 793, 0, 660, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 639, 0,
  /* 46157 */ 0, 0, 788, 0, 793, 0, 779, 0, 808, 0, 0, 536, 871, 536, 536, 536, 536, 536, 889, 536, 536, 536, 536, 536,
  /* 46181 */ 558, 558, 911, 558, 558, 558, 558, 930, 934, 940, 558, 945, 558, 558, 558, 558, 558, 963, 558, 558, 558,
  /* 46202 */ 558, 558, 1367, 558, 558, 558, 558, 1377, 558, 558, 558, 558, 558, 558, 558, 2841, 558, 558, 558, 558,
  /* 46222 */ 558, 558, 558, 558, 558, 1833, 558, 558, 558, 558, 558, 558, 1020, 582, 582, 582, 582, 582, 1038, 582,
  /* 46242 */ 582, 582, 582, 582, 0, 0, 0, 536, 536, 536, 2140, 2141, 536, 536, 536, 536, 536, 536, 536, 536, 1732, 536,
  /* 46264 */ 536, 536, 536, 536, 536, 536, 0, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0,
  /* 46293 */ 0, 1118, 0, 0, 0, 1122, 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 1230, 0, 0, 0, 1210, 0, 0,
  /* 46321 */ 1091, 0, 0, 0, 1216, 0, 1218, 0, 0, 0, 0, 0, 0, 0, 2134751, 0, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 2497,
  /* 46348 */ 2498, 536, 536, 536, 1232, 0, 1235, 1192, 0, 1216, 1238, 0, 1241, 0, 0, 0, 0, 0, 1122, 0, 0, 0, 0, 0,
  /* 46372 */ 2087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0, 1250, 0, 0, 0, 0, 0, 1250, 0, 0, 1141,
  /* 46402 */ 1250, 0, 1257, 536, 536, 536, 536, 1306, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1314, 536, 536, 536,
  /* 46423 */ 536, 1290, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1301, 536, 536, 1321, 1323, 536, 536, 536,
  /* 46443 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 902, 558, 558, 558, 536, 536, 536, 536, 1345, 536, 1347, 904,
  /* 46464 */ 1349, 558, 558, 558, 558, 558, 1356, 558, 558, 558, 558, 558, 1827, 558, 558, 558, 558, 558, 558, 558,
  /* 46484 */ 558, 558, 558, 558, 2596, 558, 558, 558, 558, 558, 558, 558, 1362, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 46505 */ 558, 558, 1383, 558, 558, 558, 558, 558, 1874, 558, 558, 558, 558, 558, 558, 558, 558, 1885, 558, 558,
  /* 46525 */ 558, 558, 558, 1891, 558, 558, 558, 558, 558, 558, 558, 558, 558, 26016, 1347, 979, 582, 582, 582, 582,
  /* 46545 */ 582, 582, 582, 582, 582, 1452, 582, 582, 582, 582, 582, 3322, 582, 582, 582, 582, 536, 536, 558, 558, 582,
  /* 46566 */ 582, 26016, 1347, 979, 1442, 582, 582, 582, 582, 582, 1449, 582, 582, 582, 582, 1455, 582, 582, 582, 582,
  /* 46586 */ 1972, 582, 582, 582, 582, 582, 582, 1980, 582, 582, 582, 582, 582, 582, 2909, 582, 582, 582, 582, 582,
  /* 46606 */ 582, 582, 582, 582, 3234, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1500, 582, 582, 582, 1507,
  /* 46626 */ 1509, 582, 582, 582, 582, 582, 582, 582, 1943, 582, 582, 582, 1947, 582, 582, 1952, 582, 0, 1552, 0, 0, 0,
  /* 46648 */ 1558, 0, 0, 0, 1564, 0, 0, 0, 1570, 0, 0, 0, 0, 0, 0, 1150976, 0, 1150976, 0, 0, 0, 0, 0, 0, 0, 536, 835,
  /* 46675 */ 536, 536, 536, 536, 536, 536, 536, 536, 3180, 536, 536, 536, 536, 536, 536, 536, 536, 3283, 536, 536, 536,
  /* 46696 */ 536, 536, 536, 536, 536, 3003, 536, 536, 536, 536, 536, 536, 536, 536, 2816, 536, 536, 536, 0, 0, 558,
  /* 46717 */ 558, 0, 1635, 1636, 0, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 0,
  /* 46747 */ 0, 0, 0, 0, 0, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 1689, 1690, 0, 0,
  /* 46778 */ 0, 1693, 0, 0, 0, 0, 0, 1697, 0, 0, 0, 0, 0, 2100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2130, 0, 0, 0, 0, 0, 0,
  /* 46809 */ 1700, 0, 0, 0, 0, 0, 0, 0, 1697, 0, 0, 0, 0, 0, 0, 0, 1593, 0, 0, 1596, 1597, 1598, 0, 1600, 1601, 0, 0,
  /* 46836 */ 0, 0, 1713, 0, 1715, 1689, 536, 536, 536, 536, 536, 536, 536, 536, 2507, 536, 536, 536, 536, 536, 536,
  /* 46857 */ 536, 536, 536, 536, 1727, 536, 536, 536, 536, 1733, 536, 536, 536, 536, 536, 536, 536, 885, 536, 536, 536,
  /* 46878 */ 536, 536, 558, 558, 558, 558, 558, 582, 582, 582, 582, 582, 1071, 0, 536, 536, 536, 1744, 536, 536, 536,
  /* 46899 */ 536, 1748, 536, 536, 536, 536, 536, 536, 536, 887, 536, 536, 536, 536, 536, 558, 558, 906, 536, 536, 536,
  /* 46920 */ 1759, 536, 536, 536, 1764, 536, 536, 536, 536, 536, 536, 536, 536, 2548, 536, 536, 536, 536, 536, 536,
  /* 46940 */ 536, 536, 536, 1790, 1791, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1312, 536, 536,
  /* 46960 */ 536, 1822, 558, 558, 558, 558, 1828, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3061, 558,
  /* 46980 */ 558, 558, 558, 1839, 558, 558, 558, 558, 1843, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 47000 */ 3203, 558, 558, 558, 558, 1854, 558, 558, 558, 1859, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 47020 */ 558, 1410, 558, 558, 558, 558, 1887, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 47041 */ 26016, 1347, 979, 582, 582, 582, 582, 582, 582, 582, 582, 1451, 582, 582, 582, 582, 582, 582, 2888, 582,
  /* 47061 */ 582, 582, 582, 582, 582, 582, 582, 582, 2890, 582, 582, 582, 582, 582, 582, 582, 582, 1924, 582, 582, 582,
  /* 47082 */ 582, 582, 582, 582, 582, 582, 582, 1935, 582, 582, 582, 582, 1485, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 47103 */ 1495, 582, 582, 0, 0, 0, 0, 536, 536, 536, 3571, 3572, 536, 536, 558, 558, 558, 558, 558, 3031, 558, 558,
  /* 47125 */ 558, 558, 558, 558, 558, 558, 2298, 558, 558, 558, 558, 0, 0, 0, 582, 582, 1939, 582, 582, 582, 582, 582,
  /* 47147 */ 582, 582, 582, 582, 582, 1950, 582, 582, 582, 582, 1486, 582, 582, 582, 1490, 582, 582, 582, 582, 582,
  /* 47167 */ 582, 582, 1930, 582, 582, 582, 582, 1934, 582, 582, 582, 582, 1955, 582, 582, 582, 582, 582, 582, 582,
  /* 47187 */ 582, 582, 582, 582, 582, 582, 582, 2915, 582, 582, 2002, 536, 536, 558, 2006, 558, 558, 582, 2010, 582,
  /* 47207 */ 582, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 421, 421, 0, 0, 65536, 421, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47235 */ 0, 0, 0, 0, 0, 176128, 176128, 0, 0, 0, 2058, 0, 0, 0, 0, 2063, 2064, 0, 0, 2066, 2067, 0, 0, 0, 0, 0, 0,
  /* 47262 */ 1163264, 418, 418, 0, 0, 0, 0, 0, 418, 0, 0, 0, 2085, 0, 0, 0, 0, 0, 2089, 0, 0, 0, 0, 2092, 2093, 0, 0,
  /* 47289 */ 0, 0, 0, 2418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 693, 0, 366, 366, 366, 0, 0, 0, 0, 2099, 0, 0, 0, 0, 0,
  /* 47319 */ 0, 0, 0, 0, 0, 0, 1595, 0, 0, 0, 0, 0, 0, 536, 536, 536, 2152, 536, 536, 2156, 536, 536, 536, 2160, 536,
  /* 47344 */ 536, 536, 536, 536, 536, 1292, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 3284, 536, 536, 536, 536,
  /* 47365 */ 536, 536, 536, 536, 536, 2207, 536, 536, 536, 536, 536, 536, 536, 536, 0, 0, 2219, 0, 0, 0, 558, 558, 558,
  /* 47388 */ 558, 558, 558, 2237, 558, 558, 2241, 558, 558, 558, 2245, 558, 558, 558, 558, 558, 558, 558, 2283, 558,
  /* 47408 */ 558, 558, 558, 558, 558, 558, 558, 558, 2828, 558, 558, 2832, 558, 558, 558, 558, 558, 558, 558, 2254,
  /* 47428 */ 558, 558, 2257, 558, 558, 558, 558, 558, 558, 558, 558, 1895, 558, 558, 558, 558, 558, 558, 26016, 558,
  /* 47448 */ 558, 558, 558, 2294, 558, 558, 558, 558, 558, 558, 558, 558, 0, 0, 2306, 582, 582, 2324, 582, 582, 2328,
  /* 47469 */ 582, 582, 582, 2332, 582, 582, 582, 582, 582, 582, 1527, 1528, 582, 582, 582, 0, 536, 582, 558, 536, 582,
  /* 47490 */ 582, 582, 582, 2341, 582, 582, 2344, 582, 582, 582, 582, 582, 582, 582, 582, 3085, 582, 582, 582, 582,
  /* 47510 */ 582, 582, 582, 582, 582, 582, 582, 2381, 582, 582, 582, 582, 582, 582, 582, 582, 536, 582, 558, 2920, 536,
  /* 47531 */ 2922, 558, 2924, 582, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2416, 0, 0, 0, 0,
  /* 47559 */ 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 0, 0, 0, 0, 2452, 0, 0, 0, 2456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47590 */ 1666, 0, 0, 0, 0, 0, 0, 0, 2489, 0, 0, 0, 0, 0, 0, 536, 536, 2496, 536, 536, 536, 536, 536, 536, 1327,
  /* 47615 */ 536, 536, 1331, 536, 536, 536, 536, 536, 1337, 558, 558, 2588, 558, 2589, 558, 558, 558, 558, 558, 558,
  /* 47635 */ 558, 558, 2597, 558, 558, 558, 558, 558, 558, 2242, 558, 558, 558, 558, 2247, 558, 558, 558, 558, 0, 582,
  /* 47656 */ 582, 582, 582, 582, 582, 1002, 582, 582, 582, 582, 582, 1973, 582, 582, 582, 1977, 582, 582, 582, 582,
  /* 47676 */ 582, 582, 582, 3222, 582, 582, 582, 582, 582, 582, 582, 582, 1931, 582, 582, 582, 582, 582, 582, 582,
  /* 47696 */ 2601, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2612, 2613, 558, 558, 558, 558, 558,
  /* 47716 */ 2255, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2569, 558, 558, 2572, 2573, 0, 0, 0, 582,
  /* 47737 */ 582, 2626, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3317, 582, 582, 582, 582, 3318, 582, 2634,
  /* 47757 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3239, 582, 582, 582, 582, 2649, 582,
  /* 47778 */ 582, 582, 2652, 582, 582, 2654, 582, 2655, 582, 582, 582, 582, 582, 2342, 582, 582, 582, 582, 582, 582,
  /* 47798 */ 582, 582, 582, 582, 2358, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2663, 582, 582, 2667, 582, 582,
  /* 47818 */ 582, 582, 582, 582, 582, 582, 3099, 582, 3101, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2678, 2679,
  /* 47838 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3326, 536, 3327, 558, 3328, 582, 2749, 0, 0, 0, 2753, 0,
  /* 47860 */ 2755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2470, 0, 0, 0, 0, 0, 2475, 536, 536, 536, 2791, 536, 536, 536, 536, 536,
  /* 47886 */ 536, 536, 536, 536, 536, 536, 536, 1334, 536, 536, 536, 558, 558, 558, 2838, 558, 558, 558, 558, 558, 558,
  /* 47907 */ 558, 558, 558, 558, 558, 558, 1849, 558, 558, 558, 2848, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 47928 */ 558, 558, 558, 558, 558, 26016, 582, 2884, 582, 582, 582, 2887, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 47948 */ 582, 582, 3387, 582, 582, 536, 558, 582, 582, 582, 2897, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 47969 */ 582, 582, 582, 1982, 1983, 582, 582, 0, 0, 0, 0, 2947, 0, 0, 2949, 0, 0, 0, 0, 0, 0, 0, 0, 2728, 2729, 0,
  /* 47995 */ 0, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 2989, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2817, 536, 536,
  /* 48019 */ 0, 0, 558, 558, 558, 558, 558, 558, 3041, 558, 558, 558, 558, 558, 558, 558, 558, 3049, 558, 558, 558,
  /* 48040 */ 558, 558, 558, 2268, 2269, 558, 558, 558, 558, 558, 558, 558, 558, 1831, 558, 558, 558, 558, 558, 558,
  /* 48060 */ 558, 0, 0, 3123, 0, 0, 0, 0, 0, 0, 0, 3129, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 135168, 135168, 0, 0,
  /* 48086 */ 65536, 135168, 0, 0, 0, 3153, 3154, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2146, 536,
  /* 48108 */ 536, 536, 536, 536, 3164, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2187, 536, 536,
  /* 48129 */ 536, 3174, 536, 536, 536, 536, 536, 3179, 536, 3181, 536, 536, 536, 536, 536, 536, 536, 2157, 536, 536,
  /* 48149 */ 536, 536, 2162, 536, 536, 536, 3207, 558, 3209, 558, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582,
  /* 48169 */ 582, 582, 3484, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3220, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 48190 */ 582, 582, 582, 3444, 582, 0, 0, 0, 0, 582, 582, 582, 3230, 582, 582, 582, 582, 582, 582, 3236, 582, 3238,
  /* 48212 */ 582, 582, 582, 582, 582, 3312, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2372, 582, 582, 582, 582,
  /* 48233 */ 2376, 0, 3251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3256, 0, 0, 0, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 536,
  /* 48263 */ 536, 536, 536, 536, 2499, 536, 536, 0, 0, 0, 3140, 0, 0, 0, 0, 0, 3265, 0, 0, 0, 0, 0, 0, 0, 1609, 0, 0,
  /* 48290 */ 0, 0, 0, 0, 0, 0, 2715, 0, 0, 0, 0, 0, 0, 0, 558, 558, 558, 558, 558, 3290, 558, 558, 558, 3294, 558, 558,
  /* 48316 */ 558, 558, 558, 558, 558, 2297, 558, 558, 558, 558, 558, 0, 0, 0, 582, 582, 3309, 582, 582, 582, 3313, 582,
  /* 48338 */ 582, 582, 582, 582, 582, 582, 582, 582, 3086, 582, 582, 582, 582, 582, 582, 558, 558, 558, 558, 3479, 582,
  /* 48359 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3316, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 48380 */ 3493, 0, 0, 3496, 3497, 0, 0, 0, 536, 536, 536, 3504, 558, 558, 558, 558, 558, 3524, 558, 582, 582, 582,
  /* 48402 */ 3529, 582, 582, 582, 582, 582, 582, 2355, 2356, 582, 582, 582, 582, 582, 582, 582, 582, 2910, 582, 582,
  /* 48422 */ 2913, 582, 582, 2916, 582, 582, 582, 582, 3537, 582, 0, 0, 0, 0, 3540, 0, 3542, 536, 536, 536, 536, 536,
  /* 48444 */ 536, 1777, 536, 536, 1780, 536, 536, 536, 536, 536, 536, 0, 2557, 0, 0, 0, 0, 558, 558, 558, 558, 558,
  /* 48466 */ 3555, 3556, 558, 558, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3563, 3564, 359, 360, 0, 0, 0, 0, 0, 0,
  /* 48489 */ 0, 366, 0, 294, 0, 0, 0, 0, 0, 0, 0, 2200248, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 366, 366, 366, 0,
  /* 48518 */ 0, 0, 393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2951, 2952, 0, 2953, 0, 2955, 0, 469, 469, 483, 0, 0, 483,
  /* 48546 */ 360, 360, 360, 505, 360, 360, 360, 360, 469, 469, 554, 554, 601, 577, 577, 577, 577, 577, 554, 577, 577,
  /* 48567 */ 577, 601, 601, 554, 601, 601, 601, 601, 601, 601, 601, 601, 577, 601, 577, 554, 577, 577, 601, 601, 0,
  /* 48588 */ 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 558, 558, 558, 558, 931, 558, 558, 558,
  /* 48615 */ 558, 558, 558, 558, 558, 558, 558, 968, 1043, 582, 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2962,
  /* 48640 */ 0, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225710, 0, 558, 1359, 558, 558, 558,
  /* 48669 */ 1368, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3306, 558, 582, 582, 582, 1461, 582, 582,
  /* 48689 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1998, 1999, 2000, 536, 0, 0, 1553, 0, 0,
  /* 48711 */ 0, 1559, 0, 0, 0, 1565, 0, 0, 0, 1571, 0, 0, 0, 0, 0, 2430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 0, 0, 0,
  /* 48742 */ 0, 0, 1603, 1604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 0, 0, 0, 0, 2116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48772 */ 1112, 0, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 1741, 536, 536,
  /* 48801 */ 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1754, 582, 582, 1970, 582, 582, 582, 582, 582,
  /* 48822 */ 582, 582, 582, 1981, 582, 582, 582, 582, 582, 2354, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 48842 */ 1962, 582, 582, 582, 582, 582, 2033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254409, 0, 2220, 558,
  /* 48868 */ 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 2834, 558, 2307, 582, 582, 582, 582,
  /* 48889 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2360, 582, 582, 582, 0, 0, 0, 0, 2404, 0, 0, 0, 0,
  /* 48913 */ 0, 0, 0, 0, 0, 0, 0, 3128, 0, 0, 0, 0, 0, 0, 0, 2428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1151446,
  /* 48944 */ 0, 558, 558, 558, 2564, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1899, 558, 558, 26016,
  /* 48965 */ 0, 0, 0, 582, 582, 582, 582, 582, 582, 582, 2630, 582, 582, 582, 582, 582, 582, 2383, 582, 582, 2386,
  /* 48986 */ 2387, 582, 582, 2153, 2325, 2238, 536, 536, 2775, 536, 536, 536, 536, 536, 536, 2782, 536, 2784, 536, 536,
  /* 49006 */ 536, 536, 536, 536, 2170, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2521, 536, 536, 536, 536, 536, 536,
  /* 49027 */ 558, 558, 2822, 558, 558, 558, 558, 558, 558, 2829, 558, 2831, 558, 558, 558, 558, 0, 582, 582, 984, 990,
  /* 49048 */ 582, 582, 582, 582, 1008, 582, 582, 558, 558, 558, 558, 2860, 558, 558, 558, 558, 558, 558, 558, 558, 558,
  /* 49069 */ 0, 0, 0, 0, 0, 0, 2200247, 2200247, 0, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 1721, 536, 582,
  /* 49094 */ 582, 582, 582, 2871, 582, 582, 582, 582, 582, 582, 2878, 582, 2880, 582, 582, 582, 582, 1487, 582, 582,
  /* 49114 */ 582, 582, 1492, 582, 582, 582, 582, 582, 582, 1526, 582, 582, 582, 582, 0, 1271, 1457, 1364, 536, 536,
  /* 49134 */ 3279, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2215, 0, 0, 558, 558, 558,
  /* 49155 */ 558, 3523, 558, 558, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3315, 582, 582, 582, 582, 582, 582, 582,
  /* 49176 */ 582, 582, 3536, 582, 582, 0, 0, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 536, 3458, 536, 536, 536, 536,
  /* 49199 */ 536, 536, 536, 3593, 536, 558, 558, 558, 558, 3597, 558, 582, 582, 582, 582, 582, 2369, 582, 582, 582,
  /* 49219 */ 582, 582, 582, 582, 582, 582, 582, 1050, 582, 0, 0, 0, 536, 3601, 582, 0, 0, 0, 536, 536, 536, 536, 558,
  /* 49242 */ 558, 558, 558, 582, 582, 582, 582, 0, 0, 0, 2014, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 366, 0, 294, 0, 0, 0, 0,
  /* 49270 */ 0, 0, 0, 2936832, 2969600, 0, 0, 3080192, 0, 0, 2695168, 3178496, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49295 */ 0, 0, 0, 3137, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0,
  /* 49326 */ 0, 555, 555, 602, 578, 578, 578, 578, 578, 555, 578, 578, 578, 602, 602, 555, 602, 602, 602, 602, 602,
  /* 49347 */ 602, 602, 602, 578, 602, 578, 555, 578, 578, 602, 602, 558, 558, 558, 926, 558, 558, 558, 558, 558, 558,
  /* 49368 */ 558, 558, 558, 558, 558, 558, 2273, 558, 558, 558, 536, 536, 1322, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 49389 */ 536, 536, 536, 536, 536, 2216, 0, 0, 582, 582, 1466, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 49410 */ 582, 582, 582, 2388, 536, 582, 558, 1755, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 49431 */ 536, 536, 2810, 0, 0, 0, 362, 363, 364, 365, 0, 0, 366, 0, 294, 0, 0, 0, 0, 0, 0, 0, 3084288, 3104768,
  /* 49455 */ 3108864, 0, 0, 0, 0, 3190784, 0, 0, 363, 0, 362, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 429, 65536, 0, 0, 0,
  /* 49480 */ 0, 0, 2441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 131072, 429, 429, 0, 429, 0, 363, 429, 452,
  /* 49507 */ 0, 0, 0, 0, 0, 0, 0, 0, 2950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 493, 493, 0, 500, 500, 500, 500, 506, 507,
  /* 49535 */ 500, 500, 520, 520, 520, 520, 452, 452, 452, 452, 452, 452, 452, 452, 452, 520, 520, 520, 520, 520, 520,
  /* 49556 */ 520, 520, 520, 556, 579, 556, 579, 556, 556, 579, 556, 556, 603, 579, 579, 579, 579, 579, 556, 579, 579,
  /* 49577 */ 579, 603, 603, 556, 603, 603, 603, 603, 603, 603, 603, 603, 579, 603, 579, 615, 620, 620, 603, 626, 0, 0,
  /* 49599 */ 0, 536, 2138, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1273, 536, 536, 536, 536, 0, 558,
  /* 49620 */ 2222, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1866, 558, 558, 0, 582, 2309, 582,
  /* 49641 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2893, 582, 582, 582, 558, 558, 2616, 558, 558,
  /* 49662 */ 558, 558, 558, 558, 558, 558, 558, 558, 0, 0, 0, 0, 0, 0, 2419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 557, 580, 557,
  /* 49689 */ 580, 557, 557, 580, 557, 557, 604, 580, 580, 580, 580, 580, 557, 580, 580, 580, 604, 604, 557, 604, 604,
  /* 49710 */ 604, 604, 604, 604, 604, 604, 580, 604, 580, 557, 580, 580, 604, 604, 0, 0, 0, 0, 700, 0, 0, 0, 0, 0, 0,
  /* 49735 */ 0, 0, 0, 0, 0, 3136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200247,
  /* 49765 */ 2200247, 2200247, 0, 829, 0, 0, 0, 0, 0, 536, 536, 536, 536, 536, 853, 536, 536, 536, 536, 536, 1264, 536,
  /* 49787 */ 536, 536, 1268, 536, 536, 1279, 536, 536, 1283, 558, 558, 558, 927, 558, 558, 558, 558, 558, 558, 558,
  /* 49807 */ 558, 558, 558, 558, 558, 2301, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3140, 0, 0, 0,
  /* 49836 */ 0, 3399, 536, 536, 536, 536, 536, 1305, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1766,
  /* 49857 */ 536, 536, 536, 558, 558, 558, 558, 1425, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 1411, 558,
  /* 49878 */ 558, 1418, 558, 0, 0, 0, 1555, 0, 0, 0, 1561, 0, 0, 0, 1567, 0, 0, 0, 0, 0, 0, 308, 204800, 0, 0, 0, 0, 0,
  /* 49906 */ 0, 0, 0, 689, 0, 0, 0, 772, 0, 0, 0, 582, 582, 582, 582, 2637, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 49930 */ 582, 582, 582, 1975, 582, 582, 582, 582, 582, 582, 582, 582, 1491, 582, 582, 582, 582, 582, 582, 582, 305,
  /* 49951 */ 0, 0, 0, 0, 0, 0, 0, 642, 0, 0, 0, 0, 0, 0, 0, 453, 1151446, 1151446, 1151446, 1151446, 1151446, 1151446,
  /* 49973 */ 1151446, 1151446, 1151446, 1151446, 1151446, 1151446, 1151446, 1151446, 1151446, 1151446, 1044, 582,
  /* 49985 */ 78116, 1071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3140, 0, 3396, 0, 3398, 536, 536, 536, 1248, 0, 0, 0, 0,
  /* 50012 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536, 558, 536, 558, 536, 536, 558, 582, 1520, 582, 582, 582, 582, 582, 582,
  /* 50037 */ 582, 582, 582, 0, 536, 582, 558, 536, 536, 536, 1059, 901, 558, 558, 558, 1064, 975, 0, 582, 582, 582,
  /* 50058 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 1918, 582, 582, 1771, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 50079 */ 536, 536, 536, 536, 536, 536, 536, 3010, 582, 582, 582, 1925, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 50100 */ 582, 582, 582, 2902, 582, 582, 582, 0, 0, 0, 2035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3146, 0, 0, 0, 0,
  /* 50128 */ 0, 0, 0, 536, 2166, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 2798, 536, 536,
  /* 50150 */ 2251, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 3050, 558, 0, 582, 582,
  /* 50171 */ 582, 582, 2312, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 1993, 582, 582, 582, 582, 1732, 1923,
  /* 50191 */ 1827, 536, 2338, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 2914, 582,
  /* 50211 */ 582, 582, 0, 0, 2478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200248, 151552, 2200248, 536, 536, 536,
  /* 50235 */ 2529, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 1767, 536, 536, 536, 2660, 582, 582,
  /* 50255 */ 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 3103, 582, 582, 582, 582, 582, 582, 2688,
  /* 50276 */ 536, 582, 558, 536, 536, 536, 536, 558, 558, 558, 558, 582, 582, 3070, 582, 582, 582, 582, 582, 582, 582,
  /* 50297 */ 582, 582, 582, 1996, 582, 536, 582, 558, 536, 3173, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
  /* 50318 */ 536, 536, 536, 536, 3184, 536, 536, 582, 582, 3229, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582,
  /* 50339 */ 582, 582, 3446, 0, 3447, 0, 0, 0, 0, 0, 439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111046, 111046, 111046,
  /* 50364 */ 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046, 111046,
  /* 50377 */ 1138688, 0, 1138688, 0, 0, 0, 1138688, 1139105, 1139105, 0, 0, 0, 0, 0, 1139105, 0, 0, 0, 0, 0, 2466, 0,
  /* 50399 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 204800, 204800, 205107, 0, 204800, 0, 1138688, 0, 0, 1138688, 1138688, 0,
  /* 50421 */ 0, 0, 0, 0, 1139294, 1139294, 1139294, 1138688, 1139294, 1139294, 1139294, 1139294, 1139294, 1139294,
  /* 50435 */ 1139294, 0, 1138688, 1139294, 1138688, 1138688, 1138688, 1138688, 1139294, 1139294, 1142784, 0, 0, 0, 0,
  /* 50450 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 1175, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 50471 */ 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3043328, 2125824, 3067904,
  /* 50482 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3104768, 2125824, 1151446, 1151446, 1151446, 453, 453,
  /* 50494 */ 1151446, 453, 453, 453, 453, 453, 453, 453, 453, 1151497, 1151497, 1151497, 1151497, 1151497, 1151497,
  /* 50509 */ 1151497, 1151497, 1151497, 1151497, 1151497, 1151497, 1151497, 1151497, 1151497, 1151497, 0, 0, 0, 0, 0,
  /* 50524 */ 0, 0, 0, 0, 0, 453, 0, 0, 0, 1151446, 1151446, 0, 1151446, 1151497, 1151497, 1151497, 1151446, 1151497, 0,
  /* 50543 */ 1163264, 1163264, 0, 1163264, 1163264, 0, 1163264, 1163264, 0, 1163264, 1163264, 1163264, 1163264,
  /* 50556 */ 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264,
  /* 50567 */ 1163264, 1163264, 1163264, 1163264, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1167360, 0, 0,
  /* 50592 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 978, 2125824, 2125824, 2125824,
  /* 50618 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2449408, 0,
  /* 50630 */ 2535424, 3035136, 0, 0, 0, 2179072, 2449408, 2179072, 2535424, 106496, 106496, 106496, 0, 106496, 106496,
  /* 50645 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 50658 */ 106496, 0, 0, 0, 0, 0, 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 50675 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2183168, 0, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50705 */ 2940928, 0, 2760704, 0, 0, 0, 0, 0, 2957312, 0, 0, 2826240, 3162112, 2428928, 0, 3022848, 0, 2490368,
  /* 50723 */ 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 0, 0, 0, 2838528, 0, 0, 0, 0, 0, 2481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50751 */ 0, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2748416, 2883584, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072,
  /* 50774 */ 2179072, 2179072, 2523136, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 50785 */ 2600960, 2179072
];

XQueryParser.EXPECTED =
[
  /*    0 */ 1019, 1027, 1028, 1026, 1022, 1032, 1036, 1040, 1044, 1048, 2976, 2082, 1637, 1055, 1061, 2976, 1063, 1206,
  /*   18 */ 1067, 1071, 2976, 3007, 3001, 1075, 2976, 1062, 2107, 2107, 1087, 1088, 2099, 1120, 1121, 1197, 2976, 2976,
  /*   36 */ 2323, 1093, 2976, 2106, 2107, 2107, 1099, 1088, 1089, 1120, 1120, 1219, 1104, 1108, 2976, 2977, 1113, 1992,
  /*   54 */ 2107, 2107, 1206, 1088, 1088, 1118, 1120, 1120, 1125, 1129, 2976, 2910, 1752, 2107, 2107, 1087, 1088, 1100,
  /*   72 */ 1120, 1120, 1220, 1134, 1812, 2436, 2107, 2108, 1088, 1154, 1120, 1120, 1139, 1842, 1992, 2107, 1099, 1159,
  /*   90 */ 1120, 1145, 1843, 2095, 1151, 1158, 1120, 1163, 1169, 2097, 1118, 1175, 1171, 1190, 1194, 1201, 1205, 1210,
  /*  108 */ 1216, 1212, 1224, 1228, 1232, 1236, 1240, 1241, 1245, 1248, 1252, 1256, 1260, 1264, 1268, 2976, 1147, 2976,
  /*  126 */ 1165, 1184, 2976, 2976, 2976, 2976, 1277, 2976, 2976, 2976, 2586, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
  /*  144 */ 2976, 2051, 2976, 2976, 2976, 2976, 1281, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
  /*  162 */ 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
  /*  180 */ 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
  /*  198 */ 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
  /*  216 */ 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 1186, 1287, 2976, 1295, 2916, 1299, 1303, 1307,
  /*  234 */ 1311, 1315, 1319, 2976, 2976, 1325, 1329, 1341, 1348, 1352, 1353, 1357, 1367, 2976, 2976, 2253, 1360, 1373,
  /*  252 */ 1377, 2976, 1283, 2976, 2409, 1384, 2976, 1390, 1397, 2976, 2976, 1403, 1415, 1421, 2976, 2976, 1425, 2976,
  /*  270 */ 2976, 1447, 2976, 2976, 2976, 1444, 2976, 1864, 1386, 2877, 1429, 2976, 1130, 1435, 2976, 1130, 1435, 2976,
  /*  288 */ 2976, 1441, 2976, 1998, 1451, 1457, 2976, 2883, 1463, 2976, 1380, 2976, 2976, 1081, 2976, 1291, 1468, 2976,
  /*  306 */ 1468, 2976, 1494, 2976, 1095, 1864, 1332, 1336, 1677, 1464, 1336, 1057, 1865, 1474, 1337, 1385, 1335, 1453,
  /*  324 */ 2992, 1478, 2456, 1526, 1363, 1482, 1491, 1509, 1501, 1503, 1511, 1507, 1515, 1521, 1525, 2976, 1833, 2976,
  /*  342 */ 2868, 1595, 1530, 1534, 1538, 1542, 1546, 1895, 2976, 1552, 1431, 2970, 1556, 1560, 1564, 2762, 2315, 3032,
  /*  360 */ 2976, 1819, 1580, 1568, 1972, 2741, 2976, 2976, 1572, 2976, 1674, 2976, 1990, 1894, 2976, 1577, 1601, 1584,
  /*  378 */ 1588, 1593, 2976, 2976, 1599, 2976, 2715, 1605, 2976, 2949, 1709, 2976, 1611, 3050, 2819, 2046, 2976, 2976,
  /*  396 */ 1631, 2976, 2976, 1631, 2976, 1659, 1781, 1135, 2246, 1615, 2317, 1619, 2976, 1625, 2976, 1620, 1635, 2976,
  /*  414 */ 1641, 1393, 1645, 1649, 1653, 1548, 1653, 1621, 1658, 2142, 1663, 1667, 1671, 1949, 1658, 1671, 1607, 1684,
  /*  432 */ 1694, 1698, 1697, 2690, 2951, 1703, 1707, 1713, 1708, 1719, 1723, 2070, 1727, 2149, 2073, 1731, 1735, 1739,
  /*  450 */ 1743, 1747, 1751, 2976, 1756, 2084, 1761, 1765, 1769, 1773, 1777, 1779, 1848, 2976, 1785, 1789, 1793, 2225,
  /*  468 */ 1797, 1801, 1807, 2976, 2976, 1811, 2312, 1855, 1938, 1816, 1825, 1831, 2976, 1837, 2976, 2114, 1841, 2976,
  /*  486 */ 2976, 1847, 1852, 1859, 2076, 1863, 1321, 1869, 2976, 2000, 2408, 2976, 1487, 2976, 2976, 2976, 1874, 1879,
  /*  504 */ 1883, 2700, 2976, 1892, 2976, 2976, 1899, 2976, 2976, 1899, 2976, 2976, 2595, 1905, 1909, 2975, 1920, 2976,
  /*  522 */ 1875, 1927, 2976, 1459, 2976, 2647, 1933, 1937, 1942, 1947, 2976, 1947, 2976, 2784, 2976, 1953, 1963, 2027,
  /*  540 */ 2976, 2852, 2027, 2976, 1969, 1964, 2348, 2347, 1977, 1976, 1981, 2922, 2285, 2923, 1996, 1289, 2004, 1409,
  /*  558 */ 1411, 1406, 2010, 2008, 2014, 2018, 2022, 2026, 2976, 2894, 1485, 2174, 1344, 2031, 2035, 2039, 2043, 2976,
  /*  576 */ 2050, 1517, 2055, 2946, 2059, 2063, 2067, 2999, 3000, 2976, 3047, 2903, 1686, 2088, 2092, 2103, 1690, 2976,
  /*  594 */ 1757, 2112, 2976, 2118, 2976, 2976, 2125, 2904, 2131, 2135, 2139, 2976, 2146, 2976, 2976, 2153, 2976, 2976,
  /*  612 */ 2159, 2976, 2976, 2165, 1517, 2167, 2171, 2976, 2735, 2976, 2976, 2390, 2976, 2976, 2390, 2976, 2976, 1271,
  /*  630 */ 2178, 2419, 2976, 2684, 2976, 2976, 1923, 2976, 2976, 2184, 2976, 2189, 2180, 2193, 2403, 2976, 1922, 2976,
  /*  648 */ 1901, 2976, 2198, 2575, 3025, 2202, 2450, 2976, 2207, 2212, 2216, 2127, 1870, 2976, 2229, 2235, 2239, 2231,
  /*  666 */ 2854, 2243, 2250, 2257, 2278, 2261, 2277, 2267, 2275, 2282, 2270, 2976, 2976, 2976, 2786, 2821, 2474, 2291,
  /*  684 */ 2295, 2299, 2303, 2306, 2976, 2309, 1114, 2321, 2327, 2121, 2331, 2336, 2706, 2707, 2335, 1417, 2976, 2340,
  /*  702 */ 2725, 1888, 2345, 2976, 2352, 2976, 2697, 2976, 2194, 3026, 2358, 2287, 1573, 2341, 2363, 2375, 2976, 1437,
  /*  720 */ 2662, 2976, 1273, 2976, 2976, 2731, 1399, 2976, 2963, 1114, 2321, 2379, 2383, 2976, 2733, 2976, 1943, 2388,
  /*  738 */ 2976, 1943, 2388, 2973, 2416, 2656, 2394, 2401, 1320, 2407, 2976, 1369, 2976, 2976, 2865, 2413, 2423, 2431,
  /*  756 */ 2939, 2185, 2867, 2663, 2435, 2359, 2440, 1628, 2444, 2448, 2454, 2203, 2976, 2460, 2464, 2468, 2208, 2976,
  /*  774 */ 2472, 2369, 2478, 2482, 2371, 2271, 2486, 2490, 1497, 2494, 1959, 2498, 2500, 1680, 2504, 2508, 2512, 2516,
  /*  792 */ 2976, 2976, 2520, 2772, 2527, 2531, 2535, 2539, 2543, 2976, 1654, 2547, 2554, 2561, 1051, 2565, 2572, 2579,
  /*  810 */ 2580, 2584, 2976, 2590, 2625, 2594, 2599, 2603, 2976, 2568, 2976, 2384, 2607, 2976, 2612, 2616, 2976, 2622,
  /*  828 */ 2629, 2678, 2639, 2646, 2976, 2651, 2976, 2976, 2660, 2976, 2976, 2667, 2714, 2976, 2671, 2675, 2161, 2682,
  /*  846 */ 2976, 2929, 2976, 2976, 2557, 2976, 2976, 2557, 2366, 1699, 2523, 2688, 2694, 2976, 1956, 2976, 2976, 2704,
  /*  864 */ 2976, 2608, 2711, 1821, 2550, 2983, 2976, 1078, 2976, 1987, 2976, 1984, 2719, 2723, 2729, 1470, 2976, 2739,
  /*  882 */ 1083, 2745, 2749, 2755, 2760, 2079, 1929, 2766, 2751, 2770, 2776, 2781, 2957, 2790, 1178, 2794, 2798, 2802,
  /*  900 */ 2808, 2804, 2812, 2816, 2976, 2976, 2976, 1141, 2825, 2829, 2833, 2837, 2841, 2845, 2976, 2976, 2849, 2654,
  /*  918 */ 2858, 2862, 2872, 2876, 2881, 2887, 2891, 2976, 2397, 2426, 2897, 2901, 2908, 2976, 1928, 2914, 2976, 2920,
  /*  936 */ 2976, 2354, 2927, 2976, 1181, 2427, 3014, 2933, 2976, 2976, 1965, 2937, 2976, 1803, 2976, 2976, 2263, 1915,
  /*  954 */ 2976, 2222, 2642, 2943, 2955, 2976, 2976, 2961, 2976, 2976, 2961, 2976, 2976, 2967, 2976, 2981, 2987, 2996,
  /*  972 */ 2976, 1589, 3005, 2976, 2618, 2976, 2976, 1912, 1916, 3011, 3018, 2976, 1827, 2976, 2777, 2976, 2756, 1109,
  /*  990 */ 3022, 2990, 1589, 3030, 1715, 1928, 3036, 2635, 2976, 1886, 2155, 2976, 3040, 2219, 2426, 1688, 2632, 3044,
  /* 1008 */ 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 1615, 3054, 4990, 3065, 3077, 3082, 3077, 3085,
  /* 1026 */ 3076, 3077, 3077, 3077, 3077, 3072, 3068, 3089, 3078, 3093, 3109, 3112, 3097, 3100, 3102, 3114, 3106, 3118,
  /* 1044 */ 3122, 3126, 3130, 3134, 3138, 3142, 4790, 4538, 3232, 4591, 5332, 4536, 4259, 4538, 4538, 3356, 3604, 3909,
  /* 1062 */ 4538, 4538, 4538, 3355, 4080, 3146, 3149, 3149, 3153, 3217, 3157, 3171, 3175, 5163, 4538, 4261, 4538, 3248,
  /* 1080 */ 4501, 4538, 3357, 4538, 4538, 3983, 5527, 3163, 3166, 3166, 3166, 3166, 3167, 3209, 4260, 4538, 4538, 3358,
  /* 1098 */ 4538, 3165, 3166, 3166, 3166, 3222, 4083, 3197, 3199, 3203, 3176, 4538, 4538, 4538, 3408, 5248, 4538, 4538,
  /* 1116 */ 4538, 3534, 3166, 3222, 3149, 3149, 3149, 3149, 3181, 3149, 3214, 3164, 3226, 3230, 4538, 4538, 4538, 3591,
  /* 1134 */ 3258, 4538, 4538, 4538, 3622, 3183, 3259, 4538, 4538, 3383, 5565, 3193, 3185, 4538, 4538, 3387, 4538, 4080,
  /* 1152 */ 4080, 3220, 3166, 3166, 3166, 3236, 3166, 3166, 3166, 4085, 3149, 3214, 3268, 4538, 4538, 3391, 4538, 4260,
  /* 1170 */ 4538, 4077, 4080, 4081, 3166, 3149, 3267, 4538, 4260, 4538, 3260, 4538, 3382, 5707, 4538, 3398, 4538, 4538,
  /* 1188 */ 3427, 4538, 3166, 3238, 3149, 3242, 4538, 5669, 4080, 3164, 4086, 3199, 3204, 3166, 3237, 3149, 3252, 5448,
  /* 1206 */ 4080, 4082, 3166, 3166, 3222, 3149, 3257, 5449, 4080, 3166, 4080, 3220, 3221, 3149, 3149, 3149, 3193, 4083,
  /* 1224 */ 3222, 3149, 3253, 4082, 3222, 3257, 3163, 3237, 3160, 4084, 3264, 3272, 3244, 3276, 4342, 3280, 3284, 3285,
  /* 1242 */ 3285, 3285, 3290, 3294, 3298, 3302, 3285, 3286, 3307, 3303, 3311, 3315, 3319, 3323, 3326, 3330, 3331, 3335,
  /* 1260 */ 3338, 3342, 3346, 3350, 3362, 3366, 3370, 3374, 3378, 3551, 5533, 4538, 3406, 4538, 4538, 4555, 5062, 3412,
  /* 1278 */ 4538, 3422, 4790, 4538, 5475, 4538, 4538, 3609, 3598, 5018, 3437, 4538, 4538, 3626, 4538, 3712, 4538, 4538,
  /* 1296 */ 5105, 3442, 3446, 5006, 3459, 3468, 4567, 3474, 3472, 3474, 3478, 3481, 3485, 3487, 3491, 3495, 3502, 3498,
  /* 1314 */ 3506, 3510, 4538, 4552, 5019, 3438, 4538, 4538, 4538, 3645, 4475, 3514, 3430, 3210, 5253, 3521, 4538, 4849,
  /* 1332 */ 4538, 3418, 5737, 3729, 3734, 4538, 4538, 4538, 3730, 3605, 3531, 3605, 4538, 3462, 4595, 4599, 5051, 4538,
  /* 1350 */ 3538, 3542, 3547, 4538, 3527, 3558, 4538, 3933, 3563, 3831, 4538, 3571, 3876, 4538, 3574, 4538, 5154, 5196,
  /* 1368 */ 3567, 4538, 4538, 3646, 5062, 3584, 4538, 4963, 3582, 3588, 3595, 3599, 4538, 3590, 4098, 3600, 3613, 3583,
  /* 1386 */ 4538, 4538, 4538, 3661, 5025, 5476, 5681, 4538, 3619, 4538, 4353, 3355, 3657, 4538, 4538, 3725, 5038, 4371,
  /* 1404 */ 4538, 5251, 4538, 3624, 4538, 3624, 4538, 4369, 4538, 3635, 4368, 3617, 3877, 4538, 4538, 3815, 5014, 4116,
  /* 1422 */ 3637, 5125, 3651, 4538, 5123, 4097, 3631, 3678, 3600, 4538, 4538, 3819, 3828, 3682, 3583, 4538, 4538, 3824,
  /* 1440 */ 5056, 4538, 5393, 5017, 4538, 3655, 5017, 4538, 3641, 3650, 3583, 5328, 3693, 4538, 4538, 3902, 3604, 5148,
  /* 1458 */ 3700, 4538, 4538, 3948, 3952, 3685, 4538, 4538, 4538, 3729, 4229, 3674, 4538, 4538, 3993, 3583, 5739, 3695,
  /* 1476 */ 3730, 3583, 3749, 4538, 4538, 4817, 5713, 4538, 3931, 4538, 3667, 4538, 4538, 4474, 4479, 4538, 5713, 3574,
  /* 1494 */ 4538, 3673, 3720, 4538, 3663, 4470, 3602, 5711, 3929, 4538, 3574, 4538, 3634, 5713, 3634, 3930, 4538, 3930,
  /* 1512 */ 4538, 3576, 5154, 3932, 3574, 4538, 3553, 4223, 3604, 5155, 5155, 4538, 3760, 3554, 4538, 4538, 4538, 3754,
  /* 1530 */ 3723, 4538, 3724, 3772, 3776, 3778, 3783, 3779, 3787, 3790, 3791, 3791, 3795, 3809, 3809, 3807, 3798, 3801,
  /* 1548 */ 4538, 4538, 4008, 4901, 3813, 4538, 4538, 4355, 3737, 3858, 3865, 3873, 3881, 3887, 3423, 3894, 4192, 3901,
  /* 1566 */ 4538, 5079, 3937, 5327, 3944, 3959, 3969, 4538, 4538, 4538, 3834, 5447, 4538, 4538, 3928, 4538, 4128, 5455,
  /* 1584 */ 5327, 5441, 3960, 4045, 4146, 4538, 4538, 4538, 3939, 5723, 3998, 3600, 4538, 4839, 3766, 3987, 3846, 4538,
  /* 1602 */ 4538, 4115, 3937, 3997, 4002, 4538, 4538, 4136, 3867, 3621, 4538, 4538, 4355, 4791, 5104, 4076, 3754, 3622,
  /* 1620 */ 4538, 4538, 4538, 4007, 4900, 4539, 4090, 3990, 4538, 3755, 5121, 4538, 3803, 4049, 4054, 4094, 4102, 4538,
  /* 1638 */ 4538, 4236, 3061, 4136, 4538, 5783, 4110, 4538, 4789, 3059, 3840, 4120, 4538, 4008, 4901, 4127, 4538, 4538,
  /* 1656 */ 4538, 4057, 4126, 4538, 4538, 4538, 4062, 4111, 3737, 4538, 3756, 4787, 4791, 4867, 4132, 4539, 4899, 4143,
  /* 1674 */ 4538, 3843, 3974, 4538, 3741, 3720, 4538, 3665, 4538, 3666, 4282, 3737, 4538, 4787, 4538, 4550, 4538, 4538,
  /* 1692 */ 4243, 4743, 5325, 4157, 3744, 3883, 4168, 4538, 4538, 4538, 4065, 4282, 4538, 3177, 4178, 4372, 4197, 4538,
  /* 1710 */ 4538, 4372, 4020, 3869, 4191, 4538, 4372, 5763, 4538, 4184, 3837, 3868, 4190, 3867, 4189, 4538, 4196, 4191,
  /* 1728 */ 5655, 4538, 5655, 4205, 4213, 3623, 4227, 5221, 4228, 4205, 4233, 3924, 4235, 5222, 4770, 5071, 4240, 4240,
  /* 1746 */ 4207, 5740, 4209, 4247, 5741, 4257, 4538, 4538, 4538, 4080, 4266, 4538, 4538, 4538, 4242, 4271, 4041, 4538,
  /* 1764 */ 4280, 5641, 5771, 4287, 4309, 4313, 4317, 4317, 4317, 4320, 4324, 4329, 4330, 4327, 4334, 4335, 4335, 4538,
  /* 1782 */ 4538, 4372, 4069, 5506, 4339, 3583, 5692, 4532, 3703, 3910, 4725, 4346, 4538, 4538, 4174, 4363, 4538, 4367,
  /* 1800 */ 5681, 4378, 5378, 4538, 4538, 4372, 5727, 4384, 4538, 4538, 4384, 4388, 4538, 4538, 4538, 4259, 4408, 4538,
  /* 1818 */ 4072, 4538, 3923, 4538, 4538, 4064, 4538, 4538, 5675, 4538, 4538, 4372, 5759, 5549, 4416, 4538, 4538, 4373,
  /* 1836 */ 4021, 4538, 5548, 4415, 4420, 4430, 4538, 4538, 4538, 4261, 4538, 4441, 4538, 4538, 4538, 4267, 4446, 4396,
  /* 1854 */ 4538, 3696, 4006, 4401, 4723, 4006, 3704, 4456, 3633, 3961, 4538, 4538, 4538, 4368, 4538, 4480, 4538, 4538,
  /* 1872 */ 4538, 4433, 3688, 4538, 4538, 4538, 4520, 4484, 4339, 3583, 5692, 4532, 4290, 4105, 4538, 3939, 3417, 4538,
  /* 1890 */ 5365, 5661, 3854, 4479, 4538, 4538, 4374, 4022, 4538, 4496, 4468, 4538, 4538, 4391, 4806, 4397, 4538, 4531,
  /* 1908 */ 4513, 4106, 4538, 5250, 4538, 3940, 5750, 3057, 3059, 4538, 4538, 4253, 3946, 3950, 4538, 4538, 4392, 4538,
  /* 1926 */ 4538, 4524, 4538, 4538, 4538, 4545, 5526, 4538, 5387, 4653, 3583, 4530, 3633, 4191, 4538, 4538, 4159, 4538,
  /* 1944 */ 4538, 4538, 4553, 4946, 4560, 4538, 4538, 4421, 4153, 5683, 5367, 4564, 4538, 3954, 5485, 3604, 3663, 3604,
  /* 1962 */ 4526, 3762, 4106, 4538, 4538, 4538, 4681, 5683, 5367, 4577, 4538, 3965, 5243, 3447, 5441, 4538, 4538, 4538,
  /* 1980 */ 4753, 5683, 4122, 3634, 4538, 3976, 4499, 4538, 3977, 4500, 4538, 3981, 4538, 4538, 4078, 4080, 4538, 4819,
  /* 1998 */ 4538, 3623, 4538, 4538, 3853, 4466, 4369, 4538, 3722, 5712, 4371, 4368, 4538, 5712, 3625, 4538, 4370, 4368,
  /* 2016 */ 4538, 3625, 5711, 3626, 4371, 5710, 4370, 5764, 4820, 5518, 3636, 4538, 4538, 4538, 4755, 4603, 4607, 4611,
  /* 2034 */ 4614, 4618, 4622, 4625, 4634, 4631, 4627, 4646, 4638, 4639, 4643, 4649, 4538, 4007, 4031, 4035, 4585, 4538,
  /* 2052 */ 4538, 4538, 4882, 3549, 4538, 4545, 4534, 4664, 4673, 4677, 3401, 4685, 4538, 4348, 5358, 3559, 4691, 4696,
  /* 2070 */ 4538, 4015, 3550, 4016, 4191, 4016, 4191, 4538, 4692, 4538, 3852, 5527, 4538, 3890, 4538, 4538, 3354, 3394,
  /* 2088 */ 4536, 4161, 4709, 5193, 4538, 4720, 4730, 4538, 4079, 4080, 4080, 3166, 3166, 3148, 3149, 4403, 4734, 4736,
  /* 2106 */ 4538, 4080, 4080, 4080, 4080, 3164, 4742, 4686, 4538, 4538, 4539, 4426, 4538, 4747, 4751, 4538, 4114, 4296,
  /* 2124 */ 4950, 5254, 4705, 4538, 4538, 4541, 4538, 4787, 4538, 4549, 5085, 4161, 4895, 5194, 4738, 4759, 4538, 4404,
  /* 2142 */ 4538, 4134, 4538, 5784, 4539, 4765, 4769, 4538, 4201, 5654, 4228, 3433, 4774, 4538, 4538, 4545, 5777, 4778,
  /* 2160 */ 4768, 4538, 4538, 4551, 5453, 4538, 4782, 4538, 4538, 4552, 4514, 5440, 4786, 5206, 4538, 4221, 4589, 5693,
  /* 2178 */ 3687, 4962, 4538, 4549, 4161, 5439, 4824, 4538, 4538, 4538, 4971, 3404, 4538, 4538, 4859, 5203, 4538, 4538,
  /* 2196 */ 4538, 5033, 4538, 4837, 4538, 4961, 4542, 4538, 4538, 4538, 5134, 4434, 4538, 4538, 4538, 5142, 4538, 4837,
  /* 2214 */ 3721, 3603, 4547, 4893, 4737, 4538, 4293, 4538, 4538, 4299, 4303, 4538, 4352, 4359, 5117, 4540, 4436, 4538,
  /* 2232 */ 4538, 4660, 4538, 4538, 4857, 4861, 4865, 4828, 4538, 4538, 4543, 4538, 4871, 4853, 4538, 4354, 4538, 4027,
  /* 2250 */ 5772, 4538, 5771, 4538, 4371, 4538, 4874, 4538, 5737, 4538, 3603, 4538, 5737, 4538, 4538, 4680, 5732, 3694,
  /* 2268 */ 4538, 4538, 3695, 4538, 4538, 4538, 5144, 5735, 4538, 5736, 4538, 3694, 4538, 5737, 5734, 4538, 5736, 4538,
  /* 2286 */ 4380, 4538, 4538, 4452, 5016, 3821, 4160, 5275, 4891, 3517, 4905, 4911, 4909, 4915, 4919, 4923, 4928, 4932,
  /* 2304 */ 4926, 4936, 4937, 4937, 4941, 4538, 4422, 4275, 4538, 4485, 4396, 4538, 3906, 4538, 4538, 4009, 4050, 5685,
  /* 2322 */ 5276, 4538, 4538, 4726, 3189, 4538, 5346, 4538, 4945, 4955, 4968, 4975, 4984, 5010, 4538, 4538, 4538, 5209,
  /* 2340 */ 3834, 3413, 5276, 4538, 4538, 5029, 4180, 4538, 4538, 4754, 4538, 4538, 4712, 4716, 4538, 4538, 4761, 5702,
  /* 2358 */ 5042, 4538, 4538, 4538, 5228, 4538, 5023, 3414, 4538, 4491, 5471, 4538, 4502, 5161, 4538, 4538, 5159, 4538,
  /* 2376 */ 5045, 4958, 5049, 5102, 4964, 4538, 5044, 5000, 4538, 4538, 4538, 5405, 5060, 5424, 4538, 4538, 4814, 4826,
  /* 2394 */ 4538, 5175, 3060, 4538, 4539, 4301, 5516, 3750, 5066, 4538, 4538, 4833, 4538, 5061, 3604, 4538, 4538, 4538,
  /* 2412 */ 4509, 4538, 5686, 5083, 4538, 4545, 4275, 4538, 4515, 3454, 4449, 4538, 5090, 3604, 4538, 4545, 4538, 4538,
  /* 2430 */ 4538, 5094, 4538, 5474, 5101, 5062, 4538, 4538, 4538, 5448, 5109, 3604, 4538, 5113, 5129, 5276, 5175, 3060,
  /* 2448 */ 4538, 5153, 4538, 4538, 4843, 4538, 4538, 5134, 4538, 4538, 4877, 3749, 4538, 5138, 3604, 5686, 5115, 3755,
  /* 2466 */ 5121, 4882, 5273, 5175, 4538, 4687, 4503, 3604, 4538, 4538, 4881, 4887, 5168, 3721, 3604, 4442, 5441, 5152,
  /* 2484 */ 4538, 4437, 5167, 3601, 5738, 3714, 4538, 5173, 4538, 5172, 5187, 4807, 5174, 3663, 4538, 5179, 4807, 5174,
  /* 2502 */ 5740, 4808, 5740, 3664, 4538, 3666, 4808, 5739, 3665, 4810, 5185, 4809, 5191, 3768, 5200, 5213, 5217, 5219,
  /* 2520 */ 4056, 5226, 4538, 3393, 4536, 3416, 5480, 5241, 5247, 5259, 4997, 5265, 5270, 5280, 5286, 5282, 5290, 5294,
  /* 2538 */ 5297, 5303, 5307, 5299, 5311, 5314, 5315, 5319, 5323, 5227, 3393, 4535, 4964, 5501, 3353, 3413, 4411, 5481,
  /* 2556 */ 5261, 4538, 4545, 4669, 5467, 5682, 4538, 4538, 5442, 3627, 4538, 3602, 4538, 4545, 5397, 5401, 5336, 5340,
  /* 2574 */ 5344, 4538, 4547, 4515, 5721, 5350, 4538, 4538, 5362, 4538, 5371, 5372, 4538, 4538, 4883, 4538, 3917, 5376,
  /* 2592 */ 3393, 5085, 4538, 5684, 4538, 4538, 4507, 3860, 4538, 4538, 5454, 5386, 4538, 4492, 5391, 5400, 4538, 4538,
  /* 2610 */ 4538, 5493, 4149, 5409, 3604, 4573, 5568, 5474, 4538, 4538, 4897, 5754, 3919, 4651, 5085, 3415, 5181, 4216,
  /* 2628 */ 5382, 5181, 4216, 5413, 4538, 4548, 4538, 4538, 4552, 4533, 4459, 5734, 3604, 3823, 4538, 4552, 4538, 4004,
  /* 2646 */ 3526, 4538, 4538, 4538, 5682, 3246, 5419, 5423, 4538, 4552, 4538, 4538, 5130, 3543, 4667, 5428, 5077, 4538,
  /* 2664 */ 4538, 4538, 5229, 5432, 5422, 4538, 3524, 4058, 3392, 4535, 4964, 4411, 3464, 5446, 3688, 4538, 4538, 3861,
  /* 2682 */ 3822, 3524, 4538, 4538, 4980, 4806, 3354, 3689, 4538, 4545, 4167, 3622, 3897, 4538, 3525, 4538, 4554, 4715,
  /* 2700 */ 4538, 4489, 4538, 3644, 3955, 5489, 4538, 4538, 4994, 4538, 5004, 5497, 4538, 3524, 5436, 4538, 4538, 4538,
  /* 2718 */ 5722, 5237, 4538, 5195, 4410, 3415, 5510, 4538, 4538, 5023, 4538, 4550, 4112, 4538, 4538, 5055, 5076, 4538,
  /* 2736 */ 4538, 4795, 4805, 4038, 4501, 4538, 4538, 5078, 3970, 5235, 4115, 5195, 4410, 5522, 5249, 4538, 4547, 4115,
  /* 2754 */ 4538, 4113, 4538, 4538, 4538, 5757, 5574, 3583, 4538, 4538, 5079, 4538, 4516, 5366, 4883, 5531, 4545, 5537,
  /* 2772 */ 4538, 4538, 5086, 5233, 4462, 4538, 4538, 4538, 5758, 5543, 5546, 4262, 4538, 4559, 4538, 4538, 4421, 4274,
  /* 2790 */ 4987, 4538, 4138, 3583, 4138, 4538, 4138, 4259, 4538, 5254, 5249, 3260, 5554, 3260, 5667, 4538, 4978, 3260,
  /* 2808 */ 5561, 4538, 5553, 3260, 5554, 4139, 4538, 4137, 5703, 5554, 5559, 5255, 4044, 3604, 4538, 3736, 4538, 5353,
  /* 2826 */ 3633, 5765, 5154, 5648, 5572, 5711, 4219, 5578, 5582, 5586, 5590, 5597, 5593, 5601, 5604, 5607, 5611, 5615,
  /* 2844 */ 5619, 5623, 5626, 5630, 5634, 3380, 4798, 5069, 4538, 4571, 4538, 4538, 4435, 4538, 5638, 4788, 4851, 5252,
  /* 2862 */ 5645, 4538, 5693, 4538, 4580, 5075, 4538, 4538, 4538, 5415, 4829, 4250, 5652, 5659, 3745, 4544, 4538, 4538,
  /* 2880 */ 3671, 4538, 5665, 4538, 4538, 5146, 3708, 5673, 4538, 4538, 5679, 4185, 5690, 5691, 4538, 4584, 5227, 4538,
  /* 2898 */ 4006, 4790, 4852, 4159, 4401, 4538, 4538, 5155, 5097, 4538, 3578, 5504, 4538, 4538, 5249, 4538, 5698, 4538,
  /* 2916 */ 4538, 4538, 5266, 3451, 4538, 5697, 4538, 4538, 5356, 4538, 4538, 5326, 4800, 4538, 4538, 5459, 5463, 4402,
  /* 2934 */ 4538, 5715, 5719, 5733, 4538, 4538, 4538, 5513, 4538, 3552, 4162, 5195, 4538, 4657, 3455, 4538, 4013, 4538,
  /* 2952 */ 4538, 4172, 3867, 5714, 5719, 4538, 4538, 5537, 4538, 3940, 5728, 4538, 4538, 5539, 4276, 3940, 5728, 4801,
  /* 2970 */ 5326, 3850, 4283, 4538, 3716, 4537, 4538, 4538, 4538, 4538, 3208, 5745, 4304, 4538, 4551, 4538, 5366, 4538,
  /* 2988 */ 4846, 4538, 4163, 5738, 4538, 4538, 5739, 4877, 4538, 5738, 5366, 4538, 4700, 4538, 4538, 4538, 4951, 5749,
  /* 3006 */ 4538, 4538, 4538, 5555, 4538, 4305, 4546, 4538, 4005, 3552, 4852, 5253, 4161, 4159, 5738, 4115, 4370, 4550,
  /* 3024 */ 4538, 4533, 4538, 4538, 4538, 5037, 5770, 4538, 4538, 4538, 5783, 3914, 5769, 4538, 4538, 3408, 5776, 4538,
  /* 3042 */ 4538, 5781, 3662, 4538, 4538, 4538, 4704, 4111, 4538, 4026, 3662, 5103, 5951, 5788, 5804, 5792, 5789, 5792,
  /* 3060 */ 5789, 5792, 5792, 5792, 6252, 5829, 5836, 6068, 5853, 5830, 5853, 5850, 5943, 5965, 6067, 5831, 5832, 5853,
  /* 3078 */ 5853, 5853, 5853, 6065, 5863, 6066, 5831, 5853, 5849, 5853, 5853, 5852, 5853, 5853, 5862, 5865, 5867, 5868,
  /* 3096 */ 5871, 5870, 5876, 5878, 5877, 5877, 5877, 5877, 5874, 5870, 5882, 5878, 5882, 5870, 5866, 5873, 5870, 5870,
  /* 3114 */ 5873, 5874, 5881, 5878, 5879, 5884, 5886, 5889, 5888, 5892, 5894, 5893, 5896, 5890, 5902, 5901, 5902, 5902,
  /* 3132 */ 5903, 5898, 5906, 5900, 5905, 5908, 5951, 5788, 6757, 5807, 6789, 5854, 5855, 6514, 6336, 6336, 6332, 6338,
  /* 3150 */ 6338, 6338, 6338, 6338, 6338, 5792, 5910, 6336, 6336, 6334, 6338, 5792, 6309, 6233, 6233, 6233, 6336, 6336,
  /* 3168 */ 6336, 6336, 6331, 6338, 6757, 6311, 6340, 6312, 6327, 6515, 5792, 5792, 5789, 6338, 6333, 5911, 5939, 6234,
  /* 3186 */ 6337, 6333, 5792, 5792, 6580, 6217, 6237, 6338, 6338, 5911, 5939, 6338, 6339, 6340, 6340, 6340, 6312, 6327,
  /* 3204 */ 6327, 6327, 6327, 6515, 6580, 6329, 5792, 5792, 5792, 5806, 6338, 6338, 6353, 6335, 6233, 6233, 6234, 6336,
  /* 3222 */ 6336, 6336, 6337, 6338, 6338, 6338, 6340, 6340, 6327, 6327, 5792, 5792, 5792, 6708, 6336, 6336, 6336, 6338,
  /* 3240 */ 6338, 6338, 6338, 6338, 6353, 6337, 5792, 5792, 5792, 6734, 6313, 6056, 6338, 6338, 5792, 5792, 6233, 6338,
  /* 3258 */ 6338, 6333, 5792, 5792, 5792, 5813, 6333, 6233, 6336, 6338, 6233, 6336, 6338, 5792, 6234, 6353, 6337, 6234,
  /* 3276 */ 5792, 6536, 6776, 6768, 5814, 5819, 5859, 5969, 5978, 5814, 5814, 5814, 5814, 5818, 5814, 5814, 5971, 5973,
  /* 3294 */ 5817, 5820, 5815, 5816, 5847, 6517, 5975, 6519, 5977, 5814, 5814, 5814, 5821, 5814, 6022, 5980, 6518, 5982,
  /* 3312 */ 5814, 5814, 5857, 5814, 5822, 5984, 5987, 5814, 5986, 5860, 6521, 6520, 5990, 5994, 5996, 5995, 5992, 5993,
  /* 3330 */ 5998, 5992, 5992, 5992, 6002, 6003, 6005, 6005, 6005, 6007, 6007, 6007, 6012, 6012, 6012, 6012, 6000, 6009,
  /* 3348 */ 6013, 6011, 6015, 6015, 6018, 5843, 6626, 5792, 5792, 5792, 6309, 6202, 5955, 5792, 6516, 5814, 6021, 5858,
  /* 3366 */ 5814, 5988, 6024, 6027, 6029, 6031, 6036, 6032, 6033, 6034, 6038, 5999, 6016, 6040, 5792, 5792, 5792, 6755,
  /* 3384 */ 6730, 6315, 6435, 5792, 6756, 5792, 5846, 6764, 5792, 5792, 5792, 5842, 5792, 6704, 5792, 6637, 6042, 5792,
  /* 3402 */ 5792, 6489, 5792, 5792, 6501, 6060, 5792, 5792, 6043, 6311, 6070, 6791, 5792, 5792, 5792, 5855, 5792, 5792,
  /* 3420 */ 5792, 5924, 6074, 5792, 5792, 5792, 5930, 5795, 5792, 5795, 5792, 5792, 6504, 5792, 5792, 6523, 6348, 6354,
  /* 3438 */ 6198, 6484, 5805, 5792, 6506, 6506, 6592, 6219, 6627, 5792, 5792, 5792, 5931, 5792, 6054, 6055, 6592, 5792,
  /* 3456 */ 5792, 5833, 5792, 5792, 6626, 6182, 5792, 5792, 6536, 5792, 5843, 6600, 6087, 5954, 6505, 5953, 6099, 6098,
  /* 3474 */ 6099, 6099, 6099, 6099, 6099, 6101, 6102, 6104, 6104, 6105, 6104, 6107, 6109, 6111, 6111, 6112, 6116, 6113,
  /* 3492 */ 6116, 6114, 6113, 6118, 6121, 6121, 6120, 6124, 6127, 6126, 6119, 6123, 6123, 6123, 6127, 6132, 6127, 6128,
  /* 3510 */ 6129, 6134, 6136, 6130, 6138, 5792, 6181, 5792, 5792, 6539, 6241, 5792, 6366, 6141, 5792, 5792, 6547, 5792,
  /* 3528 */ 5792, 5792, 6643, 5792, 6705, 6143, 5792, 5792, 6580, 6568, 5792, 6161, 6163, 6611, 6166, 5792, 5792, 5792,
  /* 3546 */ 5944, 6169, 6171, 5792, 5792, 5792, 6770, 5792, 5792, 5792, 5838, 5792, 6170, 5792, 5792, 5792, 5946, 6175,
  /* 3564 */ 6625, 5792, 6624, 6216, 6199, 6629, 5955, 5792, 6177, 6726, 5792, 5792, 6600, 6356, 5792, 5792, 5792, 6851,
  /* 3582 */ 6417, 5807, 5792, 5792, 5792, 5953, 5792, 6179, 5792, 6330, 6299, 6315, 6221, 6364, 5928, 6227, 6057, 6281,
  /* 3600 */ 6283, 5792, 5792, 5792, 5955, 5792, 5792, 5792, 5956, 6213, 6185, 6229, 6227, 6487, 5940, 6058, 6282, 6330,
  /* 3618 */ 6063, 5792, 5792, 5792, 6776, 5792, 5792, 5792, 6241, 5792, 5792, 5792, 6071, 6483, 6283, 5792, 5792, 5792,
  /* 3636 */ 6789, 5792, 5792, 5792, 6179, 6330, 6299, 6313, 6225, 5792, 5792, 5792, 6360, 6635, 6232, 6057, 6482, 6424,
  /* 3654 */ 5807, 5792, 6309, 6194, 6484, 5805, 5792, 6192, 6758, 5792, 5792, 5792, 6059, 5792, 5792, 5792, 6060, 5792,
  /* 3672 */ 6212, 6299, 5923, 6232, 6057, 6204, 6232, 6057, 5943, 6586, 5940, 6058, 5934, 6424, 5807, 5792, 5792, 5792,
  /* 3690 */ 6791, 5792, 5792, 6758, 5792, 6704, 5792, 5792, 5792, 6084, 6058, 6423, 6283, 5792, 5792, 6604, 5792, 5792,
  /* 3708 */ 6225, 6232, 6057, 6208, 5792, 6063, 5792, 6703, 6316, 5792, 6316, 5792, 6204, 5792, 5792, 5792, 6089, 5792,
  /* 3726 */ 5792, 5792, 6144, 5792, 6241, 6206, 6232, 6211, 6211, 5807, 5792, 5792, 5792, 6845, 5792, 5792, 6299, 6221,
  /* 3744 */ 6354, 5792, 5792, 5792, 6286, 6202, 5792, 5792, 5792, 6152, 5827, 5792, 5792, 5792, 6153, 5792, 5838, 5792,
  /* 3762 */ 5792, 5838, 5952, 5792, 5792, 6791, 6060, 5792, 5924, 6571, 6250, 5947, 5914, 6254, 6480, 6256, 6259, 6259,
  /* 3780 */ 6259, 6259, 6261, 6259, 6258, 6259, 6259, 6263, 6262, 6262, 6262, 6265, 6265, 6265, 6265, 6265, 6265, 6266,
  /* 3798 */ 6267, 6268, 6269, 6271, 6271, 5792, 5792, 5793, 6352, 6267, 6269, 6267, 6267, 6267, 6267, 6845, 6150, 5792,
  /* 3816 */ 5792, 5793, 6613, 5792, 6273, 5792, 5792, 5794, 5792, 5792, 5792, 6582, 5792, 6614, 6479, 5792, 5792, 6624,
  /* 3834 */ 5792, 5792, 6581, 6515, 5792, 6278, 6592, 5792, 5810, 5792, 5792, 6594, 6046, 6432, 6775, 5807, 5925, 6276,
  /* 3852 */ 5792, 5792, 5795, 5813, 5948, 5922, 5792, 6759, 5792, 5792, 5795, 5920, 5792, 6544, 5791, 5792, 5792, 5795,
  /* 3870 */ 6363, 6085, 6627, 5792, 6244, 6285, 5792, 5792, 6632, 5792, 5792, 5790, 5790, 5792, 5792, 5795, 6368, 5792,
  /* 3888 */ 6288, 6277, 5792, 5792, 6656, 6657, 5931, 5792, 6290, 5792, 5792, 6703, 5955, 6294, 5792, 5792, 5792, 6202,
  /* 3906 */ 5792, 6598, 6302, 5792, 5792, 6715, 5792, 5792, 6590, 6432, 6248, 5792, 5792, 6718, 6193, 6596, 5792, 6149,
  /* 3924 */ 5792, 5792, 5792, 6214, 6153, 5792, 5792, 5792, 6215, 5792, 5792, 5792, 6174, 6770, 6758, 5792, 5792, 5795,
  /* 3942 */ 6512, 6235, 5792, 6419, 5792, 5792, 5795, 6583, 6369, 6591, 6385, 6716, 5792, 5792, 5795, 6735, 6313, 5792,
  /* 3960 */ 6280, 5792, 5792, 5792, 6225, 5792, 6759, 6504, 6042, 6593, 6595, 6440, 6641, 5792, 6774, 6642, 5792, 5792,
  /* 3978 */ 5795, 6744, 6591, 6302, 6599, 5792, 5792, 5795, 6747, 6304, 5913, 5927, 6438, 6047, 6775, 5792, 5792, 6746,
  /* 3996 */ 6536, 5926, 6315, 6045, 6047, 6640, 6640, 6283, 5792, 5792, 5799, 5792, 5792, 5792, 6346, 5948, 6242, 6307,
  /* 4014 */ 6308, 5792, 5792, 5799, 6214, 6373, 5841, 6214, 6430, 6423, 5807, 5792, 5792, 6243, 5792, 6770, 6758, 5912,
  /* 4032 */ 5917, 6238, 6438, 6047, 6640, 6776, 5792, 5792, 6746, 6771, 6648, 5807, 5792, 5792, 6760, 6354, 5955, 5913,
  /* 4050 */ 5918, 6315, 6439, 6700, 6432, 6775, 5792, 5792, 5799, 6220, 6058, 6597, 6343, 6344, 5792, 5792, 5799, 6501,
  /* 4068 */ 5792, 5841, 6214, 6430, 6587, 5792, 5792, 6159, 5811, 5792, 5792, 6309, 6233, 6233, 6233, 6233, 6234, 6336,
  /* 4086 */ 6337, 6338, 6338, 5941, 6347, 6213, 5917, 6238, 5948, 6242, 5918, 6315, 6221, 5940, 6058, 6423, 6439, 6700,
  /* 4104 */ 6776, 5792, 5792, 6789, 6769, 5792, 6590, 6060, 5792, 5792, 5792, 6243, 5792, 5792, 5792, 6236, 6354, 5955,
  /* 4122 */ 5792, 5792, 5807, 5792, 6047, 6485, 5792, 5792, 5792, 6273, 6309, 6356, 5792, 5792, 5812, 5810, 5792, 5792,
  /* 4140 */ 5811, 6753, 5792, 6439, 6386, 6776, 5792, 5792, 6792, 5792, 5792, 6728, 6732, 6512, 6213, 5918, 6044, 5792,
  /* 4158 */ 6592, 5811, 5792, 5792, 5792, 6384, 5792, 5811, 5792, 6368, 6214, 6230, 6371, 6776, 5811, 5812, 5792, 5792,
  /* 4176 */ 5824, 6597, 5792, 6592, 6309, 5792, 6588, 6316, 6214, 5792, 5792, 5792, 6296, 6085, 6627, 6769, 5792, 5792,
  /* 4194 */ 5792, 6292, 5951, 6214, 6230, 6628, 5792, 5799, 6214, 5792, 6515, 5792, 6214, 6770, 5792, 6146, 5792, 5792,
  /* 4212 */ 6515, 5792, 6214, 6373, 6769, 5792, 5801, 6600, 6789, 5792, 6600, 6043, 6089, 5792, 6628, 6601, 6628, 5792,
  /* 4230 */ 5792, 5792, 6299, 5792, 6214, 6375, 5792, 5792, 5792, 6300, 5792, 6377, 5792, 5792, 5839, 5841, 6509, 6146,
  /* 4248 */ 5792, 6146, 5792, 5792, 6841, 5792, 5792, 6871, 6316, 5924, 5924, 5792, 5792, 5843, 5792, 5792, 5792, 5801,
  /* 4266 */ 5792, 6153, 6868, 5792, 5792, 5792, 6626, 5792, 5948, 6214, 6531, 6283, 5955, 5792, 5792, 6060, 5838, 5792,
  /* 4284 */ 5792, 5792, 6280, 5792, 6604, 6704, 6604, 6715, 5792, 6384, 5792, 5810, 5792, 5793, 5798, 5792, 5793, 5844,
  /* 4302 */ 6590, 6434, 5792, 5855, 6241, 5792, 5792, 5792, 6723, 6412, 6722, 6187, 6186, 6383, 6187, 6388, 6388, 6388,
  /* 4320 */ 6388, 6390, 6396, 6395, 6392, 6395, 6394, 6399, 6398, 6399, 6399, 6399, 6399, 6398, 6400, 6401, 6401, 6401,
  /* 4338 */ 6401, 6330, 6770, 6310, 6776, 5960, 5814, 5967, 5792, 6403, 5792, 5792, 5856, 6079, 5823, 5792, 5792, 5792,
  /* 4356 */ 6329, 5792, 5792, 6070, 5792, 5792, 6405, 6418, 5792, 5802, 6407, 6408, 5792, 5792, 5792, 6342, 5792, 5792,
  /* 4374 */ 5792, 5951, 5841, 6214, 6761, 6411, 5792, 5792, 5921, 6791, 5792, 6317, 6319, 6321, 5792, 6238, 6704, 5792,
  /* 4392 */ 5793, 5951, 5942, 6379, 5845, 6771, 6845, 6089, 5792, 5792, 6506, 5792, 5792, 5792, 6357, 6079, 6414, 6481,
  /* 4410 */ 6597, 5792, 5792, 5792, 6650, 6429, 6231, 6064, 6198, 6048, 6048, 5792, 5792, 5792, 6359, 5948, 6426, 6428,
  /* 4428 */ 6591, 6757, 6596, 6658, 6049, 5792, 5793, 5951, 6585, 5792, 5792, 5792, 6575, 6153, 6791, 5792, 5792, 6146,
  /* 4446 */ 5792, 6592, 5842, 5792, 5793, 5952, 5792, 5793, 6634, 5918, 6715, 5792, 5925, 6758, 5792, 5810, 5792, 5795,
  /* 4464 */ 5813, 6053, 5913, 6591, 6616, 6247, 5955, 5792, 6050, 6224, 6360, 5841, 6369, 6251, 6056, 6056, 6617, 6716,
  /* 4482 */ 5792, 5792, 5792, 6626, 5947, 5792, 5792, 5792, 6442, 5792, 5792, 5925, 5944, 5792, 6360, 5841, 6369, 6591,
  /* 4500 */ 5940, 6629, 5792, 5792, 5792, 6645, 6577, 6626, 5947, 5792, 6330, 6364, 6315, 6719, 5792, 6384, 5792, 5792,
  /* 4518 */ 5925, 5925, 5792, 6360, 5948, 5922, 6056, 6247, 5955, 5792, 6647, 5792, 5792, 6699, 5838, 5952, 5792, 5792,
  /* 4536 */ 5792, 6316, 5792, 5792, 5792, 5792, 5793, 5951, 5935, 5792, 5792, 5792, 5795, 5792, 5792, 5792, 5796, 5792,
  /* 4554 */ 5792, 5792, 5797, 6361, 6635, 6583, 5922, 6083, 5955, 5792, 5842, 6770, 6148, 6089, 6092, 6094, 6096, 6525,
  /* 4572 */ 6591, 5792, 5792, 5932, 5944, 5842, 6310, 5807, 5792, 5795, 6415, 6636, 5792, 6583, 6213, 6220, 6617, 6696,
  /* 4590 */ 6409, 5955, 5792, 6695, 5792, 5792, 6768, 6515, 6768, 6696, 5792, 5792, 5950, 6050, 5795, 6224, 6437, 6444,
  /* 4608 */ 6653, 6450, 6446, 6450, 6450, 6449, 6450, 6451, 6447, 6450, 6451, 6450, 6452, 6454, 6456, 6455, 6455, 6455,
  /* 4626 */ 6458, 6459, 6459, 6463, 6466, 6461, 6459, 6459, 6459, 6461, 6460, 6459, 6468, 6468, 6465, 6468, 6468, 6468,
  /* 4644 */ 6468, 6468, 6466, 6465, 6464, 6468, 6468, 5792, 5792, 5947, 5792, 6771, 6776, 6758, 5792, 6470, 5792, 5795,
  /* 4662 */ 6529, 5935, 5792, 6025, 6472, 5792, 5795, 6735, 6732, 6238, 6051, 5792, 6474, 5792, 6476, 6200, 5792, 6478,
  /* 4680 */ 5792, 5795, 6865, 6341, 6328, 5792, 6587, 5792, 5792, 5792, 6433, 6491, 5792, 5792, 5792, 6442, 5792, 6322,
  /* 4698 */ 6494, 6496, 5792, 6323, 6495, 6497, 5811, 5948, 6500, 6378, 6060, 5792, 6274, 6776, 5792, 5797, 6361, 6858,
  /* 4716 */ 6860, 6610, 5792, 5792, 5802, 5961, 6435, 6587, 5792, 6615, 5792, 5792, 5792, 6325, 5792, 6788, 6503, 6061,
  /* 4734 */ 6079, 5792, 5834, 5792, 5792, 5792, 6511, 6356, 6349, 6062, 6232, 6773, 6587, 5840, 6348, 6350, 6221, 6772,
  /* 4752 */ 6586, 5792, 5792, 5947, 5922, 6592, 5792, 6787, 5808, 5792, 5792, 5951, 6857, 6524, 6730, 6223, 6147, 6773,
  /* 4770 */ 5792, 5792, 5792, 6514, 6326, 6225, 6772, 5935, 5793, 6524, 6324, 6223, 5811, 5948, 6220, 6617, 5833, 5792,
  /* 4788 */ 5792, 5792, 6515, 5792, 5792, 5792, 5789, 5792, 6346, 6583, 6730, 6315, 5789, 5792, 6278, 5792, 6278, 6207,
  /* 4806 */ 6379, 5792, 5792, 5792, 6571, 6060, 5792, 5792, 5793, 5809, 6348, 6601, 6435, 5807, 5792, 6789, 5792, 6342,
  /* 4824 */ 6359, 6529, 6596, 5935, 5792, 5792, 5952, 5792, 5792, 5793, 5951, 6596, 5935, 5792, 6060, 5792, 5792, 6043,
  /* 4842 */ 6329, 6359, 6529, 5935, 5792, 5799, 5792, 6770, 5935, 5792, 5792, 5792, 6758, 5792, 5792, 5792, 6060, 5792,
  /* 4860 */ 6089, 5792, 5955, 5792, 5796, 5792, 6758, 5792, 6626, 5792, 5810, 5792, 6089, 5953, 5792, 5806, 5810, 5792,
  /* 4878 */ 5792, 6600, 6221, 5845, 5792, 5792, 5792, 6580, 5792, 6581, 6535, 6197, 6776, 5792, 6656, 6384, 5792, 5792,
  /* 4896 */ 6274, 5792, 5792, 5951, 5948, 6214, 6238, 6438, 6047, 6540, 6539, 6298, 6541, 5914, 5914, 5914, 5914, 6543,
  /* 4914 */ 5914, 5914, 6543, 5915, 5916, 6546, 5937, 6553, 6549, 6552, 6550, 6555, 6562, 6562, 6562, 6562, 6557, 6557,
  /* 4932 */ 6558, 6559, 6561, 6562, 6563, 6564, 6564, 6564, 6564, 6564, 6565, 6566, 6565, 6605, 5792, 5792, 5792, 6583,
  /* 4950 */ 5936, 5792, 5792, 5792, 6589, 5792, 6570, 5792, 5952, 5843, 6703, 5792, 5807, 5953, 5792, 5792, 6311, 5792,
  /* 4968 */ 5792, 6574, 6579, 5792, 5811, 6514, 6218, 5792, 6852, 6309, 5792, 5813, 5792, 5792, 6359, 6527, 5792, 6777,
  /* 4986 */ 6316, 5792, 5813, 6053, 5792, 5826, 6355, 5964, 5792, 6607, 6609, 5792, 5842, 6661, 5792, 5843, 6703, 6228,
  /* 5004 */ 5792, 6785, 5792, 5792, 6077, 6082, 6786, 5792, 5792, 6786, 6213, 5918, 6742, 5805, 5792, 5792, 5792, 6055,
  /* 5022 */ 6354, 5792, 6226, 5792, 5792, 6090, 6630, 5952, 6623, 5801, 6853, 6582, 6341, 6859, 6861, 6145, 5792, 6144,
  /* 5040 */ 5792, 6144, 5792, 6145, 5792, 5792, 6151, 5792, 5792, 6310, 6050, 5792, 5792, 6158, 6143, 6582, 6341, 6636,
  /* 5058 */ 6576, 6484, 6361, 6635, 6078, 6247, 6620, 5955, 5792, 6639, 6228, 5792, 5855, 5792, 6241, 5924, 5792, 6576,
  /* 5076 */ 6484, 6621, 5792, 5792, 5792, 6593, 6293, 5792, 6050, 5792, 6050, 5792, 5792, 5842, 5792, 6241, 6531, 6283,
  /* 5094 */ 5792, 6580, 6515, 6791, 5807, 6656, 6537, 5792, 6602, 5789, 5792, 5792, 6626, 5792, 5794, 6328, 6078, 6247,
  /* 5112 */ 6620, 5792, 6050, 6050, 6050, 5792, 5792, 6164, 5792, 5804, 5955, 5792, 5792, 6213, 6189, 5923, 6232, 5792,
  /* 5130 */ 6631, 6043, 5792, 5792, 6770, 6645, 6386, 5805, 5792, 6328, 6576, 6629, 5792, 6153, 6576, 5805, 5792, 5792,
  /* 5148 */ 6213, 6196, 6221, 5940, 5792, 6433, 5792, 5792, 5792, 6600, 5792, 5792, 6575, 6577, 5955, 5792, 5792, 6217,
  /* 5166 */ 6237, 5792, 6316, 6316, 6316, 5792, 5792, 6571, 6659, 5792, 5792, 5792, 6602, 6059, 5955, 5792, 5792, 6241,
  /* 5184 */ 6222, 6571, 6060, 5792, 6146, 6704, 5792, 6571, 6060, 5792, 6571, 5792, 5792, 5792, 6506, 6052, 6060, 6571,
  /* 5202 */ 6060, 6571, 5792, 5792, 6511, 5792, 5808, 5792, 5797, 6608, 6610, 6060, 6699, 6699, 6699, 6431, 6431, 6431,
  /* 5220 */ 6431, 5792, 5792, 6241, 6601, 6769, 6058, 6617, 5792, 5792, 5792, 6415, 6328, 5855, 5952, 5792, 5792, 6243,
  /* 5238 */ 6243, 6243, 5792, 6650, 6842, 5792, 5792, 6244, 5792, 6842, 5792, 5801, 5792, 5792, 5792, 5810, 5792, 5792,
  /* 5256 */ 5792, 5811, 5792, 5792, 6652, 6655, 5792, 6626, 6486, 6652, 5792, 5792, 5792, 6603, 6043, 5792, 6314, 6043,
  /* 5274 */ 5792, 6656, 5792, 5792, 6656, 5792, 6854, 6239, 5957, 5957, 5958, 5957, 5957, 6667, 5957, 6669, 6668, 6669,
  /* 5292 */ 6663, 6665, 6666, 6671, 6072, 6671, 6673, 6678, 6678, 6684, 6687, 6676, 6676, 6675, 6680, 6677, 6682, 6678,
  /* 5310 */ 6682, 6687, 6686, 6685, 6689, 6689, 6686, 6689, 6689, 6689, 6689, 6689, 6690, 6693, 6692, 5792, 5792, 6278,
  /* 5328 */ 5792, 5792, 5792, 6192, 5792, 6698, 5792, 5955, 6080, 6784, 5792, 6180, 6075, 6702, 5792, 6183, 6420, 6707,
  /* 5346 */ 5792, 5792, 6297, 5792, 5792, 6492, 6711, 5792, 5855, 6356, 5792, 5922, 5792, 5792, 5945, 5792, 5792, 6710,
  /* 5364 */ 5955, 5792, 5925, 5792, 5792, 5792, 6592, 6713, 5792, 6498, 6714, 5792, 6596, 6060, 5792, 5792, 6318, 6320,
  /* 5382 */ 6592, 5792, 6845, 5929, 5797, 5792, 5792, 5792, 6626, 5792, 6721, 5792, 5792, 6354, 6484, 6729, 6328, 6725,
  /* 5400 */ 6436, 6619, 6621, 5792, 5792, 5795, 6729, 6328, 6155, 6154, 6057, 6618, 6620, 6592, 5792, 6845, 5792, 6314,
  /* 5418 */ 6246, 5948, 6328, 6738, 6057, 6423, 6620, 5955, 5792, 5792, 5919, 6741, 6211, 6484, 6734, 5948, 6328, 6740,
  /* 5436 */ 6547, 5792, 6547, 5792, 5925, 6592, 5792, 5792, 5792, 6240, 6592, 6845, 5792, 5792, 5792, 6233, 6233, 5792,
  /* 5454 */ 6209, 5792, 5792, 5792, 6614, 6734, 5948, 6328, 6315, 6056, 6211, 6620, 5955, 5940, 6211, 6620, 5955, 5925,
  /* 5472 */ 5944, 5925, 5944, 5792, 5792, 5792, 6597, 5792, 6650, 6536, 5792, 5843, 5792, 6313, 6051, 6532, 6629, 6051,
  /* 5490 */ 5940, 6533, 5805, 5792, 6734, 6736, 6315, 6052, 6532, 6629, 5955, 5792, 6241, 6536, 5792, 5925, 6626, 5792,
  /* 5508 */ 5842, 5792, 5792, 6514, 6769, 5843, 6869, 6316, 5792, 5855, 5792, 6342, 5792, 6342, 6311, 5792, 5792, 6749,
  /* 5526 */ 5813, 5963, 5807, 5792, 5792, 6311, 5792, 5843, 5792, 6146, 5940, 5813, 5807, 5792, 5792, 6359, 6214, 6360,
  /* 5544 */ 6753, 5807, 5925, 5925, 5792, 5792, 6359, 6427, 6429, 5813, 6310, 5792, 5792, 5792, 6657, 5811, 5792, 5792,
  /* 5562 */ 5811, 5801, 5792, 6587, 5792, 6789, 5792, 5933, 5792, 5932, 6763, 6789, 5792, 5792, 6360, 6751, 6790, 5837,
  /* 5580 */ 5792, 6766, 6767, 6780, 6770, 6779, 6327, 6770, 6156, 6190, 6782, 6794, 6795, 6783, 6799, 6798, 6801, 6782,
  /* 5598 */ 6783, 6798, 6797, 6799, 6803, 6804, 6806, 6808, 6806, 6815, 6815, 6813, 6810, 6813, 6812, 6814, 6825, 6815,
  /* 5616 */ 6825, 6815, 6816, 6817, 6819, 6818, 6820, 6819, 6818, 6827, 6818, 6821, 6822, 6829, 6822, 6823, 6834, 6831,
  /* 5634 */ 6833, 6836, 6837, 6839, 6572, 5792, 5952, 5792, 5947, 6381, 6704, 5792, 6139, 6704, 5792, 5949, 5792, 5944,
  /* 5652 */ 5792, 6172, 5792, 5792, 6363, 6601, 6628, 6019, 6844, 5792, 5792, 6365, 5792, 5808, 6848, 6310, 5792, 5801,
  /* 5670 */ 5792, 6309, 6233, 6847, 6849, 5792, 5792, 6422, 5792, 6847, 6849, 6580, 5792, 5792, 5792, 6043, 5792, 5792,
  /* 5688 */ 5792, 6050, 5792, 6295, 5792, 5792, 5792, 6699, 5792, 5795, 6856, 6416, 6507, 5792, 6863, 6310, 5792, 5792,
  /* 5706 */ 5811, 5789, 6311, 5792, 6342, 5792, 5792, 6356, 5792, 5792, 5792, 6167, 5792, 5792, 6243, 6592, 5792, 5792,
  /* 5724 */ 5793, 6305, 5926, 6339, 6514, 6218, 6310, 5792, 6328, 6507, 5792, 5792, 5792, 6703, 5792, 5792, 5792, 6146,
  /* 5742 */ 5792, 5792, 5924, 5792, 6755, 6867, 6434, 6235, 6514, 5962, 5792, 5792, 6341, 6328, 6310, 5792, 5951, 6584,
  /* 5760 */ 6873, 5792, 5792, 6584, 6342, 5792, 5792, 6342, 6356, 6512, 6341, 5792, 5792, 5792, 6704, 5792, 5795, 6512,
  /* 5778 */ 5855, 5792, 5792, 5792, 6791, 5792, 5795, 5800, 6513, 6590, 8, 262144, 0, -872415232, 0, 0, 1, 0, 2, 0, 3,
  /* 5799 */ 0, 4, 16, 0, 5, 1048576, 1073741824, 0x80000000, 1073741824, 0, 6, 8, 0, 8, 8, 16, 16, 17, 20, 16, 20, 48,
  /* 5821 */ 16, 28, 0, 9, 4456448, 1075838976, 2097152, 0x80000000, 4194560, 4196352, -2143289344, -2143289344,
  /* 5833 */ 4194304, 0, 13, 270532608, 2097152, 1024, 0, 15, 16, 32, 0, 16, 64, 0, 24, 560, 4198144, 4196352,
  /* 5851 */ 276901888, 8540160, 4194304, 4194304, 128, 0, 28, 16, 80, 528, 528, 8425488, 4194304, 4194432, 742391808,
  /* 5866 */ 239075328, -1405091840, 742391808, 742391808, 775946240, 775946240, -1405091840, -1371537408, 775946240,
  /* 5875 */ -1371537408, 775946240, 171966464, 171966464, 775946240, 4718592, 775946240, 239075328, 239075328, 64,
  /* 5885 */ 4718592, 2097216, 4720640, 4718848, 541589504, 4194368, -2143285440, 4194400, 4194368, 4194368, 541065280,
  /* 5896 */ 4718848, -2143289280, -2143285408, 775946336, 775946304, 776470528, -2143285408, -2143285408, -2109730976,
  /* 5905 */ 775946304, 775946304, -2109730976, -1908404384, -1908404384, 1536, 524288, 96, 384, 512, 512, 513, 512,
  /* 5918 */ 1024, 4096, 24576, 0, 384, 8192, 65536, 0, 512, 5120, 8192, 98304, 0, 520, 0, 576, 16777216, 100663296, 0,
  /* 5937 */ 768, 536874624, 64, 524288, 1048576, 128, 4194304, 16777216, 0, 29, 0, 32, 64, 2, 2, 4, 0, 0x80000000,
  /* 5955 */ 0x80000000, 0, -2046820352, -2046820352, -2046820348, 2, 16, 4096, 524288, 268435456, 4194432, 3145728, 2,
  /* 5968 */ 536936448, 524304, 1048592, 16, 262160, 16, 536936448, 3145744, 1048592, 2097168, 2097168, 268435472, 48,
  /* 5981 */ 3146256, 2097552, 3146256, 2, 2098064, 163577856, 17, 21, 112, 1049104, 2228784, -161429676, -161429676,
  /* 5994 */ -161430188, -161429680, -161430188, -161430188, -161429676, -160905388, -161298572, -161298576, -161429675,
  /* 6003 */ -161349072, -161429675, -161349072, -161349072, -161347728, -161347728, -160299088, -161298576, -160299084,
  /* 6012 */ -161298572, -161298572, -160774288, -160774284, -161298572, -160774284, -161298572, 16, 248320, 84, 20,
  /* 6023 */ 560, 628, 21, 266240, 53, 146804757, 146812949, 146862101, -161429676, 146863389, 146863389, 148960541,
  /* 6035 */ -161429740, 146863421, 148960541, -161429676, 148960541, -18860267, -18729163, -1073741824, 0, 8192,
  /* 6045 */ 229376, 4194304, 25165824, 33554432, -1946157056, 0, 16384, 131072, 524288, 1073741824, 32768, 131072,
  /* 6057 */ 1048576, 2097152, 4194304, 33554432, 0, 20480, 65536, 1048576, 4194304, 37748736, 541065216, 541065216,
  /* 6069 */ -2143289344, 142606336, 0, 24579, -2147459069, 243269632, 0, 24610, 1, 32768, 6291456, 0, 25090, 131328,
  /* 6083 */ 131072, 33554432, 1024, 98304, 0, 1073741825, 0, 1073741824, 1073741824, 2621440, 1073741824, 8, 16777216,
  /* 6096 */ 1073774592, 1226014816, 100665361, 100665360, 100665360, -2046818288, 1091799136, -2044196848, 1091799136,
  /* 6105 */ 1091799136, 1091803360, 1091799136, 1158908000, 1158908001, 1192462432, 1192462448, 1192462448, 1200851056,
  /* 6114 */ 1200851056, 1200851057, 1091799393, 1200851056, 1192462448, 1870638912, 1870638912, 1870655296, 1870638912,
  /* 6123 */ 1870655296, 1870655296, 1870655313, 1870638928, 1870655317, 1870655317, 1870655312, 1870655317, 1879043957,
  /* 6132 */ 1870655349, 1870655317, 1870655312, 1879027568, 1879043952, 1879043952, 131328, 0, 34816, 1048576,
  /* 6142 */ 1224736768, 1090519040, 0, 49152, 0, 65536, 524288, 536870912, 9216, 0, 3072, 0, 4096, 679936, 1048576,
  /* 6157 */ 8200, 235712, 0, 81920, 0, 1157627904, 1191182336, 0, 82432, 231744, 0, 98304, 503616, 7864320, 1862270976,
  /* 6172 */ 0, 117248, 0, 1862270976, 1862270976, 64, 98304, 83886080, 117440512, 0, 164096, 0, 25122, 3584, 8192,
  /* 6187 */ 1049088, 1049088, 1536, 2048, 201361408, 64, 65536, 2097152, 16777216, 1536, 8192, 8388608, 16777216,
  /* 6200 */ 134217728, 268288, 2097152, 1073741824, 67108864, 1073741824, 1536, 65536, 4194304, 67108864, 0x80000000,
  /* 6211 */ 2097152, 67108864, 64, 256, 1024, 2097152, 8388608, 4096, 32768, 32768, 65536, 262144, 2048, 16384, 16384,
  /* 6226 */ 65536, 393216, 524288, 16384, 98304, 131072, 262144, 524288, 524288, 64, 128, 4096, 4096, 8192, 24578, 0,
  /* 6242 */ 256, 512, 0, 300, 9216, 33554432, 134217728, 1073741824, 9476, 512, 8192, 8392704, 9476, 134218240, 512,
  /* 6257 */ 1275208192, 541065224, 4194312, 4194312, 4194344, -869654016, -869654016, 4203820, 1279402504, 1279402504,
  /* 6267 */ 2143549415, 2143549415, 2143549423, 2143549415, 2143549423, 2143549423, 260, 512, 131072, 139264,
  /* 6277 */ 1275068416, 0, 262144, 8, 4194304, 251658240, 536870912, 1073741824, 4203520, 0, 296960, 520, 4333568, 0,
  /* 6291 */ 1275068416, 999, 29619200, 2113929216, 0, 301056, 0, 458752, 256, 1536, 1792, 1007, 1007, 1, 102, 384, 110,
  /* 6308 */ 110, 0, 524288, 0, 128, 2048, 8192, 8192, 16384, 0, 59, 140224, 5505024, -1887436800, 0, 63, 192, 1024,
  /* 6326 */ 1024, 2048, 2048, 4096, 0, 64, 32, 96, 0, 96, 64, 64, 96, 96, 128, 128, 256, 0, 104, 104, 1, 6, 32, 192,
  /* 6350 */ 3072, 20480, 6, 96, 524288, 2097152, 2097152, 0, 12, 1, 2, 8, 128, 4, 256, 3584, 0, 229440, 4, 64, 384,
  /* 6371 */ 25165824, 268435456, 65536, 16777216, 65536, 268435456, 256, 65536, 8388608, 100663296, 32, 4100,
  /* 6383 */ 270532608, 0, 1048576, 33554432, 268435456, 12845065, 12845065, 147193865, 5505537, 5591557, 5587465,
  /* 6394 */ 5591557, 5587457, 5587457, 147202057, 81003049, 13894153, 13894153, -1881791493, -1881791493, 2097152,
  /* 6404 */ 268435456, 1, 5505024, 86528, 9, 8388608, 268435456, 75497472, 0, 1049088, 1, 8, 256, 6144, 0, 139264, 0,
  /* 6421 */ 156162, 40, 67108864, 134217728, 536870912, 2, 56, 64, 896, 8192, 33554432, 33554432, 67108864, 16384,
  /* 6435 */ 262144, 2097152, 33554432, 16384, 229376, 25165824, 100663296, 8, 8388608, 1048576, 537002496, 136581141,
  /* 6447 */ 136646677, 144969749, 170135573, 136581141, 136581141, 136581205, 136583189, 136581143, 138694680,
  /* 6456 */ 138694680, 170135575, 140791836, 140791837, 140791837, 140791901, 140791837, 140793885, 250436735,
  /* 6465 */ 250436735, 250436863, 250436735, 250436863, 250436863, 131584, 536870912, 2097152, 134217728, 331776,
  /* 6475 */ 167772160, 10485760, 134217728, 23, 0, 1050624, 262144, 4194304, 117440512, 134217728, 268435456,
  /* 6486 */ 536870912, 98304, 393216, 24, 282624, 284672, 0, 1210494, 64, 351232, 15204352, 234881024, 0, 1735294, 256,
  /* 6501 */ 32768, 8388608, 7, 0, 2621440, 0, 32768, 524288, 64, 3072, 1, 4, 32, 256, 2048, 0, 48, 2097680, 1048592,
  /* 6520 */ 2097168, 16, 528, 1, 14, 32, 384, 4, 4194304, 4, 128, 4096, 1048576, 67108864, 268435456, 1, 2048,
  /* 6537 */ 268435456, 0x80000000, -2147479552, 536871936, 536871936, 536872064, 1073742336, 512, 2760704, 515, 512,
  /* 6548 */ 16777216, 536874628, 536874644, 536874644, 536874628, 536874628, -2147478784, 603983492, 537398932,
  /* 6557 */ 536872576, 536872576, 536872577, 536872576, 536872579, 536888960, 536888960, -94330997, -94330997,
  /* 6566 */ -94314613, -94314613, 3, 2048, 3712, 0, 4194304, 268435456, 4864, 0, 6291456, 33554432, 1073741824, 3728,
  /* 6580 */ 0, 8388608, 3, 8, 32, 128, 100663296, 134217728, 0, 1536, 1024, 8192, 131072, 0, 999, 259072, 4194304,
  /* 6597 */ 8388608, 0, 1007, 0, 1024, 65536, 131072, 32768, 0, 1152, 3, 8072, 39878656, -134217728, 0, 9437184, 2, 32,
  /* 6615 */ 512, 1048576, 8388608, 33554432, 201326592, 268435456, 1610612736, 0x80000000, 4608, 0, 16252928, 0,
  /* 6627 */ 131072, 16777216, 268435456, 1073741824, 8388608, 2048, 100663296, 2, 256, 7168, 32768, 100663296, 16,
  /* 6640 */ 67108864, 402653184, 1610612736, 0, 520000, 4096, 6291456, 65536, 67108864, 536870912, 256, 262144, 32,
  /* 6653 */ 16384, 4210696, 132096, 0, 16777216, 16777216, 33554432, 0x80000000, 537001984, 8486912, -2046820352,
  /* 6664 */ -1509818368, -2046820352, 24579, -2046820352, -2046820320, -2046820352, -1778382848, 24579, 24579,
  /* 6673 */ -2097126910, -2097126910, -2046795742, -2046795774, -2046795774, -2030018046, -2030018046, -2046795774,
  /* 6681 */ -1778358270, -2097126878, -2030018046, -1493016062, -30246786, -30246786, -29722498, -30246786, -29722498,
  /* 6690 */ -29722498, -13469058, -29722498, -12944770, -12944770, 369098752, 0, 16785408, 637534208, 0, 33554432,
  /* 6701 */ 402653184, 26626, 0, 67108864, 0, 231488, 654311424, 0, 100663296, 1734782, 2116026368, 0x80000000,
  /* 6713 */ 1211006, 2132803584, 0, 134217728, 0x80000000, 4, 32768, 134217728, 155648, 0, 134348800, 134348800,
  /* 6725 */ 155648, 1048576, 150994944, 2, 60, 64, 1024, 64, 2048, 2, 28, 32, 2048, 24576, 131072, 24576, 655360,
  /* 6742 */ 1048576, 536870912, 28, 2048, 2, 24, 2048, 256, 268435456, 16, 268435456, 16, 524288, 1, 16, 262144,
  /* 6758 */ 1048576, 0, 40, 0, 41, 18874368, 0, 159383552, 136314880, 274726912, 0, 268435456, 0, 2048, 524288,
  /* 6773 */ 14680064, 100663296, 402653184, 536870912, 0, 1664, 274726912, 132, 132, 50331648, 184549376, 50331648, 0,
  /* 6786 */ 39895040, 0, 10485760, 0, 2097152, 8192, 0, 44, 50331648, 50331648, 52428800, 50331904, 184549376,
  /* 6799 */ 184549376, 186646528, 184549440, 184549376, 50331780, 201443328, 50331780, 201443856, 201443856, 201574928,
  /* 6809 */ 201706000, 251693056, 253790208, 251693120, 251693056, 251693056, 251955200, 251955200, 254052352, 563686,
  /* 6819 */ 563686, 2660838, 563686, 11049446, 11049446, 78158310, 254052352, 251955200, 2660838, 2660838, 187210214,
  /* 6830 */ 11049446, 145267174, 185113062, 187210214, 145267174, 11049446, 187210214, 254581222, 254581222, 195598822,
  /* 6840 */ 262969830, 116736, 0, 268437504, 379392, 0, 536870912, 6, 480, 38912, 524288, 114688, 0, 603979776, 0,
  /* 6855 */ 8486912, 4, 224, 256, 7680, 32768, 39845888, -134217728, 6144, 32768, 4, 96, 64, 8192, 67108864, 524288, 1,
  /* 6872 */ 8192, 256, 524288
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

// End
