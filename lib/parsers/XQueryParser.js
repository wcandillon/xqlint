// This file was generated on Thu Jul 30, 2015 21:19 (UTC+01) by REx v5.35 which is Copyright (c) 1979-2015 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Module();
    shift(24);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 196:                       // 'xquery'
      lookahead2W(129);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 28100                 // 'xquery' 'encoding'
     || lk == 49348)                // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 143:                       // 'module'
      lookahead2W(126);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 37007:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(196);                     // 'xquery'
    lookahead1W(80);                // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 109:                       // 'encoding'
      shift(109);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(4);                     // StringLiteral
      break;
    default:
      shift(192);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(4);                     // StringLiteral
      lookahead1W(74);              // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 109)                // 'encoding'
      {
        shift(109);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(4);                   // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(93);                // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(143);                     // 'module'
    lookahead1W(48);                // S^WS | '(:' | 'namespace'
    shift(144);                     // 'namespace'
    lookahead1W(122);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    shift(59);                      // '='
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(172);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      switch (l1)
      {
      case 96:                      // 'declare'
        lookahead2W(133);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'base-uri' |
                                    // 'boundary-space' | 'cast' | 'castable' | 'construction' | 'context' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'to' |
                                    // 'treat' | 'union' | 'variable' | '|' | '||'
        break;
      case 127:                     // 'import'
        lookahead2W(130);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' | 'schema' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 20576               // 'declare' 'base-uri'
       && lk != 20832               // 'declare' 'boundary-space'
       && lk != 23136               // 'declare' 'construction'
       && lk != 23648               // 'declare' 'copy-namespaces'
       && lk != 24160               // 'declare' 'decimal-format'
       && lk != 24928               // 'declare' 'default'
       && lk != 36735               // 'import' 'module'
       && lk != 36960               // 'declare' 'namespace'
       && lk != 40288               // 'declare' 'ordering'
       && lk != 43391)              // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 96:                      // 'declare'
        lookahead2W(113);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering'
        break;
      default:
        lk = l1;
      }
      if (lk == 24928)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 36960:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 127:                     // 'import'
        whitespace();
        parse_Import();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(172);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      switch (l1)
      {
      case 96:                      // 'declare'
        lookahead2W(132);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'context' | 'div' | 'eq' | 'except' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' |
                                    // 'option' | 'or' | 'to' | 'treat' | 'union' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 8032                // 'declare' '%'
       && lk != 23392               // 'declare' 'context'
       && lk != 30560               // 'declare' 'function'
       && lk != 39264               // 'declare' 'option'
       && lk != 48992)              // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 96:                      // 'declare'
        lookahead2W(109);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 23392:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 39264:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(51);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 96:                        // 'declare'
      lookahead2W(112);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering'
      break;
    default:
      lk = l1;
    }
    if (lk == 24928)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -8;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 20832:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 20576:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 23136:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 40288:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 23648:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'boundary-space'
    shift(81);                      // 'boundary-space'
    lookahead1W(88);                // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 164:                       // 'preserve'
      shift(164);                   // 'preserve'
      break;
    default:
      shift(178);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'default'
    shift(97);                      // 'default'
    lookahead1W(36);                // S^WS | '(:' | 'collation'
    shift(88);                      // 'collation'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(96);                     // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'default'
    shiftT(97);                     // 'default'
    lookahead1W(36);                // S^WS | '(:' | 'collation'
    shiftT(88);                     // 'collation'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(31);                // S^WS | '(:' | 'base-uri'
    shift(80);                      // 'base-uri'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(37);                // S^WS | '(:' | 'construction'
    shift(90);                      // 'construction'
    lookahead1W(88);                // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 178:                       // 'strip'
      shift(178);                   // 'strip'
      break;
    default:
      shift(164);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ordering'
    shift(157);                     // 'ordering'
    lookahead1W(87);                // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 156:                       // 'ordered'
      shift(156);                   // 'ordered'
      break;
    default:
      shift(189);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'default'
    shift(97);                      // 'default'
    lookahead1W(51);                // S^WS | '(:' | 'order'
    shift(155);                     // 'order'
    lookahead1W(43);                // S^WS | '(:' | 'empty'
    shift(107);                     // 'empty'
    lookahead1W(82);                // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 121:                       // 'greatest'
      shift(121);                   // 'greatest'
      break;
    default:
      shift(137);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(96);                     // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'default'
    shiftT(97);                     // 'default'
    lookahead1W(51);                // S^WS | '(:' | 'order'
    shiftT(155);                    // 'order'
    lookahead1W(43);                // S^WS | '(:' | 'empty'
    shiftT(107);                    // 'empty'
    lookahead1W(82);                // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 121:                       // 'greatest'
      shiftT(121);                  // 'greatest'
      break;
    default:
      shiftT(137);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(39);                // S^WS | '(:' | 'copy-namespaces'
    shift(92);                      // 'copy-namespaces'
    lookahead1W(86);                // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(39);                      // ','
    lookahead1W(83);                // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 164:                       // 'preserve'
      shift(164);                   // 'preserve'
      break;
    default:
      shift(149);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 130:                       // 'inherit'
      shift(130);                   // 'inherit'
      break;
    default:
      shift(148);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(78);                // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 94:                        // 'decimal-format'
      shift(94);                    // 'decimal-format'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      shift(97);                    // 'default'
      lookahead1W(40);              // S^WS | '(:' | 'decimal-format'
      shift(94);                    // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(120);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 51)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(59);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(4);                     // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 95:                        // 'decimal-separator'
      shift(95);                    // 'decimal-separator'
      break;
    case 123:                       // 'grouping-separator'
      shift(123);                   // 'grouping-separator'
      break;
    case 129:                       // 'infinity'
      shift(129);                   // 'infinity'
      break;
    case 141:                       // 'minus-sign'
      shift(141);                   // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      shift(67);                    // 'NaN'
      break;
    case 161:                       // 'percent'
      shift(161);                   // 'percent'
      break;
    case 160:                       // 'per-mille'
      shift(160);                   // 'per-mille'
      break;
    case 197:                       // 'zero-digit'
      shift(197);                   // 'zero-digit'
      break;
    case 101:                       // 'digit'
      shift(101);                   // 'digit'
      break;
    case 159:                       // 'pattern-separator'
      shift(159);                   // 'pattern-separator'
      break;
    default:
      shift(114);                   // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 127:                       // 'import'
      lookahead2W(84);              // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 43391:                     // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(127);                     // 'import'
    lookahead1W(54);                // S^WS | '(:' | 'schema'
    shift(169);                     // 'schema'
    lookahead1W(92);                // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(73);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 78)                   // 'at'
    {
      shift(78);                    // 'at'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(69);            // S^WS | '(:' | ',' | ';'
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 144:                       // 'namespace'
      shift(144);                   // 'namespace'
      lookahead1W(122);             // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(59);                    // '='
      break;
    default:
      shift(97);                    // 'default'
      lookahead1W(42);              // S^WS | '(:' | 'element'
      shift(105);                   // 'element'
      lookahead1W(48);              // S^WS | '(:' | 'namespace'
      shift(144);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(127);                     // 'import'
    lookahead1W(47);                // S^WS | '(:' | 'module'
    shift(143);                     // 'module'
    lookahead1W(60);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 144)                  // 'namespace'
    {
      shift(144);                   // 'namespace'
      lookahead1W(122);             // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(59);                    // '='
    }
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(73);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 78)                   // 'at'
    {
      shift(78);                    // 'at'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(69);            // S^WS | '(:' | ',' | ';'
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'namespace'
    shift(144);                     // 'namespace'
    lookahead1W(122);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    shift(59);                      // '='
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'default'
    shift(97);                      // 'default'
    lookahead1W(79);                // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 105:                       // 'element'
      shift(105);                   // 'element'
      break;
    default:
      shift(119);                   // 'function'
    }
    lookahead1W(48);                // S^WS | '(:' | 'namespace'
    shift(144);                     // 'namespace'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(96);                     // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'default'
    shiftT(97);                     // 'default'
    lookahead1W(79);                // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 105:                       // 'element'
      shiftT(105);                  // 'element'
      break;
    default:
      shiftT(119);                  // 'function'
    }
    lookahead1W(48);                // S^WS | '(:' | 'namespace'
    shiftT(144);                    // 'namespace'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(96);                      // 'declare'
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'function' | 'variable'
      if (l1 != 31)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 191:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(31);                      // '%'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(104);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 33)                   // '('
    {
      shift(33);                    // '('
      lookahead1W(103);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(67);            // S^WS | '(:' | ')' | ','
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(103);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      shift(36);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(31);                     // '%'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_EQName();
    lookahead1W(104);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 33)                   // '('
    {
      shiftT(33);                   // '('
      lookahead1W(103);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(67);            // S^WS | '(:' | ')' | ','
        if (l1 != 39)               // ','
        {
          break;
        }
        shiftT(39);                 // ','
        lookahead1W(103);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      shiftT(36);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(191);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(99);                // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(72);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 50:                        // ':='
      shift(50);                    // ':='
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(115);                   // 'external'
      lookahead1W(70);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 50)                 // ':='
      {
        shift(50);                  // ':='
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(38);                // S^WS | '(:' | 'context'
    shift(91);                      // 'context'
    lookahead1W(46);                // S^WS | '(:' | 'item'
    shift(134);                     // 'item'
    lookahead1W(99);                // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 76)                   // 'as'
    {
      shift(76);                    // 'as'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(72);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 50:                        // ':='
      shift(50);                    // ':='
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(115);                   // 'external'
      lookahead1W(70);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 50)                 // ':='
      {
        shift(50);                  // ':='
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(119);                     // 'function'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(63);                // S^WS | '$' | '(:' | ')'
    if (l1 == 30)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(36);                      // ')'
    lookahead1W(101);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 76)                   // 'as'
    {
      shift(76);                    // 'as'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(81);                // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      shift(115);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(67);              // S^WS | '(:' | ')' | ','
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(67);              // S^WS | '(:' | ')' | ','
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(97);                // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_EQName();
    lookahead1W(97);                // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(96);                      // 'declare'
    lookahead1W(50);                // S^WS | '(:' | 'option'
    shift(153);                     // 'option'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(4);                       // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 118:                       // 'for'
      lookahead2W(154);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' |
                                    // 'union' | 'where' | '|' | '||' | '}'
      break;
    case 184:                       // 'try'
      lookahead2W(151);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 112:                       // 'every'
    case 138:                       // 'let'
    case 174:                       // 'some'
      lookahead2W(149);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                    // '||' | '}'
      break;
    case 126:                       // 'if'
    case 179:                       // 'switch'
    case 187:                       // 'typeswitch'
      lookahead2W(146);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 7798:                      // 'for' '$'
    case 7818:                      // 'let' '$'
    case 44406:                     // 'for' 'sliding'
    case 47478:                     // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 7792:                      // 'every' '$'
    case 7854:                      // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 8627:                      // 'switch' '('
      parse_SwitchExpr();
      break;
    case 8635:                      // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case 8574:                      // 'if' '('
      parse_IfExpr();
      break;
    case 50872:                     // 'try' '{'
      parse_TryCatchExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 118:                       // 'for'
      lookahead2W(154);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' |
                                    // 'union' | 'where' | '|' | '||' | '}'
      break;
    case 184:                       // 'try'
      lookahead2W(151);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 112:                       // 'every'
    case 138:                       // 'let'
    case 174:                       // 'some'
      lookahead2W(149);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                    // '||' | '}'
      break;
    case 126:                       // 'if'
    case 179:                       // 'switch'
    case 187:                       // 'typeswitch'
      lookahead2W(146);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 7798:                      // 'for' '$'
    case 7818:                      // 'let' '$'
    case 44406:                     // 'for' 'sliding'
    case 47478:                     // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 7792:                      // 'every' '$'
    case 7854:                      // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 8627:                      // 'switch' '('
      try_SwitchExpr();
      break;
    case 8635:                      // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case 8574:                      // 'if' '('
      try_IfExpr();
      break;
    case 50872:                     // 'try' '{'
      try_TryCatchExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(114);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 167)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(114);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 167)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 118:                       // 'for'
      lookahead2W(95);              // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 7798:                      // 'for' '$'
      parse_ForClause();
      break;
    case 138:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 118:                       // 'for'
      lookahead2W(95);              // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 7798:                      // 'for' '$'
      try_ForClause();
      break;
    case 138:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 118:                       // 'for'
    case 138:                       // 'let'
      parse_InitialClause();
      break;
    case 194:                       // 'where'
      parse_WhereClause();
      break;
    case 122:                       // 'group'
      parse_GroupByClause();
      break;
    case 93:                        // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 118:                       // 'for'
    case 138:                       // 'let'
      try_InitialClause();
      break;
    case 194:                       // 'where'
      try_WhereClause();
      break;
    case 122:                       // 'group'
      try_GroupByClause();
      break;
    case 93:                        // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    shift(118);                     // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    shiftT(118);                    // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(105);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 71)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(77);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 78)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shift(128);                     // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(105);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 71)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(77);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 78)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shiftT(128);                    // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(71);                      // 'allowing'
    lookahead1W(43);                // S^WS | '(:' | 'empty'
    shift(107);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(71);                     // 'allowing'
    lookahead1W(43);                // S^WS | '(:' | 'empty'
    shiftT(107);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(78);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(78);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(138);                     // 'let'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(138);                    // 'let'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(71);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(50);                      // ':='
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(71);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(50);                     // ':='
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    shift(118);                     // 'for'
    lookahead1W(90);                // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 185:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    shiftT(118);                    // 'for'
    lookahead1W(90);                // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 185:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(185);                     // 'tumbling'
    lookahead1W(57);                // S^WS | '(:' | 'window'
    shift(195);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(75);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shift(128);                     // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 110                   // 'end'
     || l1 == 152)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(185);                    // 'tumbling'
    lookahead1W(57);                // S^WS | '(:' | 'window'
    shiftT(195);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(75);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shiftT(128);                    // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 110                   // 'end'
     || l1 == 152)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(173);                     // 'sliding'
    lookahead1W(57);                // S^WS | '(:' | 'window'
    shift(195);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(75);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shift(128);                     // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(173);                    // 'sliding'
    lookahead1W(57);                // S^WS | '(:' | 'window'
    shiftT(195);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(75);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shiftT(128);                    // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(176);                     // 'start'
    lookahead1W(108);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(56);                // S^WS | '(:' | 'when'
    shift(193);                     // 'when'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(176);                    // 'start'
    lookahead1W(108);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(56);                // S^WS | '(:' | 'when'
    shiftT(193);                    // 'when'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 152)                  // 'only'
    {
      shift(152);                   // 'only'
    }
    lookahead1W(44);                // S^WS | '(:' | 'end'
    shift(110);                     // 'end'
    lookahead1W(108);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(56);                // S^WS | '(:' | 'when'
    shift(193);                     // 'when'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 152)                  // 'only'
    {
      shiftT(152);                  // 'only'
    }
    lookahead1W(44);                // S^WS | '(:' | 'end'
    shiftT(110);                    // 'end'
    lookahead1W(108);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(56);                // S^WS | '(:' | 'when'
    shiftT(193);                    // 'when'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 30)                   // '$'
    {
      shift(30);                    // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(106);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 78)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(102);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 165)                  // 'previous'
    {
      shift(165);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(30);                    // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(85);                // S^WS | '(:' | 'next' | 'when'
    if (l1 == 147)                  // 'next'
    {
      shift(147);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(30);                    // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 30)                   // '$'
    {
      shiftT(30);                   // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(106);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 78)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(102);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 165)                  // 'previous'
    {
      shiftT(165);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(30);                   // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(85);                // S^WS | '(:' | 'next' | 'when'
    if (l1 == 147)                  // 'next'
    {
      shiftT(147);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(30);                   // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(93);                      // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(93);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(194);                     // 'where'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(194);                    // 'where'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(122);                     // 'group'
    lookahead1W(33);                // S^WS | '(:' | 'by'
    shift(82);                      // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(122);                    // 'group'
    lookahead1W(33);                // S^WS | '(:' | 'by'
    shiftT(82);                     // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(116);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(116);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(119);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 50                    // ':='
     || l1 == 76)                   // 'as'
    {
      if (l1 == 76)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      shift(50);                    // ':='
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 88)                   // 'collation'
    {
      shift(88);                    // 'collation'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(119);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 50                    // ':='
     || l1 == 76)                   // 'as'
    {
      if (l1 == 76)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      shiftT(50);                   // ':='
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
    if (l1 == 88)                   // 'collation'
    {
      shiftT(88);                   // 'collation'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 155:                       // 'order'
      shift(155);                   // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shift(82);                    // 'by'
      break;
    default:
      shift(175);                   // 'stable'
      lookahead1W(51);              // S^WS | '(:' | 'order'
      shift(155);                   // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shift(82);                    // 'by'
    }
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 155:                       // 'order'
      shiftT(155);                  // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shiftT(82);                   // 'by'
      break;
    default:
      shiftT(175);                  // 'stable'
      lookahead1W(51);              // S^WS | '(:' | 'order'
      shiftT(155);                  // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shiftT(82);                   // 'by'
    }
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(116);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(116);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 77                    // 'ascending'
     || l1 == 100)                  // 'descending'
    {
      switch (l1)
      {
      case 77:                      // 'ascending'
        shift(77);                  // 'ascending'
        break;
      default:
        shift(100);                 // 'descending'
      }
    }
    lookahead1W(118);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 107)                  // 'empty'
    {
      shift(107);                   // 'empty'
      lookahead1W(82);              // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 121:                     // 'greatest'
        shift(121);                 // 'greatest'
        break;
      default:
        shift(137);                 // 'least'
      }
    }
    lookahead1W(117);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 88)                   // 'collation'
    {
      shift(88);                    // 'collation'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 77                    // 'ascending'
     || l1 == 100)                  // 'descending'
    {
      switch (l1)
      {
      case 77:                      // 'ascending'
        shiftT(77);                 // 'ascending'
        break;
      default:
        shiftT(100);                // 'descending'
      }
    }
    lookahead1W(118);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 107)                  // 'empty'
    {
      shiftT(107);                  // 'empty'
      lookahead1W(82);              // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 121:                     // 'greatest'
        shiftT(121);                // 'greatest'
        break;
      default:
        shiftT(137);                // 'least'
      }
    }
    lookahead1W(117);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 88)                   // 'collation'
    {
      shiftT(88);                   // 'collation'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    shift(167);                     // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    shiftT(167);                    // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 174:                       // 'some'
      shift(174);                   // 'some'
      break;
    default:
      shift(112);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(75);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shift(128);                     // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shift(39);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(30);                    // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(75);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 76)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(45);              // S^WS | '(:' | 'in'
      shift(128);                   // 'in'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    shift(168);                     // 'satisfies'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 174:                       // 'some'
      shiftT(174);                  // 'some'
      break;
    default:
      shiftT(112);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(75);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 76)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(45);                // S^WS | '(:' | 'in'
    shiftT(128);                    // 'in'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 39)                 // ','
      {
        break;
      }
      shiftT(39);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(30);                   // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(75);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 76)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(45);              // S^WS | '(:' | 'in'
      shiftT(128);                  // 'in'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
    shiftT(168);                    // 'satisfies'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(179);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(36);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 83)                 // 'case'
      {
        break;
      }
    }
    shift(97);                      // 'default'
    lookahead1W(53);                // S^WS | '(:' | 'return'
    shift(167);                     // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(179);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(36);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 83)                 // 'case'
      {
        break;
      }
    }
    shiftT(97);                     // 'default'
    lookahead1W(53);                // S^WS | '(:' | 'return'
    shiftT(167);                    // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(83);                    // 'case'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 83)                 // 'case'
      {
        break;
      }
    }
    shift(167);                     // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(83);                   // 'case'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_SwitchCaseOperand();
      if (l1 != 83)                 // 'case'
      {
        break;
      }
    }
    shiftT(167);                    // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(187);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(36);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 83)                 // 'case'
      {
        break;
      }
    }
    shift(97);                      // 'default'
    lookahead1W(64);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 30)                   // '$'
    {
      shift(30);                    // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(53);                // S^WS | '(:' | 'return'
    shift(167);                     // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(187);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(36);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 83)                 // 'case'
      {
        break;
      }
    }
    shiftT(97);                     // 'default'
    lookahead1W(64);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 30)                   // '$'
    {
      shiftT(30);                   // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
    }
    lookahead1W(53);                // S^WS | '(:' | 'return'
    shiftT(167);                    // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(83);                      // 'case'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 == 30)                   // '$'
    {
      shift(30);                    // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(76);                    // 'as'
    }
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    shift(167);                     // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(83);                     // 'case'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 == 30)                   // '$'
    {
      shiftT(30);                   // '$'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(76);                   // 'as'
    }
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceTypeUnion();
    shiftT(167);                    // 'return'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | 'return' | '|'
      if (l1 != 200)                // '|'
      {
        break;
      }
      shift(200);                   // '|'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | 'return' | '|'
      if (l1 != 200)                // '|'
      {
        break;
      }
      shiftT(200);                  // '|'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(126);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(36);                      // ')'
    lookahead1W(55);                // S^WS | '(:' | 'then'
    shift(181);                     // 'then'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    shift(106);                     // 'else'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(126);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(36);                     // ')'
    lookahead1W(55);                // S^WS | '(:' | 'then'
    shiftT(181);                    // 'then'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    shiftT(106);                    // 'else'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(121);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'ascending' | 'case' |
                                    // 'catch' | 'collation' | 'count' | 'default' | 'descending' | 'else' | 'empty' |
                                    // 'end' | 'for' | 'group' | 'let' | 'only' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | '}'
      if (l1 != 86)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(121);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'ascending' | 'case' |
                                    // 'catch' | 'collation' | 'count' | 'default' | 'descending' | 'else' | 'empty' |
                                    // 'end' | 'for' | 'group' | 'let' | 'only' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | '}'
      if (l1 != 86)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(184);                     // 'try'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_TryTargetExpr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(184);                    // 'try'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_TryTargetExpr();
    shiftT(202);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(86);                      // 'catch'
    lookahead1W(161);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(86);                     // 'catch'
    lookahead1W(161);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_CatchErrorList();
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | '{' | '|'
      if (l1 != 200)                // '|'
      {
        break;
      }
      shift(200);                   // '|'
      lookahead1W(161);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | '{' | '|'
      if (l1 != 200)                // '|'
      {
        break;
      }
      shiftT(200);                  // '|'
      lookahead1W(161);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 154)                // 'or'
      {
        break;
      }
      shift(154);                   // 'or'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 154)                // 'or'
      {
        break;
      }
      shiftT(154);                  // 'or'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 74)                 // 'and'
      {
        break;
      }
      shift(74);                    // 'and'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 74)                 // 'and'
      {
        break;
      }
      shiftT(74);                   // 'and'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 26                    // '!='
     || l1 == 52                    // '<'
     || l1 == 56                    // '<<'
     || l1 == 57                    // '<='
     || l1 == 59                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 111                   // 'eq'
     || l1 == 120                   // 'ge'
     || l1 == 124                   // 'gt'
     || l1 == 133                   // 'is'
     || l1 == 136                   // 'le'
     || l1 == 139                   // 'lt'
     || l1 == 146)                  // 'ne'
    {
      switch (l1)
      {
      case 111:                     // 'eq'
      case 120:                     // 'ge'
      case 124:                     // 'gt'
      case 136:                     // 'le'
      case 139:                     // 'lt'
      case 146:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 56:                      // '<<'
      case 63:                      // '>>'
      case 133:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_StringConcatExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_StringConcatExpr();
    if (l1 == 26                    // '!='
     || l1 == 52                    // '<'
     || l1 == 56                    // '<<'
     || l1 == 57                    // '<='
     || l1 == 59                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 111                   // 'eq'
     || l1 == 120                   // 'ge'
     || l1 == 124                   // 'gt'
     || l1 == 133                   // 'is'
     || l1 == 136                   // 'le'
     || l1 == 139                   // 'lt'
     || l1 == 146)                  // 'ne'
    {
      switch (l1)
      {
      case 111:                     // 'eq'
      case 120:                     // 'ge'
      case 124:                     // 'gt'
      case 136:                     // 'le'
      case 139:                     // 'lt'
      case 146:                     // 'ne'
        try_ValueComp();
        break;
      case 56:                      // '<<'
      case 63:                      // '>>'
      case 133:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_StringConcatExpr();
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 201)                // '||'
      {
        break;
      }
      shift(201);                   // '||'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 201)                // '||'
      {
        break;
      }
      shiftT(201);                  // '||'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 182)                  // 'to'
    {
      shift(182);                   // 'to'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 182)                  // 'to'
    {
      shiftT(182);                  // 'to'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 38                  // '+'
       && l1 != 40)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '+'
        shift(38);                  // '+'
        break;
      default:
        shift(40);                  // '-'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 38                  // '+'
       && l1 != 40)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '+'
        shiftT(38);                 // '+'
        break;
      default:
        shiftT(40);                 // '-'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 37                  // '*'
       && l1 != 102                 // 'div'
       && l1 != 125                 // 'idiv'
       && l1 != 142)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 37:                      // '*'
        shift(37);                  // '*'
        break;
      case 102:                     // 'div'
        shift(102);                 // 'div'
        break;
      case 125:                     // 'idiv'
        shift(125);                 // 'idiv'
        break;
      default:
        shift(142);                 // 'mod'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 37                  // '*'
       && l1 != 102                 // 'div'
       && l1 != 125                 // 'idiv'
       && l1 != 142)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 37:                      // '*'
        shiftT(37);                 // '*'
        break;
      case 102:                     // 'div'
        shiftT(102);                // 'div'
        break;
      case 125:                     // 'idiv'
        shiftT(125);                // 'idiv'
        break;
      default:
        shiftT(142);                // 'mod'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 188                 // 'union'
       && l1 != 200)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 188:                     // 'union'
        shift(188);                 // 'union'
        break;
      default:
        shift(200);                 // '|'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 188                 // 'union'
       && l1 != 200)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 188:                     // 'union'
        shiftT(188);                // 'union'
        break;
      default:
        shiftT(200);                // '|'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(134);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'union' | 'where' | '|' | '||' | '}'
      if (l1 != 113                 // 'except'
       && l1 != 132)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 132:                     // 'intersect'
        shift(132);                 // 'intersect'
        break;
      default:
        shift(113);                 // 'except'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(134);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'union' | 'where' | '|' | '||' | '}'
      if (l1 != 113                 // 'except'
       && l1 != 132)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 132:                     // 'intersect'
        shiftT(132);                // 'intersect'
        break;
      default:
        shiftT(113);                // 'except'
      }
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(135);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'union' |
                                    // 'where' | '|' | '||' | '}'
    if (l1 == 131)                  // 'instance'
    {
      shift(131);                   // 'instance'
      lookahead1W(49);              // S^WS | '(:' | 'of'
      shift(151);                   // 'of'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(135);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'union' |
                                    // 'where' | '|' | '||' | '}'
    if (l1 == 131)                  // 'instance'
    {
      shiftT(131);                  // 'instance'
      lookahead1W(49);              // S^WS | '(:' | 'of'
      shiftT(151);                  // 'of'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(136);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 183)                  // 'treat'
    {
      shift(183);                   // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(76);                    // 'as'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(136);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 183)                  // 'treat'
    {
      shiftT(183);                  // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(76);                   // 'as'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(137);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 85)                   // 'castable'
    {
      shift(85);                    // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(76);                    // 'as'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(137);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 85)                   // 'castable'
    {
      shiftT(85);                   // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(76);                   // 'as'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(139);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 84)                   // 'cast'
    {
      shift(84);                    // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(76);                    // 'as'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(139);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 84)                   // 'cast'
    {
      shiftT(84);                   // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(76);                   // 'as'
      lookahead1W(159);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 38                  // '+'
       && l1 != 40)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '-'
        shift(40);                  // '-'
        break;
      default:
        shift(38);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 38                  // '+'
       && l1 != 40)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '-'
        shiftT(40);                 // '-'
        break;
      default:
        shiftT(38);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 190:                       // 'validate'
      lookahead2W(155);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                    // 'lax' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'type' | 'union' |
                                    // 'where' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 34750:                     // 'validate' 'lax'
    case 45502:                     // 'validate' 'strict'
    case 47806:                     // 'validate' 'type'
    case 50878:                     // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 34:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 190:                       // 'validate'
      lookahead2W(155);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                    // 'lax' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'type' | 'union' |
                                    // 'where' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 34750:                     // 'validate' 'lax'
    case 45502:                     // 'validate' 'strict'
    case 47806:                     // 'validate' 'type'
    case 50878:                     // 'validate' '{'
      try_ValidateExpr();
      break;
    case 34:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 59:                        // '='
      shift(59);                    // '='
      break;
    case 26:                        // '!='
      shift(26);                    // '!='
      break;
    case 52:                        // '<'
      shift(52);                    // '<'
      break;
    case 57:                        // '<='
      shift(57);                    // '<='
      break;
    case 61:                        // '>'
      shift(61);                    // '>'
      break;
    default:
      shift(62);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 59:                        // '='
      shiftT(59);                   // '='
      break;
    case 26:                        // '!='
      shiftT(26);                   // '!='
      break;
    case 52:                        // '<'
      shiftT(52);                   // '<'
      break;
    case 57:                        // '<='
      shiftT(57);                   // '<='
      break;
    case 61:                        // '>'
      shiftT(61);                   // '>'
      break;
    default:
      shiftT(62);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 111:                       // 'eq'
      shift(111);                   // 'eq'
      break;
    case 146:                       // 'ne'
      shift(146);                   // 'ne'
      break;
    case 139:                       // 'lt'
      shift(139);                   // 'lt'
      break;
    case 136:                       // 'le'
      shift(136);                   // 'le'
      break;
    case 124:                       // 'gt'
      shift(124);                   // 'gt'
      break;
    default:
      shift(120);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 111:                       // 'eq'
      shiftT(111);                  // 'eq'
      break;
    case 146:                       // 'ne'
      shiftT(146);                  // 'ne'
      break;
    case 139:                       // 'lt'
      shiftT(139);                  // 'lt'
      break;
    case 136:                       // 'le'
      shiftT(136);                  // 'le'
      break;
    case 124:                       // 'gt'
      shiftT(124);                  // 'gt'
      break;
    default:
      shiftT(120);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 133:                       // 'is'
      shift(133);                   // 'is'
      break;
    case 56:                        // '<<'
      shift(56);                    // '<<'
      break;
    default:
      shift(63);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 133:                       // 'is'
      shiftT(133);                  // 'is'
      break;
    case 56:                        // '<<'
      shiftT(56);                   // '<<'
      break;
    default:
      shiftT(63);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(190);                     // 'validate'
    lookahead1W(107);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 198)                  // '{'
    {
      switch (l1)
      {
      case 186:                     // 'type'
        shift(186);                 // 'type'
        lookahead1W(159);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(190);                    // 'validate'
    lookahead1W(107);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 198)                  // '{'
    {
      switch (l1)
      {
      case 186:                     // 'type'
        shiftT(186);                // 'type'
        lookahead1W(159);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 135:                       // 'lax'
      shift(135);                   // 'lax'
      break;
    default:
      shift(177);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 135:                       // 'lax'
      shiftT(135);                  // 'lax'
      break;
    default:
      shiftT(177);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(66);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 34)                 // '(#'
      {
        break;
      }
    }
    shift(198);                     // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(202);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(66);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 34)                 // '(#'
      {
        break;
      }
    }
    shiftT(198);                    // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      try_Expr();
    }
    shiftT(202);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(34);                      // '(#'
    lookahead1(158);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 == 16)                   // S
    {
      shift(16);                    // S
    }
    parse_EQName();
    lookahead1(11);                 // S | '#)'
    if (l1 == 16)                   // S
    {
      shift(16);                    // S
      lookahead1(1);                // PragmaContents
      shift(19);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(29);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(34);                     // '(#'
    lookahead1(158);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 == 16)                   // S
    {
      shiftT(16);                   // S
    }
    try_EQName();
    lookahead1(11);                 // S | '#)'
    if (l1 == 16)                   // S
    {
      shiftT(16);                   // S
      lookahead1(1);                // PragmaContents
      shiftT(19);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(29);                     // '#)'
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 25)                 // '!'
      {
        break;
      }
      shift(25);                    // '!'
      lookahead1W(170);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 25)                 // '!'
      {
        break;
      }
      shiftT(25);                   // '!'
      lookahead1W(170);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_PathExpr();
    }
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 44:                        // '/'
      shift(44);                    // '/'
      lookahead1W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' |
                                    // 'declare' | 'default' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '|' | '||' | '}'
      switch (l1)
      {
      case 24:                      // EOF
      case 25:                      // '!'
      case 26:                      // '!='
      case 36:                      // ')'
      case 37:                      // '*'
      case 38:                      // '+'
      case 39:                      // ','
      case 40:                      // '-'
      case 47:                      // ':'
      case 51:                      // ';'
      case 56:                      // '<<'
      case 57:                      // '<='
      case 59:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 200:                     // '|'
      case 201:                     // '||'
      case 202:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 45:                        // '//'
      shift(45);                    // '//'
      lookahead1W(169);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 44:                        // '/'
      shiftT(44);                   // '/'
      lookahead1W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' |
                                    // 'declare' | 'default' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '|' | '||' | '}'
      switch (l1)
      {
      case 24:                      // EOF
      case 25:                      // '!'
      case 26:                      // '!='
      case 36:                      // ')'
      case 37:                      // '*'
      case 38:                      // '+'
      case 39:                      // ','
      case 40:                      // '-'
      case 47:                      // ':'
      case 51:                      // ';'
      case 56:                      // '<<'
      case 57:                      // '<='
      case 59:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 200:                     // '|'
      case 201:                     // '||'
      case 202:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 45:                        // '//'
      shiftT(45);                   // '//'
      lookahead1W(169);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      if (l1 != 44                  // '/'
       && l1 != 45)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 44:                      // '/'
        shift(44);                  // '/'
        break;
      default:
        shift(45);                  // '//'
      }
      lookahead1W(169);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      if (l1 != 44                  // '/'
       && l1 != 45)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 44:                      // '/'
        shiftT(44);                 // '/'
        break;
      default:
        shiftT(45);                 // '//'
      }
      lookahead1W(169);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(177);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | '[' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
      break;
    case 105:                       // 'element'
      lookahead2W(176);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
      break;
    case 75:                        // 'array'
    case 140:                       // 'map'
      lookahead2W(147);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 144:                       // 'namespace'
    case 166:                       // 'processing-instruction'
      lookahead2W(153);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 89:                        // 'comment'
    case 103:                       // 'document'
    case 156:                       // 'ordered'
    case 180:                       // 'text'
    case 189:                       // 'unordered'
      lookahead2W(151);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 108:                       // 'empty-sequence'
    case 126:                       // 'if'
    case 134:                       // 'item'
    case 179:                       // 'switch'
    case 187:                       // 'typeswitch'
      lookahead2W(142);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 87:                        // 'child'
    case 98:                        // 'descendant'
    case 99:                        // 'descendant-or-self'
    case 116:                       // 'following'
    case 117:                       // 'following-sibling'
    case 158:                       // 'parent'
    case 162:                       // 'preceding'
    case 163:                       // 'preceding-sibling'
    case 172:                       // 'self'
      lookahead2W(150);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                    // '||' | '}'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 74:                        // 'and'
    case 77:                        // 'ascending'
    case 83:                        // 'case'
    case 84:                        // 'cast'
    case 85:                        // 'castable'
    case 88:                        // 'collation'
    case 93:                        // 'count'
    case 96:                        // 'declare'
    case 97:                        // 'default'
    case 100:                       // 'descending'
    case 102:                       // 'div'
    case 104:                       // 'document-node'
    case 106:                       // 'else'
    case 107:                       // 'empty'
    case 110:                       // 'end'
    case 111:                       // 'eq'
    case 112:                       // 'every'
    case 113:                       // 'except'
    case 118:                       // 'for'
    case 119:                       // 'function'
    case 120:                       // 'ge'
    case 122:                       // 'group'
    case 124:                       // 'gt'
    case 125:                       // 'idiv'
    case 127:                       // 'import'
    case 131:                       // 'instance'
    case 132:                       // 'intersect'
    case 133:                       // 'is'
    case 136:                       // 'le'
    case 138:                       // 'let'
    case 139:                       // 'lt'
    case 142:                       // 'mod'
    case 143:                       // 'module'
    case 145:                       // 'namespace-node'
    case 146:                       // 'ne'
    case 150:                       // 'node'
    case 152:                       // 'only'
    case 154:                       // 'or'
    case 155:                       // 'order'
    case 167:                       // 'return'
    case 168:                       // 'satisfies'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 174:                       // 'some'
    case 175:                       // 'stable'
    case 176:                       // 'start'
    case 182:                       // 'to'
    case 183:                       // 'treat'
    case 184:                       // 'try'
    case 188:                       // 'union'
    case 190:                       // 'validate'
    case 194:                       // 'where'
    case 196:                       // 'xquery'
      lookahead2W(146);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 19023                 // 'attribute' 'and'
     || lk == 19049                 // 'element' 'and'
     || lk == 19088                 // 'namespace' 'and'
     || lk == 19110                 // 'processing-instruction' 'and'
     || lk == 19791                 // 'attribute' 'ascending'
     || lk == 19817                 // 'element' 'ascending'
     || lk == 19856                 // 'namespace' 'ascending'
     || lk == 19878                 // 'processing-instruction' 'ascending'
     || lk == 21327                 // 'attribute' 'case'
     || lk == 21353                 // 'element' 'case'
     || lk == 21392                 // 'namespace' 'case'
     || lk == 21414                 // 'processing-instruction' 'case'
     || lk == 21583                 // 'attribute' 'cast'
     || lk == 21609                 // 'element' 'cast'
     || lk == 21648                 // 'namespace' 'cast'
     || lk == 21670                 // 'processing-instruction' 'cast'
     || lk == 21839                 // 'attribute' 'castable'
     || lk == 21865                 // 'element' 'castable'
     || lk == 21904                 // 'namespace' 'castable'
     || lk == 21926                 // 'processing-instruction' 'castable'
     || lk == 22607                 // 'attribute' 'collation'
     || lk == 22633                 // 'element' 'collation'
     || lk == 22672                 // 'namespace' 'collation'
     || lk == 22694                 // 'processing-instruction' 'collation'
     || lk == 23887                 // 'attribute' 'count'
     || lk == 23913                 // 'element' 'count'
     || lk == 23952                 // 'namespace' 'count'
     || lk == 23974                 // 'processing-instruction' 'count'
     || lk == 24911                 // 'attribute' 'default'
     || lk == 24937                 // 'element' 'default'
     || lk == 24976                 // 'namespace' 'default'
     || lk == 24998                 // 'processing-instruction' 'default'
     || lk == 25679                 // 'attribute' 'descending'
     || lk == 25705                 // 'element' 'descending'
     || lk == 25744                 // 'namespace' 'descending'
     || lk == 25766                 // 'processing-instruction' 'descending'
     || lk == 26191                 // 'attribute' 'div'
     || lk == 26217                 // 'element' 'div'
     || lk == 26256                 // 'namespace' 'div'
     || lk == 26278                 // 'processing-instruction' 'div'
     || lk == 27215                 // 'attribute' 'else'
     || lk == 27241                 // 'element' 'else'
     || lk == 27280                 // 'namespace' 'else'
     || lk == 27302                 // 'processing-instruction' 'else'
     || lk == 27471                 // 'attribute' 'empty'
     || lk == 27497                 // 'element' 'empty'
     || lk == 27536                 // 'namespace' 'empty'
     || lk == 27558                 // 'processing-instruction' 'empty'
     || lk == 28239                 // 'attribute' 'end'
     || lk == 28265                 // 'element' 'end'
     || lk == 28304                 // 'namespace' 'end'
     || lk == 28326                 // 'processing-instruction' 'end'
     || lk == 28495                 // 'attribute' 'eq'
     || lk == 28521                 // 'element' 'eq'
     || lk == 28560                 // 'namespace' 'eq'
     || lk == 28582                 // 'processing-instruction' 'eq'
     || lk == 29007                 // 'attribute' 'except'
     || lk == 29033                 // 'element' 'except'
     || lk == 29072                 // 'namespace' 'except'
     || lk == 29094                 // 'processing-instruction' 'except'
     || lk == 30287                 // 'attribute' 'for'
     || lk == 30313                 // 'element' 'for'
     || lk == 30352                 // 'namespace' 'for'
     || lk == 30374                 // 'processing-instruction' 'for'
     || lk == 30799                 // 'attribute' 'ge'
     || lk == 30825                 // 'element' 'ge'
     || lk == 30864                 // 'namespace' 'ge'
     || lk == 30886                 // 'processing-instruction' 'ge'
     || lk == 31311                 // 'attribute' 'group'
     || lk == 31337                 // 'element' 'group'
     || lk == 31376                 // 'namespace' 'group'
     || lk == 31398                 // 'processing-instruction' 'group'
     || lk == 31823                 // 'attribute' 'gt'
     || lk == 31849                 // 'element' 'gt'
     || lk == 31888                 // 'namespace' 'gt'
     || lk == 31910                 // 'processing-instruction' 'gt'
     || lk == 32079                 // 'attribute' 'idiv'
     || lk == 32105                 // 'element' 'idiv'
     || lk == 32144                 // 'namespace' 'idiv'
     || lk == 32166                 // 'processing-instruction' 'idiv'
     || lk == 33615                 // 'attribute' 'instance'
     || lk == 33641                 // 'element' 'instance'
     || lk == 33680                 // 'namespace' 'instance'
     || lk == 33702                 // 'processing-instruction' 'instance'
     || lk == 33871                 // 'attribute' 'intersect'
     || lk == 33897                 // 'element' 'intersect'
     || lk == 33936                 // 'namespace' 'intersect'
     || lk == 33958                 // 'processing-instruction' 'intersect'
     || lk == 34127                 // 'attribute' 'is'
     || lk == 34153                 // 'element' 'is'
     || lk == 34192                 // 'namespace' 'is'
     || lk == 34214                 // 'processing-instruction' 'is'
     || lk == 34895                 // 'attribute' 'le'
     || lk == 34921                 // 'element' 'le'
     || lk == 34960                 // 'namespace' 'le'
     || lk == 34982                 // 'processing-instruction' 'le'
     || lk == 35407                 // 'attribute' 'let'
     || lk == 35433                 // 'element' 'let'
     || lk == 35472                 // 'namespace' 'let'
     || lk == 35494                 // 'processing-instruction' 'let'
     || lk == 35663                 // 'attribute' 'lt'
     || lk == 35689                 // 'element' 'lt'
     || lk == 35728                 // 'namespace' 'lt'
     || lk == 35750                 // 'processing-instruction' 'lt'
     || lk == 36431                 // 'attribute' 'mod'
     || lk == 36457                 // 'element' 'mod'
     || lk == 36496                 // 'namespace' 'mod'
     || lk == 36518                 // 'processing-instruction' 'mod'
     || lk == 37455                 // 'attribute' 'ne'
     || lk == 37481                 // 'element' 'ne'
     || lk == 37520                 // 'namespace' 'ne'
     || lk == 37542                 // 'processing-instruction' 'ne'
     || lk == 38991                 // 'attribute' 'only'
     || lk == 39017                 // 'element' 'only'
     || lk == 39056                 // 'namespace' 'only'
     || lk == 39078                 // 'processing-instruction' 'only'
     || lk == 39503                 // 'attribute' 'or'
     || lk == 39529                 // 'element' 'or'
     || lk == 39568                 // 'namespace' 'or'
     || lk == 39590                 // 'processing-instruction' 'or'
     || lk == 39759                 // 'attribute' 'order'
     || lk == 39785                 // 'element' 'order'
     || lk == 39824                 // 'namespace' 'order'
     || lk == 39846                 // 'processing-instruction' 'order'
     || lk == 42831                 // 'attribute' 'return'
     || lk == 42857                 // 'element' 'return'
     || lk == 42896                 // 'namespace' 'return'
     || lk == 42918                 // 'processing-instruction' 'return'
     || lk == 43087                 // 'attribute' 'satisfies'
     || lk == 43113                 // 'element' 'satisfies'
     || lk == 43152                 // 'namespace' 'satisfies'
     || lk == 43174                 // 'processing-instruction' 'satisfies'
     || lk == 44879                 // 'attribute' 'stable'
     || lk == 44905                 // 'element' 'stable'
     || lk == 44944                 // 'namespace' 'stable'
     || lk == 44966                 // 'processing-instruction' 'stable'
     || lk == 45135                 // 'attribute' 'start'
     || lk == 45161                 // 'element' 'start'
     || lk == 45200                 // 'namespace' 'start'
     || lk == 45222                 // 'processing-instruction' 'start'
     || lk == 46671                 // 'attribute' 'to'
     || lk == 46697                 // 'element' 'to'
     || lk == 46736                 // 'namespace' 'to'
     || lk == 46758                 // 'processing-instruction' 'to'
     || lk == 46927                 // 'attribute' 'treat'
     || lk == 46953                 // 'element' 'treat'
     || lk == 46992                 // 'namespace' 'treat'
     || lk == 47014                 // 'processing-instruction' 'treat'
     || lk == 48207                 // 'attribute' 'union'
     || lk == 48233                 // 'element' 'union'
     || lk == 48272                 // 'namespace' 'union'
     || lk == 48294                 // 'processing-instruction' 'union'
     || lk == 49743                 // 'attribute' 'where'
     || lk == 49769                 // 'element' 'where'
     || lk == 49808                 // 'namespace' 'where'
     || lk == 49830)                // 'processing-instruction' 'where'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 30:                        // '$'
    case 31:                        // '%'
    case 33:                        // '('
    case 42:                        // '.'
    case 52:                        // '<'
    case 53:                        // '<!--'
    case 58:                        // '<?'
    case 64:                        // '?'
    case 68:                        // '['
    case 1359:                      // 'attribute' URIQualifiedName
    case 1385:                      // 'element' URIQualifiedName
    case 3728:                      // 'namespace' NCName^Token
    case 3750:                      // 'processing-instruction' NCName^Token
    case 3919:                      // 'attribute' QName^Token
    case 3945:                      // 'element' QName^Token
    case 7173:                      // URIQualifiedName '#'
    case 7183:                      // QName^Token '#'
    case 7240:                      // 'ancestor' '#'
    case 7241:                      // 'ancestor-or-self' '#'
    case 7242:                      // 'and' '#'
    case 7243:                      // 'array' '#'
    case 7245:                      // 'ascending' '#'
    case 7247:                      // 'attribute' '#'
    case 7251:                      // 'case' '#'
    case 7252:                      // 'cast' '#'
    case 7253:                      // 'castable' '#'
    case 7255:                      // 'child' '#'
    case 7256:                      // 'collation' '#'
    case 7257:                      // 'comment' '#'
    case 7261:                      // 'count' '#'
    case 7264:                      // 'declare' '#'
    case 7265:                      // 'default' '#'
    case 7266:                      // 'descendant' '#'
    case 7267:                      // 'descendant-or-self' '#'
    case 7268:                      // 'descending' '#'
    case 7270:                      // 'div' '#'
    case 7271:                      // 'document' '#'
    case 7272:                      // 'document-node' '#'
    case 7273:                      // 'element' '#'
    case 7274:                      // 'else' '#'
    case 7275:                      // 'empty' '#'
    case 7276:                      // 'empty-sequence' '#'
    case 7278:                      // 'end' '#'
    case 7279:                      // 'eq' '#'
    case 7280:                      // 'every' '#'
    case 7281:                      // 'except' '#'
    case 7284:                      // 'following' '#'
    case 7285:                      // 'following-sibling' '#'
    case 7286:                      // 'for' '#'
    case 7287:                      // 'function' '#'
    case 7288:                      // 'ge' '#'
    case 7290:                      // 'group' '#'
    case 7292:                      // 'gt' '#'
    case 7293:                      // 'idiv' '#'
    case 7294:                      // 'if' '#'
    case 7295:                      // 'import' '#'
    case 7299:                      // 'instance' '#'
    case 7300:                      // 'intersect' '#'
    case 7301:                      // 'is' '#'
    case 7302:                      // 'item' '#'
    case 7304:                      // 'le' '#'
    case 7306:                      // 'let' '#'
    case 7307:                      // 'lt' '#'
    case 7308:                      // 'map' '#'
    case 7310:                      // 'mod' '#'
    case 7311:                      // 'module' '#'
    case 7312:                      // 'namespace' '#'
    case 7313:                      // 'namespace-node' '#'
    case 7314:                      // 'ne' '#'
    case 7318:                      // 'node' '#'
    case 7320:                      // 'only' '#'
    case 7322:                      // 'or' '#'
    case 7323:                      // 'order' '#'
    case 7324:                      // 'ordered' '#'
    case 7326:                      // 'parent' '#'
    case 7330:                      // 'preceding' '#'
    case 7331:                      // 'preceding-sibling' '#'
    case 7334:                      // 'processing-instruction' '#'
    case 7335:                      // 'return' '#'
    case 7336:                      // 'satisfies' '#'
    case 7338:                      // 'schema-attribute' '#'
    case 7339:                      // 'schema-element' '#'
    case 7340:                      // 'self' '#'
    case 7342:                      // 'some' '#'
    case 7343:                      // 'stable' '#'
    case 7344:                      // 'start' '#'
    case 7347:                      // 'switch' '#'
    case 7348:                      // 'text' '#'
    case 7350:                      // 'to' '#'
    case 7351:                      // 'treat' '#'
    case 7352:                      // 'try' '#'
    case 7355:                      // 'typeswitch' '#'
    case 7356:                      // 'union' '#'
    case 7357:                      // 'unordered' '#'
    case 7358:                      // 'validate' '#'
    case 7362:                      // 'where' '#'
    case 7364:                      // 'xquery' '#'
    case 8453:                      // URIQualifiedName '('
    case 8463:                      // QName^Token '('
    case 8520:                      // 'ancestor' '('
    case 8521:                      // 'ancestor-or-self' '('
    case 8522:                      // 'and' '('
    case 8525:                      // 'ascending' '('
    case 8531:                      // 'case' '('
    case 8532:                      // 'cast' '('
    case 8533:                      // 'castable' '('
    case 8535:                      // 'child' '('
    case 8536:                      // 'collation' '('
    case 8541:                      // 'count' '('
    case 8544:                      // 'declare' '('
    case 8545:                      // 'default' '('
    case 8546:                      // 'descendant' '('
    case 8547:                      // 'descendant-or-self' '('
    case 8548:                      // 'descending' '('
    case 8550:                      // 'div' '('
    case 8551:                      // 'document' '('
    case 8554:                      // 'else' '('
    case 8555:                      // 'empty' '('
    case 8558:                      // 'end' '('
    case 8559:                      // 'eq' '('
    case 8560:                      // 'every' '('
    case 8561:                      // 'except' '('
    case 8564:                      // 'following' '('
    case 8565:                      // 'following-sibling' '('
    case 8566:                      // 'for' '('
    case 8567:                      // 'function' '('
    case 8568:                      // 'ge' '('
    case 8570:                      // 'group' '('
    case 8572:                      // 'gt' '('
    case 8573:                      // 'idiv' '('
    case 8575:                      // 'import' '('
    case 8579:                      // 'instance' '('
    case 8580:                      // 'intersect' '('
    case 8581:                      // 'is' '('
    case 8584:                      // 'le' '('
    case 8586:                      // 'let' '('
    case 8587:                      // 'lt' '('
    case 8590:                      // 'mod' '('
    case 8591:                      // 'module' '('
    case 8592:                      // 'namespace' '('
    case 8594:                      // 'ne' '('
    case 8600:                      // 'only' '('
    case 8602:                      // 'or' '('
    case 8603:                      // 'order' '('
    case 8604:                      // 'ordered' '('
    case 8606:                      // 'parent' '('
    case 8610:                      // 'preceding' '('
    case 8611:                      // 'preceding-sibling' '('
    case 8615:                      // 'return' '('
    case 8616:                      // 'satisfies' '('
    case 8620:                      // 'self' '('
    case 8622:                      // 'some' '('
    case 8623:                      // 'stable' '('
    case 8624:                      // 'start' '('
    case 8630:                      // 'to' '('
    case 8631:                      // 'treat' '('
    case 8632:                      // 'try' '('
    case 8636:                      // 'union' '('
    case 8637:                      // 'unordered' '('
    case 8638:                      // 'validate' '('
    case 8642:                      // 'where' '('
    case 8644:                      // 'xquery' '('
    case 18511:                     // 'attribute' 'ancestor'
    case 18537:                     // 'element' 'ancestor'
    case 18767:                     // 'attribute' 'ancestor-or-self'
    case 18793:                     // 'element' 'ancestor-or-self'
    case 19279:                     // 'attribute' 'array'
    case 19305:                     // 'element' 'array'
    case 20303:                     // 'attribute' 'attribute'
    case 20329:                     // 'element' 'attribute'
    case 22351:                     // 'attribute' 'child'
    case 22377:                     // 'element' 'child'
    case 22863:                     // 'attribute' 'comment'
    case 22889:                     // 'element' 'comment'
    case 24655:                     // 'attribute' 'declare'
    case 24681:                     // 'element' 'declare'
    case 25167:                     // 'attribute' 'descendant'
    case 25193:                     // 'element' 'descendant'
    case 25423:                     // 'attribute' 'descendant-or-self'
    case 25449:                     // 'element' 'descendant-or-self'
    case 26447:                     // 'attribute' 'document'
    case 26473:                     // 'element' 'document'
    case 26703:                     // 'attribute' 'document-node'
    case 26729:                     // 'element' 'document-node'
    case 26959:                     // 'attribute' 'element'
    case 26985:                     // 'element' 'element'
    case 27727:                     // 'attribute' 'empty-sequence'
    case 27753:                     // 'element' 'empty-sequence'
    case 28751:                     // 'attribute' 'every'
    case 28777:                     // 'element' 'every'
    case 29775:                     // 'attribute' 'following'
    case 29801:                     // 'element' 'following'
    case 30031:                     // 'attribute' 'following-sibling'
    case 30057:                     // 'element' 'following-sibling'
    case 30543:                     // 'attribute' 'function'
    case 30569:                     // 'element' 'function'
    case 32335:                     // 'attribute' 'if'
    case 32361:                     // 'element' 'if'
    case 32591:                     // 'attribute' 'import'
    case 32617:                     // 'element' 'import'
    case 34383:                     // 'attribute' 'item'
    case 34409:                     // 'element' 'item'
    case 35919:                     // 'attribute' 'map'
    case 35945:                     // 'element' 'map'
    case 36687:                     // 'attribute' 'module'
    case 36713:                     // 'element' 'module'
    case 36943:                     // 'attribute' 'namespace'
    case 36969:                     // 'element' 'namespace'
    case 37199:                     // 'attribute' 'namespace-node'
    case 37225:                     // 'element' 'namespace-node'
    case 38479:                     // 'attribute' 'node'
    case 38505:                     // 'element' 'node'
    case 40015:                     // 'attribute' 'ordered'
    case 40041:                     // 'element' 'ordered'
    case 40527:                     // 'attribute' 'parent'
    case 40553:                     // 'element' 'parent'
    case 41551:                     // 'attribute' 'preceding'
    case 41577:                     // 'element' 'preceding'
    case 41807:                     // 'attribute' 'preceding-sibling'
    case 41833:                     // 'element' 'preceding-sibling'
    case 42575:                     // 'attribute' 'processing-instruction'
    case 42601:                     // 'element' 'processing-instruction'
    case 43599:                     // 'attribute' 'schema-attribute'
    case 43625:                     // 'element' 'schema-attribute'
    case 43855:                     // 'attribute' 'schema-element'
    case 43881:                     // 'element' 'schema-element'
    case 44111:                     // 'attribute' 'self'
    case 44137:                     // 'element' 'self'
    case 44623:                     // 'attribute' 'some'
    case 44649:                     // 'element' 'some'
    case 45903:                     // 'attribute' 'switch'
    case 45929:                     // 'element' 'switch'
    case 46159:                     // 'attribute' 'text'
    case 46185:                     // 'element' 'text'
    case 47183:                     // 'attribute' 'try'
    case 47209:                     // 'element' 'try'
    case 47951:                     // 'attribute' 'typeswitch'
    case 47977:                     // 'element' 'typeswitch'
    case 48463:                     // 'attribute' 'unordered'
    case 48489:                     // 'element' 'unordered'
    case 48719:                     // 'attribute' 'validate'
    case 48745:                     // 'element' 'validate'
    case 50255:                     // 'attribute' 'xquery'
    case 50281:                     // 'element' 'xquery'
    case 50763:                     // 'array' '{'
    case 50767:                     // 'attribute' '{'
    case 50777:                     // 'comment' '{'
    case 50791:                     // 'document' '{'
    case 50793:                     // 'element' '{'
    case 50828:                     // 'map' '{'
    case 50832:                     // 'namespace' '{'
    case 50844:                     // 'ordered' '{'
    case 50854:                     // 'processing-instruction' '{'
    case 50868:                     // 'text' '{'
    case 50877:                     // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(177);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | '[' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
      break;
    case 105:                       // 'element'
      lookahead2W(176);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
      break;
    case 75:                        // 'array'
    case 140:                       // 'map'
      lookahead2W(147);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 144:                       // 'namespace'
    case 166:                       // 'processing-instruction'
      lookahead2W(153);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 89:                        // 'comment'
    case 103:                       // 'document'
    case 156:                       // 'ordered'
    case 180:                       // 'text'
    case 189:                       // 'unordered'
      lookahead2W(151);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    case 108:                       // 'empty-sequence'
    case 126:                       // 'if'
    case 134:                       // 'item'
    case 179:                       // 'switch'
    case 187:                       // 'typeswitch'
      lookahead2W(142);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 87:                        // 'child'
    case 98:                        // 'descendant'
    case 99:                        // 'descendant-or-self'
    case 116:                       // 'following'
    case 117:                       // 'following-sibling'
    case 158:                       // 'parent'
    case 162:                       // 'preceding'
    case 163:                       // 'preceding-sibling'
    case 172:                       // 'self'
      lookahead2W(150);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                    // '||' | '}'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 74:                        // 'and'
    case 77:                        // 'ascending'
    case 83:                        // 'case'
    case 84:                        // 'cast'
    case 85:                        // 'castable'
    case 88:                        // 'collation'
    case 93:                        // 'count'
    case 96:                        // 'declare'
    case 97:                        // 'default'
    case 100:                       // 'descending'
    case 102:                       // 'div'
    case 104:                       // 'document-node'
    case 106:                       // 'else'
    case 107:                       // 'empty'
    case 110:                       // 'end'
    case 111:                       // 'eq'
    case 112:                       // 'every'
    case 113:                       // 'except'
    case 118:                       // 'for'
    case 119:                       // 'function'
    case 120:                       // 'ge'
    case 122:                       // 'group'
    case 124:                       // 'gt'
    case 125:                       // 'idiv'
    case 127:                       // 'import'
    case 131:                       // 'instance'
    case 132:                       // 'intersect'
    case 133:                       // 'is'
    case 136:                       // 'le'
    case 138:                       // 'let'
    case 139:                       // 'lt'
    case 142:                       // 'mod'
    case 143:                       // 'module'
    case 145:                       // 'namespace-node'
    case 146:                       // 'ne'
    case 150:                       // 'node'
    case 152:                       // 'only'
    case 154:                       // 'or'
    case 155:                       // 'order'
    case 167:                       // 'return'
    case 168:                       // 'satisfies'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 174:                       // 'some'
    case 175:                       // 'stable'
    case 176:                       // 'start'
    case 182:                       // 'to'
    case 183:                       // 'treat'
    case 184:                       // 'try'
    case 188:                       // 'union'
    case 190:                       // 'validate'
    case 194:                       // 'where'
    case 196:                       // 'xquery'
      lookahead2W(146);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 19023                 // 'attribute' 'and'
     || lk == 19049                 // 'element' 'and'
     || lk == 19088                 // 'namespace' 'and'
     || lk == 19110                 // 'processing-instruction' 'and'
     || lk == 19791                 // 'attribute' 'ascending'
     || lk == 19817                 // 'element' 'ascending'
     || lk == 19856                 // 'namespace' 'ascending'
     || lk == 19878                 // 'processing-instruction' 'ascending'
     || lk == 21327                 // 'attribute' 'case'
     || lk == 21353                 // 'element' 'case'
     || lk == 21392                 // 'namespace' 'case'
     || lk == 21414                 // 'processing-instruction' 'case'
     || lk == 21583                 // 'attribute' 'cast'
     || lk == 21609                 // 'element' 'cast'
     || lk == 21648                 // 'namespace' 'cast'
     || lk == 21670                 // 'processing-instruction' 'cast'
     || lk == 21839                 // 'attribute' 'castable'
     || lk == 21865                 // 'element' 'castable'
     || lk == 21904                 // 'namespace' 'castable'
     || lk == 21926                 // 'processing-instruction' 'castable'
     || lk == 22607                 // 'attribute' 'collation'
     || lk == 22633                 // 'element' 'collation'
     || lk == 22672                 // 'namespace' 'collation'
     || lk == 22694                 // 'processing-instruction' 'collation'
     || lk == 23887                 // 'attribute' 'count'
     || lk == 23913                 // 'element' 'count'
     || lk == 23952                 // 'namespace' 'count'
     || lk == 23974                 // 'processing-instruction' 'count'
     || lk == 24911                 // 'attribute' 'default'
     || lk == 24937                 // 'element' 'default'
     || lk == 24976                 // 'namespace' 'default'
     || lk == 24998                 // 'processing-instruction' 'default'
     || lk == 25679                 // 'attribute' 'descending'
     || lk == 25705                 // 'element' 'descending'
     || lk == 25744                 // 'namespace' 'descending'
     || lk == 25766                 // 'processing-instruction' 'descending'
     || lk == 26191                 // 'attribute' 'div'
     || lk == 26217                 // 'element' 'div'
     || lk == 26256                 // 'namespace' 'div'
     || lk == 26278                 // 'processing-instruction' 'div'
     || lk == 27215                 // 'attribute' 'else'
     || lk == 27241                 // 'element' 'else'
     || lk == 27280                 // 'namespace' 'else'
     || lk == 27302                 // 'processing-instruction' 'else'
     || lk == 27471                 // 'attribute' 'empty'
     || lk == 27497                 // 'element' 'empty'
     || lk == 27536                 // 'namespace' 'empty'
     || lk == 27558                 // 'processing-instruction' 'empty'
     || lk == 28239                 // 'attribute' 'end'
     || lk == 28265                 // 'element' 'end'
     || lk == 28304                 // 'namespace' 'end'
     || lk == 28326                 // 'processing-instruction' 'end'
     || lk == 28495                 // 'attribute' 'eq'
     || lk == 28521                 // 'element' 'eq'
     || lk == 28560                 // 'namespace' 'eq'
     || lk == 28582                 // 'processing-instruction' 'eq'
     || lk == 29007                 // 'attribute' 'except'
     || lk == 29033                 // 'element' 'except'
     || lk == 29072                 // 'namespace' 'except'
     || lk == 29094                 // 'processing-instruction' 'except'
     || lk == 30287                 // 'attribute' 'for'
     || lk == 30313                 // 'element' 'for'
     || lk == 30352                 // 'namespace' 'for'
     || lk == 30374                 // 'processing-instruction' 'for'
     || lk == 30799                 // 'attribute' 'ge'
     || lk == 30825                 // 'element' 'ge'
     || lk == 30864                 // 'namespace' 'ge'
     || lk == 30886                 // 'processing-instruction' 'ge'
     || lk == 31311                 // 'attribute' 'group'
     || lk == 31337                 // 'element' 'group'
     || lk == 31376                 // 'namespace' 'group'
     || lk == 31398                 // 'processing-instruction' 'group'
     || lk == 31823                 // 'attribute' 'gt'
     || lk == 31849                 // 'element' 'gt'
     || lk == 31888                 // 'namespace' 'gt'
     || lk == 31910                 // 'processing-instruction' 'gt'
     || lk == 32079                 // 'attribute' 'idiv'
     || lk == 32105                 // 'element' 'idiv'
     || lk == 32144                 // 'namespace' 'idiv'
     || lk == 32166                 // 'processing-instruction' 'idiv'
     || lk == 33615                 // 'attribute' 'instance'
     || lk == 33641                 // 'element' 'instance'
     || lk == 33680                 // 'namespace' 'instance'
     || lk == 33702                 // 'processing-instruction' 'instance'
     || lk == 33871                 // 'attribute' 'intersect'
     || lk == 33897                 // 'element' 'intersect'
     || lk == 33936                 // 'namespace' 'intersect'
     || lk == 33958                 // 'processing-instruction' 'intersect'
     || lk == 34127                 // 'attribute' 'is'
     || lk == 34153                 // 'element' 'is'
     || lk == 34192                 // 'namespace' 'is'
     || lk == 34214                 // 'processing-instruction' 'is'
     || lk == 34895                 // 'attribute' 'le'
     || lk == 34921                 // 'element' 'le'
     || lk == 34960                 // 'namespace' 'le'
     || lk == 34982                 // 'processing-instruction' 'le'
     || lk == 35407                 // 'attribute' 'let'
     || lk == 35433                 // 'element' 'let'
     || lk == 35472                 // 'namespace' 'let'
     || lk == 35494                 // 'processing-instruction' 'let'
     || lk == 35663                 // 'attribute' 'lt'
     || lk == 35689                 // 'element' 'lt'
     || lk == 35728                 // 'namespace' 'lt'
     || lk == 35750                 // 'processing-instruction' 'lt'
     || lk == 36431                 // 'attribute' 'mod'
     || lk == 36457                 // 'element' 'mod'
     || lk == 36496                 // 'namespace' 'mod'
     || lk == 36518                 // 'processing-instruction' 'mod'
     || lk == 37455                 // 'attribute' 'ne'
     || lk == 37481                 // 'element' 'ne'
     || lk == 37520                 // 'namespace' 'ne'
     || lk == 37542                 // 'processing-instruction' 'ne'
     || lk == 38991                 // 'attribute' 'only'
     || lk == 39017                 // 'element' 'only'
     || lk == 39056                 // 'namespace' 'only'
     || lk == 39078                 // 'processing-instruction' 'only'
     || lk == 39503                 // 'attribute' 'or'
     || lk == 39529                 // 'element' 'or'
     || lk == 39568                 // 'namespace' 'or'
     || lk == 39590                 // 'processing-instruction' 'or'
     || lk == 39759                 // 'attribute' 'order'
     || lk == 39785                 // 'element' 'order'
     || lk == 39824                 // 'namespace' 'order'
     || lk == 39846                 // 'processing-instruction' 'order'
     || lk == 42831                 // 'attribute' 'return'
     || lk == 42857                 // 'element' 'return'
     || lk == 42896                 // 'namespace' 'return'
     || lk == 42918                 // 'processing-instruction' 'return'
     || lk == 43087                 // 'attribute' 'satisfies'
     || lk == 43113                 // 'element' 'satisfies'
     || lk == 43152                 // 'namespace' 'satisfies'
     || lk == 43174                 // 'processing-instruction' 'satisfies'
     || lk == 44879                 // 'attribute' 'stable'
     || lk == 44905                 // 'element' 'stable'
     || lk == 44944                 // 'namespace' 'stable'
     || lk == 44966                 // 'processing-instruction' 'stable'
     || lk == 45135                 // 'attribute' 'start'
     || lk == 45161                 // 'element' 'start'
     || lk == 45200                 // 'namespace' 'start'
     || lk == 45222                 // 'processing-instruction' 'start'
     || lk == 46671                 // 'attribute' 'to'
     || lk == 46697                 // 'element' 'to'
     || lk == 46736                 // 'namespace' 'to'
     || lk == 46758                 // 'processing-instruction' 'to'
     || lk == 46927                 // 'attribute' 'treat'
     || lk == 46953                 // 'element' 'treat'
     || lk == 46992                 // 'namespace' 'treat'
     || lk == 47014                 // 'processing-instruction' 'treat'
     || lk == 48207                 // 'attribute' 'union'
     || lk == 48233                 // 'element' 'union'
     || lk == 48272                 // 'namespace' 'union'
     || lk == 48294                 // 'processing-instruction' 'union'
     || lk == 49743                 // 'attribute' 'where'
     || lk == 49769                 // 'element' 'where'
     || lk == 49808                 // 'namespace' 'where'
     || lk == 49830)                // 'processing-instruction' 'where'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 30:                        // '$'
    case 31:                        // '%'
    case 33:                        // '('
    case 42:                        // '.'
    case 52:                        // '<'
    case 53:                        // '<!--'
    case 58:                        // '<?'
    case 64:                        // '?'
    case 68:                        // '['
    case 1359:                      // 'attribute' URIQualifiedName
    case 1385:                      // 'element' URIQualifiedName
    case 3728:                      // 'namespace' NCName^Token
    case 3750:                      // 'processing-instruction' NCName^Token
    case 3919:                      // 'attribute' QName^Token
    case 3945:                      // 'element' QName^Token
    case 7173:                      // URIQualifiedName '#'
    case 7183:                      // QName^Token '#'
    case 7240:                      // 'ancestor' '#'
    case 7241:                      // 'ancestor-or-self' '#'
    case 7242:                      // 'and' '#'
    case 7243:                      // 'array' '#'
    case 7245:                      // 'ascending' '#'
    case 7247:                      // 'attribute' '#'
    case 7251:                      // 'case' '#'
    case 7252:                      // 'cast' '#'
    case 7253:                      // 'castable' '#'
    case 7255:                      // 'child' '#'
    case 7256:                      // 'collation' '#'
    case 7257:                      // 'comment' '#'
    case 7261:                      // 'count' '#'
    case 7264:                      // 'declare' '#'
    case 7265:                      // 'default' '#'
    case 7266:                      // 'descendant' '#'
    case 7267:                      // 'descendant-or-self' '#'
    case 7268:                      // 'descending' '#'
    case 7270:                      // 'div' '#'
    case 7271:                      // 'document' '#'
    case 7272:                      // 'document-node' '#'
    case 7273:                      // 'element' '#'
    case 7274:                      // 'else' '#'
    case 7275:                      // 'empty' '#'
    case 7276:                      // 'empty-sequence' '#'
    case 7278:                      // 'end' '#'
    case 7279:                      // 'eq' '#'
    case 7280:                      // 'every' '#'
    case 7281:                      // 'except' '#'
    case 7284:                      // 'following' '#'
    case 7285:                      // 'following-sibling' '#'
    case 7286:                      // 'for' '#'
    case 7287:                      // 'function' '#'
    case 7288:                      // 'ge' '#'
    case 7290:                      // 'group' '#'
    case 7292:                      // 'gt' '#'
    case 7293:                      // 'idiv' '#'
    case 7294:                      // 'if' '#'
    case 7295:                      // 'import' '#'
    case 7299:                      // 'instance' '#'
    case 7300:                      // 'intersect' '#'
    case 7301:                      // 'is' '#'
    case 7302:                      // 'item' '#'
    case 7304:                      // 'le' '#'
    case 7306:                      // 'let' '#'
    case 7307:                      // 'lt' '#'
    case 7308:                      // 'map' '#'
    case 7310:                      // 'mod' '#'
    case 7311:                      // 'module' '#'
    case 7312:                      // 'namespace' '#'
    case 7313:                      // 'namespace-node' '#'
    case 7314:                      // 'ne' '#'
    case 7318:                      // 'node' '#'
    case 7320:                      // 'only' '#'
    case 7322:                      // 'or' '#'
    case 7323:                      // 'order' '#'
    case 7324:                      // 'ordered' '#'
    case 7326:                      // 'parent' '#'
    case 7330:                      // 'preceding' '#'
    case 7331:                      // 'preceding-sibling' '#'
    case 7334:                      // 'processing-instruction' '#'
    case 7335:                      // 'return' '#'
    case 7336:                      // 'satisfies' '#'
    case 7338:                      // 'schema-attribute' '#'
    case 7339:                      // 'schema-element' '#'
    case 7340:                      // 'self' '#'
    case 7342:                      // 'some' '#'
    case 7343:                      // 'stable' '#'
    case 7344:                      // 'start' '#'
    case 7347:                      // 'switch' '#'
    case 7348:                      // 'text' '#'
    case 7350:                      // 'to' '#'
    case 7351:                      // 'treat' '#'
    case 7352:                      // 'try' '#'
    case 7355:                      // 'typeswitch' '#'
    case 7356:                      // 'union' '#'
    case 7357:                      // 'unordered' '#'
    case 7358:                      // 'validate' '#'
    case 7362:                      // 'where' '#'
    case 7364:                      // 'xquery' '#'
    case 8453:                      // URIQualifiedName '('
    case 8463:                      // QName^Token '('
    case 8520:                      // 'ancestor' '('
    case 8521:                      // 'ancestor-or-self' '('
    case 8522:                      // 'and' '('
    case 8525:                      // 'ascending' '('
    case 8531:                      // 'case' '('
    case 8532:                      // 'cast' '('
    case 8533:                      // 'castable' '('
    case 8535:                      // 'child' '('
    case 8536:                      // 'collation' '('
    case 8541:                      // 'count' '('
    case 8544:                      // 'declare' '('
    case 8545:                      // 'default' '('
    case 8546:                      // 'descendant' '('
    case 8547:                      // 'descendant-or-self' '('
    case 8548:                      // 'descending' '('
    case 8550:                      // 'div' '('
    case 8551:                      // 'document' '('
    case 8554:                      // 'else' '('
    case 8555:                      // 'empty' '('
    case 8558:                      // 'end' '('
    case 8559:                      // 'eq' '('
    case 8560:                      // 'every' '('
    case 8561:                      // 'except' '('
    case 8564:                      // 'following' '('
    case 8565:                      // 'following-sibling' '('
    case 8566:                      // 'for' '('
    case 8567:                      // 'function' '('
    case 8568:                      // 'ge' '('
    case 8570:                      // 'group' '('
    case 8572:                      // 'gt' '('
    case 8573:                      // 'idiv' '('
    case 8575:                      // 'import' '('
    case 8579:                      // 'instance' '('
    case 8580:                      // 'intersect' '('
    case 8581:                      // 'is' '('
    case 8584:                      // 'le' '('
    case 8586:                      // 'let' '('
    case 8587:                      // 'lt' '('
    case 8590:                      // 'mod' '('
    case 8591:                      // 'module' '('
    case 8592:                      // 'namespace' '('
    case 8594:                      // 'ne' '('
    case 8600:                      // 'only' '('
    case 8602:                      // 'or' '('
    case 8603:                      // 'order' '('
    case 8604:                      // 'ordered' '('
    case 8606:                      // 'parent' '('
    case 8610:                      // 'preceding' '('
    case 8611:                      // 'preceding-sibling' '('
    case 8615:                      // 'return' '('
    case 8616:                      // 'satisfies' '('
    case 8620:                      // 'self' '('
    case 8622:                      // 'some' '('
    case 8623:                      // 'stable' '('
    case 8624:                      // 'start' '('
    case 8630:                      // 'to' '('
    case 8631:                      // 'treat' '('
    case 8632:                      // 'try' '('
    case 8636:                      // 'union' '('
    case 8637:                      // 'unordered' '('
    case 8638:                      // 'validate' '('
    case 8642:                      // 'where' '('
    case 8644:                      // 'xquery' '('
    case 18511:                     // 'attribute' 'ancestor'
    case 18537:                     // 'element' 'ancestor'
    case 18767:                     // 'attribute' 'ancestor-or-self'
    case 18793:                     // 'element' 'ancestor-or-self'
    case 19279:                     // 'attribute' 'array'
    case 19305:                     // 'element' 'array'
    case 20303:                     // 'attribute' 'attribute'
    case 20329:                     // 'element' 'attribute'
    case 22351:                     // 'attribute' 'child'
    case 22377:                     // 'element' 'child'
    case 22863:                     // 'attribute' 'comment'
    case 22889:                     // 'element' 'comment'
    case 24655:                     // 'attribute' 'declare'
    case 24681:                     // 'element' 'declare'
    case 25167:                     // 'attribute' 'descendant'
    case 25193:                     // 'element' 'descendant'
    case 25423:                     // 'attribute' 'descendant-or-self'
    case 25449:                     // 'element' 'descendant-or-self'
    case 26447:                     // 'attribute' 'document'
    case 26473:                     // 'element' 'document'
    case 26703:                     // 'attribute' 'document-node'
    case 26729:                     // 'element' 'document-node'
    case 26959:                     // 'attribute' 'element'
    case 26985:                     // 'element' 'element'
    case 27727:                     // 'attribute' 'empty-sequence'
    case 27753:                     // 'element' 'empty-sequence'
    case 28751:                     // 'attribute' 'every'
    case 28777:                     // 'element' 'every'
    case 29775:                     // 'attribute' 'following'
    case 29801:                     // 'element' 'following'
    case 30031:                     // 'attribute' 'following-sibling'
    case 30057:                     // 'element' 'following-sibling'
    case 30543:                     // 'attribute' 'function'
    case 30569:                     // 'element' 'function'
    case 32335:                     // 'attribute' 'if'
    case 32361:                     // 'element' 'if'
    case 32591:                     // 'attribute' 'import'
    case 32617:                     // 'element' 'import'
    case 34383:                     // 'attribute' 'item'
    case 34409:                     // 'element' 'item'
    case 35919:                     // 'attribute' 'map'
    case 35945:                     // 'element' 'map'
    case 36687:                     // 'attribute' 'module'
    case 36713:                     // 'element' 'module'
    case 36943:                     // 'attribute' 'namespace'
    case 36969:                     // 'element' 'namespace'
    case 37199:                     // 'attribute' 'namespace-node'
    case 37225:                     // 'element' 'namespace-node'
    case 38479:                     // 'attribute' 'node'
    case 38505:                     // 'element' 'node'
    case 40015:                     // 'attribute' 'ordered'
    case 40041:                     // 'element' 'ordered'
    case 40527:                     // 'attribute' 'parent'
    case 40553:                     // 'element' 'parent'
    case 41551:                     // 'attribute' 'preceding'
    case 41577:                     // 'element' 'preceding'
    case 41807:                     // 'attribute' 'preceding-sibling'
    case 41833:                     // 'element' 'preceding-sibling'
    case 42575:                     // 'attribute' 'processing-instruction'
    case 42601:                     // 'element' 'processing-instruction'
    case 43599:                     // 'attribute' 'schema-attribute'
    case 43625:                     // 'element' 'schema-attribute'
    case 43855:                     // 'attribute' 'schema-element'
    case 43881:                     // 'element' 'schema-element'
    case 44111:                     // 'attribute' 'self'
    case 44137:                     // 'element' 'self'
    case 44623:                     // 'attribute' 'some'
    case 44649:                     // 'element' 'some'
    case 45903:                     // 'attribute' 'switch'
    case 45929:                     // 'element' 'switch'
    case 46159:                     // 'attribute' 'text'
    case 46185:                     // 'element' 'text'
    case 47183:                     // 'attribute' 'try'
    case 47209:                     // 'element' 'try'
    case 47951:                     // 'attribute' 'typeswitch'
    case 47977:                     // 'element' 'typeswitch'
    case 48463:                     // 'attribute' 'unordered'
    case 48489:                     // 'element' 'unordered'
    case 48719:                     // 'attribute' 'validate'
    case 48745:                     // 'element' 'validate'
    case 50255:                     // 'attribute' 'xquery'
    case 50281:                     // 'element' 'xquery'
    case 50763:                     // 'array' '{'
    case 50767:                     // 'attribute' '{'
    case 50777:                     // 'comment' '{'
    case 50791:                     // 'document' '{'
    case 50793:                     // 'element' '{'
    case 50828:                     // 'map' '{'
    case 50832:                     // 'namespace' '{'
    case 50844:                     // 'ordered' '{'
    case 50854:                     // 'processing-instruction' '{'
    case 50868:                     // 'text' '{'
    case 50877:                     // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 158:                       // 'parent'
    case 162:                       // 'preceding'
    case 163:                       // 'preceding-sibling'
      lookahead2W(144);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 43:                        // '..'
    case 12616:                     // 'ancestor' '::'
    case 12617:                     // 'ancestor-or-self' '::'
    case 12702:                     // 'parent' '::'
    case 12706:                     // 'preceding' '::'
    case 12707:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(140);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 158:                       // 'parent'
    case 162:                       // 'preceding'
    case 163:                       // 'preceding-sibling'
      lookahead2W(144);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 43:                        // '..'
    case 12616:                     // 'ancestor' '::'
    case 12617:                     // 'ancestor-or-self' '::'
    case 12702:                     // 'parent' '::'
    case 12706:                     // 'preceding' '::'
    case 12707:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(140);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(148);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    case 87:                        // 'child'
    case 98:                        // 'descendant'
    case 99:                        // 'descendant-or-self'
    case 116:                       // 'following'
    case 117:                       // 'following-sibling'
    case 172:                       // 'self'
      lookahead2W(144);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 12623:                     // 'attribute' '::'
    case 12631:                     // 'child' '::'
    case 12642:                     // 'descendant' '::'
    case 12643:                     // 'descendant-or-self' '::'
    case 12660:                     // 'following' '::'
    case 12661:                     // 'following-sibling' '::'
    case 12716:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(161);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
      lookahead2W(148);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    case 87:                        // 'child'
    case 98:                        // 'descendant'
    case 99:                        // 'descendant-or-self'
    case 116:                       // 'following'
    case 117:                       // 'following-sibling'
    case 172:                       // 'self'
      lookahead2W(144);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 12623:                     // 'attribute' '::'
    case 12631:                     // 'child' '::'
    case 12642:                     // 'descendant' '::'
    case 12643:                     // 'descendant-or-self' '::'
    case 12660:                     // 'following' '::'
    case 12661:                     // 'following-sibling' '::'
    case 12716:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(161);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 87:                        // 'child'
      shift(87);                    // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 98:                        // 'descendant'
      shift(98);                    // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 79:                        // 'attribute'
      shift(79);                    // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 172:                       // 'self'
      shift(172);                   // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 99:                        // 'descendant-or-self'
      shift(99);                    // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 117:                       // 'following-sibling'
      shift(117);                   // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    default:
      shift(116);                   // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 87:                        // 'child'
      shiftT(87);                   // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 98:                        // 'descendant'
      shiftT(98);                   // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 79:                        // 'attribute'
      shiftT(79);                   // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 172:                       // 'self'
      shiftT(172);                  // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 99:                        // 'descendant-or-self'
      shiftT(99);                   // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 117:                       // 'following-sibling'
      shiftT(117);                  // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    default:
      shiftT(116);                  // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 66)                   // '@'
    {
      shift(66);                    // '@'
    }
    lookahead1W(161);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      shiftT(66);                   // '@'
    }
    lookahead1W(161);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 43:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(161);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 43:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(161);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 158:                       // 'parent'
      shift(158);                   // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 72:                        // 'ancestor'
      shift(72);                    // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 163:                       // 'preceding-sibling'
      shift(163);                   // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    case 162:                       // 'preceding'
      shift(162);                   // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
      break;
    default:
      shift(73);                    // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(49);                    // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 158:                       // 'parent'
      shiftT(158);                  // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 72:                        // 'ancestor'
      shiftT(72);                   // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 163:                       // 'preceding-sibling'
      shiftT(163);                  // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    case 162:                       // 'preceding'
      shiftT(162);                  // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
      break;
    default:
      shiftT(73);                   // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(49);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    shift(43);                      // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    shiftT(43);                     // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 79:                        // 'attribute'
    case 89:                        // 'comment'
    case 104:                       // 'document-node'
    case 105:                       // 'element'
    case 145:                       // 'namespace-node'
    case 150:                       // 'node'
    case 166:                       // 'processing-instruction'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 180:                       // 'text'
      lookahead2W(143);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8527:                      // 'attribute' '('
    case 8537:                      // 'comment' '('
    case 8552:                      // 'document-node' '('
    case 8553:                      // 'element' '('
    case 8593:                      // 'namespace-node' '('
    case 8598:                      // 'node' '('
    case 8614:                      // 'processing-instruction' '('
    case 8618:                      // 'schema-attribute' '('
    case 8619:                      // 'schema-element' '('
    case 8628:                      // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 79:                        // 'attribute'
    case 89:                        // 'comment'
    case 104:                       // 'document-node'
    case 105:                       // 'element'
    case 145:                       // 'namespace-node'
    case 150:                       // 'node'
    case 166:                       // 'processing-instruction'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 180:                       // 'text'
      lookahead2W(143);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8527:                      // 'attribute' '('
    case 8537:                      // 'comment' '('
    case 8552:                      // 'document-node' '('
    case 8553:                      // 'element' '('
    case 8593:                      // 'namespace-node' '('
    case 8598:                      // 'node' '('
    case 8614:                      // 'processing-instruction' '('
    case 8618:                      // 'schema-attribute' '('
    case 8619:                      // 'schema-element' '('
    case 8628:                      // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 20:                        // Wildcard
      shift(20);                    // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 20:                        // Wildcard
      shiftT(20);                   // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(152);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                    // '||' | '}'
      if (l1 != 33                  // '('
       && l1 != 60                  // '=>'
       && l1 != 64                  // '?'
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 33:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      case 64:                      // '?'
        whitespace();
        parse_Lookup();
        break;
      default:
        whitespace();
        parse_ArrowPostfix();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(152);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                    // '||' | '}'
      if (l1 != 33                  // '('
       && l1 != 60                  // '=>'
       && l1 != 64                  // '?'
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      case 33:                      // '('
        try_ArgumentList();
        break;
      case 64:                      // '?'
        try_Lookup();
        break;
      default:
        try_ArrowPostfix();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(33);                      // '('
    lookahead1W(173);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(67);            // S^WS | '(:' | ')' | ','
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    shift(36);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(33);                     // '('
    lookahead1W(173);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(67);            // S^WS | '(:' | ')' | ','
        if (l1 != 39)               // ','
        {
          break;
        }
        shiftT(39);                 // ','
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_Argument();
      }
    }
    shiftT(36);                     // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(140);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(140);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | '|' | '||' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(68);                      // '['
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(69);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(68);                     // '['
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(69);                     // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    shift(64);                      // '?'
    lookahead1W(127);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    shiftT(64);                     // '?'
    lookahead1W(127);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      shift(1);                     // IntegerLiteral
      break;
    case 33:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 37:                        // '*'
      shift(37);                    // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      shiftT(1);                    // IntegerLiteral
      break;
    case 33:                        // '('
      try_ParenthesizedExpr();
      break;
    case 37:                        // '*'
      shiftT(37);                   // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowPostfix()
  {
    eventHandler.startNonterminal("ArrowPostfix", e0);
    shift(60);                      // '=>'
    lookahead1W(164);               // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_ArrowFunctionSpecifier();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("ArrowPostfix", e0);
  }

  function try_ArrowPostfix()
  {
    shiftT(60);                     // '=>'
    lookahead1W(164);               // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_ArrowFunctionSpecifier();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 30:                        // '$'
      parse_VarRef();
      break;
    case 33:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 30:                        // '$'
      try_VarRef();
      break;
    case 33:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 144:                       // 'namespace'
      lookahead2W(128);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 166:                       // 'processing-instruction'
      lookahead2W(125);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 79:                        // 'attribute'
    case 105:                       // 'element'
      lookahead2W(163);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
      break;
    case 103:                       // 'document'
    case 156:                       // 'ordered'
    case 189:                       // 'unordered'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 75:                        // 'array'
    case 89:                        // 'comment'
    case 140:                       // 'map'
    case 180:                       // 'text'
      lookahead2W(62);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 74:                        // 'and'
    case 77:                        // 'ascending'
    case 83:                        // 'case'
    case 84:                        // 'cast'
    case 85:                        // 'castable'
    case 87:                        // 'child'
    case 88:                        // 'collation'
    case 93:                        // 'count'
    case 96:                        // 'declare'
    case 97:                        // 'default'
    case 98:                        // 'descendant'
    case 99:                        // 'descendant-or-self'
    case 100:                       // 'descending'
    case 102:                       // 'div'
    case 106:                       // 'else'
    case 107:                       // 'empty'
    case 110:                       // 'end'
    case 111:                       // 'eq'
    case 112:                       // 'every'
    case 113:                       // 'except'
    case 116:                       // 'following'
    case 117:                       // 'following-sibling'
    case 118:                       // 'for'
    case 120:                       // 'ge'
    case 122:                       // 'group'
    case 124:                       // 'gt'
    case 125:                       // 'idiv'
    case 127:                       // 'import'
    case 131:                       // 'instance'
    case 132:                       // 'intersect'
    case 133:                       // 'is'
    case 136:                       // 'le'
    case 138:                       // 'let'
    case 139:                       // 'lt'
    case 142:                       // 'mod'
    case 143:                       // 'module'
    case 146:                       // 'ne'
    case 152:                       // 'only'
    case 154:                       // 'or'
    case 155:                       // 'order'
    case 158:                       // 'parent'
    case 162:                       // 'preceding'
    case 163:                       // 'preceding-sibling'
    case 167:                       // 'return'
    case 168:                       // 'satisfies'
    case 172:                       // 'self'
    case 174:                       // 'some'
    case 175:                       // 'stable'
    case 176:                       // 'start'
    case 182:                       // 'to'
    case 183:                       // 'treat'
    case 184:                       // 'try'
    case 188:                       // 'union'
    case 190:                       // 'validate'
    case 194:                       // 'where'
    case 196:                       // 'xquery'
      lookahead2W(61);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 30:                        // '$'
      parse_VarRef();
      break;
    case 33:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 42:                        // '.'
      parse_ContextItemExpr();
      break;
    case 8453:                      // URIQualifiedName '('
    case 8463:                      // QName^Token '('
    case 8520:                      // 'ancestor' '('
    case 8521:                      // 'ancestor-or-self' '('
    case 8522:                      // 'and' '('
    case 8525:                      // 'ascending' '('
    case 8531:                      // 'case' '('
    case 8532:                      // 'cast' '('
    case 8533:                      // 'castable' '('
    case 8535:                      // 'child' '('
    case 8536:                      // 'collation' '('
    case 8541:                      // 'count' '('
    case 8544:                      // 'declare' '('
    case 8545:                      // 'default' '('
    case 8546:                      // 'descendant' '('
    case 8547:                      // 'descendant-or-self' '('
    case 8548:                      // 'descending' '('
    case 8550:                      // 'div' '('
    case 8551:                      // 'document' '('
    case 8554:                      // 'else' '('
    case 8555:                      // 'empty' '('
    case 8558:                      // 'end' '('
    case 8559:                      // 'eq' '('
    case 8560:                      // 'every' '('
    case 8561:                      // 'except' '('
    case 8564:                      // 'following' '('
    case 8565:                      // 'following-sibling' '('
    case 8566:                      // 'for' '('
    case 8568:                      // 'ge' '('
    case 8570:                      // 'group' '('
    case 8572:                      // 'gt' '('
    case 8573:                      // 'idiv' '('
    case 8575:                      // 'import' '('
    case 8579:                      // 'instance' '('
    case 8580:                      // 'intersect' '('
    case 8581:                      // 'is' '('
    case 8584:                      // 'le' '('
    case 8586:                      // 'let' '('
    case 8587:                      // 'lt' '('
    case 8590:                      // 'mod' '('
    case 8591:                      // 'module' '('
    case 8592:                      // 'namespace' '('
    case 8594:                      // 'ne' '('
    case 8600:                      // 'only' '('
    case 8602:                      // 'or' '('
    case 8603:                      // 'order' '('
    case 8604:                      // 'ordered' '('
    case 8606:                      // 'parent' '('
    case 8610:                      // 'preceding' '('
    case 8611:                      // 'preceding-sibling' '('
    case 8615:                      // 'return' '('
    case 8616:                      // 'satisfies' '('
    case 8620:                      // 'self' '('
    case 8622:                      // 'some' '('
    case 8623:                      // 'stable' '('
    case 8624:                      // 'start' '('
    case 8630:                      // 'to' '('
    case 8631:                      // 'treat' '('
    case 8632:                      // 'try' '('
    case 8636:                      // 'union' '('
    case 8637:                      // 'unordered' '('
    case 8638:                      // 'validate' '('
    case 8642:                      // 'where' '('
    case 8644:                      // 'xquery' '('
      parse_FunctionCall();
      break;
    case 50844:                     // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 50877:                     // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 31:                        // '%'
    case 104:                       // 'document-node'
    case 108:                       // 'empty-sequence'
    case 119:                       // 'function'
    case 126:                       // 'if'
    case 134:                       // 'item'
    case 145:                       // 'namespace-node'
    case 150:                       // 'node'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 179:                       // 'switch'
    case 187:                       // 'typeswitch'
    case 7173:                      // URIQualifiedName '#'
    case 7183:                      // QName^Token '#'
    case 7240:                      // 'ancestor' '#'
    case 7241:                      // 'ancestor-or-self' '#'
    case 7242:                      // 'and' '#'
    case 7243:                      // 'array' '#'
    case 7245:                      // 'ascending' '#'
    case 7247:                      // 'attribute' '#'
    case 7251:                      // 'case' '#'
    case 7252:                      // 'cast' '#'
    case 7253:                      // 'castable' '#'
    case 7255:                      // 'child' '#'
    case 7256:                      // 'collation' '#'
    case 7257:                      // 'comment' '#'
    case 7261:                      // 'count' '#'
    case 7264:                      // 'declare' '#'
    case 7265:                      // 'default' '#'
    case 7266:                      // 'descendant' '#'
    case 7267:                      // 'descendant-or-self' '#'
    case 7268:                      // 'descending' '#'
    case 7270:                      // 'div' '#'
    case 7271:                      // 'document' '#'
    case 7273:                      // 'element' '#'
    case 7274:                      // 'else' '#'
    case 7275:                      // 'empty' '#'
    case 7278:                      // 'end' '#'
    case 7279:                      // 'eq' '#'
    case 7280:                      // 'every' '#'
    case 7281:                      // 'except' '#'
    case 7284:                      // 'following' '#'
    case 7285:                      // 'following-sibling' '#'
    case 7286:                      // 'for' '#'
    case 7288:                      // 'ge' '#'
    case 7290:                      // 'group' '#'
    case 7292:                      // 'gt' '#'
    case 7293:                      // 'idiv' '#'
    case 7295:                      // 'import' '#'
    case 7299:                      // 'instance' '#'
    case 7300:                      // 'intersect' '#'
    case 7301:                      // 'is' '#'
    case 7304:                      // 'le' '#'
    case 7306:                      // 'let' '#'
    case 7307:                      // 'lt' '#'
    case 7308:                      // 'map' '#'
    case 7310:                      // 'mod' '#'
    case 7311:                      // 'module' '#'
    case 7312:                      // 'namespace' '#'
    case 7314:                      // 'ne' '#'
    case 7320:                      // 'only' '#'
    case 7322:                      // 'or' '#'
    case 7323:                      // 'order' '#'
    case 7324:                      // 'ordered' '#'
    case 7326:                      // 'parent' '#'
    case 7330:                      // 'preceding' '#'
    case 7331:                      // 'preceding-sibling' '#'
    case 7334:                      // 'processing-instruction' '#'
    case 7335:                      // 'return' '#'
    case 7336:                      // 'satisfies' '#'
    case 7340:                      // 'self' '#'
    case 7342:                      // 'some' '#'
    case 7343:                      // 'stable' '#'
    case 7344:                      // 'start' '#'
    case 7348:                      // 'text' '#'
    case 7350:                      // 'to' '#'
    case 7351:                      // 'treat' '#'
    case 7352:                      // 'try' '#'
    case 7356:                      // 'union' '#'
    case 7357:                      // 'unordered' '#'
    case 7358:                      // 'validate' '#'
    case 7362:                      // 'where' '#'
    case 7364:                      // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 50828:                     // 'map' '{'
      parse_MapConstructor();
      break;
    case 68:                        // '['
    case 50763:                     // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 64:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_NodeConstructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 144:                       // 'namespace'
      lookahead2W(128);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 166:                       // 'processing-instruction'
      lookahead2W(125);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 79:                        // 'attribute'
    case 105:                       // 'element'
      lookahead2W(163);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
      break;
    case 103:                       // 'document'
    case 156:                       // 'ordered'
    case 189:                       // 'unordered'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 75:                        // 'array'
    case 89:                        // 'comment'
    case 140:                       // 'map'
    case 180:                       // 'text'
      lookahead2W(62);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 72:                        // 'ancestor'
    case 73:                        // 'ancestor-or-self'
    case 74:                        // 'and'
    case 77:                        // 'ascending'
    case 83:                        // 'case'
    case 84:                        // 'cast'
    case 85:                        // 'castable'
    case 87:                        // 'child'
    case 88:                        // 'collation'
    case 93:                        // 'count'
    case 96:                        // 'declare'
    case 97:                        // 'default'
    case 98:                        // 'descendant'
    case 99:                        // 'descendant-or-self'
    case 100:                       // 'descending'
    case 102:                       // 'div'
    case 106:                       // 'else'
    case 107:                       // 'empty'
    case 110:                       // 'end'
    case 111:                       // 'eq'
    case 112:                       // 'every'
    case 113:                       // 'except'
    case 116:                       // 'following'
    case 117:                       // 'following-sibling'
    case 118:                       // 'for'
    case 120:                       // 'ge'
    case 122:                       // 'group'
    case 124:                       // 'gt'
    case 125:                       // 'idiv'
    case 127:                       // 'import'
    case 131:                       // 'instance'
    case 132:                       // 'intersect'
    case 133:                       // 'is'
    case 136:                       // 'le'
    case 138:                       // 'let'
    case 139:                       // 'lt'
    case 142:                       // 'mod'
    case 143:                       // 'module'
    case 146:                       // 'ne'
    case 152:                       // 'only'
    case 154:                       // 'or'
    case 155:                       // 'order'
    case 158:                       // 'parent'
    case 162:                       // 'preceding'
    case 163:                       // 'preceding-sibling'
    case 167:                       // 'return'
    case 168:                       // 'satisfies'
    case 172:                       // 'self'
    case 174:                       // 'some'
    case 175:                       // 'stable'
    case 176:                       // 'start'
    case 182:                       // 'to'
    case 183:                       // 'treat'
    case 184:                       // 'try'
    case 188:                       // 'union'
    case 190:                       // 'validate'
    case 194:                       // 'where'
    case 196:                       // 'xquery'
      lookahead2W(61);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 30:                        // '$'
      try_VarRef();
      break;
    case 33:                        // '('
      try_ParenthesizedExpr();
      break;
    case 42:                        // '.'
      try_ContextItemExpr();
      break;
    case 8453:                      // URIQualifiedName '('
    case 8463:                      // QName^Token '('
    case 8520:                      // 'ancestor' '('
    case 8521:                      // 'ancestor-or-self' '('
    case 8522:                      // 'and' '('
    case 8525:                      // 'ascending' '('
    case 8531:                      // 'case' '('
    case 8532:                      // 'cast' '('
    case 8533:                      // 'castable' '('
    case 8535:                      // 'child' '('
    case 8536:                      // 'collation' '('
    case 8541:                      // 'count' '('
    case 8544:                      // 'declare' '('
    case 8545:                      // 'default' '('
    case 8546:                      // 'descendant' '('
    case 8547:                      // 'descendant-or-self' '('
    case 8548:                      // 'descending' '('
    case 8550:                      // 'div' '('
    case 8551:                      // 'document' '('
    case 8554:                      // 'else' '('
    case 8555:                      // 'empty' '('
    case 8558:                      // 'end' '('
    case 8559:                      // 'eq' '('
    case 8560:                      // 'every' '('
    case 8561:                      // 'except' '('
    case 8564:                      // 'following' '('
    case 8565:                      // 'following-sibling' '('
    case 8566:                      // 'for' '('
    case 8568:                      // 'ge' '('
    case 8570:                      // 'group' '('
    case 8572:                      // 'gt' '('
    case 8573:                      // 'idiv' '('
    case 8575:                      // 'import' '('
    case 8579:                      // 'instance' '('
    case 8580:                      // 'intersect' '('
    case 8581:                      // 'is' '('
    case 8584:                      // 'le' '('
    case 8586:                      // 'let' '('
    case 8587:                      // 'lt' '('
    case 8590:                      // 'mod' '('
    case 8591:                      // 'module' '('
    case 8592:                      // 'namespace' '('
    case 8594:                      // 'ne' '('
    case 8600:                      // 'only' '('
    case 8602:                      // 'or' '('
    case 8603:                      // 'order' '('
    case 8604:                      // 'ordered' '('
    case 8606:                      // 'parent' '('
    case 8610:                      // 'preceding' '('
    case 8611:                      // 'preceding-sibling' '('
    case 8615:                      // 'return' '('
    case 8616:                      // 'satisfies' '('
    case 8620:                      // 'self' '('
    case 8622:                      // 'some' '('
    case 8623:                      // 'stable' '('
    case 8624:                      // 'start' '('
    case 8630:                      // 'to' '('
    case 8631:                      // 'treat' '('
    case 8632:                      // 'try' '('
    case 8636:                      // 'union' '('
    case 8637:                      // 'unordered' '('
    case 8638:                      // 'validate' '('
    case 8642:                      // 'where' '('
    case 8644:                      // 'xquery' '('
      try_FunctionCall();
      break;
    case 50844:                     // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 50877:                     // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 31:                        // '%'
    case 104:                       // 'document-node'
    case 108:                       // 'empty-sequence'
    case 119:                       // 'function'
    case 126:                       // 'if'
    case 134:                       // 'item'
    case 145:                       // 'namespace-node'
    case 150:                       // 'node'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 179:                       // 'switch'
    case 187:                       // 'typeswitch'
    case 7173:                      // URIQualifiedName '#'
    case 7183:                      // QName^Token '#'
    case 7240:                      // 'ancestor' '#'
    case 7241:                      // 'ancestor-or-self' '#'
    case 7242:                      // 'and' '#'
    case 7243:                      // 'array' '#'
    case 7245:                      // 'ascending' '#'
    case 7247:                      // 'attribute' '#'
    case 7251:                      // 'case' '#'
    case 7252:                      // 'cast' '#'
    case 7253:                      // 'castable' '#'
    case 7255:                      // 'child' '#'
    case 7256:                      // 'collation' '#'
    case 7257:                      // 'comment' '#'
    case 7261:                      // 'count' '#'
    case 7264:                      // 'declare' '#'
    case 7265:                      // 'default' '#'
    case 7266:                      // 'descendant' '#'
    case 7267:                      // 'descendant-or-self' '#'
    case 7268:                      // 'descending' '#'
    case 7270:                      // 'div' '#'
    case 7271:                      // 'document' '#'
    case 7273:                      // 'element' '#'
    case 7274:                      // 'else' '#'
    case 7275:                      // 'empty' '#'
    case 7278:                      // 'end' '#'
    case 7279:                      // 'eq' '#'
    case 7280:                      // 'every' '#'
    case 7281:                      // 'except' '#'
    case 7284:                      // 'following' '#'
    case 7285:                      // 'following-sibling' '#'
    case 7286:                      // 'for' '#'
    case 7288:                      // 'ge' '#'
    case 7290:                      // 'group' '#'
    case 7292:                      // 'gt' '#'
    case 7293:                      // 'idiv' '#'
    case 7295:                      // 'import' '#'
    case 7299:                      // 'instance' '#'
    case 7300:                      // 'intersect' '#'
    case 7301:                      // 'is' '#'
    case 7304:                      // 'le' '#'
    case 7306:                      // 'let' '#'
    case 7307:                      // 'lt' '#'
    case 7308:                      // 'map' '#'
    case 7310:                      // 'mod' '#'
    case 7311:                      // 'module' '#'
    case 7312:                      // 'namespace' '#'
    case 7314:                      // 'ne' '#'
    case 7320:                      // 'only' '#'
    case 7322:                      // 'or' '#'
    case 7323:                      // 'order' '#'
    case 7324:                      // 'ordered' '#'
    case 7326:                      // 'parent' '#'
    case 7330:                      // 'preceding' '#'
    case 7331:                      // 'preceding-sibling' '#'
    case 7334:                      // 'processing-instruction' '#'
    case 7335:                      // 'return' '#'
    case 7336:                      // 'satisfies' '#'
    case 7340:                      // 'self' '#'
    case 7342:                      // 'some' '#'
    case 7343:                      // 'stable' '#'
    case 7344:                      // 'start' '#'
    case 7348:                      // 'text' '#'
    case 7350:                      // 'to' '#'
    case 7351:                      // 'treat' '#'
    case 7352:                      // 'try' '#'
    case 7356:                      // 'union' '#'
    case 7357:                      // 'unordered' '#'
    case 7358:                      // 'validate' '#'
    case 7362:                      // 'where' '#'
    case 7364:                      // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 50828:                     // 'map' '{'
      try_MapConstructor();
      break;
    case 68:                        // '['
    case 50763:                     // 'array' '{'
      try_ArrayConstructor();
      break;
    case 64:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_NodeConstructor();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      shift(4);                     // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      shiftT(4);                    // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      shift(1);                     // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      shift(2);                     // DecimalLiteral
      break;
    default:
      shift(3);                     // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      shiftT(1);                    // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      shiftT(2);                    // DecimalLiteral
      break;
    default:
      shiftT(3);                    // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(30);                      // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(30);                     // '$'
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(33);                      // '('
    lookahead1W(173);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(36);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(33);                     // '('
    lookahead1W(173);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      try_Expr();
    }
    shiftT(36);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(42);                      // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(42);                     // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(156);                     // 'ordered'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(156);                    // 'ordered'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(189);                     // 'unordered'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(189);                    // 'unordered'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 64:                        // '?'
      lookahead2W(131);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9280:                      // '?' ')'
    case 10048:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 64:                        // '?'
      lookahead2W(131);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9280:                      // '?' ')'
    case 10048:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(64);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(64);                     // '?'
  }

  function parse_NodeConstructor()
  {
    eventHandler.startNonterminal("NodeConstructor", e0);
    switch (l1)
    {
    case 52:                        // '<'
    case 53:                        // '<!--'
    case 58:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("NodeConstructor", e0);
  }

  function try_NodeConstructor()
  {
    switch (l1)
    {
    case 52:                        // '<'
    case 53:                        // '<!--'
    case 58:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 52:                        // '<'
      parse_DirElemConstructor();
      break;
    case 53:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 52:                        // '<'
      try_DirElemConstructor();
      break;
    case 53:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(52);                      // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 46:                        // '/>'
      shift(46);                    // '/>'
      break;
    default:
      shift(61);                    // '>'
      for (;;)
      {
        lookahead1(115);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 55)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(55);                    // '</'
      parse_QName();
      lookahead1(13);               // S | '>'
      if (l1 == 16)                 // S
      {
        shift(16);                  // S
      }
      lookahead1(8);                // '>'
      shift(61);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(52);                     // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 46:                        // '/>'
      shiftT(46);                   // '/>'
      break;
    default:
      shiftT(61);                   // '>'
      for (;;)
      {
        lookahead1(115);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 55)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(55);                   // '</'
      try_QName();
      lookahead1(13);               // S | '>'
      if (l1 == 16)                 // S
      {
        shiftT(16);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(61);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 16)                 // S
      {
        break;
      }
      shift(16);                    // S
      lookahead1(160);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 16                  // S
       && l1 != 46                  // '/>'
       && l1 != 61)                 // '>'
      {
        parse_QName();
        lookahead1(12);             // S | '='
        if (l1 == 16)               // S
        {
          shift(16);                // S
        }
        lookahead1(7);              // '='
        shift(59);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 16)               // S
        {
          shift(16);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 16)                 // S
      {
        break;
      }
      shiftT(16);                   // S
      lookahead1(160);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 16                  // S
       && l1 != 46                  // '/>'
       && l1 != 61)                 // '>'
      {
        try_QName();
        lookahead1(12);             // S | '='
        if (l1 == 16)               // S
        {
          shiftT(16);               // S
        }
        lookahead1(7);              // '='
        shiftT(59);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 16)               // S
        {
          shiftT(16);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(15);                 // '"' | "'"
    switch (l1)
    {
    case 27:                        // '"'
      shift(27);                    // '"'
      for (;;)
      {
        lookahead1(110);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 27)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          shift(7);                 // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(27);                    // '"'
      break;
    default:
      shift(32);                    // "'"
      for (;;)
      {
        lookahead1(111);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 32)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          shift(8);                 // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(32);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(15);                 // '"' | "'"
    switch (l1)
    {
    case 27:                        // '"'
      shiftT(27);                   // '"'
      for (;;)
      {
        lookahead1(110);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 27)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          shiftT(7);                // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(27);                   // '"'
      break;
    default:
      shiftT(32);                   // "'"
      for (;;)
      {
        lookahead1(111);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 32)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          shiftT(8);                // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(32);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      shift(10);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      shiftT(10);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      shift(11);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      shiftT(11);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 52:                        // '<'
    case 53:                        // '<!--'
    case 58:                        // '<?'
      parse_DirectConstructor();
      break;
    case 54:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      shift(9);                     // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 52:                        // '<'
    case 53:                        // '<!--'
    case 58:                        // '<?'
      try_DirectConstructor();
      break;
    case 54:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      shiftT(9);                    // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      shift(6);                     // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      shift(13);                    // CharRef
      break;
    case 199:                       // '{{'
      shift(199);                   // '{{'
      break;
    case 203:                       // '}}'
      shift(203);                   // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      shiftT(6);                    // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      shiftT(13);                   // CharRef
      break;
    case 199:                       // '{{'
      shiftT(199);                  // '{{'
      break;
    case 203:                       // '}}'
      shiftT(203);                  // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(53);                      // '<!--'
    lookahead1(2);                  // DirCommentContents
    shift(21);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(41);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(53);                     // '<!--'
    lookahead1(2);                  // DirCommentContents
    shiftT(21);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(41);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(58);                      // '<?'
    lookahead1(0);                  // PITarget
    shift(12);                      // PITarget
    lookahead1(14);                 // S | '?>'
    if (l1 == 16)                   // S
    {
      shift(16);                    // S
      lookahead1(3);                // DirPIContents
      shift(22);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(65);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(58);                     // '<?'
    lookahead1(0);                  // PITarget
    shiftT(12);                     // PITarget
    lookahead1(14);                 // S | '?>'
    if (l1 == 16)                   // S
    {
      shiftT(16);                   // S
      lookahead1(3);                // DirPIContents
      shiftT(22);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(65);                     // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    shift(54);                      // '<![CDATA['
    lookahead1(4);                  // CDataSectionContents
    shift(23);                      // CDataSectionContents
    lookahead1(10);                 // ']]>'
    shift(70);                      // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    shiftT(54);                     // '<![CDATA['
    lookahead1(4);                  // CDataSectionContents
    shiftT(23);                     // CDataSectionContents
    lookahead1(10);                 // ']]>'
    shiftT(70);                     // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 103:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 105:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 79:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 144:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 180:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 89:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 103:                       // 'document'
      try_CompDocConstructor();
      break;
    case 105:                       // 'element'
      try_CompElemConstructor();
      break;
    case 79:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 144:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 180:                       // 'text'
      try_CompTextConstructor();
      break;
    case 89:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(103);                     // 'document'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(103);                    // 'document'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(105);                     // 'element'
    lookahead1W(162);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shift(198);                   // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_Expr();
      shift(202);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(105);                    // 'element'
    lookahead1W(162);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shiftT(198);                  // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_Expr();
      shiftT(202);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(202);                    // '}'
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_Expr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(79);                      // 'attribute'
    lookahead1W(162);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shift(198);                   // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_Expr();
      shift(202);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(79);                     // 'attribute'
    lookahead1W(162);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shiftT(198);                  // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_Expr();
      shiftT(202);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      try_Expr();
    }
    shiftT(202);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(144);                     // 'namespace'
    lookahead1W(123);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shift(198);                   // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      shift(202);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_URIExpr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(144);                    // 'namespace'
    lookahead1W(123);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shiftT(198);                  // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_PrefixExpr();
      shiftT(202);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_URIExpr();
    shiftT(202);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(180);                     // 'text'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(180);                    // 'text'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(89);                      // 'comment'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(89);                     // 'comment'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    shiftT(202);                    // '}'
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(166);                     // 'processing-instruction'
    lookahead1W(123);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shift(198);                   // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_Expr();
      shift(202);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(202);                     // '}'
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(166);                    // 'processing-instruction'
    lookahead1W(123);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 198:                       // '{'
      shiftT(198);                  // '{'
      lookahead1W(171);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_Expr();
      shiftT(202);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      try_Expr();
    }
    shiftT(202);                    // '}'
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 119:                       // 'function'
      lookahead2W(61);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 31:                        // '%'
    case 8567:                      // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 119:                       // 'function'
      lookahead2W(61);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 31:                        // '%'
    case 8567:                      // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(28);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(1);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(28);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(1);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(65);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 31)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(119);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(63);                // S^WS | '$' | '(:' | ')'
    if (l1 == 30)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(36);                      // ')'
    lookahead1W(76);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 76)                   // 'as'
    {
      shift(76);                    // 'as'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(65);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 31)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(119);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(63);                // S^WS | '$' | '(:' | ')'
    if (l1 == 30)                   // '$'
    {
      try_ParamList();
    }
    shiftT(36);                     // ')'
    lookahead1W(76);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 76)                   // 'as'
    {
      shiftT(76);                   // 'as'
      lookahead1W(165);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(58);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    shift(140);                     // 'map'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    shift(202);                     // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    shiftT(140);                    // 'map'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 39)               // ','
        {
          break;
        }
        shiftT(39);                 // ','
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    shiftT(202);                    // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    shift(47);                      // ':'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    shiftT(47);                     // ':'
    lookahead1W(171);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 68:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 68:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    shift(68);                      // '['
    lookahead1W(174);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 69)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(69);                      // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    shiftT(68);                     // '['
    lookahead1W(174);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 69)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        if (l1 != 39)               // ','
        {
          break;
        }
        shiftT(39);                 // ','
        lookahead1W(171);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
      }
    }
    shiftT(69);                     // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    shift(75);                      // 'array'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shift(198);                     // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(202);                     // '}'
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    shiftT(75);                     // 'array'
    lookahead1W(58);                // S^WS | '(:' | '{'
    shiftT(198);                    // '{'
    lookahead1W(175);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 202)                  // '}'
    {
      try_Expr();
    }
    shiftT(202);                    // '}'
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    shift(64);                      // '?'
    lookahead1W(127);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    shiftT(64);                     // '?'
    lookahead1W(127);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(138);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 64)                   // '?'
    {
      shift(64);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(138);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' | 'ascending' | 'case' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '|' | '||' | '}'
    if (l1 == 64)                   // '?'
    {
      shiftT(64);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(76);                      // 'as'
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(76);                     // 'as'
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 108:                       // 'empty-sequence'
      lookahead2W(145);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8556:                      // 'empty-sequence' '('
      shift(108);                   // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(33);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(36);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(141);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'union' | 'where' | '{' | '|' | '||' | '}'
      switch (l1)
      {
      case 37:                      // '*'
      case 38:                      // '+'
      case 64:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 108:                       // 'empty-sequence'
      lookahead2W(145);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8556:                      // 'empty-sequence' '('
      shiftT(108);                  // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(33);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(36);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(141);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'union' | 'where' | '{' | '|' | '||' | '}'
      switch (l1)
      {
      case 37:                      // '*'
      case 38:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 64:                        // '?'
      shift(64);                    // '?'
      break;
    case 37:                        // '*'
      shift(37);                    // '*'
      break;
    default:
      shift(38);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      shiftT(64);                   // '?'
      break;
    case 37:                        // '*'
      shiftT(37);                   // '*'
      break;
    default:
      shiftT(38);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 75:                        // 'array'
    case 79:                        // 'attribute'
    case 89:                        // 'comment'
    case 104:                       // 'document-node'
    case 105:                       // 'element'
    case 119:                       // 'function'
    case 134:                       // 'item'
    case 140:                       // 'map'
    case 145:                       // 'namespace-node'
    case 150:                       // 'node'
    case 166:                       // 'processing-instruction'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 180:                       // 'text'
      lookahead2W(145);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8527:                      // 'attribute' '('
    case 8537:                      // 'comment' '('
    case 8552:                      // 'document-node' '('
    case 8553:                      // 'element' '('
    case 8593:                      // 'namespace-node' '('
    case 8598:                      // 'node' '('
    case 8614:                      // 'processing-instruction' '('
    case 8618:                      // 'schema-attribute' '('
    case 8619:                      // 'schema-element' '('
    case 8628:                      // 'text' '('
      parse_KindTest();
      break;
    case 8582:                      // 'item' '('
      shift(134);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(33);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(36);                    // ')'
      break;
    case 31:                        // '%'
    case 8567:                      // 'function' '('
      parse_FunctionTest();
      break;
    case 8588:                      // 'map' '('
      parse_MapTest();
      break;
    case 8523:                      // 'array' '('
      parse_ArrayTest();
      break;
    case 33:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 75:                        // 'array'
    case 79:                        // 'attribute'
    case 89:                        // 'comment'
    case 104:                       // 'document-node'
    case 105:                       // 'element'
    case 119:                       // 'function'
    case 134:                       // 'item'
    case 140:                       // 'map'
    case 145:                       // 'namespace-node'
    case 150:                       // 'node'
    case 166:                       // 'processing-instruction'
    case 170:                       // 'schema-attribute'
    case 171:                       // 'schema-element'
    case 180:                       // 'text'
      lookahead2W(145);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                    // 'ascending' | 'at' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'union' | 'where' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8527:                      // 'attribute' '('
    case 8537:                      // 'comment' '('
    case 8552:                      // 'document-node' '('
    case 8553:                      // 'element' '('
    case 8593:                      // 'namespace-node' '('
    case 8598:                      // 'node' '('
    case 8614:                      // 'processing-instruction' '('
    case 8618:                      // 'schema-attribute' '('
    case 8619:                      // 'schema-element' '('
    case 8628:                      // 'text' '('
      try_KindTest();
      break;
    case 8582:                      // 'item' '('
      shiftT(134);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(33);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(36);                   // ')'
      break;
    case 31:                        // '%'
    case 8567:                      // 'function' '('
      try_FunctionTest();
      break;
    case 8588:                      // 'map' '('
      try_MapTest();
      break;
    case 8523:                      // 'array' '('
      try_ArrayTest();
      break;
    case 33:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 104:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 105:                       // 'element'
      parse_ElementTest();
      break;
    case 79:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 171:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 170:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 166:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 89:                        // 'comment'
      parse_CommentTest();
      break;
    case 180:                       // 'text'
      parse_TextTest();
      break;
    case 145:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 104:                       // 'document-node'
      try_DocumentTest();
      break;
    case 105:                       // 'element'
      try_ElementTest();
      break;
    case 79:                        // 'attribute'
      try_AttributeTest();
      break;
    case 171:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 170:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 166:                       // 'processing-instruction'
      try_PITest();
      break;
    case 89:                        // 'comment'
      try_CommentTest();
      break;
    case 180:                       // 'text'
      try_TextTest();
      break;
    case 145:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(150);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(150);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(104);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(98);                // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 36)                   // ')'
    {
      switch (l1)
      {
      case 105:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(104);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(98);                // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 36)                   // ')'
    {
      switch (l1)
      {
      case 105:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(180);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(180);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(89);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(89);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(145);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(145);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(166);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(124);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where'
    if (l1 != 36)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        shift(4);                   // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(166);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(124);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where'
    if (l1 != 36)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        shiftT(4);                  // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(79);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(166);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(67);              // S^WS | '(:' | ')' | ','
      if (l1 == 39)                 // ','
      {
        shift(39);                  // ','
        lookahead1W(159);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(79);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(166);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(67);              // S^WS | '(:' | ')' | ','
      if (l1 == 39)                 // ','
      {
        shiftT(39);                 // ','
        lookahead1W(159);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 37:                        // '*'
      shift(37);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 37:                        // '*'
      shiftT(37);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(170);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(170);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(105);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(166);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(67);              // S^WS | '(:' | ')' | ','
      if (l1 == 39)                 // ','
      {
        shift(39);                  // ','
        lookahead1W(159);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(68);            // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shift(64);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(105);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(166);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(67);              // S^WS | '(:' | ')' | ','
      if (l1 == 39)                 // ','
      {
        shiftT(39);                 // ','
        lookahead1W(159);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_TypeName();
        lookahead1W(68);            // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shiftT(64);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 37:                        // '*'
      shift(37);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 37:                        // '*'
      shiftT(37);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(171);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(171);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(65);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 31)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 119:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(3, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(65);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 31)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 119:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(3, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(119);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(37);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(119);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(37);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(119);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(168);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(67);            // S^WS | '(:' | ')' | ','
        if (l1 != 39)               // ','
        {
          break;
        }
        shift(39);                  // ','
        lookahead1W(165);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    shift(36);                      // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    shift(76);                      // 'as'
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(119);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(168);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 36)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(67);            // S^WS | '(:' | ')' | ','
        if (l1 != 39)               // ','
        {
          break;
        }
        shiftT(39);                 // ','
        lookahead1W(165);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_SequenceType();
      }
    }
    shiftT(36);                     // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    shiftT(76);                     // 'as'
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
  }

  function parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 140:                       // 'map'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(4, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(4, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  function try_MapTest()
  {
    switch (l1)
    {
    case 140:                       // 'map'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(4, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(4, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  function parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    shift(140);                     // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(37);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  function try_AnyMapTest()
  {
    shiftT(140);                    // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(37);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    shift(140);                     // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(39);                      // ','
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  function try_TypedMapTest()
  {
    shiftT(140);                    // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(159);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(25);                // S^WS | '(:' | ','
    shiftT(39);                     // ','
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 75:                        // 'array'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  function try_ArrayTest()
  {
    switch (l1)
    {
    case 75:                        // 'array'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  function parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    shift(75);                      // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(37);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  function try_AnyArrayTest()
  {
    shiftT(75);                     // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(37);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    shift(75);                      // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(33);                      // '('
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  function try_TypedArrayTest()
  {
    shiftT(75);                     // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(33);                     // '('
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(33);                      // '('
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(36);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(33);                     // '('
    lookahead1W(165);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(36);                     // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    shift(4);                       // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    shiftT(4);                      // StringLiteral
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(157);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      shift(5);                     // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(157);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      shiftT(5);                    // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      shift(5);                     // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      shiftT(5);                    // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(156);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 75:                        // 'array'
      shift(75);                    // 'array'
      break;
    case 79:                        // 'attribute'
      shift(79);                    // 'attribute'
      break;
    case 89:                        // 'comment'
      shift(89);                    // 'comment'
      break;
    case 104:                       // 'document-node'
      shift(104);                   // 'document-node'
      break;
    case 105:                       // 'element'
      shift(105);                   // 'element'
      break;
    case 108:                       // 'empty-sequence'
      shift(108);                   // 'empty-sequence'
      break;
    case 119:                       // 'function'
      shift(119);                   // 'function'
      break;
    case 126:                       // 'if'
      shift(126);                   // 'if'
      break;
    case 134:                       // 'item'
      shift(134);                   // 'item'
      break;
    case 140:                       // 'map'
      shift(140);                   // 'map'
      break;
    case 145:                       // 'namespace-node'
      shift(145);                   // 'namespace-node'
      break;
    case 150:                       // 'node'
      shift(150);                   // 'node'
      break;
    case 166:                       // 'processing-instruction'
      shift(166);                   // 'processing-instruction'
      break;
    case 170:                       // 'schema-attribute'
      shift(170);                   // 'schema-attribute'
      break;
    case 171:                       // 'schema-element'
      shift(171);                   // 'schema-element'
      break;
    case 179:                       // 'switch'
      shift(179);                   // 'switch'
      break;
    case 180:                       // 'text'
      shift(180);                   // 'text'
      break;
    case 187:                       // 'typeswitch'
      shift(187);                   // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(156);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 75:                        // 'array'
      shiftT(75);                   // 'array'
      break;
    case 79:                        // 'attribute'
      shiftT(79);                   // 'attribute'
      break;
    case 89:                        // 'comment'
      shiftT(89);                   // 'comment'
      break;
    case 104:                       // 'document-node'
      shiftT(104);                  // 'document-node'
      break;
    case 105:                       // 'element'
      shiftT(105);                  // 'element'
      break;
    case 108:                       // 'empty-sequence'
      shiftT(108);                  // 'empty-sequence'
      break;
    case 119:                       // 'function'
      shiftT(119);                  // 'function'
      break;
    case 126:                       // 'if'
      shiftT(126);                  // 'if'
      break;
    case 134:                       // 'item'
      shiftT(134);                  // 'item'
      break;
    case 140:                       // 'map'
      shiftT(140);                  // 'map'
      break;
    case 145:                       // 'namespace-node'
      shiftT(145);                  // 'namespace-node'
      break;
    case 150:                       // 'node'
      shiftT(150);                  // 'node'
      break;
    case 166:                       // 'processing-instruction'
      shiftT(166);                  // 'processing-instruction'
      break;
    case 170:                       // 'schema-attribute'
      shiftT(170);                  // 'schema-attribute'
      break;
    case 171:                       // 'schema-element'
      shiftT(171);                  // 'schema-element'
      break;
    case 179:                       // 'switch'
      shiftT(179);                  // 'switch'
      break;
    case 180:                       // 'text'
      shiftT(180);                  // 'text'
      break;
    case 187:                       // 'typeswitch'
      shiftT(187);                  // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      shift(15);                    // QName^Token
      break;
    case 72:                        // 'ancestor'
      shift(72);                    // 'ancestor'
      break;
    case 73:                        // 'ancestor-or-self'
      shift(73);                    // 'ancestor-or-self'
      break;
    case 74:                        // 'and'
      shift(74);                    // 'and'
      break;
    case 77:                        // 'ascending'
      shift(77);                    // 'ascending'
      break;
    case 83:                        // 'case'
      shift(83);                    // 'case'
      break;
    case 84:                        // 'cast'
      shift(84);                    // 'cast'
      break;
    case 85:                        // 'castable'
      shift(85);                    // 'castable'
      break;
    case 87:                        // 'child'
      shift(87);                    // 'child'
      break;
    case 88:                        // 'collation'
      shift(88);                    // 'collation'
      break;
    case 93:                        // 'count'
      shift(93);                    // 'count'
      break;
    case 96:                        // 'declare'
      shift(96);                    // 'declare'
      break;
    case 97:                        // 'default'
      shift(97);                    // 'default'
      break;
    case 98:                        // 'descendant'
      shift(98);                    // 'descendant'
      break;
    case 99:                        // 'descendant-or-self'
      shift(99);                    // 'descendant-or-self'
      break;
    case 100:                       // 'descending'
      shift(100);                   // 'descending'
      break;
    case 102:                       // 'div'
      shift(102);                   // 'div'
      break;
    case 103:                       // 'document'
      shift(103);                   // 'document'
      break;
    case 106:                       // 'else'
      shift(106);                   // 'else'
      break;
    case 107:                       // 'empty'
      shift(107);                   // 'empty'
      break;
    case 110:                       // 'end'
      shift(110);                   // 'end'
      break;
    case 111:                       // 'eq'
      shift(111);                   // 'eq'
      break;
    case 112:                       // 'every'
      shift(112);                   // 'every'
      break;
    case 113:                       // 'except'
      shift(113);                   // 'except'
      break;
    case 116:                       // 'following'
      shift(116);                   // 'following'
      break;
    case 117:                       // 'following-sibling'
      shift(117);                   // 'following-sibling'
      break;
    case 118:                       // 'for'
      shift(118);                   // 'for'
      break;
    case 120:                       // 'ge'
      shift(120);                   // 'ge'
      break;
    case 122:                       // 'group'
      shift(122);                   // 'group'
      break;
    case 124:                       // 'gt'
      shift(124);                   // 'gt'
      break;
    case 125:                       // 'idiv'
      shift(125);                   // 'idiv'
      break;
    case 127:                       // 'import'
      shift(127);                   // 'import'
      break;
    case 131:                       // 'instance'
      shift(131);                   // 'instance'
      break;
    case 132:                       // 'intersect'
      shift(132);                   // 'intersect'
      break;
    case 133:                       // 'is'
      shift(133);                   // 'is'
      break;
    case 136:                       // 'le'
      shift(136);                   // 'le'
      break;
    case 138:                       // 'let'
      shift(138);                   // 'let'
      break;
    case 139:                       // 'lt'
      shift(139);                   // 'lt'
      break;
    case 142:                       // 'mod'
      shift(142);                   // 'mod'
      break;
    case 143:                       // 'module'
      shift(143);                   // 'module'
      break;
    case 144:                       // 'namespace'
      shift(144);                   // 'namespace'
      break;
    case 146:                       // 'ne'
      shift(146);                   // 'ne'
      break;
    case 152:                       // 'only'
      shift(152);                   // 'only'
      break;
    case 154:                       // 'or'
      shift(154);                   // 'or'
      break;
    case 155:                       // 'order'
      shift(155);                   // 'order'
      break;
    case 156:                       // 'ordered'
      shift(156);                   // 'ordered'
      break;
    case 158:                       // 'parent'
      shift(158);                   // 'parent'
      break;
    case 162:                       // 'preceding'
      shift(162);                   // 'preceding'
      break;
    case 163:                       // 'preceding-sibling'
      shift(163);                   // 'preceding-sibling'
      break;
    case 167:                       // 'return'
      shift(167);                   // 'return'
      break;
    case 168:                       // 'satisfies'
      shift(168);                   // 'satisfies'
      break;
    case 172:                       // 'self'
      shift(172);                   // 'self'
      break;
    case 174:                       // 'some'
      shift(174);                   // 'some'
      break;
    case 175:                       // 'stable'
      shift(175);                   // 'stable'
      break;
    case 176:                       // 'start'
      shift(176);                   // 'start'
      break;
    case 182:                       // 'to'
      shift(182);                   // 'to'
      break;
    case 183:                       // 'treat'
      shift(183);                   // 'treat'
      break;
    case 184:                       // 'try'
      shift(184);                   // 'try'
      break;
    case 188:                       // 'union'
      shift(188);                   // 'union'
      break;
    case 189:                       // 'unordered'
      shift(189);                   // 'unordered'
      break;
    case 190:                       // 'validate'
      shift(190);                   // 'validate'
      break;
    case 194:                       // 'where'
      shift(194);                   // 'where'
      break;
    default:
      shift(196);                   // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      shiftT(15);                   // QName^Token
      break;
    case 72:                        // 'ancestor'
      shiftT(72);                   // 'ancestor'
      break;
    case 73:                        // 'ancestor-or-self'
      shiftT(73);                   // 'ancestor-or-self'
      break;
    case 74:                        // 'and'
      shiftT(74);                   // 'and'
      break;
    case 77:                        // 'ascending'
      shiftT(77);                   // 'ascending'
      break;
    case 83:                        // 'case'
      shiftT(83);                   // 'case'
      break;
    case 84:                        // 'cast'
      shiftT(84);                   // 'cast'
      break;
    case 85:                        // 'castable'
      shiftT(85);                   // 'castable'
      break;
    case 87:                        // 'child'
      shiftT(87);                   // 'child'
      break;
    case 88:                        // 'collation'
      shiftT(88);                   // 'collation'
      break;
    case 93:                        // 'count'
      shiftT(93);                   // 'count'
      break;
    case 96:                        // 'declare'
      shiftT(96);                   // 'declare'
      break;
    case 97:                        // 'default'
      shiftT(97);                   // 'default'
      break;
    case 98:                        // 'descendant'
      shiftT(98);                   // 'descendant'
      break;
    case 99:                        // 'descendant-or-self'
      shiftT(99);                   // 'descendant-or-self'
      break;
    case 100:                       // 'descending'
      shiftT(100);                  // 'descending'
      break;
    case 102:                       // 'div'
      shiftT(102);                  // 'div'
      break;
    case 103:                       // 'document'
      shiftT(103);                  // 'document'
      break;
    case 106:                       // 'else'
      shiftT(106);                  // 'else'
      break;
    case 107:                       // 'empty'
      shiftT(107);                  // 'empty'
      break;
    case 110:                       // 'end'
      shiftT(110);                  // 'end'
      break;
    case 111:                       // 'eq'
      shiftT(111);                  // 'eq'
      break;
    case 112:                       // 'every'
      shiftT(112);                  // 'every'
      break;
    case 113:                       // 'except'
      shiftT(113);                  // 'except'
      break;
    case 116:                       // 'following'
      shiftT(116);                  // 'following'
      break;
    case 117:                       // 'following-sibling'
      shiftT(117);                  // 'following-sibling'
      break;
    case 118:                       // 'for'
      shiftT(118);                  // 'for'
      break;
    case 120:                       // 'ge'
      shiftT(120);                  // 'ge'
      break;
    case 122:                       // 'group'
      shiftT(122);                  // 'group'
      break;
    case 124:                       // 'gt'
      shiftT(124);                  // 'gt'
      break;
    case 125:                       // 'idiv'
      shiftT(125);                  // 'idiv'
      break;
    case 127:                       // 'import'
      shiftT(127);                  // 'import'
      break;
    case 131:                       // 'instance'
      shiftT(131);                  // 'instance'
      break;
    case 132:                       // 'intersect'
      shiftT(132);                  // 'intersect'
      break;
    case 133:                       // 'is'
      shiftT(133);                  // 'is'
      break;
    case 136:                       // 'le'
      shiftT(136);                  // 'le'
      break;
    case 138:                       // 'let'
      shiftT(138);                  // 'let'
      break;
    case 139:                       // 'lt'
      shiftT(139);                  // 'lt'
      break;
    case 142:                       // 'mod'
      shiftT(142);                  // 'mod'
      break;
    case 143:                       // 'module'
      shiftT(143);                  // 'module'
      break;
    case 144:                       // 'namespace'
      shiftT(144);                  // 'namespace'
      break;
    case 146:                       // 'ne'
      shiftT(146);                  // 'ne'
      break;
    case 152:                       // 'only'
      shiftT(152);                  // 'only'
      break;
    case 154:                       // 'or'
      shiftT(154);                  // 'or'
      break;
    case 155:                       // 'order'
      shiftT(155);                  // 'order'
      break;
    case 156:                       // 'ordered'
      shiftT(156);                  // 'ordered'
      break;
    case 158:                       // 'parent'
      shiftT(158);                  // 'parent'
      break;
    case 162:                       // 'preceding'
      shiftT(162);                  // 'preceding'
      break;
    case 163:                       // 'preceding-sibling'
      shiftT(163);                  // 'preceding-sibling'
      break;
    case 167:                       // 'return'
      shiftT(167);                  // 'return'
      break;
    case 168:                       // 'satisfies'
      shiftT(168);                  // 'satisfies'
      break;
    case 172:                       // 'self'
      shiftT(172);                  // 'self'
      break;
    case 174:                       // 'some'
      shiftT(174);                  // 'some'
      break;
    case 175:                       // 'stable'
      shiftT(175);                  // 'stable'
      break;
    case 176:                       // 'start'
      shiftT(176);                  // 'start'
      break;
    case 182:                       // 'to'
      shiftT(182);                  // 'to'
      break;
    case 183:                       // 'treat'
      shiftT(183);                  // 'treat'
      break;
    case 184:                       // 'try'
      shiftT(184);                  // 'try'
      break;
    case 188:                       // 'union'
      shiftT(188);                  // 'union'
      break;
    case 189:                       // 'unordered'
      shiftT(189);                  // 'unordered'
      break;
    case 190:                       // 'validate'
      shiftT(190);                  // 'validate'
      break;
    case 194:                       // 'where'
      shiftT(194);                  // 'where'
      break;
    default:
      shiftT(196);                  // 'xquery'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      shift(14);                    // NCName^Token
      break;
    case 74:                        // 'and'
      shift(74);                    // 'and'
      break;
    case 77:                        // 'ascending'
      shift(77);                    // 'ascending'
      break;
    case 83:                        // 'case'
      shift(83);                    // 'case'
      break;
    case 84:                        // 'cast'
      shift(84);                    // 'cast'
      break;
    case 85:                        // 'castable'
      shift(85);                    // 'castable'
      break;
    case 88:                        // 'collation'
      shift(88);                    // 'collation'
      break;
    case 93:                        // 'count'
      shift(93);                    // 'count'
      break;
    case 97:                        // 'default'
      shift(97);                    // 'default'
      break;
    case 100:                       // 'descending'
      shift(100);                   // 'descending'
      break;
    case 102:                       // 'div'
      shift(102);                   // 'div'
      break;
    case 106:                       // 'else'
      shift(106);                   // 'else'
      break;
    case 107:                       // 'empty'
      shift(107);                   // 'empty'
      break;
    case 110:                       // 'end'
      shift(110);                   // 'end'
      break;
    case 111:                       // 'eq'
      shift(111);                   // 'eq'
      break;
    case 113:                       // 'except'
      shift(113);                   // 'except'
      break;
    case 118:                       // 'for'
      shift(118);                   // 'for'
      break;
    case 120:                       // 'ge'
      shift(120);                   // 'ge'
      break;
    case 122:                       // 'group'
      shift(122);                   // 'group'
      break;
    case 124:                       // 'gt'
      shift(124);                   // 'gt'
      break;
    case 125:                       // 'idiv'
      shift(125);                   // 'idiv'
      break;
    case 131:                       // 'instance'
      shift(131);                   // 'instance'
      break;
    case 132:                       // 'intersect'
      shift(132);                   // 'intersect'
      break;
    case 133:                       // 'is'
      shift(133);                   // 'is'
      break;
    case 136:                       // 'le'
      shift(136);                   // 'le'
      break;
    case 138:                       // 'let'
      shift(138);                   // 'let'
      break;
    case 139:                       // 'lt'
      shift(139);                   // 'lt'
      break;
    case 142:                       // 'mod'
      shift(142);                   // 'mod'
      break;
    case 146:                       // 'ne'
      shift(146);                   // 'ne'
      break;
    case 152:                       // 'only'
      shift(152);                   // 'only'
      break;
    case 154:                       // 'or'
      shift(154);                   // 'or'
      break;
    case 155:                       // 'order'
      shift(155);                   // 'order'
      break;
    case 167:                       // 'return'
      shift(167);                   // 'return'
      break;
    case 168:                       // 'satisfies'
      shift(168);                   // 'satisfies'
      break;
    case 175:                       // 'stable'
      shift(175);                   // 'stable'
      break;
    case 176:                       // 'start'
      shift(176);                   // 'start'
      break;
    case 182:                       // 'to'
      shift(182);                   // 'to'
      break;
    case 183:                       // 'treat'
      shift(183);                   // 'treat'
      break;
    case 188:                       // 'union'
      shift(188);                   // 'union'
      break;
    default:
      shift(194);                   // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      shiftT(14);                   // NCName^Token
      break;
    case 74:                        // 'and'
      shiftT(74);                   // 'and'
      break;
    case 77:                        // 'ascending'
      shiftT(77);                   // 'ascending'
      break;
    case 83:                        // 'case'
      shiftT(83);                   // 'case'
      break;
    case 84:                        // 'cast'
      shiftT(84);                   // 'cast'
      break;
    case 85:                        // 'castable'
      shiftT(85);                   // 'castable'
      break;
    case 88:                        // 'collation'
      shiftT(88);                   // 'collation'
      break;
    case 93:                        // 'count'
      shiftT(93);                   // 'count'
      break;
    case 97:                        // 'default'
      shiftT(97);                   // 'default'
      break;
    case 100:                       // 'descending'
      shiftT(100);                  // 'descending'
      break;
    case 102:                       // 'div'
      shiftT(102);                  // 'div'
      break;
    case 106:                       // 'else'
      shiftT(106);                  // 'else'
      break;
    case 107:                       // 'empty'
      shiftT(107);                  // 'empty'
      break;
    case 110:                       // 'end'
      shiftT(110);                  // 'end'
      break;
    case 111:                       // 'eq'
      shiftT(111);                  // 'eq'
      break;
    case 113:                       // 'except'
      shiftT(113);                  // 'except'
      break;
    case 118:                       // 'for'
      shiftT(118);                  // 'for'
      break;
    case 120:                       // 'ge'
      shiftT(120);                  // 'ge'
      break;
    case 122:                       // 'group'
      shiftT(122);                  // 'group'
      break;
    case 124:                       // 'gt'
      shiftT(124);                  // 'gt'
      break;
    case 125:                       // 'idiv'
      shiftT(125);                  // 'idiv'
      break;
    case 131:                       // 'instance'
      shiftT(131);                  // 'instance'
      break;
    case 132:                       // 'intersect'
      shiftT(132);                  // 'intersect'
      break;
    case 133:                       // 'is'
      shiftT(133);                  // 'is'
      break;
    case 136:                       // 'le'
      shiftT(136);                  // 'le'
      break;
    case 138:                       // 'let'
      shiftT(138);                  // 'let'
      break;
    case 139:                       // 'lt'
      shiftT(139);                  // 'lt'
      break;
    case 142:                       // 'mod'
      shiftT(142);                  // 'mod'
      break;
    case 146:                       // 'ne'
      shiftT(146);                  // 'ne'
      break;
    case 152:                       // 'only'
      shiftT(152);                  // 'only'
      break;
    case 154:                       // 'or'
      shiftT(154);                  // 'or'
      break;
    case 155:                       // 'order'
      shiftT(155);                  // 'order'
      break;
    case 167:                       // 'return'
      shiftT(167);                  // 'return'
      break;
    case 168:                       // 'satisfies'
      shiftT(168);                  // 'satisfies'
      break;
    case 175:                       // 'stable'
      shiftT(175);                  // 'stable'
      break;
    case 176:                       // 'start'
      shiftT(176);                  // 'start'
      break;
    case 182:                       // 'to'
      shiftT(182);                  // 'to'
      break;
    case 183:                       // 'treat'
      shiftT(183);                  // 'treat'
      break;
    case 188:                       // 'union'
      shiftT(188);                  // 'union'
      break;
    default:
      shiftT(194);                  // 'where'
    }
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 17:                        // S^WS
      shiftT(17);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function try_Comment()
  {
    shiftT(35);                     // '(:'
    for (;;)
    {
      lookahead1(59);               // CommentContents | '(:' | ':)'
      if (l1 == 48)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 18:                      // CommentContents
        shiftT(18);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(48);                     // ':)'
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 17)               // S^WS
      {
        if (code != 35)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 8) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 3) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 3) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 2047; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 11) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 2047)
      {
        result = code;
        code &= 2047;
        end = current;
      }
    }

    result >>= 11;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 8; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 8;
    }

    return (result & 255) - 1;
  }
}

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 2047;
  for (var i = 0; i < 204; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 1921 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 3) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 15) + XQueryParser.EXPECTED[i2 >> 4]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.MAP0 =
[
  /*   0 */ 68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 30, 30, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
  /* 118 */ 59, 60, 61, 62, 63, 64, 65, 66, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 68, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 30, 30, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
  /* 398 */ 64, 65, 66, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 67, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
  /* 452 */ 67, 67, 67, 67
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 2, 45059, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179
];

XQueryParser.TRANSITION =
[
  /*     0 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*    15 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*    30 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*    45 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*    60 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*    75 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*    90 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*   105 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*   120 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 8832, 8868, 8872, 8888, 8872, 8872, 8900, 8916,
  /*   136 */ 8872, 8920, 8871, 8936, 8992, 10500, 9011, 26726, 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882,
  /*   152 */ 27266, 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171,
  /*   168 */ 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887,
  /*   185 */ 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363,
  /*   202 */ 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387,
  /*   218 */ 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145, 10161,
  /*   233 */ 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484,
  /*   248 */ 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 10500, 23271,
  /*   263 */ 20643, 10517, 10529, 10500, 10563, 8992, 10500, 9011, 26726, 10500, 10583, 9032, 9090, 10500, 9092, 9246,
  /*   279 */ 9882, 10601, 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242,
  /*   295 */ 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496,
  /*   312 */ 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686,
  /*   329 */ 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919,
  /*   345 */ 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145,
  /*   360 */ 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431,
  /*   375 */ 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10687, 10643, 10500, 15618, 10500, 9354,
  /*   390 */ 10667, 10662, 10500, 10500, 10851, 10683, 10703, 10500, 9011, 26726, 10056, 10500, 9032, 9090, 10500,
  /*   405 */ 9092, 9246, 9882, 27266, 10722, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187,
  /*   421 */ 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148,
  /*   438 */ 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670,
  /*   455 */ 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870,
  /*   471 */ 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123,
  /*   487 */ 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403,
  /*   502 */ 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10747, 10802, 10500, 11400, 10500,
  /*   517 */ 25304, 23271, 26772, 10792, 26783, 10803, 10819, 8992, 10500, 10844, 26726, 10770, 10500, 9032, 9090,
  /*   532 */ 10500, 9092, 9246, 9882, 27266, 10867, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164,
  /*   548 */ 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248,
  /*   565 */ 10286, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650,
  /*   582 */ 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925,
  /*   598 */ 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129,
  /*   614 */ 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377,
  /*   629 */ 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10541, 10500, 10061,
  /*   644 */ 10546, 25187, 20921, 16745, 10500, 10759, 10230, 10900, 8992, 10500, 9011, 26726, 10500, 10500, 9032,
  /*   659 */ 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137,
  /*   675 */ 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493,
  /*   692 */ 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805,
  /*   709 */ 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884,
  /*   725 */ 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113,
  /*   741 */ 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309,
  /*   756 */ 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10500, 10500,
  /*   771 */ 9854, 10920, 10500, 10938, 16745, 15093, 10500, 11791, 10954, 8992, 10500, 9011, 26726, 10500, 10500,
  /*   786 */ 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108,
  /*   802 */ 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474,
  /*   819 */ 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298,
  /*   836 */ 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609,
  /*   852 */ 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077,
  /*   868 */ 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361,
  /*   883 */ 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10500,
  /*   898 */ 10500, 9854, 10500, 10500, 18562, 17474, 10500, 10500, 10500, 9523, 10987, 10500, 9011, 26726, 10500,
  /*   913 */ 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079,
  /*   929 */ 9108, 9137, 9164, 9187, 9210, 11006, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434,
  /*   946 */ 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666,
  /*   963 */ 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*   979 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*   995 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1010 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10904,
  /*  1025 */ 11028, 10500, 12257, 10500, 16749, 11052, 11047, 10500, 10500, 11637, 11068, 11093, 10500, 9011, 26726,
  /*  1040 */ 16043, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 14657, 16034, 9057, 26959, 10500, 25924, 9041,
  /*  1056 */ 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386,
  /*  1073 */ 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646,
  /*  1090 */ 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*  1107 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*  1123 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1138 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567,
  /*  1153 */ 11112, 11138, 11119, 11135, 11140, 11192, 11156, 11185, 11169, 11208, 11224, 8992, 10500, 11257, 26726,
  /*  1168 */ 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 11278, 26959, 10500, 25924, 9041,
  /*  1184 */ 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386,
  /*  1201 */ 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646,
  /*  1218 */ 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*  1235 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*  1251 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1266 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567,
  /*  1281 */ 15941, 10500, 11262, 11300, 10500, 11302, 11318, 23813, 23819, 23803, 11352, 8992, 10500, 11395, 26726,
  /*  1296 */ 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 11416, 26959, 10500, 25924, 9041,
  /*  1312 */ 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386,
  /*  1329 */ 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646,
  /*  1346 */ 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*  1363 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*  1379 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1394 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567,
  /*  1409 */ 16052, 10500, 9854, 10500, 10500, 23271, 20782, 20795, 20799, 11438, 11454, 8992, 10500, 9011, 26726,
  /*  1424 */ 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924, 9041,
  /*  1440 */ 9079, 9108, 9137, 9164, 9187, 9210, 11479, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386,
  /*  1457 */ 9434, 9474, 9493, 9248, 10274, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646,
  /*  1474 */ 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*  1491 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*  1507 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1522 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567,
  /*  1537 */ 10500, 10500, 9854, 10500, 10500, 23271, 20882, 11501, 11505, 24282, 11521, 8992, 10500, 9011, 26726,
  /*  1552 */ 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 24104, 10500, 25924, 9041,
  /*  1568 */ 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386,
  /*  1585 */ 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646,
  /*  1602 */ 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*  1619 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*  1635 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1650 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567,
  /*  1665 */ 13867, 10500, 9854, 11565, 10500, 11569, 11554, 11585, 11589, 10500, 11605, 8992, 10500, 9011, 26726,
  /*  1680 */ 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924, 9041,
  /*  1696 */ 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386,
  /*  1713 */ 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646,
  /*  1730 */ 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843,
  /*  1747 */ 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042,
  /*  1763 */ 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061,
  /*  1778 */ 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11630,
  /*  1793 */ 10500, 10500, 9854, 10500, 10500, 23271, 21857, 11653, 11657, 8852, 11673, 8992, 10500, 9011, 26726,
  /*  1808 */ 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11706, 24104, 19057, 12096,
  /*  1823 */ 11841, 19884, 10500, 14320, 19140, 19140, 19140, 11741, 24656, 24656, 26558, 10500, 10500, 10500, 11761,
  /*  1838 */ 11779, 11838, 19883, 14060, 19140, 19140, 19140, 19656, 24656, 24656, 24656, 19951, 26272, 10500, 10500,
  /*  1853 */ 19684, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 26218, 11839,
  /*  1868 */ 26866, 23669, 19140, 15613, 19665, 24656, 21480, 10500, 11336, 12097, 19905, 19140, 25726, 24655, 22508,
  /*  1883 */ 21355, 10500, 11807, 23878, 19140, 24656, 26052, 10500, 11831, 24639, 26905, 11857, 10500, 11815, 11875,
  /*  1898 */ 11911, 12118, 21808, 11935, 25258, 25587, 15862, 21826, 18711, 25638, 18944, 24361, 25524, 25618, 25478,
  /*  1913 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 10500, 9532, 16745,
  /*  1928 */ 10500, 10500, 15949, 11951, 8992, 10500, 9011, 27370, 10500, 10500, 11840, 18560, 10500, 25479, 19140,
  /*  1943 */ 24651, 25048, 10500, 10500, 11971, 26959, 10500, 12096, 11841, 19884, 10500, 14320, 19140, 19140, 19140,
  /*  1958 */ 11741, 24656, 24656, 21482, 10500, 10500, 10500, 11761, 10500, 11838, 19883, 14060, 19140, 19140, 19140,
  /*  1973 */ 19656, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140, 25733,
  /*  1988 */ 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655, 24656, 21480,
  /*  2003 */ 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482,
  /*  2018 */ 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862,
  /*  2033 */ 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2048 */ 10567, 16650, 10500, 9854, 10500, 10500, 23271, 23007, 11990, 12002, 12047, 12061, 8992, 10500, 9011,
  /*  2063 */ 26726, 10500, 12094, 9032, 12114, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924,
  /*  2079 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370,
  /*  2096 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801,
  /*  2113 */ 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821,
  /*  2130 */ 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  2146 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  2161 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2176 */ 10567, 16883, 10500, 9854, 10500, 10500, 11077, 16868, 16880, 10500, 12389, 12134, 12167, 10500, 9011,
  /*  2191 */ 15254, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 15389, 10500, 10500, 11971, 17444, 12186,
  /*  2206 */ 12096, 11841, 19884, 10500, 14320, 19140, 19140, 19140, 11741, 24656, 24656, 26029, 10500, 10500, 10500,
  /*  2221 */ 12203, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 19656, 24656, 24656, 24656, 12226, 10500, 10500,
  /*  2236 */ 18410, 10500, 11837, 26391, 23882, 19140, 19140, 22202, 24656, 24656, 24656, 12252, 10500, 10500, 10500,
  /*  2251 */ 11839, 26866, 19140, 19140, 16780, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 21020, 24655,
  /*  2266 */ 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815,
  /*  2281 */ 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618,
  /*  2296 */ 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10567, 9063, 10500, 12366, 11362, 10500, 16714,
  /*  2311 */ 12273, 24560, 12299, 10500, 12345, 12361, 10500, 12382, 26726, 10500, 10500, 9032, 9090, 10500, 9226,
  /*  2326 */ 13067, 12928, 12520, 12311, 16034, 12405, 26959, 10500, 25924, 9041, 9079, 9108, 12427, 12498, 12454,
  /*  2341 */ 13331, 12514, 12536, 12552, 12577, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 12602, 13143, 12484, 13069,
  /*  2357 */ 12438, 12561, 12633, 12933, 12584, 9512, 9548, 21876, 10500, 9586, 9602, 13058, 12686, 12671, 13341,
  /*  2372 */ 12716, 12655, 12866, 13002, 9686, 14363, 9721, 9743, 12758, 12787, 12469, 12818, 12839, 12855, 12882,
  /*  2387 */ 16609, 10884, 25925, 12916, 12700, 12949, 12988, 13035, 13085, 9969, 17078, 13119, 13134, 12644, 13159,
  /*  2402 */ 10042, 10077, 13185, 12771, 13201, 10145, 13217, 12802, 13243, 13259, 13231, 12731, 13286, 13049, 13289,
  /*  2417 */ 10184, 12617, 12742, 13275, 13319, 13305, 13357, 13373, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2432 */ 10567, 20901, 10500, 9854, 12014, 10500, 23271, 13390, 24586, 24592, 10500, 13426, 8992, 10500, 9011,
  /*  2447 */ 26726, 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924,
  /*  2463 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 13451, 9350, 9370,
  /*  2480 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 10445, 9512, 9548, 22664, 10500, 9586, 9602, 9801,
  /*  2497 */ 9646, 9666, 10298, 9805, 9650, 9670, 9449, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 13487, 10339, 9821,
  /*  2514 */ 9843, 16609, 10884, 25925, 9870, 9903, 13503, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  2530 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  2545 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2560 */ 10567, 10500, 10500, 9854, 10500, 10500, 10500, 13519, 13568, 13572, 20205, 13588, 8992, 10500, 9011,
  /*  2575 */ 26726, 10500, 10500, 9032, 10092, 10500, 9092, 9246, 9882, 10415, 12311, 16034, 9057, 26959, 10500, 25924,
  /*  2591 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370,
  /*  2608 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801,
  /*  2625 */ 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821,
  /*  2642 */ 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  2658 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  2673 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2688 */ 13621, 24936, 10500, 9854, 10500, 10500, 23271, 23107, 13655, 13663, 10500, 13679, 13713, 10500, 9011,
  /*  2703 */ 26726, 10500, 10500, 9032, 13735, 10500, 9092, 9246, 9882, 13757, 12311, 16034, 9057, 26959, 10500, 25924,
  /*  2719 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370,
  /*  2736 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801,
  /*  2753 */ 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821,
  /*  2770 */ 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  2786 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  2801 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2816 */ 13798, 13808, 10500, 9854, 10500, 10500, 23271, 23302, 13828, 13832, 13811, 13848, 13883, 10500, 9011,
  /*  2831 */ 26726, 10500, 10500, 9032, 9757, 10500, 15452, 9246, 9882, 11485, 13903, 16034, 9057, 26959, 10500, 25924,
  /*  2847 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370,
  /*  2864 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801,
  /*  2881 */ 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821,
  /*  2898 */ 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  2914 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  2929 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  2944 */ 13928, 10500, 10500, 9854, 13974, 10500, 23271, 16745, 17053, 13970, 15568, 13990, 8992, 10500, 9011,
  /*  2959 */ 26726, 10500, 14023, 9032, 9090, 10500, 9092, 9246, 9882, 14041, 12311, 16034, 9057, 26959, 10500, 25924,
  /*  2975 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370,
  /*  2992 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801,
  /*  3009 */ 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821,
  /*  3026 */ 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  3042 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  3057 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  3072 */ 10567, 10500, 10500, 9854, 10500, 10500, 23271, 16745, 10500, 10500, 14095, 14078, 8992, 10500, 9011,
  /*  3087 */ 26726, 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034, 9057, 26959, 10500, 25924,
  /*  3103 */ 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370,
  /*  3120 */ 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801,
  /*  3137 */ 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821,
  /*  3154 */ 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026,
  /*  3170 */ 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246,
  /*  3185 */ 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  3200 */ 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161, 10500, 9011,
  /*  3215 */ 10500, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500,
  /*  3230 */ 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500,
  /*  3245 */ 16174, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 22158, 10500, 10500,
  /*  3260 */ 18410, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 12252, 10500, 10500, 14056,
  /*  3275 */ 11839, 26866, 19140, 19140, 21570, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 21020, 24655,
  /*  3290 */ 24656, 25477, 23165, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815,
  /*  3305 */ 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618,
  /*  3320 */ 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271,
  /*  3335 */ 14111, 14141, 16181, 15859, 20188, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479,
  /*  3350 */ 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140,
  /*  3365 */ 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 16174, 10500, 11838, 19883, 14060, 19140, 19140,
  /*  3380 */ 19140, 20948, 24656, 24656, 24656, 22158, 10500, 10500, 18410, 10500, 11837, 26391, 23882, 19140, 19140,
  /*  3395 */ 25733, 24656, 24656, 24656, 12252, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 21570, 24655, 24656,
  /*  3410 */ 21480, 10500, 10500, 12097, 19905, 19140, 21020, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656,
  /*  3425 */ 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587,
  /*  3440 */ 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  3455 */ 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161, 10500,
  /*  3470 */ 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500,
  /*  3485 */ 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500,
  /*  3500 */ 10500, 16174, 14200, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 22158, 10500,
  /*  3515 */ 10500, 18410, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 12252, 10500, 10500,
  /*  3530 */ 10500, 11839, 26866, 19140, 19140, 21570, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 21020,
  /*  3545 */ 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500,
  /*  3560 */ 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524,
  /*  3575 */ 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500,
  /*  3590 */ 23271, 14111, 14141, 16181, 15859, 20188, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500,
  /*  3605 */ 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14062, 19140,
  /*  3620 */ 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 16174, 10500, 11838, 19883, 14060, 19140,
  /*  3635 */ 19140, 19140, 20948, 24656, 24656, 24656, 22158, 10500, 10500, 18410, 23122, 11837, 26391, 23882, 19140,
  /*  3650 */ 19140, 25733, 24656, 24656, 24656, 12252, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 21570, 24655,
  /*  3665 */ 24656, 21480, 10500, 10500, 12097, 19905, 19140, 21020, 24655, 24656, 25477, 10500, 12098, 23878, 19140,
  /*  3680 */ 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550,
  /*  3695 */ 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500,
  /*  3710 */ 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161,
  /*  3725 */ 10500, 9011, 12187, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971,
  /*  3740 */ 17499, 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500,
  /*  3755 */ 10500, 10500, 16174, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 22158,
  /*  3770 */ 10500, 10500, 18410, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 12252, 10500,
  /*  3785 */ 10500, 10500, 11839, 26866, 19140, 19140, 21570, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140,
  /*  3800 */ 21020, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656,
  /*  3815 */ 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361,
  /*  3830 */ 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500,
  /*  3845 */ 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560,
  /*  3860 */ 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14062,
  /*  3875 */ 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060,
  /*  3890 */ 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882,
  /*  3905 */ 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613,
  /*  3920 */ 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878,
  /*  3935 */ 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814,
  /*  3950 */ 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500,
  /*  3965 */ 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188,
  /*  3980 */ 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 26099, 10500, 10500,
  /*  3995 */ 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482,
  /*  4010 */ 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656,
  /*  4025 */ 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477,
  /*  4040 */ 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655, 24656, 21480, 10500, 10500, 12097, 19905,
  /*  4055 */ 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549,
  /*  4070 */ 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944,
  /*  4085 */ 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854,
  /*  4100 */ 10500, 10500, 23271, 14111, 14141, 16181, 15859, 23698, 14161, 10500, 9011, 10500, 10500, 10500, 11840,
  /*  4115 */ 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500,
  /*  4130 */ 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883,
  /*  4145 */ 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391,
  /*  4160 */ 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140,
  /*  4175 */ 15613, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098,
  /*  4190 */ 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550,
  /*  4205 */ 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500,
  /*  4220 */ 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14219, 14141, 16181, 15859,
  /*  4235 */ 20188, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500,
  /*  4250 */ 10500, 11971, 10500, 12170, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656,
  /*  4265 */ 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656,
  /*  4280 */ 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656,
  /*  4295 */ 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655, 24656, 21480, 10500, 10500, 12097,
  /*  4310 */ 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881,
  /*  4325 */ 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638,
  /*  4340 */ 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500,
  /*  4355 */ 9854, 10500, 10500, 23271, 14111, 14141, 16800, 14255, 14271, 14161, 10500, 9011, 10500, 10500, 10500,
  /*  4370 */ 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884,
  /*  4385 */ 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500, 11838,
  /*  4400 */ 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837,
  /*  4415 */ 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140,
  /*  4430 */ 19140, 15613, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500,
  /*  4445 */ 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654,
  /*  4460 */ 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500,
  /*  4475 */ 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181,
  /*  4490 */ 15859, 20188, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077,
  /*  4505 */ 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656,
  /*  4520 */ 24656, 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656,
  /*  4535 */ 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656,
  /*  4550 */ 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655, 24656, 21480, 10500, 10500,
  /*  4565 */ 14296, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340,
  /*  4580 */ 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392,
  /*  4595 */ 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 14315, 10500,
  /*  4610 */ 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161, 10500, 9011, 10500, 10500,
  /*  4625 */ 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841,
  /*  4640 */ 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500,
  /*  4655 */ 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500,
  /*  4670 */ 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866,
  /*  4685 */ 19140, 19140, 15613, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477,
  /*  4700 */ 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859,
  /*  4715 */ 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500,
  /*  4730 */ 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 10500, 23271, 24262, 14339,
  /*  4745 */ 14351, 12151, 14379, 8992, 10500, 9011, 26726, 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266,
  /*  4761 */ 12311, 16034, 9057, 26959, 14529, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217,
  /*  4778 */ 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512,
  /*  4795 */ 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743,
  /*  4812 */ 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935,
  /*  4828 */ 9969, 17078, 9996, 10019, 10003, 10026, 14404, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216,
  /*  4843 */ 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500,
  /*  4858 */ 10500, 10500, 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 10500, 23271, 16745, 10500,
  /*  4873 */ 10500, 10500, 9523, 8992, 10500, 9011, 26726, 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266,
  /*  4889 */ 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217,
  /*  4906 */ 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512,
  /*  4923 */ 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743,
  /*  4940 */ 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935,
  /*  4956 */ 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216,
  /*  4971 */ 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500,
  /*  4986 */ 10500, 10500, 10500, 10500, 10500, 10500, 14440, 10500, 10500, 9854, 10500, 10500, 23271, 14485, 24779,
  /*  5001 */ 24785, 25322, 14511, 8992, 10500, 9011, 26726, 10500, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27132,
  /*  5017 */ 12311, 16034, 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217,
  /*  5034 */ 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512,
  /*  5051 */ 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743,
  /*  5068 */ 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935,
  /*  5084 */ 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216,
  /*  5099 */ 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500,
  /*  5114 */ 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10585, 10500, 9854, 10731, 10500, 14545, 14561, 14576,
  /*  5129 */ 14588, 14604, 14620, 14645, 22487, 9011, 11284, 14682, 8951, 14708, 14752, 10468, 21598, 14791, 14831,
  /*  5144 */ 14847, 14889, 10500, 14909, 10500, 27109, 14164, 11841, 26322, 10500, 22788, 19140, 19140, 24204, 14180,
  /*  5159 */ 24656, 24657, 21482, 26132, 20460, 10500, 16174, 10500, 18542, 23186, 12972, 23043, 19140, 24893, 22963,
  /*  5174 */ 22071, 24656, 16419, 22158, 14943, 10500, 26535, 10500, 18268, 14962, 15016, 22918, 19140, 25733, 15053,
  /*  5189 */ 19332, 24656, 15079, 20197, 22328, 15187, 11839, 26866, 19140, 24048, 15115, 24655, 24656, 15149, 15174,
  /*  5204 */ 10500, 12097, 19905, 26883, 21020, 24655, 15208, 25477, 10500, 12098, 20713, 25499, 18630, 25581, 10500,
  /*  5219 */ 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 25149, 22550, 18682, 15862, 9562,
  /*  5234 */ 25392, 15229, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955,
  /*  5249 */ 10501, 15252, 9854, 10500, 10500, 23271, 15270, 15306, 16181, 15859, 20188, 14161, 10500, 9011, 10500,
  /*  5264 */ 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096,
  /*  5279 */ 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 26608, 20751,
  /*  5294 */ 10500, 15328, 15290, 14060, 19140, 19140, 17750, 20948, 24656, 24656, 23593, 22158, 10500, 10500, 18410,
  /*  5309 */ 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 12252, 10500, 12031, 10500, 15347,
  /*  5324 */ 15367, 19140, 19140, 21570, 15383, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 21020, 24655, 24656,
  /*  5339 */ 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547,
  /*  5354 */ 11859, 16654, 22550, 15814, 22550, 25587, 15405, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478,
  /*  5369 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 15444, 9854, 10500, 10500, 10646, 15468,
  /*  5384 */ 15483, 15495, 15511, 15527, 14161, 14025, 9011, 17099, 10500, 10500, 11840, 18560, 10500, 25479, 19123,
  /*  5399 */ 24651, 25286, 13812, 10500, 15560, 12025, 20096, 13435, 24128, 19884, 15584, 9458, 15602, 19140, 19140,
  /*  5414 */ 15634, 15664, 24656, 21482, 23443, 13741, 10500, 16174, 13639, 23076, 19883, 14060, 23536, 24470, 15684,
  /*  5429 */ 20948, 17585, 15705, 15723, 22158, 10500, 10500, 24403, 10500, 11837, 26391, 23882, 19140, 25879, 25733,
  /*  5444 */ 24656, 24656, 17774, 12252, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 21570, 24655, 24656, 21480,
  /*  5459 */ 10500, 10500, 12097, 15741, 24336, 21020, 24655, 15769, 17867, 10500, 12098, 15787, 23035, 26938, 15810,
  /*  5474 */ 10500, 25340, 23881, 25384, 22444, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 15830, 15236,
  /*  5489 */ 14323, 25392, 25638, 18944, 24361, 21461, 15846, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  5504 */ 11955, 10500, 11241, 9854, 10922, 17478, 23271, 15878, 15893, 15900, 15916, 15932, 14161, 10500, 9011,
  /*  5519 */ 10500, 10500, 10500, 19461, 15965, 10500, 15976, 23529, 15753, 22077, 10500, 9401, 11971, 16003, 10500,
  /*  5534 */ 20327, 19471, 16020, 14927, 16077, 21143, 15794, 19140, 16105, 16126, 16143, 21482, 10500, 13552, 12078,
  /*  5549 */ 16174, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 23253, 10500, 14087,
  /*  5564 */ 16167, 10500, 11837, 26391, 18100, 19140, 19140, 16197, 16447, 24656, 15725, 12252, 10500, 10500, 22307,
  /*  5579 */ 16253, 24809, 19140, 23662, 21570, 16272, 19395, 21480, 10500, 17621, 24753, 16292, 16338, 16359, 16375,
  /*  5594 */ 18590, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 12320, 25340, 23881, 20002, 15771, 10500, 11815,
  /*  5609 */ 22547, 11859, 16654, 22550, 15814, 16401, 25587, 16435, 14323, 25392, 25638, 18944, 24361, 25524, 25618,
  /*  5624 */ 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 9727, 9854, 11379, 16469, 16487,
  /*  5639 */ 16503, 16518, 16530, 16546, 16562, 14161, 16595, 16636, 16670, 16471, 8976, 16686, 16730, 21392, 16765,
  /*  5654 */ 16816, 25215, 16853, 10500, 16900, 16916, 26278, 12411, 12096, 11841, 14239, 14203, 14062, 17238, 17278,
  /*  5669 */ 16932, 16969, 17007, 23601, 17069, 17094, 17115, 17143, 16793, 19538, 22866, 17199, 17224, 17264, 17300,
  /*  5684 */ 17316, 24840, 18596, 19978, 17332, 17361, 10458, 18755, 18410, 17387, 21239, 22238, 17546, 17403, 24983,
  /*  5699 */ 25555, 19184, 24656, 17421, 17439, 17460, 17494, 17515, 11839, 17538, 21291, 17562, 17608, 16211, 25444,
  /*  5714 */ 17642, 10500, 17666, 12097, 17702, 17730, 21020, 17766, 17790, 25477, 19254, 13471, 17809, 17836, 17852,
  /*  5729 */ 17895, 10500, 27238, 21111, 17911, 24724, 27211, 11815, 27310, 24316, 14977, 17940, 18348, 24874, 17987,
  /*  5744 */ 25435, 18024, 18067, 25638, 20958, 18092, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  5759 */ 10500, 11955, 10500, 10500, 9854, 18116, 10500, 18131, 18147, 18162, 18169, 18185, 18201, 14161, 18868,
  /*  5774 */ 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 27303, 16089, 22077, 10500, 18241, 18234, 10500,
  /*  5789 */ 10500, 18258, 18292, 19884, 10500, 14062, 18311, 19140, 19140, 18330, 24656, 24656, 21482, 10500, 10500,
  /*  5804 */ 10500, 16174, 10500, 11838, 19883, 14060, 19140, 19140, 21299, 20948, 24656, 24656, 16413, 22158, 10500,
  /*  5819 */ 10500, 18410, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 12252, 10500, 10500,
  /*  5834 */ 10500, 18364, 26866, 19140, 21118, 21570, 24655, 22016, 21480, 10500, 10500, 12097, 19905, 19140, 21020,
  /*  5849 */ 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 25395, 10500, 25340, 23881, 22549, 24656, 10500,
  /*  5864 */ 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 15063, 18380, 26162,
  /*  5879 */ 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 18407,
  /*  5894 */ 23271, 18426, 18441, 18448, 18464, 18480, 14161, 10500, 9011, 10500, 11684, 10500, 11840, 18560, 10500,
  /*  5909 */ 25479, 19140, 24651, 22077, 18513, 10500, 11971, 10500, 16004, 12096, 11841, 19884, 10500, 14062, 19140,
  /*  5924 */ 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140,
  /*  5939 */ 19140, 19140, 23583, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140,
  /*  5954 */ 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655,
  /*  5969 */ 24656, 21480, 10500, 21678, 12097, 19905, 19140, 18314, 24655, 24656, 15648, 13103, 18533, 23878, 19140,
  /*  5984 */ 24656, 21482, 10500, 14862, 23992, 18578, 18612, 10500, 18655, 26420, 18671, 16654, 22550, 15814, 22550,
  /*  5999 */ 25587, 15862, 14323, 25392, 25638, 18944, 26079, 18698, 25618, 25478, 10500, 10500, 10500, 10500, 10500,
  /*  6014 */ 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161,
  /*  6029 */ 16884, 18733, 10500, 10500, 18754, 11840, 18771, 10500, 25479, 18789, 18807, 20442, 10500, 11096, 18849,
  /*  6044 */ 10971, 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 18884, 14180, 24656, 15668, 21482, 10500,
  /*  6059 */ 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477,
  /*  6074 */ 18904, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500,
  /*  6089 */ 18922, 10500, 11839, 26866, 19140, 19832, 15613, 24655, 24656, 18939, 10500, 10500, 12097, 19905, 19140,
  /*  6104 */ 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656,
  /*  6119 */ 10500, 11815, 24211, 22684, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361,
  /*  6134 */ 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10706, 9854, 9016,
  /*  6149 */ 17157, 17879, 18960, 18975, 18987, 19003, 19019, 14161, 10500, 19052, 10500, 10500, 20741, 19073, 19094,
  /*  6164 */ 12900, 25479, 19120, 14990, 22077, 10500, 10500, 11971, 9701, 10500, 12096, 18295, 15133, 9121, 14062,
  /*  6179 */ 19139, 19157, 21176, 19174, 19340, 24656, 19200, 13719, 19222, 19241, 11721, 12962, 19301, 14469, 14060,
  /*  6194 */ 19140, 19140, 25251, 19322, 24656, 24656, 19356, 25477, 10500, 15544, 13534, 10500, 11837, 26391, 20827,
  /*  6209 */ 19140, 19140, 25733, 19372, 24656, 24656, 25477, 26810, 23707, 14280, 11839, 26866, 18888, 19140, 15613,
  /*  6224 */ 24655, 19391, 24178, 10500, 10500, 9953, 13782, 19411, 19437, 19494, 21980, 19535, 10500, 19450, 19554,
  /*  6239 */ 23635, 18816, 19570, 17047, 23069, 23881, 22549, 24656, 19590, 11815, 22547, 11859, 16654, 22550, 15814,
  /*  6254 */ 19609, 19625, 15862, 14323, 25392, 15987, 19645, 24361, 25524, 17924, 25478, 10500, 10500, 10500, 10500,
  /*  6269 */ 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 19681, 12823, 19700, 19715, 19722, 19738, 19754,
  /*  6284 */ 14161, 19787, 9011, 14495, 19806, 18773, 14233, 18560, 18773, 14692, 19828, 17574, 26099, 19848, 10500,
  /*  6299 */ 11971, 19036, 13887, 9418, 19881, 19900, 10500, 14062, 19921, 23205, 22949, 19967, 24173, 14815, 25470,
  /*  6314 */ 18490, 10500, 9763, 10500, 10500, 14462, 19883, 14060, 19994, 20018, 19140, 23583, 20037, 24656, 24656,
  /*  6329 */ 25477, 20408, 10500, 14524, 20053, 11837, 22827, 23882, 20345, 26343, 25733, 24656, 23148, 20434, 26833,
  /*  6344 */ 10500, 10500, 10500, 20071, 26866, 16831, 19140, 15613, 25569, 24656, 21480, 20094, 11690, 20112, 26997,
  /*  6359 */ 19140, 18314, 20154, 24656, 15158, 10500, 22280, 23878, 19140, 24656, 21482, 25170, 25340, 23881, 25018,
  /*  6374 */ 20978, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 19629, 11885, 9616, 18944,
  /*  6389 */ 25699, 20175, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10547, 9854,
  /*  6404 */ 10500, 9413, 23271, 20221, 20236, 20243, 20259, 20275, 14161, 26705, 9011, 20612, 10500, 12586, 15284,
  /*  6419 */ 18560, 12586, 14666, 20301, 17714, 22077, 10500, 12143, 11971, 26127, 20325, 12096, 11841, 19884, 10500,
  /*  6434 */ 14062, 20343, 17284, 17744, 20361, 24656, 20388, 15037, 23126, 10500, 10500, 10500, 10500, 11838, 19883,
  /*  6449 */ 14060, 18038, 16837, 19140, 20948, 20424, 23953, 24656, 25477, 19764, 20458, 26632, 8964, 11837, 26391,
  /*  6464 */ 23882, 20476, 20835, 21325, 16276, 24656, 20493, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140,
  /*  6479 */ 15613, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 15420, 10500, 12098,
  /*  6494 */ 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 20671, 23944,
  /*  6509 */ 20514, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500,
  /*  6524 */ 10500, 10500, 10500, 10500, 11955, 10500, 10500, 17183, 10500, 17171, 13169, 20541, 20556, 20563, 20579,
  /*  6539 */ 20595, 14161, 18861, 20628, 19860, 10500, 11614, 20700, 20729, 20767, 20815, 20851, 20684, 20867, 14145,
  /*  6554 */ 10500, 20917, 10500, 25666, 10616, 11841, 19884, 10500, 20937, 22617, 19140, 19140, 14180, 26000, 24656,
  /*  6569 */ 21482, 20897, 13688, 10500, 25671, 10500, 19277, 19883, 14060, 24866, 19140, 19140, 20948, 20974, 24656,
  /*  6584 */ 24656, 25477, 10500, 9705, 10500, 20285, 15128, 20078, 20994, 19140, 21016, 21036, 21077, 16127, 21999,
  /*  6599 */ 9630, 13943, 20605, 26709, 21096, 25973, 21134, 21167, 15613, 21192, 9334, 21480, 14388, 14629, 21230,
  /*  6614 */ 19905, 18002, 18314, 9323, 24656, 11895, 10500, 17971, 21255, 21315, 21341, 21380, 10500, 12329, 20127,
  /*  6629 */ 21408, 21424, 22527, 11815, 21450, 21477, 16654, 21498, 21819, 21514, 18076, 21543, 14323, 25392, 25638,
  /*  6644 */ 11919, 21559, 25524, 22976, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500,
  /*  6659 */ 21586, 10500, 10876, 10990, 21614, 21629, 21636, 21652, 21668, 21701, 11233, 21717, 21733, 19771, 21777,
  /*  6674 */ 21751, 16700, 21767, 9294, 21793, 18051, 21842, 10500, 10500, 11971, 21892, 13011, 21910, 19306, 19884,
  /*  6689 */ 10500, 14062, 18791, 19140, 21928, 14180, 18825, 16151, 19944, 10500, 14893, 19865, 14007, 19104, 11838,
  /*  6704 */ 15351, 13912, 19140, 21264, 19140, 21970, 24656, 24434, 21080, 17022, 19593, 13634, 10500, 10500, 11837,
  /*  6719 */ 26391, 23882, 25366, 19140, 25733, 24656, 21996, 24656, 25477, 11725, 19790, 10500, 11839, 26866, 19140,
  /*  6734 */ 19140, 17820, 22015, 24656, 21480, 14424, 10500, 12097, 19285, 16953, 18314, 22032, 24656, 20403, 10500,
  /*  6749 */ 21912, 22048, 19140, 22093, 21482, 10500, 25340, 23881, 22549, 24656, 24398, 22288, 26298, 15707, 16654,
  /*  6764 */ 22114, 15814, 22143, 25587, 15862, 14323, 25392, 25638, 16385, 22191, 25524, 17345, 25478, 10500, 10500,
  /*  6779 */ 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 13400, 13410, 22218, 14141, 17522,
  /*  6794 */ 22254, 22270, 14161, 15099, 9011, 10500, 10500, 10500, 11840, 18560, 11463, 25479, 19140, 24651, 22077,
  /*  6809 */ 18906, 22304, 11971, 17686, 22323, 22344, 25075, 19884, 10500, 22372, 23935, 22399, 15689, 22425, 20159,
  /*  6824 */ 22441, 26372, 10500, 10500, 21872, 11371, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656,
  /*  6839 */ 24656, 24656, 19509, 10500, 10500, 22460, 22479, 27244, 19078, 23882, 25425, 19140, 22409, 24656, 22503,
  /*  6854 */ 24656, 25477, 22524, 10500, 10500, 11839, 26866, 19140, 22543, 18391, 24655, 24732, 21480, 10500, 10500,
  /*  6869 */ 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340,
  /*  6884 */ 23881, 22549, 24656, 10500, 11815, 22547, 17423, 22566, 22550, 19574, 22550, 25587, 15862, 14323, 25392,
  /*  6899 */ 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500,
  /*  6914 */ 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 14161, 10500, 9011, 10500, 12893,
  /*  6929 */ 10500, 22232, 22595, 9279, 22597, 22613, 22633, 26454, 22660, 10500, 11971, 10500, 10500, 12096, 11841,
  /*  6944 */ 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500,
  /*  6959 */ 11838, 19883, 14060, 19140, 19140, 19140, 24714, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500,
  /*  6974 */ 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866,
  /*  6989 */ 19140, 19140, 15613, 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477,
  /*  7004 */ 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 14723, 22549, 22680, 10500, 11815, 22547, 11859,
  /*  7019 */ 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500,
  /*  7034 */ 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 16620, 22700, 12210, 23271, 22717, 22732,
  /*  7049 */ 22739, 22755, 22771, 14161, 15192, 22804, 22852, 11031, 17371, 14125, 22836, 22882, 22898, 22934, 21941,
  /*  7064 */ 22992, 10500, 10500, 23059, 23092, 18211, 14451, 19478, 19884, 10500, 23344, 24475, 19141, 19140, 23142,
  /*  7079 */ 24311, 23961, 21482, 10500, 10500, 19029, 10500, 23164, 23181, 25081, 14060, 23202, 23221, 21000, 23238,
  /*  7094 */ 17793, 24656, 15000, 23269, 21735, 23287, 23337, 10500, 11837, 23360, 23882, 18008, 23376, 9309, 24656,
  /*  7109 */ 20372, 23410, 23432, 10500, 23465, 23449, 11839, 26866, 23498, 19140, 15613, 21050, 24656, 22098, 10500,
  /*  7124 */ 27102, 12097, 19905, 19140, 24026, 24655, 23553, 25477, 14419, 12098, 23519, 19140, 23552, 21482, 22781,
  /*  7139 */ 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 23569, 14805, 23617, 22550, 17650, 23386, 27293,
  /*  7154 */ 25392, 25638, 18717, 23651, 23685, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955,
  /*  7169 */ 10500, 10500, 12236, 10500, 17127, 23723, 23739, 23754, 23761, 23777, 23793, 23835, 10500, 9011, 10500,
  /*  7184 */ 23841, 18738, 23858, 23898, 18738, 23909, 23925, 22579, 22077, 17676, 10500, 11971, 10500, 10500, 13605,
  /*  7199 */ 23977, 16256, 14920, 13954, 24042, 24064, 19140, 24084, 11745, 24656, 21482, 13597, 14946, 11331, 10500,
  /*  7214 */ 10500, 11838, 19883, 21214, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 18517, 10500, 20055,
  /*  7229 */ 25948, 24120, 26860, 23317, 20477, 21282, 24144, 24656, 24439, 24160, 21207, 10500, 10500, 10500, 22356,
  /*  7244 */ 17208, 19140, 24194, 15613, 24655, 21434, 21480, 22701, 24227, 27179, 19905, 25375, 24247, 24298, 18621,
  /*  7259 */ 25477, 21894, 12098, 23878, 19140, 24656, 21482, 23842, 22817, 24332, 24352, 16322, 24385, 11815, 22547,
  /*  7274 */ 11859, 16654, 24419, 24455, 22550, 19206, 15030, 25591, 25026, 20525, 18944, 24361, 25524, 25618, 25478,
  /*  7289 */ 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 10828, 10500, 10776, 10097, 24491,
  /*  7304 */ 24506, 24518, 24534, 24550, 14161, 22168, 24576, 9980, 24608, 10500, 24624, 24673, 13374, 24684, 24700,
  /*  7319 */ 14736, 21954, 11422, 18218, 24748, 10500, 24769, 16237, 25860, 24801, 13545, 24825, 19140, 24856, 24890,
  /*  7334 */ 24909, 14184, 16453, 17592, 19519, 10500, 24933, 10500, 15312, 10627, 24952, 23022, 24968, 21151, 23503,
  /*  7349 */ 20138, 20498, 16316, 24917, 25477, 13466, 26261, 18923, 26601, 13772, 18551, 25005, 21273, 24068, 19421,
  /*  7364 */ 25121, 25042, 18639, 17954, 10500, 16991, 10500, 25064, 14873, 25097, 16947, 15613, 25113, 25137, 15213,
  /*  7379 */ 25165, 25186, 19267, 25203, 25231, 26675, 25274, 24656, 25302, 25320, 25338, 25356, 25411, 25460, 22644,
  /*  7394 */ 10500, 14299, 25495, 25515, 21061, 23475, 25540, 20309, 25607, 16654, 22550, 15814, 22550, 25587, 15862,
  /*  7409 */ 25634, 25654, 25687, 25715, 24361, 25524, 21527, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  7424 */ 11955, 10500, 10500, 9854, 10500, 10963, 23271, 25749, 25764, 25771, 25787, 25803, 14161, 10500, 25835,
  /*  7439 */ 11530, 10500, 10500, 11840, 18560, 10500, 17626, 22913, 16304, 22077, 12070, 10500, 11971, 10500, 20658,
  /*  7454 */ 12096, 25858, 19884, 10500, 14062, 25876, 19140, 19158, 25895, 24656, 24656, 18833, 25922, 25941, 10500,
  /*  7469 */ 19225, 13697, 11838, 25964, 11538, 16343, 24006, 24020, 20948, 23394, 25989, 26022, 25477, 13999, 10500,
  /*  7484 */ 10500, 10500, 27188, 26391, 24369, 19140, 19140, 17248, 26006, 24656, 24656, 16984, 10500, 10500, 10500,
  /*  7499 */ 11839, 26866, 19140, 19140, 15613, 24655, 24656, 16110, 10500, 22463, 12097, 18276, 19140, 18314, 26045,
  /*  7514 */ 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815,
  /*  7529 */ 26068, 26095, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 26115, 25638, 18944, 26431, 26148, 25618,
  /*  7544 */ 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500, 26178, 26195,
  /*  7559 */ 14111, 26211, 21685, 26234, 26250, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479,
  /*  7574 */ 26294, 19933, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 26314, 15331, 10500, 14062, 26338, 19140,
  /*  7589 */ 19140, 26359, 24656, 24656, 21482, 10500, 10500, 18242, 10500, 10500, 11838, 26388, 26407, 19140, 25241,
  /*  7604 */ 19140, 20948, 24656, 26447, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140,
  /*  7619 */ 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655, 24656,
  /*  7634 */ 21480, 10500, 24277, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656,
  /*  7649 */ 21482, 10500, 25340, 23881, 22549, 24656, 15536, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587,
  /*  7664 */ 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  7679 */ 10500, 11955, 10500, 10500, 13019, 10500, 9946, 12283, 26470, 26485, 26492, 26508, 26524, 14161, 10500,
  /*  7694 */ 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 20021, 24651, 22127, 10500, 10500, 11971, 10500,
  /*  7709 */ 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500,
  /*  7724 */ 10500, 10500, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500,
  /*  7739 */ 10500, 25842, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656, 25477, 16579, 10500,
  /*  7754 */ 10500, 11839, 26866, 23321, 23222, 15613, 24655, 26551, 18342, 10500, 10500, 12097, 19905, 19140, 18314,
  /*  7769 */ 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500,
  /*  7784 */ 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524,
  /*  7799 */ 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 14315, 10500, 10500, 9854, 10500, 10500,
  /*  7814 */ 23271, 14111, 14141, 18497, 26574, 26590, 14161, 10500, 26624, 10500, 10500, 13096, 26989, 26648, 26654,
  /*  7829 */ 21364, 26670, 22060, 22077, 10500, 10500, 26691, 11974, 26725, 12096, 11841, 19884, 10500, 14062, 19140,
  /*  7844 */ 19140, 9570, 14180, 24656, 24656, 26742, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140,
  /*  7859 */ 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140,
  /*  7874 */ 19140, 22383, 24656, 24656, 24656, 16225, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655,
  /*  7889 */ 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140,
  /*  7904 */ 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550,
  /*  7919 */ 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500,
  /*  7934 */ 10500, 10500, 11955, 10500, 10500, 9854, 10500, 10500, 23271, 14111, 14141, 16181, 15859, 20188, 26799,
  /*  7949 */ 10500, 9011, 10500, 8847, 10500, 11840, 18560, 10500, 15586, 17405, 24651, 25906, 10500, 10500, 11971,
  /*  7964 */ 10500, 10500, 12096, 11841, 19884, 10500, 14062, 19140, 19140, 24989, 14180, 24656, 24656, 26826, 22175,
  /*  7979 */ 10500, 10500, 10500, 10500, 26849, 23868, 14060, 19140, 19140, 26882, 20948, 24656, 19375, 24656, 25477,
  /*  7994 */ 23482, 10500, 10500, 10500, 14775, 26391, 23629, 26899, 19140, 25733, 26921, 26937, 24656, 25477, 10500,
  /*  8009 */ 10500, 10500, 11839, 26866, 19140, 19140, 26954, 24655, 24656, 23416, 10500, 10500, 12097, 19905, 19140,
  /*  8024 */ 18314, 24655, 24656, 24099, 10500, 14767, 23878, 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656,
  /*  8039 */ 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361,
  /*  8054 */ 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 11955, 10500, 10500, 9854, 10500,
  /*  8069 */ 10500, 23271, 26975, 14141, 16181, 15859, 20188, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560,
  /*  8084 */ 10500, 25479, 19140, 24651, 22077, 10500, 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14062,
  /*  8099 */ 19140, 19140, 19140, 14180, 24656, 24656, 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060,
  /*  8114 */ 19140, 19140, 19140, 20948, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882,
  /*  8129 */ 19140, 19140, 25733, 24656, 24656, 24656, 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613,
  /*  8144 */ 24655, 24656, 21480, 10500, 10500, 12097, 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878,
  /*  8159 */ 19140, 24656, 21482, 10500, 25340, 23881, 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814,
  /*  8174 */ 22550, 25587, 15862, 14323, 25392, 25638, 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500,
  /*  8189 */ 10500, 10500, 10500, 10567, 10500, 10500, 19812, 27013, 27056, 27020, 27036, 27075, 27046, 27072, 27091,
  /*  8204 */ 8992, 10500, 9011, 26726, 17964, 10500, 9032, 9090, 10500, 9092, 9246, 27125, 27266, 12311, 16034, 9057,
  /*  8220 */ 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 10384, 9171, 9194, 9217, 8995, 10500,
  /*  8236 */ 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876,
  /*  8253 */ 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345,
  /*  8270 */ 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078,
  /*  8286 */ 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262,
  /*  8301 */ 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500,
  /*  8316 */ 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 15428, 23271, 26757, 27148, 27152, 10500,
  /*  8331 */ 27168, 8992, 10500, 9011, 26726, 10500, 10500, 9032, 9090, 27204, 9092, 9246, 9882, 27266, 12311, 16034,
  /*  8347 */ 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 9242, 9171, 9194, 9217, 8995, 10500,
  /*  8364 */ 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876,
  /*  8381 */ 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345,
  /*  8398 */ 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078,
  /*  8414 */ 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262,
  /*  8429 */ 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500,
  /*  8444 */ 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 10500, 11763, 17036, 25813, 25819, 26179,
  /*  8459 */ 27227, 8992, 10500, 9011, 26726, 16571, 10500, 9032, 9090, 10500, 9092, 9246, 9882, 27266, 12311, 16034,
  /*  8475 */ 9057, 26959, 10500, 25924, 9041, 9079, 9108, 9137, 9164, 9187, 9210, 27260, 9171, 9194, 9217, 8995, 10500,
  /*  8492 */ 10500, 9264, 9350, 9370, 9386, 9434, 9474, 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876,
  /*  8509 */ 10500, 9586, 9602, 9801, 9646, 9666, 10298, 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345,
  /*  8526 */ 9827, 9849, 10339, 9821, 9843, 16609, 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078,
  /*  8542 */ 9996, 10019, 10003, 10026, 10042, 10077, 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262,
  /*  8557 */ 10325, 9246, 9792, 9246, 16061, 10361, 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500,
  /*  8572 */ 10500, 10500, 10500, 10500, 10567, 10500, 10500, 9854, 10500, 10500, 23271, 16745, 10500, 10500, 10500,
  /*  8587 */ 27282, 14161, 10500, 9011, 10500, 10500, 10500, 11840, 18560, 10500, 25479, 19140, 24651, 22077, 10500,
  /*  8602 */ 10500, 11971, 10500, 10500, 12096, 11841, 19884, 10500, 14320, 19140, 19140, 19140, 11741, 24656, 24656,
  /*  8617 */ 21482, 10500, 10500, 10500, 10500, 10500, 11838, 19883, 14060, 19140, 19140, 19140, 19656, 24656, 24656,
  /*  8632 */ 24656, 25477, 10500, 10500, 10500, 10500, 11837, 26391, 23882, 19140, 19140, 25733, 24656, 24656, 24656,
  /*  8647 */ 25477, 10500, 10500, 10500, 11839, 26866, 19140, 19140, 15613, 24655, 24656, 21480, 10500, 10500, 12097,
  /*  8662 */ 19905, 19140, 18314, 24655, 24656, 25477, 10500, 12098, 23878, 19140, 24656, 21482, 10500, 25340, 23881,
  /*  8677 */ 22549, 24656, 10500, 11815, 22547, 11859, 16654, 22550, 15814, 22550, 25587, 15862, 14323, 25392, 25638,
  /*  8692 */ 18944, 24361, 25524, 25618, 25478, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500,
  /*  8707 */ 10500, 10500, 24230, 10500, 27353, 27326, 27330, 24231, 27346, 27369, 10500, 10500, 26726, 10500, 10500,
  /*  8722 */ 9032, 9090, 10500, 9092, 9246, 9882, 11012, 12311, 16034, 13860, 26959, 10500, 25924, 9041, 9079, 9108,
  /*  8738 */ 9137, 9164, 9187, 9210, 10384, 9171, 9194, 9217, 8995, 10500, 10500, 9264, 9350, 9370, 9386, 9434, 9474,
  /*  8755 */ 9493, 9248, 9148, 9477, 9496, 9887, 9224, 9512, 9548, 21876, 10500, 9586, 9602, 9801, 9646, 9666, 10298,
  /*  8772 */ 9805, 9650, 9670, 10175, 9686, 14363, 9721, 9743, 9779, 10345, 9827, 9849, 10339, 9821, 9843, 16609,
  /*  8788 */ 10884, 25925, 9870, 9903, 9919, 10387, 9914, 9935, 9969, 17078, 9996, 10019, 10003, 10026, 10042, 10077,
  /*  8804 */ 10113, 10129, 10123, 10145, 10161, 10200, 10216, 10246, 10262, 10325, 9246, 9792, 9246, 16061, 10361,
  /*  8819 */ 10309, 10377, 10403, 10431, 10484, 10499, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 0, 2, 45059, 4,
  /*  8836 */ 5, 0, 0, 0, 0, 0, 0, 35006, 35006, 35006, 35006, 0, 0, 0, 464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83968,
  /*  8864 */ 83968, 83968, 83968, 83968, 37055, 37055, 35006, 35006, 37055, 37055, 37055, 37055, 37055, 37055, 37055,
  /*  8879 */ 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055,
  /*  8894 */ 37055, 37055, 37055, 37055, 37055, 227, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055,
  /*  8909 */ 37055, 37055, 37055, 37055, 37055, 22528, 24576, 37055, 37055, 37055, 20480, 37055, 37055, 37055, 37055,
  /*  8924 */ 37055, 37055, 37055, 37055, 37055, 37055, 37055, 37055, 0, 0, 35006, 37055, 37055, 37055, 37055, 0, 0, 2,
  /*  8942 */ 45059, 4, 5, 0, 0, 0, 0, 35006, 37055, 0, 0, 0, 478, 0, 0, 0, 0, 0, 485, 0, 0, 489, 0, 0, 0, 0, 1189, 0,
  /*  8970 */ 0, 0, 0, 0, 0, 1196, 0, 0, 0, 0, 479, 0, 0, 0, 0, 486, 487, 0, 0, 490, 0, 0, 528384, 194, 195, 0, 0, 0, 0,
  /*  8999 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 751616, 0, 0, 0, 227, 227, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
  /*  9029 */ 214, 0, 0, 0, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008,
  /*  9044 */ 555008, 555008, 555008, 555008, 753664, 555008, 555008, 772096, 555008, 780288, 555008, 555008, 798720, 0,
  /*  9058 */ 227, 227, 0, 0, 686080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 198, 0, 0, 0, 0, 804864, 811008, 555008,
  /*  9082 */ 825344, 555008, 841728, 555008, 555008, 555008, 899072, 555008, 555008, 555008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  9101 */ 0, 0, 0, 0, 0, 0, 557056, 753664, 0, 772096, 780288, 0, 0, 798720, 804864, 811008, 0, 825344, 841728,
  /*  9120 */ 899072, 0, 0, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 841728, 0, 804864, 841728, 0, 0, 0, 788480,
  /*  9146 */ 0, 0, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 0, 557056, 677888, 557056, 557056, 557056,
  /*  9163 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 753664, 557056, 557056, 557056,
  /*  9176 */ 557056, 772096, 557056, 780288, 557056, 784384, 557056, 557056, 798720, 557056, 804864, 557056, 784384,
  /*  9189 */ 557056, 557056, 798720, 557056, 804864, 811008, 557056, 557056, 557056, 825344, 557056, 557056, 841728,
  /*  9202 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /*  9215 */ 557056, 557056, 557056, 557056, 899072, 557056, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 0, 0,
  /*  9232 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 557611, 609, 0, 0, 612, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /*  9253 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 903168, 557056, 0, 532480, 802816,
  /*  9267 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 768000, 0, 808960, 0, 0, 0, 529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 0, 0, 0,
  /*  9297 */ 541, 477, 477, 0, 0, 0, 0, 0, 541, 0, 0, 541, 352, 352, 352, 352, 352, 1269, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
  /*  9324 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 1546, 374, 374, 374, 374, 374, 374, 1442, 374, 374, 374, 374,
  /*  9345 */ 374, 374, 374, 1450, 374, 0, 0, 0, 663552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0,
  /*  9373 */ 677888, 555008, 555008, 555008, 555008, 555008, 555008, 735232, 555008, 555008, 751616, 555008, 768000,
  /*  9386 */ 555008, 555008, 555008, 555008, 808960, 817152, 555008, 555008, 555008, 555008, 555008, 555008, 555008,
  /*  9399 */ 555008, 677888, 0, 0, 0, 687, 0, 0, 689, 0, 0, 0, 692, 693, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /*  9428 */ 0, 753, 0, 0, 290, 290, 735232, 0, 0, 0, 0, 817152, 0, 0, 817152, 0, 0, 0, 557056, 557056, 677888, 557056,
  /*  9450 */ 557056, 194, 0, 195, 0, 0, 0, 702464, 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 797, 798, 352, 801, 352, 352,
  /*  9474 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 735232, 557056, 557056,
  /*  9487 */ 557056, 557056, 751616, 557056, 557056, 557056, 557056, 557056, 557056, 768000, 557056, 557056, 557056,
  /*  9500 */ 557056, 557056, 557056, 557056, 808960, 813056, 817152, 557056, 557056, 557056, 557056, 557056, 696320, 0,
  /*  9514 */ 0, 0, 0, 0, 0, 0, 0, 0, 800768, 0, 0, 0, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
  /*  9546 */ 22528, 24576, 0, 0, 897024, 921600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 827392, 0, 0, 0, 0, 1841, 0, 0, 1844, 352,
  /*  9571 */ 352, 352, 352, 352, 352, 352, 352, 845, 352, 352, 352, 352, 352, 352, 352, 743424, 837632, 0, 0, 555008,
  /*  9591 */ 696320, 698368, 555008, 555008, 555008, 555008, 743424, 555008, 555008, 555008, 782336, 555008, 555008,
  /*  9604 */ 837632, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 698368, 0, 782336, 0, 0, 0, 0,
  /*  9620 */ 1868, 352, 352, 352, 352, 352, 352, 352, 352, 1874, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
  /*  9645 */ 1332, 557056, 557056, 743424, 557056, 557056, 557056, 557056, 557056, 557056, 782336, 557056, 557056,
  /*  9658 */ 557056, 800768, 557056, 557056, 833536, 837632, 557056, 557056, 833536, 837632, 557056, 557056, 557056,
  /*  9671 */ 557056, 557056, 557056, 557056, 878592, 882688, 557056, 557056, 557056, 894976, 557056, 557056, 557056,
  /*  9684 */ 557056, 557056, 745472, 0, 0, 0, 843776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 806912, 0, 0, 0, 713, 0, 0, 0, 0, 0,
  /*  9710 */ 0, 0, 0, 0, 0, 0, 0, 1169, 0, 0, 0, 776192, 0, 923648, 0, 0, 733184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
  /*  9738 */ 212, 213, 0, 0, 0, 0, 886784, 555008, 555008, 555008, 716800, 555008, 555008, 745472, 555008, 776192,
  /*  9754 */ 555008, 555008, 843776, 555008, 555008, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
  /*  9779 */ 555008, 886784, 901120, 911360, 923648, 0, 0, 0, 0, 901120, 911360, 557056, 679936, 557056, 557056,
  /*  9794 */ 557056, 0, 710656, 0, 0, 0, 0, 0, 0, 0, 557056, 557056, 557056, 557056, 696320, 698368, 557056, 557056,
  /*  9812 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 743424, 557056, 755712, 557056, 557056, 557056,
  /*  9825 */ 776192, 557056, 557056, 557056, 557056, 557056, 843776, 557056, 557056, 557056, 557056, 557056, 557056,
  /*  9838 */ 557056, 886784, 557056, 901120, 557056, 557056, 557056, 886784, 557056, 901120, 557056, 911360, 557056,
  /*  9851 */ 557056, 923648, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 555008, 555008, 757760, 555008,
  /*  9874 */ 555008, 868352, 555008, 884736, 0, 757760, 0, 0, 557056, 557056, 557056, 557056, 0, 557056, 557056,
  /*  9889 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 903168, 557056, 557056, 557056,
  /*  9902 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 757760, 557056, 557056, 786432,
  /*  9915 */ 557056, 557056, 819200, 557056, 557056, 849920, 557056, 557056, 868352, 557056, 557056, 884736, 892928,
  /*  9928 */ 557056, 557056, 557056, 927744, 0, 0, 0, 557056, 927744, 0, 0, 0, 0, 712704, 0, 0, 724992, 741376, 0, 0,
  /*  9948 */ 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1497, 1498, 0, 1500, 1501, 290, 1503, 919552, 0, 792576, 0, 0,
  /*  9974 */ 0, 845824, 0, 880640, 0, 722944, 0, 0, 0, 0, 0, 451, 0, 0, 0, 0, 0, 0, 438, 0, 0, 0, 555008, 555008,
  /*  9998 */ 555008, 555008, 0, 0, 0, 557056, 557056, 557056, 557056, 557056, 708608, 722944, 724992, 557056, 557056,
  /* 10013 */ 741376, 557056, 557056, 557056, 557056, 557056, 557056, 741376, 557056, 557056, 557056, 557056, 557056,
  /* 10026 */ 557056, 845824, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 690176, 0, 0, 0, 0, 0, 0, 847872,
  /* 10043 */ 770048, 761856, 749568, 774144, 0, 0, 862208, 0, 905216, 917504, 0, 671744, 864256, 0, 0, 0, 0, 16384, 0,
  /* 10062 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 63488, 0, 0, 790528, 0, 0, 0, 0, 0, 0, 0, 555008, 700416,
  /* 10089 */ 555008, 555008, 794624, 555008, 555008, 0, 0, 116736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0, 22528,
  /* 10112 */ 24576, 555008, 700416, 794624, 0, 673792, 557056, 557056, 700416, 557056, 557056, 557056, 737280, 557056,
  /* 10126 */ 557056, 770048, 794624, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 915456,
  /* 10139 */ 673792, 557056, 557056, 700416, 557056, 557056, 0, 706560, 0, 0, 0, 821248, 0, 0, 913408, 0, 0, 0, 0, 0,
  /* 10159 */ 0, 854016, 0, 684032, 0, 870400, 684032, 706560, 555008, 796672, 870400, 796672, 557056, 684032, 688128,
  /* 10174 */ 706560, 557056, 557056, 0, 0, 0, 0, 0, 0, 702464, 0, 0, 0, 0, 0, 0, 0, 0, 557611, 557611, 739883, 557611,
  /* 10196 */ 557611, 557611, 557611, 557611, 557056, 557056, 763904, 796672, 821248, 858112, 557056, 870400, 557056,
  /* 10209 */ 557056, 557056, 913408, 557056, 684032, 688128, 706560, 557056, 557056, 557056, 557056, 763904, 796672,
  /* 10222 */ 821248, 858112, 557056, 870400, 557056, 557056, 557056, 913408, 0, 0, 0, 0, 63488, 0, 0, 63488, 0, 63488,
  /* 10240 */ 63488, 63488, 63488, 63488, 63488, 63488, 0, 0, 829440, 0, 0, 0, 0, 0, 815104, 0, 929792, 731136, 731136,
  /* 10259 */ 557056, 727040, 731136, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 909312, 557056,
  /* 10272 */ 727040, 731136, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 43008, 557056, 677888, 557056, 557056,
  /* 10288 */ 557056, 557056, 557056, 1079, 0, 0, 1084, 0, 557056, 677888, 557056, 557056, 557056, 557056, 557056,
  /* 10303 */ 557056, 0, 0, 0, 0, 536576, 0, 0, 0, 0, 557056, 557056, 747520, 557056, 823296, 557056, 557056, 557056,
  /* 10321 */ 876544, 557056, 557056, 747520, 557056, 557056, 557056, 557056, 909312, 0, 0, 0, 0, 831488, 0, 0, 0, 0, 0,
  /* 10340 */ 557056, 679936, 557056, 557056, 557056, 704512, 557056, 557056, 716800, 557056, 557056, 557056, 557056,
  /* 10353 */ 557056, 745472, 755712, 557056, 557056, 557056, 776192, 557056, 557056, 557056, 557056, 557056, 739328,
  /* 10366 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 692224, 0, 718848, 876544, 557056, 823296, 557056,
  /* 10380 */ 557056, 557056, 876544, 714752, 0, 0, 0, 0, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /* 10395 */ 557056, 557056, 557056, 557056, 557056, 757760, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /* 10408 */ 557056, 557056, 0, 0, 0, 0, 675840, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /* 10423 */ 557056, 557056, 0, 0, 116736, 0, 5, 0, 874496, 675840, 557056, 557056, 557056, 557056, 874496, 720896, 0,
  /* 10440 */ 0, 851968, 557056, 765952, 860160, 557056, 557056, 194, 0, 0, 0, 194, 0, 195, 0, 0, 0, 195, 0, 0, 0, 0,
  /* 10462 */ 1148, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 527, 0, 527, 0, 0, 0, 410, 0, 0, 0, 765952, 860160, 557056,
  /* 10487 */ 759808, 778240, 729088, 557056, 729088, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 866304, 0,
  /* 10501 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 53555, 53555, 0, 53555, 53555, 307, 307, 307, 307,
  /* 10527 */ 307, 307, 53555, 307, 53555, 53555, 53555, 53555, 53555, 53555, 53555, 53555, 53555, 53555, 0, 0, 0, 0, 0,
  /* 10546 */ 63488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 53555, 53555, 53555, 0, 0, 2, 45059, 4, 5, 0, 0,
  /* 10574 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 0, 557056, 557056,
  /* 10603 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 0, 666, 666, 0, 5, 0, 0, 0, 746, 0, 0, 0,
  /* 10623 */ 0, 0, 0, 0, 0, 0, 0, 290, 290, 999, 290, 290, 290, 290, 290, 290, 1005, 290, 290, 290, 0, 194, 57344, 0,
  /* 10647 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 22528, 24576, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
  /* 10677 */ 0, 0, 0, 0, 57605, 24576, 0, 0, 194, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57344, 528384,
  /* 10704 */ 10642, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 215, 0, 0, 194, 0, 0, 0, 681984, 0, 0, 694272, 0,
  /* 10732 */ 0, 0, 0, 0, 0, 0, 199, 0, 233, 0, 199, 199, 233, 0, 0, 0, 565430, 45059, 4, 5, 186, 0, 0, 0, 0, 0, 186, 0,
  /* 10760 */ 0, 0, 0, 0, 63488, 0, 0, 0, 0, 63488, 0, 0, 0, 0, 0, 465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
  /* 10791 */ 248, 59392, 59392, 59392, 0, 59392, 59392, 0, 0, 0, 0, 0, 0, 0, 0, 59392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 10818 */ 0, 59392, 59392, 0, 0, 0, 565430, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
  /* 10846 */ 227, 227, 227, 0, 71680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 194, 194, 194, 194, 194, 194, 0, 0, 667, 671, 0,
  /* 10872 */ 681984, 0, 0, 694272, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786432, 0, 0, 0, 0, 888832,
  /* 10899 */ 884736, 0, 0, 63488, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67584, 0, 65536, 0, 0, 0, 0, 0,
  /* 10927 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 65536, 22528, 24576, 0,
  /* 10955 */ 0, 65536, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 245, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0,
  /* 10986 */ 0, 528384, 403, 404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 219, 22528, 24576, 854, 0, 0, 857, 557056,
  /* 11011 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 0, 0,
  /* 11028 */ 0, 195, 67584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 472, 0, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11059 */ 195, 0, 0, 0, 0, 0, 0, 22528, 67849, 0, 0, 195, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
  /* 11088 */ 0, 0, 0, 22528, 24576, 528384, 194, 10645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 695, 0, 0, 192, 192, 0,
  /* 11115 */ 0, 192, 192, 69824, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 228, 192, 69824, 192, 192, 192,
  /* 11136 */ 192, 231, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 69824, 192, 192,
  /* 11157 */ 192, 192, 20480, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 69824, 69824, 192, 69824, 69824, 69824,
  /* 11176 */ 69824, 69824, 69824, 69824, 69824, 0, 0, 0, 192, 69824, 69824, 69824, 69824, 69824, 69824, 192, 192, 192,
  /* 11194 */ 192, 192, 192, 192, 192, 192, 69824, 192, 192, 192, 192, 192, 22528, 24576, 0, 192, 192, 192, 69824,
  /* 11213 */ 69824, 192, 69824, 69824, 69824, 69824, 69863, 69863, 69863, 69863, 69863, 69824, 69824, 69824, 0, 0, 2,
  /* 11230 */ 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 423, 0, 0, 0, 0, 0, 0, 0, 0, 209, 210, 0, 0, 0, 0, 0, 0, 0, 0, 563634,
  /* 11260 */ 563634, 563634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 75776, 0, 563634, 563634, 0, 0, 686080, 0,
  /* 11285 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 456, 0, 0, 0, 0, 0, 0, 0, 0, 75776, 75776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11316 */ 22528, 24576, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 75776, 0, 0, 75776, 0, 0, 0, 0, 960, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11344 */ 0, 0, 0, 1485, 0, 0, 0, 0, 75776, 75776, 75776, 0, 0, 0, 45059, 4, 5, 61440, 0, 0, 0, 0, 0, 0, 198, 198,
  /* 11370 */ 198, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 232, 0, 234, 0, 0, 0, 0, 211, 0, 0, 227, 227,
  /* 11399 */ 100352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 59392, 59392, 0, 0, 227, 0, 0, 0, 686080, 0, 0, 0, 0, 0,
  /* 11427 */ 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 43381, 0, 0, 0, 0, 77824, 0, 0, 43381, 43381, 43381, 43381, 43381,
  /* 11452 */ 43381, 43381, 77824, 77824, 43381, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 426, 0, 0, 426, 0, 0, 0, 0,
  /* 11478 */ 0, 609, 0, 43008, 612, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /* 11493 */ 557056, 557056, 0, 0, 0, 0, 0, 86016, 0, 79872, 79872, 0, 79872, 79872, 79872, 79872, 79872, 79872, 79872,
  /* 11512 */ 79872, 79872, 79872, 79872, 79872, 0, 0, 0, 0, 79872, 79872, 79872, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0,
  /* 11535 */ 0, 0, 453, 0, 0, 0, 0, 0, 0, 0, 0, 940, 0, 0, 0, 797, 352, 352, 352, 0, 0, 0, 20480, 81920, 81920, 81920,
  /* 11561 */ 81920, 0, 81920, 0, 0, 0, 0, 81920, 0, 81920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 24576, 0, 81920,
  /* 11587 */ 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 0, 0, 0,
  /* 11604 */ 0, 81920, 81920, 81920, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 483, 0, 0, 0, 0, 0, 0, 420, 492, 0, 2,
  /* 11632 */ 183, 4, 5, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 195, 195, 195, 195, 195, 195, 0, 83968, 83968, 0,
  /* 11657 */ 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 0, 0, 0, 0, 83968,
  /* 11674 */ 83968, 83968, 26804, 26804, 2, 0, 4, 5, 0, 400, 0, 0, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
  /* 11702 */ 0, 0, 0, 0, 0, 227, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 708, 0, 0, 0, 972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11734 */ 0, 0, 0, 1343, 0, 0, 0, 609, 0, 0, 612, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 886,
  /* 11758 */ 374, 374, 374, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 264, 0, 110592, 0, 0, 0, 0, 0, 0,
  /* 11787 */ 0, 0, 0, 988, 0, 0, 0, 0, 0, 65536, 0, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536,
  /* 11807 */ 1584, 0, 0, 0, 0, 1589, 0, 0, 0, 0, 0, 0, 290, 290, 290, 290, 290, 0, 352, 352, 352, 352, 352, 352, 1660,
  /* 11832 */ 1661, 0, 0, 0, 0, 0, 0, 0, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
  /* 11856 */ 290, 374, 1699, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 352, 352,
  /* 11877 */ 1731, 352, 1732, 1733, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374, 1857, 374, 1859, 374, 374, 374,
  /* 11897 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1570, 0, 0, 374, 374, 374, 374, 1743, 374, 1744, 1745, 374, 374, 374,
  /* 11922 */ 374, 374, 374, 0, 0, 0, 0, 0, 352, 352, 1886, 1887, 352, 374, 1777, 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 11948 */ 0, 0, 1789, 0, 0, 88459, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 227, 0, 0,
  /* 11976 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 92468, 92468, 0, 92468, 92468, 0, 0, 0, 0, 0, 0, 92468, 0,
  /* 12004 */ 92468, 92468, 92468, 92468, 92468, 92468, 92468, 92468, 92468, 92468, 0, 0, 0, 0, 0, 106496, 106496, 0, 0,
  /* 12023 */ 106496, 106496, 0, 0, 0, 0, 0, 715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
  /* 12053 */ 0, 0, 0, 0, 92468, 92468, 92468, 92468, 92468, 92468, 0, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 676,
  /* 12078 */ 0, 0, 0, 0, 0, 0, 0, 0, 964, 0, 0, 0, 0, 0, 0, 0, 0, 114688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 12110 */ 290, 290, 290, 290, 555008, 555008, 0, 94208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 352, 1761, 352, 0,
  /* 12135 */ 0, 256, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141312, 141312,
  /* 12162 */ 141312, 141312, 141312, 141312, 141312, 193, 194, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
  /* 12186 */ 726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 722, 722, 0, 0, 0, 726, 974, 0, 0, 0, 0, 0, 0, 0,
  /* 12217 */ 0, 0, 222, 0, 0, 0, 0, 0, 0, 374, 374, 915, 1139, 0, 0, 0, 0, 921, 1141, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0,
  /* 12246 */ 0, 227, 0, 0, 0, 0, 374, 374, 1139, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 195, 0, 0, 0, 0, 0, 0,
  /* 12276 */ 20480, 0, 0, 0, 198, 0, 98304, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 225, 0, 225, 0, 22528, 24576, 98501, 98502,
  /* 12301 */ 98304, 98304, 98501, 98304, 98501, 98304, 98304, 98304, 98304, 98304, 0, 0, 0, 0, 0, 681984, 0, 0, 694272,
  /* 12320 */ 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 290, 290, 1670, 1671, 290, 290, 98304,
  /* 12346 */ 98501, 98304, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 73728, 528384, 194, 195, 0, 102400, 0, 0, 0, 0, 0,
  /* 12371 */ 0, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0, 0, 563635, 73728, 563635, 0, 73728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
  /* 12399 */ 256, 256, 256, 256, 256, 256, 0, 0, 563635, 0, 0, 686080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
  /* 12426 */ 0, 0, 841728, 0, 804864, 841728, 0, 0, 0, 788480, 0, 0, 557611, 557611, 557611, 557611, 557611, 0, 0, 0,
  /* 12446 */ 0, 0, 557667, 678499, 557667, 557667, 557667, 557667, 557611, 784939, 557611, 557611, 799275, 557611,
  /* 12460 */ 805419, 811563, 557611, 557611, 557611, 825899, 557611, 557611, 842283, 557611, 557611, 557611, 557611,
  /* 12473 */ 844331, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 887339, 557611, 901675, 557611, 557611,
  /* 12486 */ 557611, 768555, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 809515, 813611, 817707, 557611,
  /* 12499 */ 557611, 557611, 557611, 557611, 557611, 557611, 557611, 754219, 557611, 557611, 557611, 557611, 772651,
  /* 12512 */ 557611, 780843, 609, 0, 0, 612, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667,
  /* 12527 */ 557667, 557667, 557667, 0, 0, 0, 0, 5, 0, 557667, 754275, 557667, 557667, 557667, 557667, 772707, 557667,
  /* 12544 */ 780899, 557667, 784995, 557667, 557667, 799331, 557667, 805475, 811619, 557667, 557667, 557667, 825955,
  /* 12557 */ 557667, 557667, 842339, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 735843, 557667,
  /* 12570 */ 557667, 557667, 557667, 752227, 557667, 557667, 557667, 557667, 557667, 899683, 557667, 557667, 557667,
  /* 12583 */ 557667, 557667, 557667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 419, 0, 735232, 0, 0, 0, 0, 817152, 0,
  /* 12609 */ 0, 817152, 0, 0, 0, 557056, 557611, 678443, 557611, 557611, 557667, 557667, 739939, 557667, 557667,
  /* 12624 */ 557667, 557667, 557667, 557667, 557667, 692224, 0, 718848, 876544, 768611, 557667, 557667, 557667, 557667,
  /* 12638 */ 557667, 557667, 557667, 809571, 813667, 817763, 557667, 557667, 557667, 557667, 557667, 709219, 723555,
  /* 12651 */ 725603, 557667, 557667, 741987, 557667, 557667, 557667, 557667, 557667, 782947, 557667, 557667, 557667,
  /* 12664 */ 801379, 557667, 557667, 834147, 838243, 557667, 557667, 834091, 838187, 557611, 557611, 557611, 557611,
  /* 12677 */ 557611, 557611, 557611, 879147, 883243, 557611, 557611, 557611, 895531, 557611, 557611, 743979, 557611,
  /* 12690 */ 557611, 557611, 557611, 557611, 557611, 782891, 557611, 557611, 557611, 801323, 557611, 557611, 557611,
  /* 12703 */ 557611, 557611, 557611, 557611, 557611, 758315, 557611, 557611, 786987, 557611, 557611, 819755, 557611,
  /* 12716 */ 557667, 557667, 557667, 696931, 698979, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667,
  /* 12729 */ 557667, 744035, 557667, 557667, 557667, 557667, 909923, 0, 0, 0, 0, 831488, 0, 0, 0, 0, 0, 557611, 557611,
  /* 12748 */ 748075, 557611, 823851, 557611, 557611, 557611, 877099, 557667, 557667, 748131, 555008, 886784, 901120,
  /* 12761 */ 911360, 923648, 0, 0, 0, 0, 901120, 911360, 557611, 680491, 557611, 557611, 557611, 557611, 557611,
  /* 12776 */ 557611, 557611, 557611, 557611, 916011, 674403, 557667, 557667, 701027, 557667, 557667, 705067, 557611,
  /* 12789 */ 557611, 717355, 557611, 557611, 557611, 557611, 557611, 746027, 756267, 557611, 557611, 557611, 776747,
  /* 12802 */ 557611, 557611, 764459, 797227, 821803, 858667, 557611, 870955, 557611, 557611, 557611, 913963, 557667,
  /* 12815 */ 684643, 688739, 707171, 911915, 557611, 557611, 924203, 557611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
  /* 12836 */ 0, 22528, 24576, 0, 557667, 680547, 557667, 557667, 557667, 705123, 557667, 557667, 717411, 557667,
  /* 12850 */ 557667, 557667, 557667, 557667, 746083, 756323, 557667, 557667, 557667, 776803, 557667, 557667, 557667,
  /* 12863 */ 557667, 557667, 844387, 557667, 557667, 557667, 557667, 557667, 879203, 883299, 557667, 557667, 557667,
  /* 12876 */ 895587, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 887395, 557667, 901731, 557667, 911971,
  /* 12889 */ 557667, 557667, 924259, 557667, 0, 0, 0, 0, 0, 468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528, 0, 0, 0, 528, 0, 0,
  /* 12916 */ 555008, 555008, 757760, 555008, 555008, 868352, 555008, 884736, 0, 757760, 0, 0, 557611, 557611, 557611,
  /* 12931 */ 557611, 610, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667,
  /* 12944 */ 903779, 557667, 557667, 557667, 557667, 557611, 850475, 557611, 557611, 868907, 557611, 557611, 885291,
  /* 12957 */ 893483, 557611, 557611, 557611, 928299, 0, 0, 0, 0, 981, 982, 0, 0, 985, 0, 0, 0, 0, 0, 0, 0, 1025, 0, 0,
  /* 12981 */ 0, 0, 0, 797, 352, 352, 1029, 0, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667,
  /* 12998 */ 557667, 557667, 557667, 758371, 557667, 557667, 0, 0, 0, 0, 0, 0, 702464, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
  /* 13021 */ 0, 0, 0, 0, 0, 0, 225, 226, 0, 227, 0, 0, 0, 0, 787043, 557667, 557667, 819811, 557667, 557667, 850531,
  /* 13042 */ 557667, 557667, 868963, 557667, 557667, 885347, 893539, 557667, 557667, 557667, 0, 710656, 0, 0, 0, 0, 0,
  /* 13059 */ 0, 0, 557611, 557611, 557611, 557611, 696875, 698923, 557611, 557611, 557611, 557611, 557611, 557611,
  /* 13073 */ 557611, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 903723, 557611, 557667,
  /* 13086 */ 928355, 0, 0, 0, 0, 712704, 0, 0, 724992, 741376, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578,
  /* 13113 */ 0, 0, 0, 1581, 0, 0, 555008, 555008, 555008, 555008, 0, 0, 0, 557611, 557611, 557611, 557611, 557611,
  /* 13131 */ 709163, 723499, 725547, 557611, 741931, 557611, 557611, 557611, 557611, 557611, 557611, 846379, 557611,
  /* 13144 */ 557611, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 557611, 735787, 557611, 557611, 557611,
  /* 13157 */ 557611, 752171, 557667, 846435, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 690176, 0, 0, 0,
  /* 13172 */ 0, 0, 0, 241, 0, 0, 0, 241, 0, 241, 0, 22528, 24576, 555008, 700416, 794624, 0, 674347, 557611, 557611,
  /* 13192 */ 700971, 557611, 557611, 557611, 737835, 557611, 557611, 770603, 795179, 557667, 737891, 557667, 557667,
  /* 13205 */ 770659, 795235, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 916067, 0, 684032,
  /* 13219 */ 0, 870400, 684032, 706560, 555008, 796672, 870400, 796672, 557611, 684587, 688683, 707115, 557611, 557611,
  /* 13233 */ 557611, 557611, 557611, 557611, 557611, 557611, 909867, 557667, 727651, 731747, 557667, 557667, 557667,
  /* 13246 */ 557667, 764515, 797283, 821859, 858723, 557667, 871011, 557667, 557667, 557667, 914019, 0, 0, 0, 0,
  /* 13261 */ 829440, 0, 0, 0, 0, 0, 815104, 0, 929792, 731136, 731136, 557611, 727595, 731691, 557667, 823907, 557667,
  /* 13278 */ 557667, 557667, 877155, 714752, 0, 0, 0, 0, 557611, 557611, 557611, 557611, 557611, 557611, 557611,
  /* 13293 */ 557611, 557611, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 557667, 875051,
  /* 13306 */ 676451, 557667, 557667, 557667, 557667, 875107, 720896, 0, 0, 851968, 557611, 766507, 860715, 557611,
  /* 13320 */ 557667, 557667, 557667, 557667, 557667, 557667, 0, 0, 0, 0, 676395, 557611, 557611, 557611, 557611,
  /* 13335 */ 557611, 557611, 557611, 557611, 557611, 899627, 557611, 557611, 557611, 557611, 557611, 557611, 0, 0, 0,
  /* 13350 */ 0, 536576, 0, 0, 0, 0, 557667, 766563, 860771, 557667, 759808, 778240, 729643, 557611, 729699, 557667,
  /* 13366 */ 557611, 557667, 557611, 557667, 557611, 557667, 866859, 866915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 13388 */ 0, 532, 0, 0, 0, 20480, 0, 0, 0, 0, 106496, 106496, 0, 0, 0, 0, 0, 0, 243, 0, 243, 0, 0, 0, 0, 0, 0, 0,
  /* 13416 */ 254, 0, 0, 0, 254, 0, 254, 0, 22528, 24576, 106496, 106496, 106496, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0,
  /* 13440 */ 0, 0, 750, 0, 0, 0, 0, 0, 0, 290, 757, 0, 532480, 802816, 0, 0, 28672, 0, 0, 0, 14336, 0, 0, 768000, 0,
  /* 13465 */ 808960, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1594, 290, 1596, 290, 290, 911360, 557056,
  /* 13489 */ 557056, 923648, 557056, 609, 0, 0, 0, 609, 0, 612, 0, 0, 0, 612, 557056, 849920, 557056, 557056, 868352,
  /* 13508 */ 557056, 557056, 884736, 892928, 557056, 557056, 557056, 927744, 609, 0, 612, 0, 0, 0, 108818, 0, 0, 0, 0,
  /* 13527 */ 0, 0, 0, 0, 0, 0, 108853, 0, 0, 0, 1175, 0, 0, 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0,
  /* 13558 */ 0, 0, 0, 949, 0, 0, 0, 0, 0, 0, 0, 108853, 108853, 0, 108853, 108853, 108853, 108853, 108853, 108853,
  /* 13578 */ 108853, 108853, 108853, 108853, 108853, 108853, 0, 0, 0, 0, 108853, 108853, 108941, 0, 0, 2, 45059, 4, 5,
  /* 13597 */ 0, 0, 0, 0, 0, 0, 0, 932, 0, 0, 0, 0, 0, 0, 0, 0, 677, 751, 752, 0, 0, 0, 290, 290, 0, 2, 45059, 4, 5, 0,
  /* 13627 */ 0, 122880, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0, 992, 0, 0,
  /* 13656 */ 122880, 122880, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880,
  /* 13670 */ 122880, 123226, 122880, 122880, 122880, 0, 0, 0, 0, 122880, 122880, 122880, 0, 0, 2, 45059, 4, 5, 0, 0, 0,
  /* 13691 */ 0, 0, 0, 0, 947, 948, 0, 0, 0, 0, 0, 0, 0, 984, 0, 986, 0, 0, 0, 0, 0, 0, 528384, 194, 195, 0, 0, 104448,
  /* 13719 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 0, 0, 0, 0, 0, 555008, 555008, 55296, 0, 118784, 129024, 0, 0, 0, 0, 0,
  /* 13746 */ 0, 0, 0, 0, 0, 950, 0, 0, 0, 0, 0, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  /* 13766 */ 557056, 0, 0, 118784, 0, 5, 0, 0, 0, 1202, 290, 290, 290, 290, 1206, 290, 290, 290, 290, 290, 290, 290,
  /* 13788 */ 1508, 290, 0, 0, 0, 0, 352, 1513, 352, 352, 0, 2, 45059, 4, 5, 0, 0, 0, 126976, 0, 0, 0, 0, 126976, 0, 0,
  /* 13814 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 683, 0, 127286, 127286, 0, 127286, 127286, 127286, 127286, 127286,
  /* 13837 */ 127286, 127286, 127286, 127286, 127286, 127286, 127286, 0, 0, 0, 0, 127286, 127286, 127286, 0, 0, 2,
  /* 13854 */ 45059, 0, 5, 0, 0, 135168, 0, 0, 0, 0, 0, 686080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81920, 0, 0, 0, 0, 0, 0,
  /* 13883 */ 528384, 194, 195, 96256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 145408, 0, 0, 0, 0, 681984, 0,
  /* 13910 */ 0, 694272, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 797, 352, 352, 352, 0, 2, 45059, 571576, 5, 0, 0, 0, 0,
  /* 13937 */ 188, 0, 0, 0, 0, 188, 0, 0, 0, 1335, 0, 0, 1337, 0, 0, 0, 1341, 0, 0, 0, 0, 0, 795, 796, 0, 788, 0, 797,
  /* 13965 */ 352, 352, 352, 352, 803, 0, 133120, 0, 0, 0, 0, 0, 0, 133120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 13992 */ 133120, 0, 0, 2, 45059, 571576, 5, 0, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 0, 0, 0, 975, 0, 467, 0, 0,
  /* 14020 */ 0, 0, 0, 0, 120832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 430, 0, 557056, 557056, 557056, 557056,
  /* 14045 */ 557056, 557056, 557056, 557056, 557056, 557056, 0, 120832, 120832, 0, 5, 0, 0, 0, 1361, 0, 0, 0, 0, 0, 0,
  /* 14066 */ 0, 0, 0, 0, 0, 0, 797, 352, 352, 352, 352, 352, 0, 0, 137216, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0,
  /* 14094 */ 1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137216, 137216, 137216, 137216, 137216, 137216, 137216, 0, 0, 0, 20480,
  /* 14115 */ 0, 0, 0, 0, 0, 0, 290, 290, 290, 290, 0, 290, 290, 290, 290, 290, 290, 508, 290, 290, 290, 290, 518, 290,
  /* 14139 */ 290, 523, 290, 0, 0, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 681, 0, 0, 0, 194, 195, 0, 0, 0, 0, 0,
  /* 14169 */ 0, 0, 0, 0, 0, 0, 0, 0, 755, 290, 290, 609, 43864, 797, 612, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 14193 */ 374, 374, 374, 887, 374, 374, 889, 0, 0, 980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0,
  /* 14222 */ 20480, 0, 0, 0, 0, 276, 0, 290, 290, 290, 290, 0, 290, 290, 290, 290, 501, 290, 290, 290, 290, 290, 290,
  /* 14245 */ 290, 290, 290, 290, 780, 290, 782, 0, 0, 0, 352, 375, 372, 372, 372, 372, 372, 372, 372, 375, 375, 375,
  /* 14267 */ 375, 375, 375, 375, 372, 372, 375, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1364, 1365, 0, 0,
  /* 14291 */ 1368, 0, 0, 0, 0, 1488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 290, 290, 290, 290, 1672, 26805, 2,
  /* 14317 */ 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 0, 141312, 141312,
  /* 14342 */ 0, 141312, 141312, 0, 0, 0, 0, 0, 0, 141312, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
  /* 14360 */ 141312, 141312, 141312, 0, 0, 0, 0, 0, 890880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800, 141312, 141312, 141312,
  /* 14382 */ 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1469, 0, 0, 0, 0, 0, 1472, 1473, 0, 847872, 770048, 761856,
  /* 14407 */ 749568, 774144, 0, 0, 862208, 0, 905216, 917504, 0, 671744, 864256, 112640, 0, 0, 0, 1574, 0, 0, 0, 0, 0,
  /* 14428 */ 0, 0, 0, 0, 0, 0, 0, 1470, 0, 0, 0, 0, 0, 2, 45059, 4, 185, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 0, 748, 749,
  /* 14458 */ 0, 0, 0, 0, 0, 0, 0, 290, 290, 290, 1000, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1014, 290, 290,
  /* 14481 */ 290, 290, 0, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 143360, 0, 0, 0, 0, 0, 0, 452, 0, 0, 0, 0, 0, 458, 0, 0, 0,
  /* 14511 */ 143360, 143360, 143360, 0, 0, 2, 45059, 4, 1098127, 0, 0, 0, 401, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0,
  /* 14536 */ 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 199, 0, 199, 253, 199, 0, 0, 0, 257, 233, 0, 233, 0, 22528, 24576, 0, 0,
  /* 14563 */ 0, 20480, 0, 0, 0, 199, 0, 284, 291, 291, 291, 291, 311, 291, 311, 311, 291, 311, 311, 332, 332, 332, 332,
  /* 14586 */ 332, 332, 332, 343, 332, 332, 332, 332, 332, 332, 332, 291, 332, 332, 353, 353, 353, 353, 353, 376, 353,
  /* 14607 */ 353, 353, 353, 353, 353, 353, 376, 376, 376, 376, 376, 376, 376, 353, 353, 376, 26804, 26804, 2, 45059, 4,
  /* 14628 */ 5, 0, 0, 0, 0, 0, 0, 0, 1482, 0, 0, 0, 0, 1486, 0, 0, 0, 0, 194, 195, 0, 0, 0, 0, 407, 0, 0, 410, 411, 0,
  /* 14658 */ 0, 0, 0, 195, 681984, 0, 0, 694272, 0, 0, 0, 0, 0, 0, 0, 419, 0, 0, 0, 0, 0, 0, 0, 352, 0, 462, 0, 0, 0,
  /* 14687 */ 466, 0, 0, 0, 407, 0, 0, 0, 0, 0, 0, 458, 491, 0, 0, 452, 0, 0, 0, 0, 352, 493, 290, 290, 497, 290, 290,
  /* 14714 */ 290, 290, 290, 290, 290, 290, 290, 290, 520, 290, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 1682,
  /* 14736 */ 352, 352, 352, 352, 0, 374, 374, 616, 374, 374, 374, 374, 633, 639, 641, 374, 290, 290, 0, 0, 0, 0, 0,
  /* 14759 */ 527, 0, 0, 0, 0, 0, 0, 424, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 0, 0, 0, 290, 290, 290, 290, 290, 290, 290, 290,
  /* 14787 */ 1209, 290, 290, 290, 352, 560, 352, 352, 352, 352, 352, 352, 585, 587, 352, 592, 352, 595, 352, 352, 352,
  /* 14808 */ 352, 352, 352, 1768, 352, 352, 1770, 374, 374, 374, 374, 374, 374, 894, 374, 374, 374, 374, 374, 374, 902,
  /* 14829 */ 374, 374, 606, 352, 352, 352, 0, 374, 374, 374, 617, 374, 374, 374, 374, 374, 374, 642, 644, 374, 649,
  /* 14850 */ 374, 652, 374, 374, 663, 374, 374, 0, 0, 0, 26804, 5, 0, 0, 0, 1662, 0, 0, 0, 1666, 0, 0, 1669, 290, 290,
  /* 14875 */ 290, 290, 290, 0, 1386, 0, 0, 0, 0, 1389, 352, 352, 352, 352, 0, 0, 668, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 14902 */ 0, 0, 0, 952, 0, 0, 0, 0, 227, 227, 0, 0, 0, 0, 0, 0, 0, 704, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 14934 */ 0, 0, 790, 0, 0, 0, 0, 0, 793, 0, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 953, 0, 955, 1212, 290,
  /* 14964 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 1222, 0, 0, 1224, 0, 0, 0, 1754, 0, 0, 1757, 1758, 0, 0, 0,
  /* 14988 */ 0, 290, 352, 352, 352, 352, 0, 374, 374, 374, 374, 621, 374, 374, 374, 374, 374, 374, 374, 1129, 374, 374,
  /* 15010 */ 374, 374, 374, 374, 1135, 374, 0, 0, 1222, 352, 352, 352, 352, 352, 1232, 352, 1234, 352, 352, 1237, 352,
  /* 15031 */ 352, 352, 352, 352, 352, 1827, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 917, 0, 0, 0, 923, 374,
  /* 15054 */ 374, 374, 374, 1286, 374, 1288, 374, 374, 1291, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 1884, 352,
  /* 15076 */ 352, 352, 352, 374, 374, 1139, 0, 1141, 0, 0, 1325, 0, 0, 0, 0, 0, 1330, 0, 0, 0, 0, 65536, 65536, 0, 0,
  /* 15101 */ 0, 0, 0, 0, 0, 0, 0, 0, 426, 0, 0, 0, 0, 0, 352, 352, 1420, 352, 352, 0, 1422, 0, 0, 0, 0, 0, 1424, 0, 0,
  /* 15130 */ 0, 0, 1203, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 781, 290, 0, 0, 0, 1452, 374, 374, 374,
  /* 15153 */ 374, 374, 374, 374, 1457, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1571, 0, 1464, 0, 0, 0, 0, 1468,
  /* 15180 */ 0, 0, 0, 0, 0, 0, 1471, 0, 0, 0, 0, 1362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 427, 428, 0, 0, 0, 374, 374,
  /* 15210 */ 374, 374, 1553, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0, 1463, 0, 1865, 1866, 0,
  /* 15233 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 1830, 374, 374, 374, 374, 374, 374, 201, 202,
  /* 15254 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460, 256, 266, 266, 0, 20480, 0, 0, 0, 0, 0, 0, 290, 290, 290,
  /* 15283 */ 290, 0, 290, 290, 290, 290, 502, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1015, 290, 290, 290, 0,
  /* 15305 */ 0, 290, 0, 0, 290, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 987, 0, 0, 0, 0, 0, 0, 0, 978, 290, 290, 290,
  /* 15334 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 785, 0, 0, 290, 1375, 290, 290, 290, 290, 290,
  /* 15356 */ 290, 290, 290, 290, 290, 290, 290, 1018, 290, 0, 0, 290, 290, 290, 290, 290, 1385, 0, 0, 0, 0, 0, 352,
  /* 15379 */ 352, 352, 1391, 1392, 0, 374, 374, 374, 1428, 1429, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 460,
  /* 15400 */ 0, 0, 26804, 5, 0, 1821, 352, 1823, 352, 1825, 352, 374, 374, 374, 374, 1831, 374, 1833, 374, 1835, 374,
  /* 15421 */ 374, 0, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 411648, 0, 411648, 0, 0, 0, 0, 0, 0, 203, 204, 205,
  /* 15449 */ 206, 207, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124928, 0, 0, 0, 0, 0, 557056, 267, 267, 268, 20480, 268, 275,
  /* 15474 */ 275, 275, 0, 285, 292, 292, 292, 292, 312, 292, 312, 312, 292, 327, 329, 333, 333, 333, 341, 341, 342,
  /* 15495 */ 342, 333, 342, 342, 342, 342, 342, 342, 342, 292, 342, 342, 354, 354, 354, 354, 354, 377, 354, 354, 354,
  /* 15516 */ 354, 354, 354, 354, 377, 377, 377, 377, 377, 377, 377, 354, 354, 377, 26804, 26804, 2, 45059, 4, 5, 0, 0,
  /* 15538 */ 0, 0, 0, 0, 0, 1716, 0, 0, 0, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 227, 227, 0, 0, 0, 701, 683, 0,
  /* 15569 */ 0, 0, 0, 0, 0, 0, 0, 0, 133120, 133120, 133120, 133120, 133120, 133120, 133120, 0, 786, 0, 0, 0, 0, 0, 0,
  /* 15592 */ 0, 0, 0, 0, 0, 0, 0, 0, 464, 352, 352, 352, 808, 352, 812, 352, 352, 352, 352, 352, 818, 352, 352, 352,
  /* 15616 */ 352, 352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 194, 0, 0, 0, 609, 43864, 797, 612, 859, 374, 862, 374,
  /* 15642 */ 374, 374, 374, 869, 374, 873, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1569, 0, 0, 1572, 374, 374, 374,
  /* 15667 */ 879, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 901, 374, 374, 374, 352, 352, 352, 1061,
  /* 15688 */ 1062, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 848, 352, 352, 352, 352, 374, 1108, 374, 374,
  /* 15709 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 1751, 1121, 1122, 374, 374, 374, 374, 374,
  /* 15730 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 1320, 1321, 290, 290, 290, 1506, 290, 290, 290, 290, 0, 0,
  /* 15751 */ 1510, 0, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374, 374, 374, 374, 634, 374, 374, 374, 1551, 374,
  /* 15772 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1710, 374, 290, 290, 1600, 290, 0, 0,
  /* 15793 */ 1604, 352, 352, 352, 352, 352, 352, 352, 352, 352, 830, 352, 352, 832, 352, 834, 352, 1640, 374, 374, 374,
  /* 15814 */ 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 374, 374, 374, 1809, 0, 1810, 0, 0, 0, 0, 0,
  /* 15841 */ 0, 352, 352, 352, 1820, 374, 374, 1913, 0, 0, 352, 352, 374, 374, 352, 374, 352, 374, 352, 374, 352, 352,
  /* 15863 */ 352, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 235, 235, 0, 20480, 0, 0, 0, 0,
  /* 15886 */ 277, 286, 293, 293, 293, 293, 313, 293, 313, 313, 293, 313, 330, 334, 334, 334, 334, 334, 334, 334, 334,
  /* 15907 */ 334, 334, 293, 334, 334, 355, 355, 355, 355, 355, 378, 355, 355, 355, 355, 355, 355, 355, 378, 378, 378,
  /* 15928 */ 378, 378, 378, 378, 355, 355, 378, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 75776, 0, 0, 0, 0,
  /* 15953 */ 0, 0, 0, 0, 0, 88459, 88459, 88459, 88459, 88459, 88459, 88459, 290, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
  /* 15977 */ 0, 0, 0, 0, 0, 0, 0, 533, 0, 0, 0, 0, 0, 0, 352, 352, 352, 1870, 352, 1871, 352, 352, 352, 374, 374, 374,
  /* 16003 */ 710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 290, 290, 774, 290, 290, 776, 290, 290, 290, 290,
  /* 16030 */ 290, 290, 290, 783, 0, 0, 0, 0, 788480, 0, 0, 0, 835584, 0, 0, 0, 0, 0, 0, 0, 0, 18432, 0, 0, 0, 0, 0, 0,
  /* 16058 */ 0, 0, 77824, 0, 0, 0, 0, 0, 0, 0, 0, 557056, 557056, 739328, 557056, 557056, 557056, 557056, 557056, 0,
  /* 16078 */ 693, 0, 0, 692, 0, 0, 0, 0, 0, 797, 799, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 16102 */ 635, 374, 374, 609, 43864, 797, 612, 860, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0,
  /* 16124 */ 1462, 0, 877, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1308, 374, 374,
  /* 16145 */ 891, 374, 374, 893, 374, 895, 374, 374, 374, 374, 374, 374, 374, 374, 374, 898, 374, 374, 374, 374, 374,
  /* 16166 */ 374, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 352, 352, 352,
  /* 16196 */ 352, 352, 352, 1266, 1267, 352, 352, 0, 0, 0, 0, 1083, 0, 0, 0, 0, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 16220 */ 374, 374, 374, 374, 1435, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1328, 0, 0, 0, 0, 747, 0, 0, 0, 678, 0, 0,
  /* 16248 */ 0, 754, 0, 290, 290, 0, 0, 1374, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 784,
  /* 16271 */ 0, 0, 374, 374, 1427, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1294, 374, 374, 374,
  /* 16292 */ 290, 1505, 290, 290, 290, 290, 290, 290, 0, 0, 0, 0, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374, 374,
  /* 16315 */ 630, 374, 374, 374, 374, 374, 1112, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1706, 374, 374, 374,
  /* 16336 */ 374, 374, 352, 352, 352, 352, 1520, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1041, 352, 352,
  /* 16357 */ 352, 352, 1529, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1422, 0, 1424, 0, 374, 374,
  /* 16378 */ 374, 374, 374, 374, 374, 374, 1545, 374, 374, 374, 374, 374, 374, 0, 1880, 0, 0, 1883, 352, 352, 352, 352,
  /* 16400 */ 352, 352, 1791, 352, 352, 352, 352, 352, 352, 352, 374, 374, 1801, 374, 374, 374, 374, 374, 1126, 374,
  /* 16420 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 1132, 374, 374, 374, 374, 374, 352, 1822, 352, 352, 352, 352,
  /* 16441 */ 374, 374, 374, 374, 374, 1832, 374, 374, 374, 374, 374, 1287, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 16462 */ 374, 899, 900, 374, 374, 374, 374, 234, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 473, 0, 0, 0, 211,
  /* 16490 */ 232, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 24576, 0, 0, 0, 20480, 0, 0, 212, 0, 278, 287, 294, 294, 294,
  /* 16516 */ 294, 314, 294, 324, 314, 294, 314, 314, 335, 335, 335, 335, 335, 335, 335, 344, 335, 335, 335, 335, 335,
  /* 16537 */ 335, 335, 294, 335, 335, 356, 356, 356, 356, 356, 379, 356, 356, 356, 356, 356, 356, 356, 379, 379, 379,
  /* 16558 */ 379, 379, 379, 379, 356, 356, 379, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0,
  /* 16583 */ 0, 0, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 0, 416, 417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 429, 0, 0, 0, 0, 819200,
  /* 16614 */ 0, 839680, 0, 868352, 872448, 925696, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 227, 227,
  /* 16640 */ 227, 0, 0, 0, 0, 0, 440, 441, 0, 443, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 352, 352,
  /* 16669 */ 352, 446, 0, 0, 0, 0, 0, 0, 0, 454, 0, 0, 0, 0, 0, 0, 461, 0, 290, 290, 290, 499, 290, 290, 507, 290, 513,
  /* 16696 */ 290, 516, 290, 519, 290, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 16726 */ 0, 0, 22528, 24576, 290, 290, 0, 0, 0, 0, 0, 0, 0, 0, 531, 0, 536, 0, 539, 0, 0, 0, 20480, 0, 0, 0, 0, 0,
  /* 16754 */ 0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 0, 548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 548, 0, 0, 352, 352, 352, 352,
  /* 16784 */ 352, 1270, 1422, 0, 0, 0, 0, 1276, 1424, 0, 0, 0, 0, 973, 0, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
  /* 16812 */ 352, 372, 372, 372, 352, 352, 563, 352, 352, 574, 352, 583, 352, 588, 352, 352, 594, 597, 601, 352, 352,
  /* 16833 */ 352, 352, 352, 1396, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1054, 352, 352, 352, 352, 352, 645,
  /* 16854 */ 374, 374, 651, 654, 658, 374, 374, 374, 374, 0, 0, 0, 26804, 5, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 16881 */ 0, 0, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 431, 0, 685, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 16914 */ 696, 697, 0, 227, 227, 0, 0, 0, 0, 0, 0, 703, 0, 0, 0, 0, 0, 709, 836, 352, 352, 352, 352, 352, 352, 352,
  /* 16940 */ 352, 352, 846, 352, 352, 352, 852, 352, 352, 352, 352, 352, 1410, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 16961 */ 352, 352, 1525, 352, 352, 352, 352, 352, 609, 43864, 797, 612, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 16981 */ 374, 374, 874, 374, 374, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1354, 0, 0, 0, 0, 1359, 0, 374, 374,
  /* 17009 */ 878, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 888, 374, 374, 0, 0, 0, 1140, 0, 669, 0, 0, 0,
  /* 17033 */ 1142, 0, 673, 0, 0, 0, 264, 0, 0, 0, 0, 0, 415744, 0, 0, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 17063 */ 133120, 0, 0, 133120, 0, 0, 374, 374, 374, 907, 374, 374, 374, 913, 374, 0, 0, 0, 0, 0, 0, 0, 856064, 0,
  /* 17087 */ 0, 0, 0, 555008, 555008, 555008, 724992, 0, 0, 927, 0, 929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 457, 0, 0, 0,
  /* 17114 */ 0, 0, 941, 0, 943, 944, 0, 946, 0, 0, 0, 0, 951, 0, 0, 0, 0, 223, 0, 0, 0, 246, 0, 247, 0, 0, 0, 0, 247,
  /* 17143 */ 956, 0, 0, 0, 0, 961, 0, 0, 0, 0, 0, 0, 0, 969, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
  /* 17174 */ 240, 0, 241, 242, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 217, 0, 0, 0, 290, 290, 290,
  /* 17202 */ 1010, 290, 290, 290, 1012, 290, 290, 290, 290, 290, 290, 0, 0, 0, 1388, 0, 0, 352, 352, 352, 352, 352, 0,
  /* 17225 */ 1021, 0, 0, 1024, 0, 0, 0, 0, 0, 929, 929, 797, 1028, 352, 352, 352, 352, 352, 813, 352, 352, 352, 817,
  /* 17248 */ 352, 352, 352, 352, 352, 352, 0, 0, 0, 1275, 1083, 0, 0, 0, 1281, 374, 1030, 352, 1032, 352, 352, 352,
  /* 17270 */ 352, 352, 352, 352, 352, 352, 352, 1043, 352, 352, 352, 352, 352, 827, 352, 352, 352, 352, 352, 352, 352,
  /* 17291 */ 352, 352, 352, 831, 352, 352, 352, 352, 352, 352, 1046, 352, 352, 352, 352, 352, 352, 352, 1053, 352, 352,
  /* 17312 */ 352, 352, 1056, 1057, 352, 1059, 1060, 352, 352, 352, 352, 1065, 352, 1067, 352, 352, 352, 352, 352, 1073,
  /* 17332 */ 374, 374, 374, 374, 1125, 374, 1127, 374, 374, 374, 374, 374, 1133, 374, 374, 374, 0, 0, 352, 352, 374,
  /* 17353 */ 374, 352, 374, 1918, 1919, 352, 374, 352, 374, 1138, 0, 1139, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 482,
  /* 17378 */ 0, 0, 0, 0, 0, 0, 0, 0, 427, 0, 0, 1187, 0, 0, 0, 0, 0, 0, 0, 1195, 0, 1197, 0, 0, 1200, 352, 1241, 352,
  /* 17406 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 604, 352, 1309, 1310, 374, 374, 374, 374,
  /* 17427 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1750, 0, 1322, 374, 1139, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
  /* 17451 */ 0, 0, 0, 0, 460, 722, 0, 0, 0, 0, 1333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1344, 0, 0, 0, 262, 0, 0, 0, 0,
  /* 17482 */ 0, 0, 0, 0, 0, 0, 0, 0, 210, 249, 0, 0, 0, 1347, 0, 1349, 1350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0,
  /* 17512 */ 0, 0, 0, 0, 1360, 0, 0, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 364, 364, 364, 364, 1384, 290,
  /* 17540 */ 290, 290, 290, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 1235, 352, 352, 352, 1239, 352,
  /* 17563 */ 352, 1407, 352, 1409, 352, 352, 352, 352, 352, 352, 1416, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374,
  /* 17584 */ 623, 374, 374, 374, 374, 374, 374, 1100, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0, 919, 0, 0,
  /* 17607 */ 0, 352, 1419, 352, 352, 352, 0, 1422, 0, 0, 0, 0, 0, 1424, 0, 0, 0, 0, 1479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 17636 */ 0, 453, 0, 0, 0, 352, 374, 1453, 374, 374, 374, 374, 374, 1456, 374, 374, 374, 0, 0, 0, 0, 0, 1813, 0, 0,
  /* 17661 */ 1816, 352, 1818, 352, 352, 0, 1476, 0, 0, 0, 0, 0, 0, 1483, 0, 0, 0, 0, 0, 0, 0, 675, 0, 0, 677, 0, 0, 0,
  /* 17689 */ 0, 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 725, 290, 290, 290, 290, 1507, 290, 290, 290, 0, 0, 0, 1511, 352,
  /* 17715 */ 352, 352, 352, 0, 374, 374, 374, 374, 374, 624, 374, 374, 636, 374, 374, 352, 352, 1518, 352, 352, 352,
  /* 17736 */ 352, 352, 352, 352, 352, 352, 352, 1527, 352, 352, 352, 352, 352, 842, 352, 352, 352, 352, 352, 352, 352,
  /* 17757 */ 352, 352, 352, 1068, 352, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374, 374, 1543, 374, 374, 374, 374,
  /* 17778 */ 374, 374, 374, 374, 374, 1316, 374, 374, 374, 374, 374, 374, 374, 374, 1552, 374, 374, 374, 374, 374, 374,
  /* 17799 */ 374, 374, 374, 374, 374, 374, 374, 1105, 374, 374, 290, 1599, 290, 1601, 1602, 1603, 0, 352, 352, 352,
  /* 17819 */ 1608, 352, 352, 352, 352, 352, 0, 0, 0, 1423, 0, 1081, 0, 0, 0, 1425, 0, 352, 352, 1613, 352, 352, 1616,
  /* 17842 */ 352, 352, 352, 352, 352, 1621, 1623, 352, 1625, 1626, 374, 374, 374, 1630, 374, 374, 374, 374, 374, 374,
  /* 17862 */ 374, 1635, 374, 374, 1638, 374, 374, 0, 0, 0, 1565, 0, 0, 0, 0, 0, 1568, 0, 0, 0, 0, 214, 0, 0, 0, 0, 214,
  /* 17889 */ 0, 0, 0, 0, 22528, 24576, 374, 374, 374, 374, 1643, 1645, 374, 1647, 1648, 0, 0, 0, 0, 1652, 0, 1654, 352,
  /* 17912 */ 1685, 352, 352, 352, 352, 352, 352, 352, 352, 374, 374, 1695, 374, 374, 374, 0, 0, 352, 352, 374, 374,
  /* 17933 */ 1916, 1917, 352, 374, 352, 374, 352, 352, 1763, 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374,
  /* 17953 */ 1773, 374, 374, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 0, 0, 0, 0, 0, 409600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1592, 0,
  /* 17982 */ 0, 1595, 290, 290, 290, 374, 374, 1808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 1819, 352, 352, 352, 352,
  /* 18006 */ 352, 1521, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1248, 352, 1250, 352, 352, 352, 1837, 1838,
  /* 18026 */ 0, 0, 0, 0, 0, 0, 1845, 352, 352, 1847, 352, 1849, 352, 352, 352, 352, 352, 1036, 352, 352, 352, 352, 352,
  /* 18049 */ 352, 1042, 352, 352, 352, 352, 0, 374, 374, 374, 619, 622, 374, 629, 374, 374, 374, 643, 352, 352, 1854,
  /* 18070 */ 374, 374, 1856, 374, 1858, 374, 374, 374, 374, 0, 0, 0, 0, 1812, 0, 0, 0, 0, 352, 352, 352, 352, 1889,
  /* 18093 */ 374, 1891, 374, 374, 374, 1895, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 1233, 352, 352, 352, 352, 352,
  /* 18115 */ 352, 0, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 230, 22528,
  /* 18146 */ 24576, 0, 0, 269, 20480, 269, 269, 269, 269, 0, 269, 295, 295, 295, 295, 0, 295, 0, 0, 295, 230, 230, 269,
  /* 18169 */ 269, 269, 269, 269, 269, 269, 269, 269, 269, 295, 269, 269, 357, 357, 357, 357, 357, 380, 357, 357, 357,
  /* 18190 */ 357, 357, 357, 357, 380, 380, 380, 380, 380, 380, 380, 357, 357, 380, 26804, 26804, 2, 45059, 4, 5, 0, 0,
  /* 18212 */ 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 694, 0, 0, 0, 0, 227, 227, 0, 0, 0, 0, 684, 0,
  /* 18243 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 971, 0, 0, 745, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0, 0, 290, 290,
  /* 18274 */ 1204, 1205, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 0, 352, 352, 1514, 352, 290, 290, 761, 290,
  /* 18296 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 770, 290, 290, 352, 352, 809, 352, 352, 352,
  /* 18317 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 0, 0, 0, 609, 43864, 797, 612, 374, 374, 374, 374, 374,
  /* 18339 */ 374, 374, 870, 374, 374, 374, 374, 374, 1455, 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 1784, 0, 0, 0, 0,
  /* 18363 */ 352, 1373, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1383, 352, 1890, 374, 374,
  /* 18384 */ 374, 374, 374, 0, 0, 0, 0, 352, 352, 352, 352, 352, 0, 0, 1274, 0, 0, 0, 0, 0, 1280, 0, 0, 0, 0, 237, 0,
  /* 18411 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 270, 20480, 270, 270, 270, 270, 279, 270, 296, 296,
  /* 18438 */ 296, 296, 315, 296, 315, 315, 296, 315, 315, 336, 336, 336, 336, 336, 336, 336, 336, 336, 336, 296, 336,
  /* 18459 */ 336, 358, 358, 358, 358, 358, 381, 358, 358, 358, 358, 358, 358, 358, 381, 381, 381, 381, 381, 381, 381,
  /* 18480 */ 358, 358, 381, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
  /* 18508 */ 0, 371, 371, 371, 371, 0, 0, 669, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 1586, 0,
  /* 18537 */ 0, 0, 0, 0, 1591, 0, 0, 0, 290, 290, 290, 290, 290, 1002, 290, 290, 290, 290, 290, 290, 290, 1218, 1219,
  /* 18560 */ 290, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262, 262, 352, 352, 1686, 352, 352, 352, 352, 352,
  /* 18586 */ 352, 352, 374, 1694, 374, 374, 374, 374, 374, 1554, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 18606 */ 1103, 374, 374, 374, 1106, 374, 374, 374, 374, 1701, 374, 374, 374, 374, 1704, 374, 374, 374, 374, 374,
  /* 18626 */ 374, 374, 374, 1556, 374, 374, 374, 374, 374, 374, 374, 374, 1632, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 18647 */ 1315, 374, 374, 1317, 374, 374, 374, 374, 0, 0, 1724, 0, 290, 290, 1725, 290, 290, 0, 352, 352, 352, 352,
  /* 18669 */ 352, 1728, 374, 1740, 374, 374, 374, 374, 374, 374, 1746, 374, 374, 374, 374, 374, 0, 0, 0, 1811, 0, 0,
  /* 18691 */ 1814, 1815, 0, 352, 352, 352, 352, 352, 374, 374, 1905, 1906, 374, 374, 0, 0, 0, 0, 352, 352, 352, 352,
  /* 18713 */ 374, 1855, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 352, 352, 352, 352, 1888, 432, 0, 227,
  /* 18736 */ 227, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 488, 0, 0, 0, 0, 475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18769 */ 0, 1171, 290, 525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 352, 561, 352, 352, 352, 352, 352,
  /* 18796 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 822, 352, 352, 607, 352, 352, 0, 374, 374, 374, 618, 374,
  /* 18817 */ 374, 374, 374, 374, 374, 374, 374, 1633, 374, 374, 374, 374, 374, 374, 374, 883, 374, 374, 374, 374, 374,
  /* 18838 */ 374, 374, 374, 914, 0, 0, 0, 0, 920, 0, 0, 0, 227, 227, 0, 0, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 420, 421,
  /* 18867 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 425, 0, 0, 0, 0, 0, 0, 352, 352, 352, 840, 352, 352, 352, 352, 352, 352,
  /* 18894 */ 352, 352, 352, 352, 352, 352, 352, 1403, 352, 352, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682,
  /* 18921 */ 0, 1346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1184, 374, 374, 374, 1454, 374, 374, 374, 374, 374,
  /* 18948 */ 374, 374, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 0, 0, 0, 20480, 0, 0, 0, 0, 280, 0, 297, 297, 297, 297,
  /* 18974 */ 316, 297, 316, 316, 297, 316, 316, 337, 316, 316, 316, 316, 316, 316, 345, 316, 316, 316, 316, 316, 316,
  /* 18995 */ 316, 297, 316, 316, 359, 359, 359, 359, 359, 382, 359, 359, 359, 359, 359, 359, 359, 382, 382, 382, 382,
  /* 19016 */ 382, 382, 382, 359, 359, 382, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
  /* 19043 */ 0, 0, 719, 0, 0, 0, 0, 0, 0, 0, 433, 227, 227, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
  /* 19074 */ 290, 290, 290, 500, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 1223, 0, 0, 0, 290, 290, 0,
  /* 19097 */ 0, 0, 0, 0, 0, 528, 0, 0, 0, 0, 0, 0, 0, 983, 0, 0, 0, 0, 0, 990, 0, 0, 0, 352, 352, 564, 352, 352, 352,
  /* 19126 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 596, 352, 352, 804, 352, 352, 352, 352, 352, 352, 352,
  /* 19147 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 835, 823, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 19168 */ 352, 352, 352, 352, 352, 853, 609, 43864, 797, 612, 374, 374, 374, 374, 374, 865, 374, 374, 374, 374, 374,
  /* 19189 */ 374, 374, 1289, 374, 374, 374, 1293, 374, 1295, 374, 374, 905, 374, 374, 374, 374, 910, 374, 374, 374, 0,
  /* 19210 */ 0, 0, 0, 0, 0, 0, 0, 0, 1817, 352, 352, 352, 0, 0, 942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
  /* 19241 */ 0, 957, 0, 0, 0, 0, 0, 963, 0, 0, 0, 0, 968, 0, 0, 0, 0, 1575, 1576, 0, 1577, 0, 0, 0, 1579, 1580, 0, 0,
  /* 19269 */ 0, 0, 1492, 0, 0, 0, 1496, 0, 0, 0, 0, 290, 290, 290, 290, 1001, 290, 290, 290, 290, 290, 290, 290, 290,
  /* 19293 */ 0, 0, 0, 0, 1512, 352, 352, 352, 0, 995, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
  /* 19316 */ 290, 769, 290, 290, 290, 290, 352, 352, 1076, 352, 352, 0, 1083, 43864, 0, 1083, 374, 374, 374, 374, 374,
  /* 19337 */ 374, 374, 1303, 374, 374, 374, 374, 374, 374, 374, 374, 374, 884, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 19358 */ 374, 1124, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1136, 374, 374, 1285, 374, 374, 374,
  /* 19378 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1118, 374, 374, 374, 374, 374, 1440, 374, 374, 374, 374,
  /* 19399 */ 374, 374, 374, 374, 374, 374, 374, 374, 1448, 374, 374, 374, 1516, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 19420 */ 1524, 352, 352, 352, 352, 352, 352, 0, 0, 1274, 0, 1083, 0, 0, 1280, 0, 374, 352, 352, 1530, 352, 352,
  /* 19442 */ 1532, 352, 352, 352, 1534, 352, 352, 352, 0, 0, 0, 0, 1588, 0, 0, 0, 0, 0, 1593, 0, 290, 290, 290, 290,
  /* 19466 */ 290, 290, 290, 510, 290, 290, 290, 290, 290, 290, 290, 766, 290, 290, 290, 290, 290, 290, 290, 290, 290,
  /* 19487 */ 768, 290, 290, 290, 290, 290, 290, 0, 374, 1538, 374, 374, 1541, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 19508 */ 1549, 374, 374, 0, 0, 919, 0, 0, 0, 0, 0, 925, 0, 0, 0, 0, 0, 0, 0, 933, 0, 0, 0, 0, 938, 0, 0, 374, 374,
  /* 19537 */ 1562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991, 0, 993, 1598, 290, 290, 290, 0, 0, 0, 352, 352, 352,
  /* 19564 */ 352, 352, 352, 352, 352, 1611, 374, 374, 374, 1642, 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 1786,
  /* 19587 */ 1787, 0, 352, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1156, 0, 0, 352, 352, 352, 1793, 352,
  /* 19614 */ 1795, 1796, 1797, 352, 374, 374, 374, 374, 1803, 374, 1805, 1806, 1807, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19637 */ 352, 352, 352, 352, 1848, 352, 1850, 352, 1876, 374, 1877, 374, 374, 374, 0, 0, 0, 0, 0, 352, 352, 352,
  /* 19659 */ 352, 352, 0, 0, 43864, 0, 0, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1437,
  /* 19681 */ 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0, 271, 20480, 271, 271, 271, 271, 0,
  /* 19709 */ 271, 298, 298, 298, 298, 317, 298, 317, 317, 298, 317, 317, 338, 338, 338, 338, 338, 338, 338, 338, 338,
  /* 19730 */ 338, 298, 338, 349, 360, 360, 360, 360, 360, 383, 360, 360, 360, 360, 360, 360, 360, 383, 383, 383, 383,
  /* 19751 */ 383, 383, 383, 360, 360, 383, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0,
  /* 19777 */ 0, 0, 0, 408, 469, 470, 471, 0, 0, 0, 0, 0, 418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1358, 0, 0, 458,
  /* 19807 */ 0, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407552, 227, 0, 0, 407552, 0, 352, 352, 352, 566, 352, 352,
  /* 19834 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1417, 352, 352, 0, 0, 669, 673, 0, 0, 0, 0, 0, 0,
  /* 19858 */ 0, 679, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 967, 0, 0, 970, 0, 290, 759, 290, 290, 290, 290,
  /* 19887 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 290, 290, 290, 290, 775, 290, 290, 290, 290,
  /* 19909 */ 290, 290, 290, 290, 0, 0, 0, 0, 352, 352, 352, 352, 352, 805, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 19932 */ 819, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374, 627, 374, 374, 374, 374, 374, 911, 374, 374, 374, 0,
  /* 19954 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1143, 0, 609, 43864, 797, 612, 374, 374, 374, 374, 374, 374, 866, 374,
  /* 19979 */ 374, 374, 374, 374, 374, 1113, 374, 374, 374, 374, 1116, 1117, 374, 1119, 1120, 352, 352, 352, 1034, 1035,
  /* 19999 */ 352, 352, 1038, 352, 352, 352, 352, 352, 352, 352, 352, 1692, 352, 374, 374, 374, 374, 374, 374, 352, 352,
  /* 20020 */ 1047, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 600, 352, 352, 1094, 1095, 374,
  /* 20040 */ 374, 1098, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1107, 0, 1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20065 */ 0, 0, 0, 0, 730, 0, 0, 0, 290, 290, 290, 290, 1377, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1220,
  /* 20088 */ 290, 0, 0, 0, 0, 0, 0, 1465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 741, 0, 0, 1489, 0, 0, 0, 0, 0,
  /* 20119 */ 1495, 0, 0, 0, 0, 0, 290, 1502, 290, 0, 0, 0, 352, 352, 352, 352, 1678, 1679, 1680, 352, 352, 352, 352,
  /* 20142 */ 352, 0, 1083, 43864, 0, 1083, 374, 374, 374, 374, 374, 1093, 0, 374, 374, 374, 1540, 374, 374, 374, 374,
  /* 20163 */ 374, 374, 374, 374, 374, 374, 374, 885, 374, 374, 374, 374, 352, 374, 1904, 374, 374, 374, 374, 0, 0, 0,
  /* 20185 */ 0, 352, 352, 352, 352, 374, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1338, 0, 0, 0, 0, 0, 0, 0,
  /* 20212 */ 0, 0, 108940, 108940, 108940, 108940, 108940, 108940, 108940, 0, 0, 0, 20480, 0, 0, 0, 0, 281, 0, 299,
  /* 20232 */ 299, 299, 299, 318, 299, 318, 326, 299, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 299,
  /* 20253 */ 318, 318, 361, 361, 361, 361, 361, 384, 361, 361, 361, 361, 361, 361, 361, 384, 384, 384, 384, 384, 384,
  /* 20274 */ 384, 361, 361, 384, 26804, 27022, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1191, 0, 1193, 0, 0, 0, 0, 0, 1199,
  /* 20300 */ 0, 352, 352, 352, 567, 352, 352, 579, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1735, 352, 352, 352,
  /* 20321 */ 374, 374, 374, 374, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 756, 290, 352, 806, 352, 352, 352,
  /* 20348 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1251, 352, 609, 43864, 797, 612, 374, 374, 374,
  /* 20368 */ 374, 374, 374, 867, 374, 374, 374, 374, 374, 374, 1302, 374, 1304, 374, 374, 374, 374, 374, 1307, 374,
  /* 20388 */ 374, 374, 374, 892, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 903, 374, 374, 0, 0, 1564, 0, 0, 0,
  /* 20411 */ 0, 0, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 374, 374, 1096, 374, 374, 374, 374, 374, 374, 1102, 374, 374,
  /* 20436 */ 374, 374, 374, 374, 374, 1314, 374, 374, 374, 374, 374, 374, 374, 374, 664, 374, 0, 0, 0, 26804, 5, 0, 0,
  /* 20459 */ 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 954, 0, 1240, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 20486 */ 352, 352, 352, 352, 352, 352, 1252, 374, 374, 374, 374, 1313, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 20507 */ 374, 374, 1104, 374, 374, 374, 374, 374, 374, 374, 1779, 374, 0, 0, 0, 1783, 0, 0, 0, 0, 0, 0, 352, 1869,
  /* 20531 */ 352, 352, 352, 352, 352, 352, 352, 374, 1875, 374, 0, 217, 0, 20480, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300,
  /* 20555 */ 319, 300, 325, 325, 300, 325, 319, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 300, 325, 325, 362,
  /* 20576 */ 362, 362, 362, 362, 385, 362, 362, 362, 362, 362, 362, 362, 385, 385, 385, 385, 385, 385, 385, 362, 362,
  /* 20597 */ 385, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 455, 0, 0, 0, 0,
  /* 20626 */ 0, 0, 0, 0, 227, 227, 227, 0, 0, 0, 0, 439, 0, 0, 0, 0, 444, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20657 */ 53555, 0, 0, 0, 731, 0, 732, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 1755, 0, 0, 0, 0, 0, 0, 0, 290, 352, 352,
  /* 20686 */ 352, 352, 0, 374, 374, 613, 374, 374, 625, 374, 374, 637, 374, 374, 0, 290, 495, 290, 290, 503, 290, 290,
  /* 20708 */ 511, 290, 290, 290, 517, 290, 290, 290, 290, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 1610, 524,
  /* 20730 */ 290, 0, 0, 0, 0, 526, 0, 0, 0, 0, 534, 0, 0, 0, 0, 480, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
  /* 20761 */ 0, 0, 0, 0, 0, 978, 0, 543, 0, 439, 0, 0, 0, 0, 0, 0, 0, 526, 0, 0, 420, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0,
  /* 20792 */ 0, 0, 0, 0, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824,
  /* 20809 */ 77824, 77824, 0, 0, 0, 0, 547, 0, 492, 0, 0, 0, 526, 420, 553, 0, 0, 0, 0, 0, 0, 352, 352, 352, 1231, 352,
  /* 20835 */ 352, 352, 352, 352, 352, 352, 352, 352, 1259, 352, 352, 352, 352, 352, 352, 352, 556, 352, 352, 568, 352,
  /* 20856 */ 352, 580, 352, 352, 352, 590, 352, 352, 352, 352, 605, 374, 647, 374, 374, 374, 374, 662, 374, 374, 374,
  /* 20877 */ 0, 0, 0, 26804, 5, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79872, 0, 0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
  /* 20908 */ 0, 0, 0, 0, 0, 106496, 0, 0, 0, 698, 227, 227, 699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63488, 0, 22528,
  /* 20936 */ 24576, 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 797, 352, 352, 352, 352, 352, 0, 1083, 43864, 0, 1083, 374, 374,
  /* 20960 */ 374, 374, 374, 374, 0, 0, 0, 0, 0, 352, 1885, 352, 352, 352, 374, 374, 374, 1097, 374, 374, 374, 374, 374,
  /* 20983 */ 374, 374, 374, 374, 374, 374, 374, 1708, 374, 374, 374, 0, 1227, 0, 352, 352, 1230, 352, 352, 352, 352,
  /* 21004 */ 352, 352, 352, 352, 352, 352, 1069, 352, 352, 352, 352, 352, 352, 352, 352, 1254, 352, 352, 352, 352, 352,
  /* 21025 */ 352, 352, 352, 352, 352, 352, 352, 352, 1422, 0, 1424, 352, 1265, 352, 352, 352, 352, 0, 0, 0, 0, 1083, 0,
  /* 21048 */ 0, 0, 0, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1432, 374, 374, 374, 374, 374, 374, 1702, 374, 374,
  /* 21070 */ 374, 374, 1707, 374, 374, 374, 374, 374, 1284, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 21091 */ 374, 374, 1134, 374, 374, 0, 0, 290, 290, 290, 290, 290, 1378, 290, 290, 290, 1380, 290, 290, 1382, 290,
  /* 21112 */ 0, 0, 0, 352, 352, 1677, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1414, 352, 352, 352, 352, 352, 352,
  /* 21134 */ 352, 352, 1394, 352, 352, 352, 1397, 352, 1399, 352, 352, 352, 352, 352, 352, 352, 816, 352, 352, 352,
  /* 21154 */ 352, 352, 352, 352, 352, 1052, 352, 352, 352, 352, 352, 352, 352, 1405, 352, 352, 352, 352, 352, 352, 352,
  /* 21175 */ 1413, 352, 352, 352, 352, 352, 352, 352, 844, 352, 352, 352, 352, 849, 352, 352, 352, 0, 374, 374, 374,
  /* 21196 */ 374, 374, 374, 374, 1431, 374, 374, 374, 1434, 374, 1436, 374, 374, 0, 919, 0, 925, 0, 0, 0, 0, 0, 0, 0,
  /* 21220 */ 0, 0, 0, 932, 0, 0, 797, 352, 352, 352, 0, 0, 1490, 1491, 0, 0, 1494, 0, 0, 0, 0, 0, 0, 290, 290, 290,
  /* 21246 */ 290, 290, 290, 1208, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 352, 1606, 352, 352, 352, 352,
  /* 21268 */ 352, 352, 352, 1051, 352, 352, 352, 352, 352, 352, 352, 352, 1246, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 21289 */ 1258, 352, 352, 352, 352, 352, 352, 352, 352, 1398, 352, 352, 352, 352, 352, 352, 352, 352, 1066, 352,
  /* 21309 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 1614, 1615, 352, 352, 352, 352, 1619, 352, 352, 352, 352,
  /* 21329 */ 352, 352, 0, 1272, 0, 0, 1083, 0, 1278, 0, 0, 374, 374, 1628, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 21352 */ 374, 1636, 1637, 374, 374, 0, 0, 0, 0, 0, 0, 1567, 0, 0, 0, 0, 0, 0, 0, 552, 0, 0, 0, 0, 0, 0, 0, 352,
  /* 21380 */ 374, 374, 1641, 374, 374, 374, 374, 374, 374, 0, 0, 1650, 0, 0, 0, 0, 539, 0, 0, 0, 0, 440, 0, 0, 0, 490,
  /* 21406 */ 0, 531, 352, 352, 352, 1687, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374, 1696, 1697, 1698, 374, 374,
  /* 21427 */ 374, 374, 374, 374, 374, 374, 1705, 374, 374, 374, 374, 374, 374, 374, 1443, 374, 374, 374, 374, 374,
  /* 21447 */ 1449, 374, 374, 1729, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374,
  /* 21468 */ 0, 0, 0, 0, 352, 352, 352, 1911, 374, 374, 374, 1741, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 21490 */ 374, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 1765, 352, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374,
  /* 21513 */ 1775, 352, 352, 1792, 352, 352, 352, 352, 352, 352, 374, 374, 374, 1802, 374, 374, 374, 0, 0, 352, 1914,
  /* 21534 */ 374, 1915, 352, 374, 352, 374, 352, 374, 352, 352, 352, 352, 1824, 352, 1826, 374, 374, 374, 374, 374,
  /* 21554 */ 374, 374, 1834, 374, 1836, 352, 374, 374, 1892, 1893, 374, 374, 0, 0, 0, 0, 352, 352, 352, 352, 352, 0,
  /* 21576 */ 1422, 0, 0, 0, 0, 0, 1424, 0, 0, 0, 0, 218, 219, 220, 221, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 550, 551, 0,
  /* 21605 */ 0, 0, 0, 493, 0, 462, 493, 0, 352, 221, 221, 220, 20480, 220, 220, 220, 220, 0, 288, 301, 301, 301, 301,
  /* 21628 */ 320, 301, 320, 320, 301, 328, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 301, 339, 339, 363,
  /* 21649 */ 363, 363, 363, 363, 386, 363, 363, 363, 363, 363, 363, 363, 386, 386, 386, 386, 386, 386, 386, 363, 363,
  /* 21670 */ 386, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 369,
  /* 21698 */ 369, 369, 369, 0, 194, 195, 0, 0, 0, 0, 0, 408, 0, 0, 0, 412, 413, 414, 415, 0, 0, 227, 227, 227, 0, 0, 0,
  /* 21725 */ 0, 0, 0, 0, 0, 0, 0, 445, 0, 447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 1158, 0, 290, 290, 498,
  /* 21755 */ 290, 290, 506, 290, 290, 290, 515, 290, 290, 290, 290, 522, 541, 0, 0, 0, 0, 544, 414, 0, 545, 0, 0, 0,
  /* 21779 */ 477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477, 0, 0, 0, 352, 562, 565, 352, 572, 352, 352, 352, 586, 589, 352, 352,
  /* 21805 */ 352, 598, 602, 352, 352, 352, 352, 352, 1767, 352, 352, 352, 374, 1771, 374, 374, 374, 374, 374, 0, 1781,
  /* 21826 */ 0, 0, 0, 0, 0, 0, 0, 0, 352, 1846, 352, 352, 352, 352, 352, 352, 646, 374, 374, 374, 655, 659, 374, 374,
  /* 21850 */ 374, 374, 0, 0, 0, 26804, 5, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83968, 0, 0, 0, 959, 0, 0, 0,
  /* 21879 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 907264, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1582, 0, 0,
  /* 21911 */ 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 290, 1597, 290, 837, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 21937 */ 352, 352, 352, 850, 352, 352, 352, 352, 0, 374, 374, 614, 374, 374, 374, 374, 632, 374, 374, 374, 374,
  /* 21958 */ 656, 374, 374, 374, 374, 374, 0, 0, 0, 26804, 5, 0, 1074, 352, 352, 352, 352, 0, 1083, 43864, 0, 1083,
  /* 21980 */ 374, 374, 374, 374, 374, 374, 374, 1555, 374, 374, 1557, 374, 374, 374, 1559, 374, 374, 374, 1299, 374,
  /* 22000 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1319, 374, 374, 1086, 374, 374, 374, 374, 374,
  /* 22021 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1451, 0, 1537, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 22042 */ 374, 374, 374, 374, 374, 1550, 290, 290, 290, 290, 0, 0, 0, 352, 352, 352, 352, 1609, 352, 352, 352, 352,
  /* 22064 */ 0, 374, 374, 374, 374, 374, 628, 374, 374, 374, 374, 374, 1099, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 22085 */ 374, 374, 0, 0, 0, 26804, 5, 0, 374, 374, 374, 374, 1631, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 22107 */ 374, 374, 1459, 1460, 0, 0, 0, 1762, 352, 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 1772, 374,
  /* 22128 */ 374, 374, 374, 657, 374, 374, 374, 374, 374, 0, 0, 0, 26804, 5, 0, 1790, 352, 352, 352, 1794, 352, 352,
  /* 22150 */ 352, 352, 374, 1800, 374, 374, 374, 1804, 374, 374, 0, 1139, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 422,
  /* 22175 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 934, 0, 0, 0, 0, 0, 0, 352, 374, 374, 374, 374, 374, 374, 0, 1897, 1898, 0,
  /* 22202 */ 352, 352, 352, 352, 352, 352, 1270, 0, 0, 0, 1083, 1276, 0, 0, 0, 374, 0, 0, 0, 20480, 0, 0, 0, 0, 282, 0,
  /* 22228 */ 290, 290, 290, 290, 0, 290, 290, 290, 290, 504, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1221, 0,
  /* 22250 */ 0, 0, 0, 0, 364, 387, 364, 364, 364, 364, 364, 364, 364, 387, 387, 387, 387, 387, 387, 387, 364, 364, 387,
  /* 22273 */ 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 290, 290, 290, 290, 290, 0, 1726,
  /* 22299 */ 352, 352, 352, 352, 352, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1370, 1371, 0, 0, 729, 0, 0,
  /* 22327 */ 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1356, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
  /* 22359 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 1381, 290, 290, 290, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 797,
  /* 22383 */ 352, 352, 352, 352, 352, 352, 1271, 0, 0, 0, 1083, 1277, 0, 0, 0, 374, 352, 352, 824, 352, 352, 352, 352,
  /* 22406 */ 352, 829, 352, 352, 352, 352, 352, 352, 352, 0, 1273, 0, 0, 1083, 0, 1279, 0, 0, 374, 609, 43864, 797,
  /* 22428 */ 612, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 876, 374, 890, 374, 374, 374, 374, 374, 374,
  /* 22449 */ 374, 374, 374, 374, 374, 374, 374, 374, 1709, 374, 374, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22476 */ 1487, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0, 424, 0, 0, 0, 0, 0, 0, 0, 374, 1298,
  /* 22505 */ 374, 374, 1301, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1558, 374, 374, 374, 374, 0, 0,
  /* 22526 */ 1334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1721, 0, 0, 352, 352, 352, 1408, 352, 352, 352, 352, 352,
  /* 22552 */ 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374, 374, 1752, 0, 0, 0, 0, 1756, 0, 0, 0,
  /* 22575 */ 1759, 0, 0, 290, 352, 352, 352, 352, 0, 374, 374, 615, 374, 374, 374, 374, 374, 638, 374, 374, 290, 290,
  /* 22597 */ 0, 0, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 569, 352, 352, 352, 352, 352, 352, 352,
  /* 22624 */ 352, 352, 352, 352, 352, 821, 352, 352, 352, 352, 352, 608, 352, 0, 374, 374, 374, 374, 374, 626, 374,
  /* 22645 */ 374, 374, 374, 374, 374, 1646, 374, 374, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 670, 674, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22672 */ 0, 0, 0, 0, 907264, 28672, 0, 0, 374, 374, 1700, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 22694 */ 374, 374, 1749, 374, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1474, 0, 0, 222, 20480, 222,
  /* 22722 */ 222, 222, 222, 0, 222, 302, 302, 302, 302, 0, 302, 0, 0, 302, 0, 0, 222, 222, 222, 222, 222, 222, 222,
  /* 22745 */ 222, 222, 222, 302, 222, 222, 365, 365, 365, 365, 365, 388, 365, 365, 365, 365, 365, 365, 365, 388, 388,
  /* 22766 */ 388, 388, 388, 388, 388, 365, 365, 388, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 0, 0,
  /* 22791 */ 0, 0, 0, 0, 0, 0, 755, 797, 352, 352, 352, 352, 352, 0, 0, 227, 227, 227, 0, 0, 0, 0, 0, 0, 0, 442, 0, 0,
  /* 22819 */ 0, 0, 1663, 0, 0, 0, 0, 1668, 290, 290, 290, 290, 290, 290, 1217, 290, 290, 290, 290, 0, 0, 0, 0, 0, 0, 0,
  /* 22845 */ 0, 0, 0, 0, 0, 0, 540, 0, 0, 448, 449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459, 0, 0, 0, 290, 997, 998, 290, 290,
  /* 22874 */ 290, 290, 290, 1004, 290, 290, 1006, 290, 542, 0, 0, 0, 0, 0, 0, 540, 0, 0, 546, 0, 0, 0, 0, 472, 0, 0,
  /* 22900 */ 549, 0, 0, 0, 0, 0, 0, 0, 0, 542, 0, 0, 542, 352, 352, 352, 352, 573, 352, 352, 352, 352, 352, 352, 352,
  /* 22925 */ 352, 352, 352, 352, 1249, 352, 352, 352, 352, 557, 352, 352, 352, 352, 575, 352, 352, 352, 352, 591, 593,
  /* 22946 */ 352, 352, 603, 352, 352, 352, 352, 841, 352, 352, 352, 352, 352, 352, 352, 352, 851, 352, 352, 352, 352,
  /* 22967 */ 352, 1080, 1083, 43864, 1085, 1083, 374, 374, 1089, 374, 374, 374, 0, 0, 352, 352, 374, 374, 352, 374,
  /* 22987 */ 352, 374, 1920, 1921, 352, 374, 648, 650, 374, 374, 660, 374, 374, 374, 374, 0, 0, 0, 26804, 5, 0, 0, 0,
  /* 23010 */ 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92468, 0, 0, 0, 1023, 0, 0, 0, 0, 0, 933, 1027, 1020, 797, 352, 352,
  /* 23037 */ 352, 352, 352, 352, 1617, 1618, 352, 352, 352, 352, 352, 352, 352, 352, 1039, 352, 352, 352, 352, 352,
  /* 23057 */ 352, 352, 0, 227, 227, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 290, 290, 290, 290, 290,
  /* 23084 */ 290, 1003, 290, 290, 290, 290, 290, 290, 0, 0, 712, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
  /* 23110 */ 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 1188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
  /* 23141 */ 939, 609, 43864, 797, 612, 374, 861, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1305, 374, 374,
  /* 23161 */ 374, 374, 374, 979, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1583, 0, 0, 996, 290, 290, 290, 290, 290,
  /* 23189 */ 290, 290, 290, 290, 290, 290, 290, 290, 1017, 290, 290, 0, 0, 352, 1031, 352, 352, 352, 352, 352, 352,
  /* 23210 */ 352, 352, 352, 352, 352, 352, 352, 352, 833, 352, 352, 1045, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 23231 */ 352, 352, 352, 352, 352, 352, 1418, 352, 1075, 352, 1077, 352, 0, 1083, 43864, 0, 1083, 374, 374, 374,
  /* 23251 */ 374, 1091, 374, 374, 0, 1139, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 1144, 1137, 374, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23279 */ 0, 0, 0, 0, 0, 0, 22528, 24576, 1159, 0, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 1168, 0, 0, 1170, 0, 0, 0, 20480,
  /* 23306 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127286, 0, 0, 0, 1228, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 23331 */ 352, 352, 1402, 352, 352, 352, 1172, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724, 797, 352, 800,
  /* 23357 */ 352, 352, 352, 290, 1213, 290, 1214, 1215, 290, 290, 290, 290, 290, 290, 0, 0, 0, 0, 1225, 352, 352, 1253,
  /* 23379 */ 352, 352, 352, 1257, 352, 352, 352, 352, 352, 352, 352, 352, 352, 374, 1828, 374, 374, 374, 374, 374, 374,
  /* 23400 */ 374, 374, 1101, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1311, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 23421 */ 374, 374, 374, 374, 374, 1458, 0, 0, 0, 0, 0, 374, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 930,
  /* 23449 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 0, 0, 0, 0, 0, 1348, 0, 0, 0, 0, 0, 1353, 0, 0, 0, 0, 0, 0, 0,
  /* 23481 */ 1715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 1395, 352, 352, 352, 352,
  /* 23507 */ 352, 352, 352, 352, 352, 352, 352, 1070, 1071, 352, 352, 352, 290, 290, 290, 290, 0, 0, 0, 1605, 352, 352,
  /* 23529 */ 352, 352, 352, 352, 352, 352, 577, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1040, 352, 352, 352, 352,
  /* 23550 */ 352, 352, 1627, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1560, 0, 1753,
  /* 23571 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 1760, 352, 352, 352, 352, 352, 1081, 1083, 43864, 1086, 1083, 374, 374,
  /* 23595 */ 374, 374, 374, 374, 374, 1128, 374, 374, 374, 374, 374, 374, 374, 374, 374, 897, 374, 374, 374, 374, 374,
  /* 23616 */ 374, 374, 374, 1778, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 1229, 352, 352, 352, 352, 352, 352, 352,
  /* 23641 */ 352, 352, 352, 352, 1620, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374, 1894, 374, 1896, 0, 0, 1899,
  /* 23662 */ 352, 352, 352, 352, 352, 352, 1411, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1400, 352, 352, 352, 352,
  /* 23683 */ 352, 352, 352, 374, 374, 374, 374, 374, 374, 0, 1908, 1909, 0, 352, 352, 352, 352, 374, 26804, 27022, 2,
  /* 23704 */ 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 259,
  /* 23735 */ 0, 0, 22528, 24576, 0, 0, 272, 20480, 272, 272, 272, 272, 0, 289, 303, 303, 303, 303, 0, 303, 0, 223, 303,
  /* 23758 */ 0, 0, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 303, 347, 350, 366, 366, 366, 366, 366, 389, 366,
  /* 23780 */ 366, 366, 366, 366, 366, 366, 389, 389, 389, 389, 389, 389, 389, 366, 366, 389, 26804, 26804, 2, 45059, 4,
  /* 23801 */ 5, 0, 0, 0, 0, 0, 0, 0, 75776, 0, 75776, 0, 0, 0, 0, 75776, 0, 0, 75776, 75776, 75776, 75776, 75776,
  /* 23824 */ 75776, 75776, 75776, 75776, 75776, 75776, 75776, 0, 0, 0, 0, 0, 194, 195, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0,
  /* 23848 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1659, 0, 290, 496, 290, 290, 290, 290, 290, 512, 290, 290, 290, 290, 290, 290,
  /* 23873 */ 290, 1011, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 23895 */ 352, 352, 352, 290, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 535, 0, 0, 0, 0, 0, 488, 0, 535, 0, 0, 0, 0, 0, 0,
  /* 23924 */ 352, 558, 352, 352, 352, 352, 352, 581, 352, 352, 352, 352, 352, 352, 352, 352, 352, 815, 352, 352, 352,
  /* 23945 */ 352, 352, 352, 352, 352, 352, 1769, 352, 374, 374, 374, 374, 374, 374, 374, 1114, 374, 374, 374, 374, 374,
  /* 23966 */ 374, 374, 374, 896, 374, 374, 374, 374, 374, 374, 374, 758, 290, 762, 290, 764, 290, 290, 290, 290, 290,
  /* 23987 */ 290, 290, 290, 290, 771, 290, 0, 0, 0, 352, 1676, 352, 352, 352, 352, 352, 352, 352, 1683, 352, 352, 352,
  /* 24009 */ 352, 352, 1049, 352, 352, 352, 352, 352, 352, 352, 1055, 352, 352, 352, 352, 352, 1063, 352, 352, 352,
  /* 24029 */ 352, 352, 352, 352, 352, 352, 352, 1535, 352, 352, 0, 0, 0, 352, 352, 810, 352, 352, 814, 352, 352, 352,
  /* 24051 */ 352, 352, 352, 352, 352, 352, 352, 1415, 352, 352, 352, 352, 352, 352, 352, 352, 825, 352, 352, 352, 352,
  /* 24072 */ 352, 352, 352, 352, 352, 352, 352, 352, 1261, 352, 352, 1263, 609, 43864, 797, 612, 374, 374, 374, 374,
  /* 24092 */ 864, 374, 374, 871, 374, 374, 875, 374, 374, 0, 1563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530432, 721, 0,
  /* 24118 */ 0, 0, 0, 0, 1201, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 767, 290, 290, 290, 290,
  /* 24141 */ 290, 290, 290, 1264, 352, 352, 352, 352, 352, 0, 0, 0, 0, 1083, 0, 0, 0, 0, 1282, 374, 374, 374, 1312,
  /* 24164 */ 374, 374, 374, 374, 374, 374, 374, 374, 1318, 374, 374, 374, 374, 880, 374, 374, 374, 374, 374, 374, 374,
  /* 24185 */ 374, 374, 374, 374, 0, 0, 1461, 0, 0, 352, 1406, 352, 352, 352, 352, 352, 1412, 352, 352, 352, 352, 352,
  /* 24207 */ 352, 352, 352, 843, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1737, 352, 374, 374, 374, 374, 0, 0,
  /* 24229 */ 1477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51200, 0, 0, 0, 352, 352, 352, 1531, 352, 352, 352, 352, 352,
  /* 24256 */ 352, 352, 352, 352, 0, 1274, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141312, 0, 0, 0, 1478, 0, 0, 0,
  /* 24284 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 79872, 79872, 79872, 79872, 79872, 1280, 374, 374, 374, 374, 374, 374, 374,
  /* 24306 */ 374, 374, 374, 374, 1548, 374, 374, 374, 374, 881, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 24327 */ 1748, 374, 374, 0, 0, 1673, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1526,
  /* 24349 */ 352, 352, 352, 352, 352, 352, 352, 1688, 352, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374, 0, 0, 0,
  /* 24371 */ 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1238, 352, 1711, 0, 0, 1713, 0, 0, 0, 0, 0, 0,
  /* 24395 */ 0, 1719, 1720, 0, 0, 0, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1183, 0, 974, 0, 0, 352, 352, 1764, 352,
  /* 24423 */ 1766, 352, 352, 352, 352, 374, 374, 374, 374, 374, 1774, 374, 374, 374, 374, 1111, 374, 374, 374, 374,
  /* 24443 */ 374, 374, 374, 374, 374, 374, 374, 1306, 374, 374, 374, 374, 1776, 374, 374, 374, 374, 0, 0, 0, 0, 0, 0,
  /* 24466 */ 0, 0, 0, 0, 352, 352, 352, 352, 1048, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 820, 352,
  /* 24488 */ 352, 352, 352, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 304, 304, 304, 304, 321, 304, 321, 321, 304, 321, 321,
  /* 24512 */ 340, 340, 321, 321, 321, 321, 321, 340, 321, 321, 321, 321, 321, 321, 321, 304, 348, 351, 367, 367, 367,
  /* 24533 */ 367, 367, 390, 367, 367, 367, 367, 367, 367, 367, 390, 390, 390, 390, 390, 390, 390, 367, 367, 390, 26804,
  /* 24554 */ 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 98304, 98304, 98304, 98304, 98304, 98304, 98304, 98502, 98304,
  /* 24575 */ 98304, 0, 0, 227, 227, 227, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 106496, 106496, 106496, 106496, 106496,
  /* 24597 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 438, 0, 463, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24619 */ 0, 0, 0, 0, 474, 494, 290, 290, 290, 290, 290, 290, 509, 290, 514, 290, 290, 290, 290, 521, 290, 0, 0, 0,
  /* 24643 */ 1675, 352, 352, 352, 352, 352, 352, 1681, 352, 352, 352, 352, 0, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 24664 */ 374, 374, 374, 374, 374, 374, 374, 374, 904, 290, 290, 0, 0, 0, 0, 0, 0, 0, 0, 532, 0, 537, 0, 0, 0, 0,
  /* 24690 */ 438, 0, 0, 0, 494, 0, 537, 554, 0, 352, 559, 352, 352, 352, 352, 576, 582, 584, 352, 352, 352, 352, 352,
  /* 24713 */ 599, 352, 352, 352, 352, 352, 1082, 1083, 43864, 1087, 1083, 374, 374, 374, 374, 374, 374, 374, 1703, 374,
  /* 24733 */ 374, 374, 374, 374, 374, 374, 374, 374, 1445, 374, 374, 374, 374, 374, 374, 0, 227, 227, 0, 700, 0, 0, 0,
  /* 24756 */ 0, 0, 0, 0, 0, 0, 0, 0, 1499, 0, 290, 290, 290, 0, 0, 730, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
  /* 24785 */ 143360, 143360, 143360, 143360, 143360, 143360, 143360, 143360, 143360, 143360, 143360, 143360, 0, 0, 0,
  /* 24800 */ 0, 773, 290, 290, 290, 290, 290, 777, 778, 290, 290, 290, 290, 290, 0, 0, 0, 0, 0, 0, 352, 352, 1390, 352,
  /* 24824 */ 352, 0, 0, 789, 735, 0, 0, 0, 700, 789, 0, 797, 352, 352, 352, 802, 352, 352, 352, 352, 1078, 0, 1083,
  /* 24847 */ 43864, 0, 1083, 1088, 374, 374, 1090, 374, 1092, 352, 352, 352, 826, 352, 352, 828, 352, 352, 352, 352,
  /* 24867 */ 352, 352, 352, 352, 352, 1037, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1798, 374, 374, 374, 374, 374,
  /* 24888 */ 374, 374, 352, 838, 839, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1072, 352, 352,
  /* 24909 */ 609, 43864, 797, 612, 374, 374, 374, 863, 374, 374, 374, 374, 374, 374, 374, 374, 1130, 1131, 374, 374,
  /* 24929 */ 374, 374, 374, 374, 0, 0, 958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 290, 290, 1009, 290,
  /* 24956 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 1020, 352, 352, 1033, 352, 352, 352, 352, 352, 352,
  /* 24977 */ 352, 352, 352, 352, 352, 1044, 352, 352, 352, 352, 1255, 1256, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 24997 */ 352, 352, 847, 352, 352, 352, 352, 352, 1226, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1236,
  /* 25018 */ 352, 352, 352, 352, 352, 352, 1690, 352, 352, 352, 374, 374, 374, 374, 374, 374, 374, 1860, 374, 374, 0,
  /* 25039 */ 1863, 0, 0, 374, 374, 374, 1300, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 90112, 0, 0,
  /* 25061 */ 26804, 5, 0, 0, 0, 290, 290, 1376, 290, 290, 290, 290, 1379, 290, 290, 290, 290, 290, 290, 765, 290, 290,
  /* 25083 */ 290, 290, 290, 290, 290, 290, 290, 290, 1016, 290, 290, 1019, 0, 0, 352, 1393, 352, 352, 352, 352, 352,
  /* 25104 */ 352, 352, 352, 352, 1401, 352, 352, 352, 1404, 0, 1426, 374, 374, 374, 374, 374, 1430, 374, 374, 374, 374,
  /* 25125 */ 374, 374, 374, 374, 1290, 374, 374, 374, 374, 374, 374, 374, 374, 1438, 374, 374, 374, 1441, 374, 374,
  /* 25145 */ 374, 374, 374, 1447, 374, 374, 374, 374, 374, 1780, 0, 1782, 0, 0, 0, 1785, 0, 0, 1788, 352, 0, 0, 1466,
  /* 25168 */ 1467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1658, 0, 0, 0, 0, 1475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25200 */ 0, 0, 63488, 1504, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 0, 352, 352, 352, 352, 0, 374, 374, 374,
  /* 25223 */ 374, 620, 374, 374, 631, 374, 640, 374, 352, 1517, 352, 1519, 352, 352, 1522, 352, 352, 352, 352, 352,
  /* 25243 */ 352, 352, 352, 352, 1050, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1064, 352, 352, 352, 352, 352, 352,
  /* 25264 */ 352, 352, 352, 1799, 374, 374, 374, 374, 374, 374, 0, 374, 374, 374, 374, 374, 1542, 374, 1544, 374, 374,
  /* 25285 */ 1547, 374, 374, 374, 374, 653, 374, 374, 374, 374, 374, 0, 0, 0, 26804, 5, 0, 1561, 374, 0, 0, 0, 0, 0, 0,
  /* 25310 */ 0, 0, 0, 0, 0, 0, 0, 0, 59392, 0, 0, 1573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143360, 0, 0, 1585,
  /* 25340 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 352, 352, 1607,
  /* 25366 */ 352, 352, 352, 352, 352, 352, 1245, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1523, 352, 352, 352, 352,
  /* 25387 */ 352, 352, 352, 352, 1691, 352, 352, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 1653,
  /* 25410 */ 0, 1612, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1624, 352, 352, 352, 352, 352, 1244,
  /* 25431 */ 352, 352, 1247, 352, 352, 352, 352, 352, 352, 352, 374, 374, 1829, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 25452 */ 1444, 374, 1446, 374, 374, 374, 374, 374, 374, 374, 1629, 374, 374, 374, 374, 374, 374, 1634, 374, 374,
  /* 25472 */ 374, 374, 374, 374, 912, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 290, 0, 0, 1674, 352,
  /* 25500 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1622, 352, 352, 352, 1684, 352, 352, 352, 352,
  /* 25520 */ 1689, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0, 352, 352, 352, 352, 374, 1723, 0, 0,
  /* 25543 */ 0, 290, 290, 290, 290, 290, 0, 352, 352, 352, 352, 1727, 352, 352, 352, 352, 1268, 352, 0, 0, 0, 0, 1083,
  /* 25566 */ 0, 0, 0, 0, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1433, 374, 374, 374, 374, 374, 1644, 374,
  /* 25588 */ 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 1851, 1739, 374, 374, 374, 374,
  /* 25612 */ 374, 374, 374, 374, 374, 1747, 374, 374, 374, 0, 0, 352, 352, 374, 374, 352, 374, 352, 374, 352, 374, 352,
  /* 25634 */ 0, 0, 1839, 1840, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 352, 1853, 374,
  /* 25657 */ 374, 374, 374, 374, 374, 374, 374, 374, 1862, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
  /* 25685 */ 0, 0, 1864, 0, 0, 1867, 352, 352, 352, 352, 352, 352, 1872, 1873, 352, 374, 374, 374, 374, 374, 374, 0, 0,
  /* 25708 */ 0, 0, 352, 1900, 352, 352, 352, 374, 374, 374, 1878, 1879, 374, 0, 0, 1881, 1882, 0, 352, 352, 352, 352,
  /* 25730 */ 352, 352, 1533, 352, 352, 352, 352, 352, 352, 0, 0, 0, 0, 1083, 0, 0, 0, 0, 374, 0, 0, 0, 20480, 0, 0, 0,
  /* 25756 */ 0, 0, 0, 305, 305, 305, 305, 322, 305, 322, 322, 305, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
  /* 25778 */ 322, 322, 305, 322, 322, 368, 368, 368, 368, 368, 391, 368, 368, 368, 368, 368, 368, 368, 391, 391, 391,
  /* 25799 */ 391, 391, 391, 391, 368, 368, 391, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 415744, 415744,
  /* 25821 */ 415744, 415744, 415744, 415744, 415744, 415744, 415744, 415744, 415744, 415744, 0, 0, 0, 0, 0, 0, 227,
  /* 25838 */ 227, 227, 436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 290, 760, 290, 290, 290, 290, 290,
  /* 25865 */ 290, 290, 290, 290, 290, 290, 290, 290, 290, 772, 290, 352, 807, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 25886 */ 352, 352, 352, 352, 352, 352, 1262, 352, 352, 609, 43864, 797, 612, 374, 374, 374, 374, 374, 374, 868,
  /* 25906 */ 374, 374, 374, 374, 374, 661, 374, 374, 374, 374, 0, 0, 0, 26804, 5, 0, 0, 926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25933 */ 0, 0, 0, 0, 0, 555008, 555008, 555008, 940, 0, 0, 0, 0, 945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1194, 0, 0, 0,
  /* 25961 */ 0, 0, 0, 1007, 290, 290, 290, 290, 290, 290, 290, 1013, 290, 290, 290, 290, 290, 0, 0, 1387, 0, 0, 0, 352,
  /* 25985 */ 352, 352, 352, 352, 374, 374, 1109, 374, 374, 374, 374, 374, 374, 374, 1115, 374, 374, 374, 374, 374, 882,
  /* 26006 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 1292, 374, 374, 374, 374, 374, 374, 374, 1123, 374, 374,
  /* 26027 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 915, 0, 0, 0, 921, 0, 0, 374, 374, 1539, 374,
  /* 26050 */ 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 1649, 0, 0, 0, 0, 0, 352, 1730, 352, 352, 352,
  /* 26073 */ 352, 352, 352, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374, 0, 0, 0, 0, 352, 352, 1901, 1902, 352,
  /* 26095 */ 374, 374, 374, 1742, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 0, 0, 0, 180, 5, 0, 1852, 352, 374,
  /* 26118 */ 374, 374, 374, 374, 374, 374, 374, 1861, 374, 0, 0, 0, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
  /* 26146 */ 0, 0, 352, 374, 374, 374, 374, 1907, 374, 0, 0, 0, 0, 352, 352, 352, 352, 374, 374, 374, 374, 374, 374, 0,
  /* 26170 */ 0, 0, 0, 1910, 352, 352, 352, 1912, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415744, 251, 0, 0,
  /* 26198 */ 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 251, 22528, 24576, 290, 236, 0, 290, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26226 */ 0, 1366, 0, 0, 0, 0, 0, 0, 369, 392, 369, 369, 369, 369, 369, 369, 369, 392, 392, 392, 392, 392, 392, 392,
  /* 26250 */ 369, 369, 392, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 1166, 1167, 0, 0, 0, 0,
  /* 26276 */ 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 720, 461, 0, 0, 0, 0, 352, 352, 352, 570, 352, 352, 352, 352, 352,
  /* 26303 */ 352, 352, 352, 352, 352, 352, 352, 1738, 374, 374, 374, 290, 290, 290, 763, 290, 290, 290, 290, 290, 290,
  /* 26324 */ 290, 290, 290, 290, 290, 290, 779, 290, 290, 290, 290, 0, 0, 0, 352, 352, 352, 811, 352, 352, 352, 352,
  /* 26346 */ 352, 352, 352, 352, 352, 352, 352, 352, 1260, 352, 352, 352, 352, 609, 43864, 797, 612, 374, 374, 374,
  /* 26366 */ 374, 374, 374, 374, 374, 872, 374, 374, 374, 374, 909, 374, 374, 374, 374, 0, 0, 918, 0, 0, 0, 924, 290,
  /* 26389 */ 1008, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 0, 0, 0, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
  /* 26414 */ 0, 0, 0, 0, 0, 797, 352, 352, 352, 352, 352, 352, 1734, 352, 352, 352, 352, 352, 374, 374, 374, 374, 374,
  /* 26437 */ 374, 0, 0, 0, 0, 352, 352, 352, 352, 1903, 374, 374, 374, 1110, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 26459 */ 374, 374, 374, 374, 665, 0, 0, 0, 26804, 5, 0, 0, 0, 273, 20480, 273, 273, 273, 273, 0, 273, 306, 306,
  /* 26482 */ 306, 306, 0, 306, 0, 0, 306, 0, 0, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 306, 273, 273, 370,
  /* 26505 */ 370, 370, 370, 370, 393, 370, 370, 370, 370, 370, 370, 370, 393, 393, 393, 393, 393, 393, 393, 370, 370,
  /* 26526 */ 393, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 1179, 0, 0, 0, 0, 0, 974, 0, 0, 374, 374,
  /* 26553 */ 1439, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 738, 0, 0, 0, 0, 0, 0, 371, 394,
  /* 26576 */ 371, 371, 371, 371, 371, 371, 371, 394, 394, 394, 394, 394, 394, 394, 371, 371, 394, 26804, 26804, 2,
  /* 26596 */ 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 965, 0, 0, 0, 0, 0, 0, 0, 0, 227,
  /* 26627 */ 227, 227, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 1180, 0, 0, 0, 0, 0, 0, 0, 290, 290, 0, 0, 0, 0, 0, 0, 0,
  /* 26657 */ 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 0, 352, 352, 352, 571, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 26682 */ 352, 352, 352, 352, 1536, 352, 0, 0, 0, 0, 227, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 419, 0,
  /* 26710 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1369, 0, 0, 1372, 727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26741 */ 528384, 374, 906, 374, 374, 374, 374, 374, 374, 374, 0, 916, 0, 0, 0, 922, 0, 0, 0, 20480, 0, 0, 0, 0, 0,
  /* 26766 */ 0, 0, 0, 0, 0, 411971, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59392, 59392, 0, 59392, 59392, 59392, 0,
  /* 26792 */ 59392, 59392, 59392, 0, 0, 0, 0, 0, 194, 195, 0, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
  /* 26819 */ 1340, 0, 1342, 0, 0, 0, 1345, 374, 374, 374, 908, 374, 374, 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26845 */ 0, 0, 1331, 0, 994, 0, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1216, 290, 290,
  /* 26868 */ 290, 290, 290, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 1058, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 26891 */ 352, 352, 352, 352, 352, 352, 352, 1528, 352, 352, 352, 1242, 1243, 352, 352, 352, 352, 352, 352, 352,
  /* 26911 */ 352, 352, 352, 352, 1693, 374, 374, 374, 374, 374, 1283, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 26932 */ 374, 374, 374, 374, 1296, 1297, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
  /* 26953 */ 1639, 352, 352, 352, 352, 1421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530432, 0, 0, 0, 0, 0, 0, 0, 20480, 0, 0,
  /* 26981 */ 0, 0, 283, 0, 290, 290, 290, 290, 0, 290, 290, 290, 290, 505, 290, 290, 290, 290, 290, 290, 290, 290, 290,
  /* 27004 */ 290, 1509, 0, 0, 0, 352, 352, 352, 1515, 0, 0, 407552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407552, 0, 0, 0, 0, 0,
  /* 27031 */ 407552, 0, 0, 407815, 407815, 0, 0, 0, 407815, 0, 0, 0, 0, 0, 0, 0, 407552, 0, 407552, 0, 0, 0, 407552, 0,
  /* 27055 */ 407552, 0, 407552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407552, 0, 0, 407552, 0, 0, 0, 407552, 407552, 0, 0, 0, 0,
  /* 27080 */ 0, 0, 0, 0, 0, 0, 0, 0, 407552, 0, 0, 407552, 407552, 0, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1480,
  /* 27108 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 557056, 557056, 557056, 557665, 0, 557056, 557668,
  /* 27132 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 1098127, 0, 0,
  /* 27149 */ 411971, 411971, 0, 411971, 411971, 411971, 411971, 411971, 411971, 411971, 411971, 411971, 411971, 411971,
  /* 27163 */ 411971, 0, 0, 0, 0, 411971, 411971, 411971, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
  /* 27189 */ 0, 0, 0, 290, 290, 290, 290, 290, 1207, 290, 290, 290, 290, 290, 290, 0, 0, 413696, 0, 0, 0, 0, 0, 0, 0,
  /* 27214 */ 0, 0, 0, 0, 0, 0, 1717, 1718, 0, 0, 0, 1722, 0, 415744, 415744, 415744, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 0,
  /* 27240 */ 0, 0, 0, 1664, 0, 0, 0, 0, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1210, 1211, 290, 855, 0, 0, 858,
  /* 27264 */ 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 0, 0, 0,
  /* 27279 */ 0, 5, 0, 0, 0, 0, 26804, 26804, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 1842, 1843, 0, 352, 352, 352, 352,
  /* 27305 */ 352, 352, 352, 352, 578, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1736, 352, 352, 374, 374, 374, 374,
  /* 27326 */ 0, 51200, 51200, 0, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 0,
  /* 27343 */ 0, 0, 0, 51200, 51200, 51200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51200, 0, 0, 0, 0, 51200, 0, 528384,
  /* 27370 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528844
];

XQueryParser.EXPECTED =
[
  /*    0 */ 53, 69, 85, 101, 117, 133, 149, 165, 181, 238, 805, 219, 222, 208, 244, 260, 276, 292, 558, 308, 338, 369,
  /*   22 */ 385, 401, 417, 679, 651, 433, 353, 449, 322, 465, 511, 527, 543, 495, 726, 574, 590, 606, 637, 695, 711,
  /*   43 */ 742, 758, 774, 790, 621, 480, 822, 665, 195, 813, 838, 842, 849, 844, 848, 850, 854, 858, 862, 866, 870,
  /*   64 */ 874, 878, 896, 883, 1157, 1290, 896, 889, 895, 896, 1565, 983, 901, 903, 907, 896, 913, 1488, 919, 1469,
  /*   84 */ 890, 938, 896, 2276, 983, 983, 983, 924, 925, 925, 972, 947, 896, 896, 930, 896, 937, 891, 1080, 983, 983,
  /*  105 */ 983, 961, 925, 925, 925, 942, 896, 896, 977, 896, 1319, 954, 982, 983, 983, 1001, 925, 925, 925, 946, 896,
  /*  126 */ 896, 896, 952, 958, 983, 983, 1008, 970, 925, 964, 896, 896, 885, 1321, 983, 984, 970, 925, 976, 896, 948,
  /*  147 */ 981, 983, 925, 988, 896, 1470, 993, 1349, 925, 896, 1346, 994, 926, 1075, 1083, 989, 1083, 966, 1350, 1081,
  /*  167 */ 1351, 1082, 998, 1005, 1012, 1016, 1020, 1024, 1031, 1032, 1028, 1036, 1040, 1044, 1048, 1052, 1056, 1060,
  /*  185 */ 1068, 896, 1681, 896, 896, 1074, 896, 1760, 896, 1601, 896, 896, 896, 1242, 896, 896, 896, 896, 1495, 896,
  /*  205 */ 896, 896, 2259, 896, 896, 896, 896, 896, 1883, 896, 896, 896, 896, 2066, 896, 896, 896, 896, 896, 1882,
  /*  225 */ 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 1092, 896, 896, 1850, 1079, 896, 896, 896, 1875, 896,
  /*  245 */ 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 1070, 1393, 1764, 896, 1951,
  /*  265 */ 2087, 1097, 1101, 1105, 1109, 1113, 1117, 1762, 1766, 1629, 1929, 1121, 2177, 1901, 1612, 1620, 1125, 1132,
  /*  283 */ 1213, 896, 1137, 1874, 1948, 1143, 1962, 1552, 1141, 1260, 1147, 1152, 1156, 896, 896, 1161, 896, 896, 896,
  /*  302 */ 1165, 896, 896, 1170, 1179, 2189, 1207, 896, 896, 896, 1220, 896, 896, 1813, 896, 1148, 1173, 1211, 1217,
  /*  321 */ 1231, 896, 896, 896, 1380, 2149, 1678, 1687, 1691, 1695, 1699, 1703, 1706, 896, 1378, 1479, 1712, 1237,
  /*  339 */ 896, 1606, 1246, 1148, 1251, 1255, 1259, 896, 1264, 896, 1270, 1142, 1279, 1283, 896, 1194, 1564, 1422,
  /*  357 */ 1569, 1577, 1583, 1588, 915, 1594, 1599, 1636, 1275, 1605, 1610, 1088, 1258, 1907, 2114, 1064, 1287, 1247,
  /*  375 */ 1892, 1296, 1182, 2265, 1300, 1306, 1935, 1521, 1316, 1325, 1992, 1329, 1993, 1330, 1233, 1937, 1062, 896,
  /*  393 */ 896, 896, 2095, 896, 2219, 1334, 1343, 1355, 1359, 1363, 1367, 1370, 896, 1376, 1829, 2150, 2066, 1384,
  /*  411 */ 1398, 2008, 1417, 1407, 1414, 2025, 1421, 896, 1337, 2054, 1835, 2014, 1426, 1430, 1479, 1434, 2020, 1440,
  /*  429 */ 1444, 896, 2036, 1450, 1530, 1266, 1508, 1535, 1794, 933, 1544, 896, 914, 1550, 896, 2052, 1556, 1465,
  /*  447 */ 1560, 1312, 1579, 1627, 1618, 1372, 1624, 1633, 1658, 2104, 1643, 2105, 1644, 1648, 1655, 1662, 1666, 1670,
  /*  465 */ 1806, 1718, 1723, 1727, 1731, 1735, 1739, 896, 1743, 896, 1339, 2260, 1750, 1807, 1923, 896, 1241, 896,
  /*  483 */ 896, 896, 1546, 896, 896, 896, 1482, 896, 1683, 896, 2063, 2269, 896, 1403, 896, 2072, 1866, 1894, 1855,
  /*  502 */ 896, 1873, 896, 1879, 1906, 1888, 1719, 1898, 1540, 1757, 2282, 1771, 896, 1775, 1779, 896, 896, 1785, 896,
  /*  521 */ 896, 1789, 1309, 1792, 1799, 1891, 1803, 1651, 896, 2270, 1811, 896, 896, 2212, 1840, 896, 2045, 1817,
  /*  539 */ 1750, 1893, 1827, 1833, 1928, 2088, 1839, 896, 896, 2089, 1840, 896, 1845, 1820, 1893, 2088, 1854, 896,
  /*  557 */ 1859, 896, 1614, 1186, 896, 896, 1584, 1192, 896, 896, 896, 1166, 896, 1143, 1173, 1198, 1595, 2249, 1967,
  /*  576 */ 2250, 1968, 1795, 879, 879, 896, 896, 896, 896, 2101, 1806, 2136, 1972, 1976, 1980, 1984, 1988, 1990, 896,
  /*  595 */ 896, 2103, 1997, 2001, 1410, 2006, 2012, 2018, 1590, 2024, 2029, 1511, 896, 896, 2094, 1387, 2002, 1708,
  /*  613 */ 2035, 1446, 1751, 2040, 896, 896, 1639, 2044, 896, 1905, 896, 896, 896, 896, 2061, 896, 896, 1545, 896,
  /*  632 */ 897, 2264, 896, 1904, 1496, 1394, 2049, 896, 2101, 2156, 2058, 1401, 2070, 1497, 2076, 896, 896, 1781,
  /*  650 */ 2080, 896, 896, 1302, 1531, 1835, 1508, 1515, 1519, 1479, 1525, 896, 896, 920, 1526, 896, 896, 909, 908,
  /*  669 */ 2274, 1884, 896, 896, 896, 1468, 896, 2280, 1225, 1093, 896, 896, 1301, 1454, 1458, 2066, 1462, 1474, 1478,
  /*  688 */ 1486, 1175, 1492, 896, 896, 1128, 1501, 1823, 2086, 896, 2093, 1387, 1538, 2147, 2031, 2099, 896, 1822,
  /*  706 */ 2112, 896, 896, 2109, 2113, 1436, 1997, 2118, 2124, 2130, 896, 1503, 2134, 896, 896, 2140, 1573, 2162,
  /*  724 */ 2144, 2195, 896, 1911, 1917, 1920, 1927, 1933, 2082, 2120, 1941, 1945, 2126, 1955, 2251, 2252, 1959, 1966,
  /*  742 */ 1504, 2087, 1780, 2154, 1203, 1390, 1292, 1752, 2160, 1869, 1227, 2166, 1848, 1862, 1133, 2170, 2192, 1753,
  /*  760 */ 1188, 2174, 1745, 1746, 1714, 2202, 1673, 2181, 1674, 2182, 2186, 2199, 2199, 2206, 2210, 896, 896, 897,
  /*  778 */ 2216, 2223, 2227, 2231, 2235, 2239, 2243, 2246, 896, 896, 1201, 1572, 1841, 1904, 2259, 1240, 1992, 896,
  /*  796 */ 896, 1273, 1480, 896, 896, 1223, 896, 896, 2256, 896, 1913, 896, 896, 896, 896, 1087, 896, 896, 896, 896,
  /*  816 */ 896, 896, 896, 896, 896, 1968, 2065, 896, 896, 1481, 896, 896, 896, 1482, 1767, 1226, 2063, 2269, 1903,
  /*  835 */ 896, 896, 1546, 2744, 2286, 3396, 2306, 2303, 2316, 2327, 2327, 3188, 2314, 2325, 2327, 2327, 2327, 2327,
  /*  853 */ 2322, 2326, 2318, 2326, 2332, 2328, 2327, 2336, 2340, 2344, 2348, 2350, 2354, 2357, 2361, 2365, 2369, 2373,
  /*  871 */ 2377, 2381, 2385, 2389, 2744, 2286, 2397, 2406, 2292, 2292, 2292, 2289, 3313, 2658, 2292, 2292, 2292, 3791,
  /*  889 */ 3791, 2425, 2425, 2425, 2425, 3793, 2427, 2292, 2292, 2292, 2292, 2298, 2492, 3660, 3807, 3807, 2431, 2439,
  /*  907 */ 3664, 2408, 2292, 2292, 2292, 2409, 3314, 2292, 2292, 2292, 2417, 3294, 2449, 2292, 2292, 2292, 2418, 2459,
  /*  925 */ 3807, 3807, 3807, 3807, 3809, 2571, 2447, 2450, 2292, 2293, 2419, 3248, 2826, 2425, 2425, 2425, 3794, 2463,
  /*  943 */ 3665, 3665, 2407, 2463, 2407, 2292, 2292, 2292, 2425, 3790, 2425, 2425, 2425, 3792, 2292, 2425, 3794, 2879,
  /*  961 */ 2491, 2457, 2485, 3807, 3807, 3808, 2292, 2292, 2491, 2486, 3807, 3807, 3807, 3663, 3665, 3809, 2292, 2292,
  /*  979 */ 2292, 2471, 2425, 2879, 2491, 2491, 2491, 2491, 2480, 3807, 3807, 3810, 2292, 2879, 3794, 2491, 2491, 2491,
  /*  997 */ 3807, 3807, 3809, 2879, 2491, 2735, 2737, 2484, 3806, 3808, 2879, 2491, 2736, 2737, 2483, 3806, 3808, 2879,
  /* 1015 */ 2496, 3808, 3804, 2499, 2499, 3810, 3134, 2510, 2509, 2514, 2631, 2529, 2533, 2555, 2592, 2564, 2569, 2569,
  /* 1033 */ 2569, 2569, 2550, 2569, 2569, 2569, 2579, 2590, 2568, 2551, 2570, 2578, 2583, 2587, 2596, 2600, 2604, 2607,
  /* 1051 */ 2610, 2617, 2613, 2620, 2623, 2630, 2635, 2645, 2649, 2652, 2292, 3134, 2292, 2290, 2292, 2992, 2998, 2572,
  /* 1069 */ 2656, 2292, 2292, 2297, 2452, 3154, 2292, 2292, 2292, 2490, 3137, 2292, 2292, 2292, 2491, 2491, 3806, 3807,
  /* 1087 */ 2678, 2292, 2292, 2292, 2545, 2704, 2292, 2292, 2292, 2574, 3278, 2741, 2849, 2722, 3004, 3106, 2753, 2757,
  /* 1105 */ 2761, 2764, 2768, 2772, 2780, 2779, 2776, 2784, 2786, 2786, 2787, 2791, 2795, 2799, 2292, 3151, 2850, 2292,
  /* 1123 */ 3262, 2840, 2292, 3534, 2848, 2292, 2293, 3212, 3217, 2434, 2292, 2292, 2292, 2666, 3139, 3278, 2393, 3272,
  /* 1141 */ 2913, 2292, 2292, 2292, 2691, 2292, 2825, 2292, 2292, 2292, 2692, 2869, 3173, 2878, 3731, 2884, 2292, 2292,
  /* 1159 */ 2292, 2700, 2292, 3730, 2892, 2887, 2292, 3269, 3273, 3277, 2292, 2694, 2292, 2292, 2901, 2289, 2292, 2292,
  /* 1177 */ 2416, 3213, 2292, 3531, 2292, 2800, 3745, 2292, 3615, 2924, 2894, 2287, 2292, 2292, 2667, 2893, 2897, 2292,
  /* 1195 */ 2292, 2416, 2420, 2993, 2801, 2929, 2292, 2298, 2292, 2292, 3796, 3163, 2292, 3494, 2942, 2896, 2993, 2960,
  /* 1213 */ 2292, 2292, 2435, 2292, 2292, 3130, 2292, 2919, 2942, 2896, 2292, 2299, 2292, 2294, 2292, 2292, 2292, 3707,
  /* 1231 */ 2974, 2897, 2292, 2292, 2523, 3136, 2706, 2925, 2895, 2292, 2409, 2292, 2292, 2292, 3611, 3274, 2292, 2292,
  /* 1249 */ 2292, 2709, 2288, 2292, 2292, 3497, 2712, 2292, 3131, 2707, 2987, 2292, 2292, 2292, 2714, 2706, 2710, 3510,
  /* 1267 */ 2292, 2293, 2291, 2292, 2981, 3275, 2292, 2409, 2408, 2292, 2292, 2558, 2289, 2292, 2800, 3498, 2713, 3131,
  /* 1285 */ 2708, 2988, 3130, 2707, 2711, 2292, 2414, 2698, 2292, 2698, 2292, 2474, 3010, 2292, 2291, 3617, 2292, 2292,
  /* 1303 */ 2292, 2842, 3652, 3009, 2288, 2292, 3134, 2905, 2809, 2292, 2417, 2421, 3290, 3136, 2292, 3134, 2292, 2425,
  /* 1321 */ 2425, 2425, 2292, 2491, 2292, 3008, 3476, 3135, 2520, 3476, 3135, 2292, 3134, 3505, 3014, 2292, 2297, 3241,
  /* 1339 */ 2292, 2292, 2686, 3679, 3019, 3026, 3028, 2292, 2425, 2733, 2491, 2491, 3805, 3807, 3807, 2292, 2441, 3035,
  /* 1357 */ 3038, 3042, 3059, 3047, 3051, 3052, 3056, 3056, 3052, 3043, 3063, 3063, 3063, 3063, 3065, 2292, 2292, 2546,
  /* 1375 */ 3181, 2292, 3240, 2292, 2292, 2685, 3678, 2287, 2292, 3261, 2573, 3310, 2292, 2466, 3192, 2401, 2292, 2293,
  /* 1393 */ 3639, 2292, 2292, 2292, 2625, 3080, 2811, 3089, 2292, 2502, 2292, 2292, 3460, 3448, 3115, 2292, 3160, 2292,
  /* 1411 */ 2502, 2292, 2856, 2292, 3123, 3128, 2292, 2539, 2292, 3110, 3129, 2292, 2292, 2292, 2844, 3307, 3311, 2292,
  /* 1429 */ 3171, 2292, 3177, 3185, 2956, 3419, 2476, 2292, 2292, 2691, 3137, 2292, 3285, 3197, 3693, 2983, 3119, 2292,
  /* 1447 */ 2292, 2691, 3629, 3196, 3692, 2976, 3118, 3242, 2292, 2292, 3021, 3509, 2292, 2292, 3075, 3261, 2292, 3309,
  /* 1465 */ 2292, 2546, 2292, 3796, 2292, 2292, 2292, 3790, 2425, 3208, 2292, 2297, 3649, 3201, 2287, 2292, 2292, 2292,
  /* 1483 */ 2860, 2292, 2292, 3138, 3205, 2292, 2292, 2699, 2572, 3218, 3250, 3223, 2292, 2574, 2292, 2292, 2292, 3627,
  /* 1501 */ 3249, 3222, 2292, 2292, 2699, 3085, 3698, 3367, 2292, 3309, 2292, 2624, 3583, 3277, 3207, 2292, 2292, 3228,
  /* 1519 */ 3236, 2292, 2292, 2946, 3010, 2290, 2418, 3246, 3254, 3224, 2292, 3239, 2292, 2292, 3022, 3510, 3796, 2292,
  /* 1537 */ 2443, 3260, 2880, 2292, 2292, 3481, 2810, 3256, 2292, 2292, 2292, 2861, 2292, 3266, 3254, 2291, 2292, 2866,
  /* 1555 */ 2292, 3508, 2292, 2293, 2291, 2297, 3282, 2292, 2949, 3289, 2292, 2292, 2292, 2879, 3022, 3510, 2292, 2295,
  /* 1573 */ 2292, 2292, 2292, 3487, 2292, 3310, 2292, 3797, 3797, 2292, 2442, 2292, 2292, 2292, 2923, 2418, 3295, 2292,
  /* 1591 */ 2292, 2705, 2950, 2945, 2292, 2292, 2292, 2934, 2292, 3299, 2292, 2292, 2808, 2292, 2944, 2292, 2292, 2292,
  /* 1609 */ 2980, 3067, 2560, 2292, 2292, 2824, 2292, 3383, 2917, 2699, 3303, 2292, 2292, 2831, 2835, 3068, 3623, 2292,
  /* 1627 */ 3068, 3305, 2292, 2292, 2827, 3277, 3623, 2292, 2292, 3312, 3311, 3795, 2292, 2626, 3596, 3601, 3621, 2292,
  /* 1645 */ 3619, 3623, 2292, 2292, 3310, 3319, 2292, 2659, 3417, 3423, 3318, 2292, 3312, 3459, 3622, 2292, 3620, 3133,
  /* 1663 */ 2310, 3312, 3459, 3133, 2310, 3312, 2309, 2525, 2545, 2536, 2292, 2659, 3650, 2292, 2937, 2295, 3719, 3323,
  /* 1681 */ 2292, 2664, 2292, 2292, 2299, 2294, 3671, 2292, 2517, 3095, 3014, 3092, 3327, 3331, 3333, 3340, 3337, 3345,
  /* 1699 */ 3343, 3343, 3345, 3346, 3350, 3350, 3350, 3350, 3351, 2292, 2292, 2856, 2292, 3569, 2907, 2292, 2292, 2936,
  /* 1717 */ 3651, 2715, 2292, 2297, 2820, 2292, 3372, 2292, 2292, 2638, 3361, 2292, 2292, 2453, 3355, 2292, 2641, 3001,
  /* 1735 */ 2292, 3359, 2292, 3366, 3371, 2292, 3425, 3376, 3426, 3377, 2292, 2292, 2937, 3717, 3640, 2906, 2810, 2292,
  /* 1753 */ 2292, 2292, 3082, 2669, 3812, 3390, 3381, 2292, 2675, 2292, 2292, 2392, 3271, 3275, 2292, 2292, 2292, 2660,
  /* 1771 */ 2994, 3387, 3382, 3395, 2292, 3811, 3401, 3232, 3406, 2292, 2292, 2292, 3084, 3596, 3400, 3231, 3405, 3277,
  /* 1789 */ 3138, 3453, 2287, 2292, 2692, 2292, 2292, 2948, 2292, 2289, 2715, 2292, 2292, 2819, 2292, 3460, 3410, 2292,
  /* 1807 */ 2693, 2292, 2292, 3172, 3431, 2748, 2292, 2292, 2954, 3274, 3454, 2292, 2292, 3568, 3470, 2292, 2292, 3083,
  /* 1825 */ 3595, 3633, 2292, 3435, 2292, 2292, 3072, 3144, 2292, 3442, 2292, 2292, 3076, 2292, 3446, 2747, 2292, 2292,
  /* 1843 */ 2292, 3098, 2292, 3452, 2510, 2292, 2697, 2292, 2292, 3640, 2682, 3458, 2292, 2659, 2408, 3460, 2292, 3739,
  /* 1861 */ 2749, 2292, 2699, 2668, 2725, 2292, 3469, 2810, 2292, 2699, 3702, 2726, 3739, 3276, 2292, 2292, 2292, 2690,
  /* 1879 */ 2292, 3738, 3474, 2292, 2705, 2292, 2292, 2292, 2573, 2287, 2903, 2908, 2292, 2713, 2292, 2292, 2292, 2819,
  /* 1897 */ 2292, 2292, 3461, 3461, 2292, 2815, 2292, 2292, 2410, 2292, 2292, 2292, 3511, 2982, 3460, 3484, 2292, 2292,
  /* 1915 */ 3131, 2292, 3511, 2287, 3167, 2292, 2817, 2291, 2292, 2817, 2291, 3362, 3460, 3460, 2292, 2292, 2292, 3100,
  /* 1933 */ 2659, 3516, 2292, 2292, 3134, 2292, 2290, 3136, 3502, 2292, 3795, 3797, 2292, 3795, 3517, 2292, 2826, 2854,
  /* 1951 */ 2292, 2294, 2719, 2730, 2292, 3166, 2292, 2820, 2289, 2292, 2949, 2292, 2838, 2292, 2872, 2947, 2292, 2292,
  /* 1969 */ 2288, 2292, 2949, 2292, 2966, 2573, 3477, 3528, 2888, 3538, 3541, 3551, 3552, 3544, 3550, 3548, 3548, 3556,
  /* 1987 */ 3557, 3561, 3562, 3562, 3562, 2292, 2292, 3137, 2292, 2520, 2292, 3795, 2467, 3015, 2402, 2946, 3261, 2292,
  /* 2005 */ 2880, 2292, 3566, 2292, 2292, 3138, 3104, 2970, 3574, 2292, 2292, 3148, 2292, 2292, 3573, 2292, 2292, 3157,
  /* 2023 */ 2292, 3578, 2292, 2292, 2292, 3124, 3582, 3607, 2292, 2292, 3438, 3644, 2505, 2292, 2292, 2292, 3284, 3591,
  /* 2041 */ 2292, 2292, 2542, 3606, 2292, 2292, 2292, 3419, 3595, 3600, 3605, 2292, 2843, 2292, 3020, 3143, 3510, 2400,
  /* 2059 */ 3611, 3260, 2292, 2862, 2292, 2292, 3801, 2292, 2292, 2292, 3653, 2858, 2504, 2292, 2292, 3465, 2292, 3031,
  /* 2077 */ 2292, 3672, 2810, 3634, 3413, 2292, 2292, 3481, 2292, 3412, 3277, 2292, 2292, 2292, 2659, 3446, 2292, 3587,
  /* 2095 */ 2292, 2292, 2292, 3240, 2292, 3030, 2292, 2292, 3486, 3133, 2292, 2292, 3310, 3621, 2292, 3083, 3595, 3657,
  /* 2113 */ 3686, 3277, 2292, 2292, 2692, 3713, 2880, 2292, 2292, 3491, 2292, 3638, 3669, 2292, 2292, 3515, 2292, 2691,
  /* 2131 */ 3676, 2810, 3029, 3683, 3413, 2292, 2292, 3521, 2963, 3083, 3690, 3685, 2726, 3713, 2502, 2292, 3638, 2695,
  /* 2149 */ 3671, 2292, 2292, 2293, 2291, 3697, 2726, 2292, 2292, 3523, 3191, 3703, 3277, 2292, 2292, 3524, 3015, 2402,
  /* 2167 */ 2292, 2294, 2696, 2670, 3277, 2292, 3711, 2671, 2292, 2968, 2292, 2874, 2292, 2805, 2937, 3652, 3652, 2292,
  /* 2185 */ 2936, 3651, 2659, 3650, 2292, 2912, 2930, 2292, 2296, 2698, 2697, 2292, 3437, 2502, 2659, 3179, 2937, 2292,
  /* 2203 */ 2938, 2292, 3652, 2936, 2936, 3138, 3723, 3724, 2451, 2292, 2292, 3647, 3430, 2452, 2452, 2452, 2292, 2945,
  /* 2221 */ 3111, 2992, 3139, 2684, 2297, 2695, 3728, 2452, 3138, 3639, 3735, 3743, 3749, 3751, 3755, 3762, 3759, 3768,
  /* 2239 */ 3769, 3769, 3766, 3773, 3775, 3777, 3781, 3777, 3784, 3788, 2292, 2948, 2292, 2946, 2292, 2292, 3132, 3801,
  /* 2257 */ 2292, 2292, 3611, 2292, 2292, 2292, 3568, 2293, 2292, 2292, 2292, 3613, 2573, 2292, 2292, 2292, 3648, 2572,
  /* 2275 */ 2296, 2292, 2292, 3803, 2491, 2292, 3795, 2292, 2292, 3813, 3391, 8388608, 536870912, 0, 0, 0, 0x80000000,
  /* 2292 */ 0, 0, 0, 0, 1, 0, 0, 0, 2, 8, 0, 131074, 131088, 134283264, 65536, 65536, 65536, 134217728, 0, 8, 2097152,
  /* 2313 */ 0, 131088, 268566528, 268566528, 1073872896, 131072, 131072, 131072, 131102, 131088, 16908288, 268566528,
  /* 2325 */ 1073872896, -2147352576, 131072, 131072, 131072, 131072, 8768, 1073872896, -2147352576, 134227136, 10560,
  /* 2336 */ 131072, 16908288, 147456, 147456, 147472, 268582912, 386007040, 147458, 268582912, 386007040, 386007040,
  /* 2347 */ 147458, -1761476608, -1761476608, 84017152, 84017152, 84017152, 84017152, 117571584, 84017152, 386007040,
  /* 2357 */ 117571584, 84017152, 386007040, 386007040, 117571584, 1459748864, 386007040, 386007040, 117571584,
  /* 2366 */ 386023424, 1459748864, 386007040, 32768, 32800, 98336, 163872, 98304, 1212448, 163872, 268599328,
  /* 2377 */ 1073905696, -2147319776, 163872, -1073577952, -2147319776, -1072529346, -1072529346, -1072529346,
  /* 2385 */ -1055752130, -1072529346, -1072529346, -1072529346, 386039840, 386039840, -955088834, 4096, 65536, 131072,
  /* 2395 */ 262144, 524288, 0, 65536, 131072, 0, 0x80000000, 2048, 0, 32, 0, 2, 16, 16, 0, 0, 0, 4, 0, 128, 8256, 0, 0,
  /* 2418 */ 1, 2, 28, 384, 512, 4096, 131072, 16384, 16384, 16384, 16384, 67108864, 0, 1081344, 1081344, 12, 0, 0,
  /* 2436 */ 44800, 599261184, 0, 0, 4096, 8388608, 0, 0, 2, 16, 2048, 0, 8192, 8192, 64, 64, 64, 0, 0, 0, 56, 32768,
  /* 2458 */ 32, 32, 1048576, 1081344, 1048608, 1081344, 1081344, 16, 16, 0, 536870912, 262144, 8192, 0, 8192, 64, 0, 0,
  /* 2476 */ 131072, 16777216, 268435456, 536870912, 32768, 32, 32, 1048608, 1048608, 1048608, 1048608, 1081344,
  /* 2488 */ 1081344, 1081344, 16384, 32768, 32768, 32768, 32768, 32800, 32768, 32768, 32768, 1081344, 32768, 1081344,
  /* 2502 */ 32768, 0, 0, 0, 256, 98304, 0, 0, 134217728, 536870912, 0, 0, 1, 8, 8, 1, 0, 524288, 0, 0, 131072,
  /* 2523 */ 268435456, 0x80000000, 0, 0, 8, 2097152, 24, 40, 136, 131080, 262152, 524296, 134217736, 8, 0, 8, 0, 0,
  /* 2541 */ 172032, 0, 0, 229376, 0, 0, 262144, 134217728, 0, 65544, 8, 10, 8, 8, 24, 8, 8, 12, 16, 384, 4096, 3145728,
  /* 2563 */ 8388608, 262152, 262152, 524296, 524296, 262152, 8, 8, 8, 8, 0, 0, 0, 32, 0, 1, 8, 8, 8, 10, 82837504, 136,
  /* 2585 */ 136, 136, 262280, 524296, 557208, 8, 8, 152, 24, 524424, 786440, 8, 24, 8, -351260182, 42, 10, -351260182,
  /* 2603 */ -351260182, 186, -351260182, -351260182, -350715400, -350715400, -350715400, -350715400, -350703112,
  /* 2612 */ -350453256, -350703112, -350572038, -350703110, -350572038, -350703110, -350572040, -350453254, -350703110,
  /* 2621 */ -82267654, -350703110, -350703110, 0, 0, 0, 76, 128, 256, 8, 536887296, 8, 8, 10, 8, 10, 10, 56, 3328,
  /* 2640 */ 16384, 262144, 49152, 0, 100663296, 10, 26, 70257674, 70269962, 70270286, 70270286, 70270302, 70270286,
  /* 2653 */ -350703110, -350572038, -281506342, 16384, 131072, 262144, 0, 0, 0, 8, 0, 8, 65536, 0, 12, 64, 256, 1024,
  /* 2671 */ 2048, 134217728, 536870912, 0, 8192, 50331648, -1073741824, 0, 0, 2097152, 4194304, 69206016, 119537664, 0,
  /* 2685 */ 0, 1, 64, 32768, 65536, 6291456, 0, 0, 0, 128, 0, 0, 0, 256, 0, 0, 0, 12, 14, 0, 4194304, 0, 0, 0, 768,
  /* 2710 */ 8192, 32768, 2097152, 16777216, 0, 0, 0, 1024, 0, 0, 4096, 0, 16384, 0, 16384, 134217728, 536870912,
  /* 2727 */ 1073741824, 0, 0, 0, 4096, 4096, 16384, 0, 32768, 32768, 32, 32, 32, 1048608, 0, 4096, 16512, 4096, 524288,
  /* 2746 */ 2097152, 4194304, 16777216, 402653184, 1073741824, 0, 0, 553648128, 553652224, -2147483640, 558374944,
  /* 2757 */ 557327360, 557327360, 557327360, 557327360, 3146768, 557327360, 557327360, 3146768, 557327360, 137364496,
  /* 2767 */ 1546847248, 554181664, 554181664, 554181664, 556278816, 556278817, 557327392, 557327408, 554198177,
  /* 2776 */ 557327408, 557327408, 557327409, 557327408, 557327408, 557327408, 557327408, 554198177, 557327408,
  /* 2785 */ 557327408, 599305984, 599305984, 599305984, 599305984, 599306005, 599306005, 599306005, 599306005,
  /* 2794 */ 599306005, 599306037, 599306005, 599306032, 599306032, 599306037, 0, 0, 0, 8192, 524288, 0, 8192,
  /* 2807 */ 558366720, 0, 0, 268435456, 0, 0, 0, 82, 9216, 557318144, 0, 0, 2, 8192, 0x80000000, 0, 0, 1024, 3145728,
  /* 2826 */ 0, 0, 0, 16384, 0, 137363456, 0, 472907776, 1073741824, 0, 9216, 554172416, 0, 0, 335544320, 536870912, 0,
  /* 2843 */ 0, 2, 512, 0, 0, 25728, 0, 0, 0, 20608, 0, 0, 1073741824, 0, 0, 3, 0, 0, 0, 4, 16, 0, 0, 0, 8192, 4718592,
  /* 2869 */ 0, 0, 469762048, 0, 0, 553648128, 8, 0x80000000, 0, 3670016, 0, 0, 0, 32768, 0, 32768, 3670016, 8388608,
  /* 2887 */ 587202560, 0, 0, 0, 32896, 8192, 32768, 3670016, 8388608, 16777216, 33554432, 536870912, 0, 0, 0,
  /* 2902 */ 536870912, 0, 0, 4, 1048576, 524288, 2097152, 0, 268435456, 0, 0, 1024, 8192, 3670016, 553648128, 2621440,
  /* 2918 */ 3670016, 0, 768, 2048, 8192, 768, 1024, 2048, 8192, 32768, 2097152, 3145728, 16777216, 536870912, 0, 0, 0,
  /* 2935 */ 3145728, 0, 0, 8, 64, 1024, 2048, 32768, 524288, 3145728, 8388608, 0, 0, 0, 131072, 0, 0, 0, 106752, 65536,
  /* 2955 */ 131072, 4194304, 16777216, 67108864, 268435456, 8192, 2097152, 16777216, 536870912, 262160, 128, 33562624,
  /* 2967 */ 0x80000000, 0, 2048, 0, 0, 128, 98560, 32768, 2097152, 8388608, 16777216, 67108864, 268435456, 0, 65536,
  /* 2982 */ 131072, 16777216, 67108864, 268435456, 536870912, 32768, 2097152, 16777216, 33554432, 0, 0, 8192, 0, 0, 0,
  /* 2997 */ 49152, 8192, 2097152, 16777216, 0, 0, 637534208, 0, 0, 1409482752, 1409482752, 0, 131072, 67108864,
  /* 3011 */ 268435456, 1073741824, 0, 524288, 33554432, 0, 0, 0x80000000, -2147483647, 0, 0, 8388608, 524288, 8192, 0,
  /* 3026 */ 0, 512, 524288, 0, 0, 8388608, 268435456, 0, 0, 2, 71303168, 0, 71303168, 71305216, 71303168, 134479904,
  /* 3042 */ 71322642, 893570130, 893570130, 893570130, -168566817, 822255680, 822247488, 893570130, 830636096,
  /* 3051 */ 830636098, 893570130, 893570130, 893570130, 893570130, 894094418, 893570130, 893570130, 893570130,
  /* 3060 */ 822247488, 893570130, 893570130, -168566817, -168566817, -168566817, -168566817, 0, 0, 12, 16, 256,
  /* 3072 */ 8388608, 0, 524288, 0, 1, 0x80000000, 0, 0, 18, 19456, 0, 0, 12, 64, 128, 256, 3072, 183296, 4194304,
  /* 3091 */ 352321536, 536870912, 536936448, 134218752, 0, 1, 524288, 128, 2048, 0, 0, 16512, 0, 163840, 285212672,
  /* 3106 */ 536870912, 0, 536870912, 553648128, 66, 0, 0, 0, 524288, 82, 183296, 352321536, 536870912, 1073741824,
  /* 3120 */ 0x80000000, 0, 0, 0, 479, 253440, 15728640, 352321536, 352321536, -536870912, 0, 0, 0, 2097152, 0, 0, 0,
  /* 3137 */ 512, 0, 0, 0, 64, 0, 0, 8192, 2, 0, 33554432, 0, 4194304, 67108864, 0, 2, 64, 0, 0, 81788928, 0, 0, 655360,
  /* 3160 */ 0, 0, 707584, 536870912, 8192, 33554432, 0, 0, 1048576, 2097152, 0, 18, 1024, 0, 0, 0, 2621440, 0, 18, 64,
  /* 3180 */ 1024, 0, 0, 16, 16, 2048, 16384, 32768, 131072, 131072, 131072, 262144, 8192, 33554432, 0, 0, 384, 1536,
  /* 3198 */ 6144, 16384, 32768, 16384, 131072, 4194304, 67108864, 131072, 536870912, 0, 0, 16, 1024, 0, 2, 28, 64, 384,
  /* 3216 */ 512, 512, 1024, 6144, 16384, 65536, 8388608, 67108864, 536870912, 0x80000000, 0, 0, 2, 16, 1024, 2048,
  /* 3232 */ 4096, 49152, 196608, 262144, 131072, 67108864, 536870912, 0, 2, 512, 2048, 16384, 0, 0, 512, 1024, 6144,
  /* 3249 */ 65536, 131072, 3145728, 4194304, 8388608, 131072, 3145728, 8388608, 67108864, 0x80000000, 0, 131072,
  /* 3261 */ 67108864, 0, 0, 0, 196608, 384, 512, 6144, 65536, 131072, 524288, 4194304, 16777216, 67108864, 134217728,
  /* 3276 */ 268435456, 1073741824, 0, 0, 0, 4096, 16, 131072, 0, 0, 31, 64, 384, 131072, 3145728, 8388608, 0x80000000,
  /* 3293 */ 0, 384, 512, 4096, 3145728, 8388608, 8388608, 524288, 8192, 33554432, 16, 256, 4096, 3145728, 0, 0, 32,
  /* 3310 */ 262144, 134217728, 0, 0, 0, 262144, 262144, 0, 0, 8, 4096, 2097152, 0, 32768, 524288, 2097152, 268435456,
  /* 3327 */ 134218752, 134218752, 134218752, 134218752, -2147475454, 150995968, 218385720, 218385720, 67455288,
  /* 3336 */ 218385720, 100944184, 637880632, 218385712, 218385720, 67389752, 67422520, 218385720, 218385721, 218385720,
  /* 3346 */ 218385720, 218385720, 218385720, 218385848, 1564990840, 1564990840, 1564990840, 1564990840, 0, 2304, 16384,
  /* 3357 */ 327680, 67108864, 48, 3328, 218103808, 0, 0, 0, 16777216, 57, 0, 0, 0, 67108864, 3456, 0, 0, 0, 150994944,
  /* 3376 */ 53248, 4653056, 486539264, 1073741824, 0, 16777216, 201326592, 0, 0, 0, 201326592, 0, 603979776, 16, 1280,
  /* 3391 */ 2048, 16384, 262144, 67108864, 25, 0, 0, 0, 536936448, 24, 32, 64, 1280, 2048, 262144, 4194304, 16777216,
  /* 3408 */ 469762048, 1073741824, 1024, 16384, 16777216, 134217728, 268435456, 536870912, 1073741824, 16, 16384, 0, 0,
  /* 3421 */ 64, 32768, 49152, 0, 0, 0, 120, 3328, 53248, 1024, 4096, 49152, 196608, 4194304, 0, 16777216, 0, 0, 128,
  /* 3440 */ 256, 32768, 8, 16, 16777216, 134217728, 16, 64, 32768, 196608, 402653184, 1073741824, 0, 32768, 65536,
  /* 3455 */ 33554432, 134217728, 536870912, 16, 134217728, 0, 0, 8, 16, 0, 32768, 65536, 33554432, 536870912, 4,
  /* 3470 */ 1048576, 2097152, 0, 268435456, 196608, 268435456, 1073741824, 0, 0x80000000, 0, 32, 0, 8, 16, 196608,
  /* 3485 */ 268435456, 0, 0, 128, 512, 0, 0, 65536, 1048576, 2097152, 768, 2048, 8192, 0, 0, 8192, 2097152, 0, 8192,
  /* 3504 */ 0x80000000, 0, 2, 8389120, 8192, 0, 33554432, 0, 0, 0, 65536, 0, 16, 196608, 0, 0, 0, 0, 512, 0, 16, 0,
  /* 3526 */ 536870912, 8192, 67239936, 32, 0x80000000, 0, 8, 0x80000000, 0, 0, 556269568, 557318144, 0, 32896, 32896,
  /* 3541 */ 32896, 3, 98688, 281117056, -1866465280, -1866465280, 272728448, 281117056, 281117056, 272728448,
  /* 3551 */ 281117056, 281117056, 281117056, 281018368, 281018880, 281117056, 281117056, 281117056, 281117056,
  /* 3560 */ 314679680, 348356992, 2044321228, 2044321228, 2044321228, 2044321228, 0, 98560, 0, 0, 512, 4, 1048576, 0,
  /* 3574 */ 12582912, 268435456, 0, 0, 46137344, 0, 229632, 79691776, 76, 128, 646400, 164626432, 805306368, 0, 128,
  /* 3589 */ 512, 2097152, 0, 4194304, 8388608, 268435456, 256, 3072, 4096, 16384, 98304, 98304, 524288, 1048576,
  /* 3603 */ 4194304, 25165824, 25165824, 134217728, 805306368, 1073741824, 0, 0, 32, 0, 0, 0, 512, 8192, 32768,
  /* 3618 */ 16777216, 0, 0, 8, 256, 4096, 2097152, 0, 0, 0, 128, 256, 98304, 4194304, 8388608, 98304, 524288, 1048576,
  /* 3636 */ 8388608, 16777216, 1, 2, 0, 0, 0, 2048, 65536, 8388608, 268435456, 0, 8, 16, 64, 1024, 2048, 0, 0, 0,
  /* 3656 */ 4194304, 32768, 65536, 524288, 1048576, 1081344, 1081376, 1081344, 0, 16, 16, 16, 16, 0, 256, 65536, 0, 0,
  /* 3674 */ 0, 8388608, 256, 32768, 65536, 8388608, 33554432, 134217728, 536870912, 32768, 65536, 524288, 8388608,
  /* 3687 */ 134217728, 268435456, 536870912, 256, 3072, 32768, 65536, 131072, 7340032, 8388608, 3072, 32768, 524288,
  /* 3700 */ 134217728, 536870912, 64, 256, 3072, 134217728, 536870912, 16, 536870912, 33554432, 0x80000000, 0,
  /* 3712 */ 536870912, 2048, 0, 32, 131072, 2048, 134217728, 0, 0, 512, 1048580, 0, 64, 64, 64, 64, 0, 320, 0, 0, 1792,
  /* 3733 */ 2048, 8192, 2, 64, 2, 0, 8, 16, 32768, 196608, 2240, 2240, 0, 0, 8192, 16777216, 4, 2240, 4, 4, 32, 1028,
  /* 3755 */ 4, 68, 4, 68, 768, 4, 768, 768, 4, 68, 769, 1796, 1860, 1796, 1796, 1796, 1796, 1860, 1796, 1860, 1796,
  /* 3776 */ 1860, 20, 20, 20, 20, 84, 84, 20, 20, 1044, 1876, 1876, 1812, 0, 0, 0, 16384, 16384, 16384, 0, 0, 0, 16, 0,
  /* 3800 */ 0, 4, 0, 0, 0, 32768, 32768, 1081344, 1081344, 1081344, 1081344, 0, 0, 0, 24, 32, 256
];

XQueryParser.TOKEN =
[
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'context'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'digit'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'exponent-separator'",
  "'external'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'instance'",
  "'intersect'",
  "'is'",
  "'item'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'return'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'self'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'validate'",
  "'variable'",
  "'version'",
  "'when'",
  "'where'",
  "'window'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}}'"
];

// End
